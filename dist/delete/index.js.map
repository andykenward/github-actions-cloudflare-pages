{
  "version": 3,
  "sources": ["../../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/src/utils.ts", "../../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/src/command.ts", "../../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/src/file-command.ts", "../../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/src/proxy.ts", "../../node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/lib/tunnel.js", "../../node_modules/.pnpm/tunnel@0.0.6/node_modules/tunnel/index.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/symbols.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/errors.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/constants.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/util.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/timers.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/streamsearch/sbmh.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/PartStream.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/getLimit.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/HeaderParser.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/deps/dicer/lib/Dicer.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/decodeText.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/parseParams.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/basename.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/multipart.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/utils/Decoder.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/types/urlencoded.js", "../../node_modules/.pnpm/@fastify+busboy@2.1.1/node_modules/@fastify/busboy/lib/main.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/constants.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/global.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/util.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/symbols.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/webidl.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/dataURL.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/file.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/formdata.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/body.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/request.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/dispatcher.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/dispatcher-base.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/core/connect.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/src/llhttp/utils.ts", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/src/llhttp/constants.ts", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/RedirectHandler.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/interceptor/redirectInterceptor.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/llhttp-wasm.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/llhttp/llhttp_simd-wasm.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/client.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/node/fixed-queue.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool-stats.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool-base.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/pool.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/balanced-pool.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/compat/dispatcher-weakref.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/agent.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/readable.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/util.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/abort-signal.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-request.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-stream.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-pipeline.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-upgrade.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/api-connect.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/api/index.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-errors.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-symbols.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-utils.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-interceptor.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-client.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-pool.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/pluralizer.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/pending-interceptors-formatter.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/mock/mock-agent.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/proxy-agent.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/RetryHandler.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/global.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/handler/DecoratorHandler.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/headers.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/response.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/request.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fetch/index.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/symbols.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/progressevent.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/encoding.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/util.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/fileapi/filereader.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/symbols.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/util.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/cache.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cache/cachestorage.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/constants.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/util.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/parse.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/cookies/index.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/constants.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/symbols.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/events.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/util.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/connection.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/frame.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/receiver.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/lib/websocket/websocket.js", "../../node_modules/.pnpm/undici@5.28.5/node_modules/undici/index.js", "../../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/src/index.ts", "../../node_modules/.pnpm/@actions+http-client@2.2.3/node_modules/@actions/http-client/src/auth.ts", "../../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/src/oidc-utils.ts", "../../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/src/summary.ts", "../../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/src/path-utils.ts", "../../node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/src/io-util.ts", "../../node_modules/.pnpm/@actions+io@1.1.3/node_modules/@actions/io/src/io.ts", "../../node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/src/toolrunner.ts", "../../node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/src/exec.ts", "../../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/src/platform.ts", "../../node_modules/.pnpm/@actions+core@1.11.1/node_modules/@actions/core/src/core.ts", "../../src/delete/index.ts", "../../src/delete/main.ts", "../../src/common/batch-delete.ts", "../../__generated__/gql/graphql.ts", "../../src/common/cloudflare/api/endpoints.ts", "../../src/common/cloudflare/deployment/delete.ts", "../../src/common/inputs.ts", "../../input-keys.ts", "../../src/common/cloudflare/api/fetch-error.ts", "../../src/common/cloudflare/api/parse-error.ts", "../../src/common/cloudflare/api/fetch-result.ts", "../../src/common/github/context.ts", "../../src/common/utils.ts", "../../src/common/github/workflow-event/workflow-event.ts", "../../__generated__/types/github/workflow-events.ts", "../../src/common/github/api/client.ts", "../../__generated__/gql/gql.ts", "../../src/common/github/deployment/delete.ts", "../../src/common/github/deployment/payload.ts", "../../src/common/github/deployment/status.ts", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/util/lowercase-keys.js", "../../node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/util/merge-deep.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/util/remove-undefined-properties.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/merge.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/util/add-query-parameters.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/util/extract-url-variable-names.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/util/omit.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/util/url-template.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/parse.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/endpoint-with-defaults.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/with-defaults.js", "../../node_modules/.pnpm/universal-user-agent@7.0.2/node_modules/universal-user-agent/index.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/version.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/lib/defaults.js", "../../node_modules/.pnpm/@octokit-next+endpoint@2.8.0/node_modules/@octokit-next/endpoint/index.js", "../../node_modules/.pnpm/@octokit-next+request@2.8.0/node_modules/@octokit-next/request/lib/version.js", "../../node_modules/.pnpm/is-plain-object@5.0.0/node_modules/is-plain-object/dist/is-plain-object.mjs", "../../node_modules/.pnpm/@octokit-next+request-error@2.8.0/node_modules/@octokit-next/request-error/index.js", "../../node_modules/.pnpm/@octokit-next+request@2.8.0/node_modules/@octokit-next/request/lib/get-buffer-response.js", "../../node_modules/.pnpm/@octokit-next+request@2.8.0/node_modules/@octokit-next/request/lib/fetch-wrapper.js", "../../node_modules/.pnpm/@octokit-next+request@2.8.0/node_modules/@octokit-next/request/lib/with-defaults.js", "../../node_modules/.pnpm/@octokit-next+request@2.8.0/node_modules/@octokit-next/request/index.js", "../../node_modules/.pnpm/@octokit-next+auth-token@2.8.0/node_modules/@octokit-next/auth-token/lib/auth.js", "../../node_modules/.pnpm/@octokit-next+auth-token@2.8.0/node_modules/@octokit-next/auth-token/lib/with-authorization-prefix.js", "../../node_modules/.pnpm/@octokit-next+auth-token@2.8.0/node_modules/@octokit-next/auth-token/lib/hook.js", "../../node_modules/.pnpm/@octokit-next+auth-token@2.8.0/node_modules/@octokit-next/auth-token/index.js", "../../node_modules/.pnpm/@octokit-next+graphql@2.8.0/node_modules/@octokit-next/graphql/lib/version.js", "../../node_modules/.pnpm/@octokit-next+graphql@2.8.0/node_modules/@octokit-next/graphql/lib/error.js", "../../node_modules/.pnpm/@octokit-next+graphql@2.8.0/node_modules/@octokit-next/graphql/lib/graphql.js", "../../node_modules/.pnpm/@octokit-next+graphql@2.8.0/node_modules/@octokit-next/graphql/lib/with-defaults.js", "../../node_modules/.pnpm/@octokit-next+graphql@2.8.0/node_modules/@octokit-next/graphql/index.js", "../../node_modules/.pnpm/before-after-hook@3.0.2/node_modules/before-after-hook/lib/register.js", "../../node_modules/.pnpm/before-after-hook@3.0.2/node_modules/before-after-hook/lib/add.js", "../../node_modules/.pnpm/before-after-hook@3.0.2/node_modules/before-after-hook/lib/remove.js", "../../node_modules/.pnpm/before-after-hook@3.0.2/node_modules/before-after-hook/index.js", "../../node_modules/.pnpm/@octokit-next+core@2.8.0/node_modules/@octokit-next/core/lib/version.js", "../../node_modules/.pnpm/@octokit-next+core@2.8.0/node_modules/@octokit-next/core/index.js", "../../node_modules/.pnpm/@octokit+plugin-paginate-rest@11.4.1_@octokit+core@6.1.3/node_modules/@octokit/plugin-paginate-rest/dist-bundle/index.js", "../../src/common/github/api/paginate.ts", "../../src/common/github/deployment/get.ts", "../../src/delete/inputs.ts"],
  "sourcesContent": [null, null, null, null, "'use strict';\n\nvar net = require('net');\nvar tls = require('tls');\nvar http = require('http');\nvar https = require('https');\nvar events = require('events');\nvar assert = require('assert');\nvar util = require('util');\n\n\nexports.httpOverHttp = httpOverHttp;\nexports.httpsOverHttp = httpsOverHttp;\nexports.httpOverHttps = httpOverHttps;\nexports.httpsOverHttps = httpsOverHttps;\n\n\nfunction httpOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  return agent;\n}\n\nfunction httpsOverHttp(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = http.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\nfunction httpOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  return agent;\n}\n\nfunction httpsOverHttps(options) {\n  var agent = new TunnelingAgent(options);\n  agent.request = https.request;\n  agent.createSocket = createSecureSocket;\n  agent.defaultPort = 443;\n  return agent;\n}\n\n\nfunction TunnelingAgent(options) {\n  var self = this;\n  self.options = options || {};\n  self.proxyOptions = self.options.proxy || {};\n  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;\n  self.requests = [];\n  self.sockets = [];\n\n  self.on('free', function onFree(socket, host, port, localAddress) {\n    var options = toOptions(host, port, localAddress);\n    for (var i = 0, len = self.requests.length; i < len; ++i) {\n      var pending = self.requests[i];\n      if (pending.host === options.host && pending.port === options.port) {\n        // Detect the request to connect same origin server,\n        // reuse the connection.\n        self.requests.splice(i, 1);\n        pending.request.onSocket(socket);\n        return;\n      }\n    }\n    socket.destroy();\n    self.removeSocket(socket);\n  });\n}\nutil.inherits(TunnelingAgent, events.EventEmitter);\n\nTunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {\n  var self = this;\n  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));\n\n  if (self.sockets.length >= this.maxSockets) {\n    // We are over limit so we'll add it to the queue.\n    self.requests.push(options);\n    return;\n  }\n\n  // If we are under maxSockets create a new one.\n  self.createSocket(options, function(socket) {\n    socket.on('free', onFree);\n    socket.on('close', onCloseOrRemove);\n    socket.on('agentRemove', onCloseOrRemove);\n    req.onSocket(socket);\n\n    function onFree() {\n      self.emit('free', socket, options);\n    }\n\n    function onCloseOrRemove(err) {\n      self.removeSocket(socket);\n      socket.removeListener('free', onFree);\n      socket.removeListener('close', onCloseOrRemove);\n      socket.removeListener('agentRemove', onCloseOrRemove);\n    }\n  });\n};\n\nTunnelingAgent.prototype.createSocket = function createSocket(options, cb) {\n  var self = this;\n  var placeholder = {};\n  self.sockets.push(placeholder);\n\n  var connectOptions = mergeOptions({}, self.proxyOptions, {\n    method: 'CONNECT',\n    path: options.host + ':' + options.port,\n    agent: false,\n    headers: {\n      host: options.host + ':' + options.port\n    }\n  });\n  if (options.localAddress) {\n    connectOptions.localAddress = options.localAddress;\n  }\n  if (connectOptions.proxyAuth) {\n    connectOptions.headers = connectOptions.headers || {};\n    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +\n        new Buffer(connectOptions.proxyAuth).toString('base64');\n  }\n\n  debug('making CONNECT request');\n  var connectReq = self.request(connectOptions);\n  connectReq.useChunkedEncodingByDefault = false; // for v0.6\n  connectReq.once('response', onResponse); // for v0.6\n  connectReq.once('upgrade', onUpgrade);   // for v0.6\n  connectReq.once('connect', onConnect);   // for v0.7 or later\n  connectReq.once('error', onError);\n  connectReq.end();\n\n  function onResponse(res) {\n    // Very hacky. This is necessary to avoid http-parser leaks.\n    res.upgrade = true;\n  }\n\n  function onUpgrade(res, socket, head) {\n    // Hacky.\n    process.nextTick(function() {\n      onConnect(res, socket, head);\n    });\n  }\n\n  function onConnect(res, socket, head) {\n    connectReq.removeAllListeners();\n    socket.removeAllListeners();\n\n    if (res.statusCode !== 200) {\n      debug('tunneling socket could not be established, statusCode=%d',\n        res.statusCode);\n      socket.destroy();\n      var error = new Error('tunneling socket could not be established, ' +\n        'statusCode=' + res.statusCode);\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    if (head.length > 0) {\n      debug('got illegal response body from proxy');\n      socket.destroy();\n      var error = new Error('got illegal response body from proxy');\n      error.code = 'ECONNRESET';\n      options.request.emit('error', error);\n      self.removeSocket(placeholder);\n      return;\n    }\n    debug('tunneling connection has established');\n    self.sockets[self.sockets.indexOf(placeholder)] = socket;\n    return cb(socket);\n  }\n\n  function onError(cause) {\n    connectReq.removeAllListeners();\n\n    debug('tunneling socket could not be established, cause=%s\\n',\n          cause.message, cause.stack);\n    var error = new Error('tunneling socket could not be established, ' +\n                          'cause=' + cause.message);\n    error.code = 'ECONNRESET';\n    options.request.emit('error', error);\n    self.removeSocket(placeholder);\n  }\n};\n\nTunnelingAgent.prototype.removeSocket = function removeSocket(socket) {\n  var pos = this.sockets.indexOf(socket)\n  if (pos === -1) {\n    return;\n  }\n  this.sockets.splice(pos, 1);\n\n  var pending = this.requests.shift();\n  if (pending) {\n    // If we have pending requests and a socket gets closed a new one\n    // needs to be created to take over in the pool for the one that closed.\n    this.createSocket(pending, function(socket) {\n      pending.request.onSocket(socket);\n    });\n  }\n};\n\nfunction createSecureSocket(options, cb) {\n  var self = this;\n  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {\n    var hostHeader = options.request.getHeader('host');\n    var tlsOptions = mergeOptions({}, self.options, {\n      socket: socket,\n      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host\n    });\n\n    // 0 is dummy port for v0.6\n    var secureSocket = tls.connect(0, tlsOptions);\n    self.sockets[self.sockets.indexOf(socket)] = secureSocket;\n    cb(secureSocket);\n  });\n}\n\n\nfunction toOptions(host, port, localAddress) {\n  if (typeof host === 'string') { // since v0.10\n    return {\n      host: host,\n      port: port,\n      localAddress: localAddress\n    };\n  }\n  return host; // for v0.11 or later\n}\n\nfunction mergeOptions(target) {\n  for (var i = 1, len = arguments.length; i < len; ++i) {\n    var overrides = arguments[i];\n    if (typeof overrides === 'object') {\n      var keys = Object.keys(overrides);\n      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {\n        var k = keys[j];\n        if (overrides[k] !== undefined) {\n          target[k] = overrides[k];\n        }\n      }\n    }\n  }\n  return target;\n}\n\n\nvar debug;\nif (process.env.NODE_DEBUG && /\\btunnel\\b/.test(process.env.NODE_DEBUG)) {\n  debug = function() {\n    var args = Array.prototype.slice.call(arguments);\n    if (typeof args[0] === 'string') {\n      args[0] = 'TUNNEL: ' + args[0];\n    } else {\n      args.unshift('TUNNEL:');\n    }\n    console.error.apply(console, args);\n  }\n} else {\n  debug = function() {};\n}\nexports.debug = debug; // for test\n", "module.exports = require('./lib/tunnel');\n", "module.exports = {\n  kClose: Symbol('close'),\n  kDestroy: Symbol('destroy'),\n  kDispatch: Symbol('dispatch'),\n  kUrl: Symbol('url'),\n  kWriting: Symbol('writing'),\n  kResuming: Symbol('resuming'),\n  kQueue: Symbol('queue'),\n  kConnect: Symbol('connect'),\n  kConnecting: Symbol('connecting'),\n  kHeadersList: Symbol('headers list'),\n  kKeepAliveDefaultTimeout: Symbol('default keep alive timeout'),\n  kKeepAliveMaxTimeout: Symbol('max keep alive timeout'),\n  kKeepAliveTimeoutThreshold: Symbol('keep alive timeout threshold'),\n  kKeepAliveTimeoutValue: Symbol('keep alive timeout'),\n  kKeepAlive: Symbol('keep alive'),\n  kHeadersTimeout: Symbol('headers timeout'),\n  kBodyTimeout: Symbol('body timeout'),\n  kServerName: Symbol('server name'),\n  kLocalAddress: Symbol('local address'),\n  kHost: Symbol('host'),\n  kNoRef: Symbol('no ref'),\n  kBodyUsed: Symbol('used'),\n  kRunning: Symbol('running'),\n  kBlocking: Symbol('blocking'),\n  kPending: Symbol('pending'),\n  kSize: Symbol('size'),\n  kBusy: Symbol('busy'),\n  kQueued: Symbol('queued'),\n  kFree: Symbol('free'),\n  kConnected: Symbol('connected'),\n  kClosed: Symbol('closed'),\n  kNeedDrain: Symbol('need drain'),\n  kReset: Symbol('reset'),\n  kDestroyed: Symbol.for('nodejs.stream.destroyed'),\n  kMaxHeadersSize: Symbol('max headers size'),\n  kRunningIdx: Symbol('running index'),\n  kPendingIdx: Symbol('pending index'),\n  kError: Symbol('error'),\n  kClients: Symbol('clients'),\n  kClient: Symbol('client'),\n  kParser: Symbol('parser'),\n  kOnDestroyed: Symbol('destroy callbacks'),\n  kPipelining: Symbol('pipelining'),\n  kSocket: Symbol('socket'),\n  kHostHeader: Symbol('host header'),\n  kConnector: Symbol('connector'),\n  kStrictContentLength: Symbol('strict content length'),\n  kMaxRedirections: Symbol('maxRedirections'),\n  kMaxRequests: Symbol('maxRequestsPerClient'),\n  kProxy: Symbol('proxy agent options'),\n  kCounter: Symbol('socket request counter'),\n  kInterceptors: Symbol('dispatch interceptors'),\n  kMaxResponseSize: Symbol('max response size'),\n  kHTTP2Session: Symbol('http2Session'),\n  kHTTP2SessionState: Symbol('http2Session state'),\n  kHTTP2BuildRequest: Symbol('http2 build request'),\n  kHTTP1BuildRequest: Symbol('http1 build request'),\n  kHTTP2CopyHeaders: Symbol('http2 copy headers'),\n  kHTTPConnVersion: Symbol('http connection version'),\n  kRetryHandlerDefaultRetry: Symbol('retry agent default retry'),\n  kConstruct: Symbol('constructable')\n}\n", "'use strict'\n\nclass UndiciError extends Error {\n  constructor (message) {\n    super(message)\n    this.name = 'UndiciError'\n    this.code = 'UND_ERR'\n  }\n}\n\nclass ConnectTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ConnectTimeoutError)\n    this.name = 'ConnectTimeoutError'\n    this.message = message || 'Connect Timeout Error'\n    this.code = 'UND_ERR_CONNECT_TIMEOUT'\n  }\n}\n\nclass HeadersTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, HeadersTimeoutError)\n    this.name = 'HeadersTimeoutError'\n    this.message = message || 'Headers Timeout Error'\n    this.code = 'UND_ERR_HEADERS_TIMEOUT'\n  }\n}\n\nclass HeadersOverflowError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, HeadersOverflowError)\n    this.name = 'HeadersOverflowError'\n    this.message = message || 'Headers Overflow Error'\n    this.code = 'UND_ERR_HEADERS_OVERFLOW'\n  }\n}\n\nclass BodyTimeoutError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, BodyTimeoutError)\n    this.name = 'BodyTimeoutError'\n    this.message = message || 'Body Timeout Error'\n    this.code = 'UND_ERR_BODY_TIMEOUT'\n  }\n}\n\nclass ResponseStatusCodeError extends UndiciError {\n  constructor (message, statusCode, headers, body) {\n    super(message)\n    Error.captureStackTrace(this, ResponseStatusCodeError)\n    this.name = 'ResponseStatusCodeError'\n    this.message = message || 'Response Status Code Error'\n    this.code = 'UND_ERR_RESPONSE_STATUS_CODE'\n    this.body = body\n    this.status = statusCode\n    this.statusCode = statusCode\n    this.headers = headers\n  }\n}\n\nclass InvalidArgumentError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InvalidArgumentError)\n    this.name = 'InvalidArgumentError'\n    this.message = message || 'Invalid Argument Error'\n    this.code = 'UND_ERR_INVALID_ARG'\n  }\n}\n\nclass InvalidReturnValueError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InvalidReturnValueError)\n    this.name = 'InvalidReturnValueError'\n    this.message = message || 'Invalid Return Value Error'\n    this.code = 'UND_ERR_INVALID_RETURN_VALUE'\n  }\n}\n\nclass RequestAbortedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, RequestAbortedError)\n    this.name = 'AbortError'\n    this.message = message || 'Request aborted'\n    this.code = 'UND_ERR_ABORTED'\n  }\n}\n\nclass InformationalError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, InformationalError)\n    this.name = 'InformationalError'\n    this.message = message || 'Request information'\n    this.code = 'UND_ERR_INFO'\n  }\n}\n\nclass RequestContentLengthMismatchError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, RequestContentLengthMismatchError)\n    this.name = 'RequestContentLengthMismatchError'\n    this.message = message || 'Request body length does not match content-length header'\n    this.code = 'UND_ERR_REQ_CONTENT_LENGTH_MISMATCH'\n  }\n}\n\nclass ResponseContentLengthMismatchError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ResponseContentLengthMismatchError)\n    this.name = 'ResponseContentLengthMismatchError'\n    this.message = message || 'Response body length does not match content-length header'\n    this.code = 'UND_ERR_RES_CONTENT_LENGTH_MISMATCH'\n  }\n}\n\nclass ClientDestroyedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ClientDestroyedError)\n    this.name = 'ClientDestroyedError'\n    this.message = message || 'The client is destroyed'\n    this.code = 'UND_ERR_DESTROYED'\n  }\n}\n\nclass ClientClosedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ClientClosedError)\n    this.name = 'ClientClosedError'\n    this.message = message || 'The client is closed'\n    this.code = 'UND_ERR_CLOSED'\n  }\n}\n\nclass SocketError extends UndiciError {\n  constructor (message, socket) {\n    super(message)\n    Error.captureStackTrace(this, SocketError)\n    this.name = 'SocketError'\n    this.message = message || 'Socket error'\n    this.code = 'UND_ERR_SOCKET'\n    this.socket = socket\n  }\n}\n\nclass NotSupportedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, NotSupportedError)\n    this.name = 'NotSupportedError'\n    this.message = message || 'Not supported error'\n    this.code = 'UND_ERR_NOT_SUPPORTED'\n  }\n}\n\nclass BalancedPoolMissingUpstreamError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, NotSupportedError)\n    this.name = 'MissingUpstreamError'\n    this.message = message || 'No upstream has been added to the BalancedPool'\n    this.code = 'UND_ERR_BPL_MISSING_UPSTREAM'\n  }\n}\n\nclass HTTPParserError extends Error {\n  constructor (message, code, data) {\n    super(message)\n    Error.captureStackTrace(this, HTTPParserError)\n    this.name = 'HTTPParserError'\n    this.code = code ? `HPE_${code}` : undefined\n    this.data = data ? data.toString() : undefined\n  }\n}\n\nclass ResponseExceededMaxSizeError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, ResponseExceededMaxSizeError)\n    this.name = 'ResponseExceededMaxSizeError'\n    this.message = message || 'Response content exceeded max size'\n    this.code = 'UND_ERR_RES_EXCEEDED_MAX_SIZE'\n  }\n}\n\nclass RequestRetryError extends UndiciError {\n  constructor (message, code, { headers, data }) {\n    super(message)\n    Error.captureStackTrace(this, RequestRetryError)\n    this.name = 'RequestRetryError'\n    this.message = message || 'Request retry error'\n    this.code = 'UND_ERR_REQ_RETRY'\n    this.statusCode = code\n    this.data = data\n    this.headers = headers\n  }\n}\n\nmodule.exports = {\n  HTTPParserError,\n  UndiciError,\n  HeadersTimeoutError,\n  HeadersOverflowError,\n  BodyTimeoutError,\n  RequestContentLengthMismatchError,\n  ConnectTimeoutError,\n  ResponseStatusCodeError,\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError,\n  ClientDestroyedError,\n  ClientClosedError,\n  InformationalError,\n  SocketError,\n  NotSupportedError,\n  ResponseContentLengthMismatchError,\n  BalancedPoolMissingUpstreamError,\n  ResponseExceededMaxSizeError,\n  RequestRetryError\n}\n", "'use strict'\n\n/** @type {Record<string, string | undefined>} */\nconst headerNameLowerCasedRecord = {}\n\n// https://developer.mozilla.org/docs/Web/HTTP/Headers\nconst wellknownHeaderNames = [\n  'Accept',\n  'Accept-Encoding',\n  'Accept-Language',\n  'Accept-Ranges',\n  'Access-Control-Allow-Credentials',\n  'Access-Control-Allow-Headers',\n  'Access-Control-Allow-Methods',\n  'Access-Control-Allow-Origin',\n  'Access-Control-Expose-Headers',\n  'Access-Control-Max-Age',\n  'Access-Control-Request-Headers',\n  'Access-Control-Request-Method',\n  'Age',\n  'Allow',\n  'Alt-Svc',\n  'Alt-Used',\n  'Authorization',\n  'Cache-Control',\n  'Clear-Site-Data',\n  'Connection',\n  'Content-Disposition',\n  'Content-Encoding',\n  'Content-Language',\n  'Content-Length',\n  'Content-Location',\n  'Content-Range',\n  'Content-Security-Policy',\n  'Content-Security-Policy-Report-Only',\n  'Content-Type',\n  'Cookie',\n  'Cross-Origin-Embedder-Policy',\n  'Cross-Origin-Opener-Policy',\n  'Cross-Origin-Resource-Policy',\n  'Date',\n  'Device-Memory',\n  'Downlink',\n  'ECT',\n  'ETag',\n  'Expect',\n  'Expect-CT',\n  'Expires',\n  'Forwarded',\n  'From',\n  'Host',\n  'If-Match',\n  'If-Modified-Since',\n  'If-None-Match',\n  'If-Range',\n  'If-Unmodified-Since',\n  'Keep-Alive',\n  'Last-Modified',\n  'Link',\n  'Location',\n  'Max-Forwards',\n  'Origin',\n  'Permissions-Policy',\n  'Pragma',\n  'Proxy-Authenticate',\n  'Proxy-Authorization',\n  'RTT',\n  'Range',\n  'Referer',\n  'Referrer-Policy',\n  'Refresh',\n  'Retry-After',\n  'Sec-WebSocket-Accept',\n  'Sec-WebSocket-Extensions',\n  'Sec-WebSocket-Key',\n  'Sec-WebSocket-Protocol',\n  'Sec-WebSocket-Version',\n  'Server',\n  'Server-Timing',\n  'Service-Worker-Allowed',\n  'Service-Worker-Navigation-Preload',\n  'Set-Cookie',\n  'SourceMap',\n  'Strict-Transport-Security',\n  'Supports-Loading-Mode',\n  'TE',\n  'Timing-Allow-Origin',\n  'Trailer',\n  'Transfer-Encoding',\n  'Upgrade',\n  'Upgrade-Insecure-Requests',\n  'User-Agent',\n  'Vary',\n  'Via',\n  'WWW-Authenticate',\n  'X-Content-Type-Options',\n  'X-DNS-Prefetch-Control',\n  'X-Frame-Options',\n  'X-Permitted-Cross-Domain-Policies',\n  'X-Powered-By',\n  'X-Requested-With',\n  'X-XSS-Protection'\n]\n\nfor (let i = 0; i < wellknownHeaderNames.length; ++i) {\n  const key = wellknownHeaderNames[i]\n  const lowerCasedKey = key.toLowerCase()\n  headerNameLowerCasedRecord[key] = headerNameLowerCasedRecord[lowerCasedKey] =\n    lowerCasedKey\n}\n\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(headerNameLowerCasedRecord, null)\n\nmodule.exports = {\n  wellknownHeaderNames,\n  headerNameLowerCasedRecord\n}\n", "'use strict'\n\nconst assert = require('assert')\nconst { kDestroyed, kBodyUsed } = require('./symbols')\nconst { IncomingMessage } = require('http')\nconst stream = require('stream')\nconst net = require('net')\nconst { InvalidArgumentError } = require('./errors')\nconst { Blob } = require('buffer')\nconst nodeUtil = require('util')\nconst { stringify } = require('querystring')\nconst { headerNameLowerCasedRecord } = require('./constants')\n\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map(v => Number(v))\n\nfunction nop () {}\n\nfunction isStream (obj) {\n  return obj && typeof obj === 'object' && typeof obj.pipe === 'function' && typeof obj.on === 'function'\n}\n\n// based on https://github.com/node-fetch/fetch-blob/blob/8ab587d34080de94140b54f07168451e7d0b655e/index.js#L229-L241 (MIT License)\nfunction isBlobLike (object) {\n  return (Blob && object instanceof Blob) || (\n    object &&\n    typeof object === 'object' &&\n    (typeof object.stream === 'function' ||\n      typeof object.arrayBuffer === 'function') &&\n    /^(Blob|File)$/.test(object[Symbol.toStringTag])\n  )\n}\n\nfunction buildURL (url, queryParams) {\n  if (url.includes('?') || url.includes('#')) {\n    throw new Error('Query params cannot be passed when url already contains \"?\" or \"#\".')\n  }\n\n  const stringified = stringify(queryParams)\n\n  if (stringified) {\n    url += '?' + stringified\n  }\n\n  return url\n}\n\nfunction parseURL (url) {\n  if (typeof url === 'string') {\n    url = new URL(url)\n\n    if (!/^https?:/.test(url.origin || url.protocol)) {\n      throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')\n    }\n\n    return url\n  }\n\n  if (!url || typeof url !== 'object') {\n    throw new InvalidArgumentError('Invalid URL: The URL argument must be a non-null object.')\n  }\n\n  if (!/^https?:/.test(url.origin || url.protocol)) {\n    throw new InvalidArgumentError('Invalid URL protocol: the URL must start with `http:` or `https:`.')\n  }\n\n  if (!(url instanceof URL)) {\n    if (url.port != null && url.port !== '' && !Number.isFinite(parseInt(url.port))) {\n      throw new InvalidArgumentError('Invalid URL: port must be a valid integer or a string representation of an integer.')\n    }\n\n    if (url.path != null && typeof url.path !== 'string') {\n      throw new InvalidArgumentError('Invalid URL path: the path must be a string or null/undefined.')\n    }\n\n    if (url.pathname != null && typeof url.pathname !== 'string') {\n      throw new InvalidArgumentError('Invalid URL pathname: the pathname must be a string or null/undefined.')\n    }\n\n    if (url.hostname != null && typeof url.hostname !== 'string') {\n      throw new InvalidArgumentError('Invalid URL hostname: the hostname must be a string or null/undefined.')\n    }\n\n    if (url.origin != null && typeof url.origin !== 'string') {\n      throw new InvalidArgumentError('Invalid URL origin: the origin must be a string or null/undefined.')\n    }\n\n    const port = url.port != null\n      ? url.port\n      : (url.protocol === 'https:' ? 443 : 80)\n    let origin = url.origin != null\n      ? url.origin\n      : `${url.protocol}//${url.hostname}:${port}`\n    let path = url.path != null\n      ? url.path\n      : `${url.pathname || ''}${url.search || ''}`\n\n    if (origin.endsWith('/')) {\n      origin = origin.substring(0, origin.length - 1)\n    }\n\n    if (path && !path.startsWith('/')) {\n      path = `/${path}`\n    }\n    // new URL(path, origin) is unsafe when `path` contains an absolute URL\n    // From https://developer.mozilla.org/en-US/docs/Web/API/URL/URL:\n    // If first parameter is a relative URL, second param is required, and will be used as the base URL.\n    // If first parameter is an absolute URL, a given second param will be ignored.\n    url = new URL(origin + path)\n  }\n\n  return url\n}\n\nfunction parseOrigin (url) {\n  url = parseURL(url)\n\n  if (url.pathname !== '/' || url.search || url.hash) {\n    throw new InvalidArgumentError('invalid url')\n  }\n\n  return url\n}\n\nfunction getHostname (host) {\n  if (host[0] === '[') {\n    const idx = host.indexOf(']')\n\n    assert(idx !== -1)\n    return host.substring(1, idx)\n  }\n\n  const idx = host.indexOf(':')\n  if (idx === -1) return host\n\n  return host.substring(0, idx)\n}\n\n// IP addresses are not valid server names per RFC6066\n// > Currently, the only server names supported are DNS hostnames\nfunction getServerName (host) {\n  if (!host) {\n    return null\n  }\n\n  assert.strictEqual(typeof host, 'string')\n\n  const servername = getHostname(host)\n  if (net.isIP(servername)) {\n    return ''\n  }\n\n  return servername\n}\n\nfunction deepClone (obj) {\n  return JSON.parse(JSON.stringify(obj))\n}\n\nfunction isAsyncIterable (obj) {\n  return !!(obj != null && typeof obj[Symbol.asyncIterator] === 'function')\n}\n\nfunction isIterable (obj) {\n  return !!(obj != null && (typeof obj[Symbol.iterator] === 'function' || typeof obj[Symbol.asyncIterator] === 'function'))\n}\n\nfunction bodyLength (body) {\n  if (body == null) {\n    return 0\n  } else if (isStream(body)) {\n    const state = body._readableState\n    return state && state.objectMode === false && state.ended === true && Number.isFinite(state.length)\n      ? state.length\n      : null\n  } else if (isBlobLike(body)) {\n    return body.size != null ? body.size : null\n  } else if (isBuffer(body)) {\n    return body.byteLength\n  }\n\n  return null\n}\n\nfunction isDestroyed (stream) {\n  return !stream || !!(stream.destroyed || stream[kDestroyed])\n}\n\nfunction isReadableAborted (stream) {\n  const state = stream && stream._readableState\n  return isDestroyed(stream) && state && !state.endEmitted\n}\n\nfunction destroy (stream, err) {\n  if (stream == null || !isStream(stream) || isDestroyed(stream)) {\n    return\n  }\n\n  if (typeof stream.destroy === 'function') {\n    if (Object.getPrototypeOf(stream).constructor === IncomingMessage) {\n      // See: https://github.com/nodejs/node/pull/38505/files\n      stream.socket = null\n    }\n\n    stream.destroy(err)\n  } else if (err) {\n    process.nextTick((stream, err) => {\n      stream.emit('error', err)\n    }, stream, err)\n  }\n\n  if (stream.destroyed !== true) {\n    stream[kDestroyed] = true\n  }\n}\n\nconst KEEPALIVE_TIMEOUT_EXPR = /timeout=(\\d+)/\nfunction parseKeepAliveTimeout (val) {\n  const m = val.toString().match(KEEPALIVE_TIMEOUT_EXPR)\n  return m ? parseInt(m[1], 10) * 1000 : null\n}\n\n/**\n * Retrieves a header name and returns its lowercase value.\n * @param {string | Buffer} value Header name\n * @returns {string}\n */\nfunction headerNameToString (value) {\n  return headerNameLowerCasedRecord[value] || value.toLowerCase()\n}\n\nfunction parseHeaders (headers, obj = {}) {\n  // For H2 support\n  if (!Array.isArray(headers)) return headers\n\n  for (let i = 0; i < headers.length; i += 2) {\n    const key = headers[i].toString().toLowerCase()\n    let val = obj[key]\n\n    if (!val) {\n      if (Array.isArray(headers[i + 1])) {\n        obj[key] = headers[i + 1].map(x => x.toString('utf8'))\n      } else {\n        obj[key] = headers[i + 1].toString('utf8')\n      }\n    } else {\n      if (!Array.isArray(val)) {\n        val = [val]\n        obj[key] = val\n      }\n      val.push(headers[i + 1].toString('utf8'))\n    }\n  }\n\n  // See https://github.com/nodejs/node/pull/46528\n  if ('content-length' in obj && 'content-disposition' in obj) {\n    obj['content-disposition'] = Buffer.from(obj['content-disposition']).toString('latin1')\n  }\n\n  return obj\n}\n\nfunction parseRawHeaders (headers) {\n  const ret = []\n  let hasContentLength = false\n  let contentDispositionIdx = -1\n\n  for (let n = 0; n < headers.length; n += 2) {\n    const key = headers[n + 0].toString()\n    const val = headers[n + 1].toString('utf8')\n\n    if (key.length === 14 && (key === 'content-length' || key.toLowerCase() === 'content-length')) {\n      ret.push(key, val)\n      hasContentLength = true\n    } else if (key.length === 19 && (key === 'content-disposition' || key.toLowerCase() === 'content-disposition')) {\n      contentDispositionIdx = ret.push(key, val) - 1\n    } else {\n      ret.push(key, val)\n    }\n  }\n\n  // See https://github.com/nodejs/node/pull/46528\n  if (hasContentLength && contentDispositionIdx !== -1) {\n    ret[contentDispositionIdx] = Buffer.from(ret[contentDispositionIdx]).toString('latin1')\n  }\n\n  return ret\n}\n\nfunction isBuffer (buffer) {\n  // See, https://github.com/mcollina/undici/pull/319\n  return buffer instanceof Uint8Array || Buffer.isBuffer(buffer)\n}\n\nfunction validateHandler (handler, method, upgrade) {\n  if (!handler || typeof handler !== 'object') {\n    throw new InvalidArgumentError('handler must be an object')\n  }\n\n  if (typeof handler.onConnect !== 'function') {\n    throw new InvalidArgumentError('invalid onConnect method')\n  }\n\n  if (typeof handler.onError !== 'function') {\n    throw new InvalidArgumentError('invalid onError method')\n  }\n\n  if (typeof handler.onBodySent !== 'function' && handler.onBodySent !== undefined) {\n    throw new InvalidArgumentError('invalid onBodySent method')\n  }\n\n  if (upgrade || method === 'CONNECT') {\n    if (typeof handler.onUpgrade !== 'function') {\n      throw new InvalidArgumentError('invalid onUpgrade method')\n    }\n  } else {\n    if (typeof handler.onHeaders !== 'function') {\n      throw new InvalidArgumentError('invalid onHeaders method')\n    }\n\n    if (typeof handler.onData !== 'function') {\n      throw new InvalidArgumentError('invalid onData method')\n    }\n\n    if (typeof handler.onComplete !== 'function') {\n      throw new InvalidArgumentError('invalid onComplete method')\n    }\n  }\n}\n\n// A body is disturbed if it has been read from and it cannot\n// be re-used without losing state or data.\nfunction isDisturbed (body) {\n  return !!(body && (\n    stream.isDisturbed\n      ? stream.isDisturbed(body) || body[kBodyUsed] // TODO (fix): Why is body[kBodyUsed] needed?\n      : body[kBodyUsed] ||\n        body.readableDidRead ||\n        (body._readableState && body._readableState.dataEmitted) ||\n        isReadableAborted(body)\n  ))\n}\n\nfunction isErrored (body) {\n  return !!(body && (\n    stream.isErrored\n      ? stream.isErrored(body)\n      : /state: 'errored'/.test(nodeUtil.inspect(body)\n      )))\n}\n\nfunction isReadable (body) {\n  return !!(body && (\n    stream.isReadable\n      ? stream.isReadable(body)\n      : /state: 'readable'/.test(nodeUtil.inspect(body)\n      )))\n}\n\nfunction getSocketInfo (socket) {\n  return {\n    localAddress: socket.localAddress,\n    localPort: socket.localPort,\n    remoteAddress: socket.remoteAddress,\n    remotePort: socket.remotePort,\n    remoteFamily: socket.remoteFamily,\n    timeout: socket.timeout,\n    bytesWritten: socket.bytesWritten,\n    bytesRead: socket.bytesRead\n  }\n}\n\nasync function * convertIterableToBuffer (iterable) {\n  for await (const chunk of iterable) {\n    yield Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk)\n  }\n}\n\nlet ReadableStream\nfunction ReadableStreamFrom (iterable) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  if (ReadableStream.from) {\n    return ReadableStream.from(convertIterableToBuffer(iterable))\n  }\n\n  let iterator\n  return new ReadableStream(\n    {\n      async start () {\n        iterator = iterable[Symbol.asyncIterator]()\n      },\n      async pull (controller) {\n        const { done, value } = await iterator.next()\n        if (done) {\n          queueMicrotask(() => {\n            controller.close()\n          })\n        } else {\n          const buf = Buffer.isBuffer(value) ? value : Buffer.from(value)\n          controller.enqueue(new Uint8Array(buf))\n        }\n        return controller.desiredSize > 0\n      },\n      async cancel (reason) {\n        await iterator.return()\n      }\n    },\n    0\n  )\n}\n\n// The chunk should be a FormData instance and contains\n// all the required methods.\nfunction isFormDataLike (object) {\n  return (\n    object &&\n    typeof object === 'object' &&\n    typeof object.append === 'function' &&\n    typeof object.delete === 'function' &&\n    typeof object.get === 'function' &&\n    typeof object.getAll === 'function' &&\n    typeof object.has === 'function' &&\n    typeof object.set === 'function' &&\n    object[Symbol.toStringTag] === 'FormData'\n  )\n}\n\nfunction throwIfAborted (signal) {\n  if (!signal) { return }\n  if (typeof signal.throwIfAborted === 'function') {\n    signal.throwIfAborted()\n  } else {\n    if (signal.aborted) {\n      // DOMException not available < v17.0.0\n      const err = new Error('The operation was aborted')\n      err.name = 'AbortError'\n      throw err\n    }\n  }\n}\n\nfunction addAbortListener (signal, listener) {\n  if ('addEventListener' in signal) {\n    signal.addEventListener('abort', listener, { once: true })\n    return () => signal.removeEventListener('abort', listener)\n  }\n  signal.addListener('abort', listener)\n  return () => signal.removeListener('abort', listener)\n}\n\nconst hasToWellFormed = !!String.prototype.toWellFormed\n\n/**\n * @param {string} val\n */\nfunction toUSVString (val) {\n  if (hasToWellFormed) {\n    return `${val}`.toWellFormed()\n  } else if (nodeUtil.toUSVString) {\n    return nodeUtil.toUSVString(val)\n  }\n\n  return `${val}`\n}\n\n// Parsed accordingly to RFC 9110\n// https://www.rfc-editor.org/rfc/rfc9110#field.content-range\nfunction parseRangeHeader (range) {\n  if (range == null || range === '') return { start: 0, end: null, size: null }\n\n  const m = range ? range.match(/^bytes (\\d+)-(\\d+)\\/(\\d+)?$/) : null\n  return m\n    ? {\n        start: parseInt(m[1]),\n        end: m[2] ? parseInt(m[2]) : null,\n        size: m[3] ? parseInt(m[3]) : null\n      }\n    : null\n}\n\nconst kEnumerableProperty = Object.create(null)\nkEnumerableProperty.enumerable = true\n\nmodule.exports = {\n  kEnumerableProperty,\n  nop,\n  isDisturbed,\n  isErrored,\n  isReadable,\n  toUSVString,\n  isReadableAborted,\n  isBlobLike,\n  parseOrigin,\n  parseURL,\n  getServerName,\n  isStream,\n  isIterable,\n  isAsyncIterable,\n  isDestroyed,\n  headerNameToString,\n  parseRawHeaders,\n  parseHeaders,\n  parseKeepAliveTimeout,\n  destroy,\n  bodyLength,\n  deepClone,\n  ReadableStreamFrom,\n  isBuffer,\n  validateHandler,\n  getSocketInfo,\n  isFormDataLike,\n  buildURL,\n  throwIfAborted,\n  addAbortListener,\n  parseRangeHeader,\n  nodeMajor,\n  nodeMinor,\n  nodeHasAutoSelectFamily: nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 13),\n  safeHTTPMethods: ['GET', 'HEAD', 'OPTIONS', 'TRACE']\n}\n", "'use strict'\n\nlet fastNow = Date.now()\nlet fastNowTimeout\n\nconst fastTimers = []\n\nfunction onTimeout () {\n  fastNow = Date.now()\n\n  let len = fastTimers.length\n  let idx = 0\n  while (idx < len) {\n    const timer = fastTimers[idx]\n\n    if (timer.state === 0) {\n      timer.state = fastNow + timer.delay\n    } else if (timer.state > 0 && fastNow >= timer.state) {\n      timer.state = -1\n      timer.callback(timer.opaque)\n    }\n\n    if (timer.state === -1) {\n      timer.state = -2\n      if (idx !== len - 1) {\n        fastTimers[idx] = fastTimers.pop()\n      } else {\n        fastTimers.pop()\n      }\n      len -= 1\n    } else {\n      idx += 1\n    }\n  }\n\n  if (fastTimers.length > 0) {\n    refreshTimeout()\n  }\n}\n\nfunction refreshTimeout () {\n  if (fastNowTimeout && fastNowTimeout.refresh) {\n    fastNowTimeout.refresh()\n  } else {\n    clearTimeout(fastNowTimeout)\n    fastNowTimeout = setTimeout(onTimeout, 1e3)\n    if (fastNowTimeout.unref) {\n      fastNowTimeout.unref()\n    }\n  }\n}\n\nclass Timeout {\n  constructor (callback, delay, opaque) {\n    this.callback = callback\n    this.delay = delay\n    this.opaque = opaque\n\n    //  -2 not in timer list\n    //  -1 in timer list but inactive\n    //   0 in timer list waiting for time\n    // > 0 in timer list waiting for time to expire\n    this.state = -2\n\n    this.refresh()\n  }\n\n  refresh () {\n    if (this.state === -2) {\n      fastTimers.push(this)\n      if (!fastNowTimeout || fastTimers.length === 1) {\n        refreshTimeout()\n      }\n    }\n\n    this.state = 0\n  }\n\n  clear () {\n    this.state = -1\n  }\n}\n\nmodule.exports = {\n  setTimeout (callback, delay, opaque) {\n    return delay < 1e3\n      ? setTimeout(callback, delay, opaque)\n      : new Timeout(callback, delay, opaque)\n  },\n  clearTimeout (timeout) {\n    if (timeout instanceof Timeout) {\n      timeout.clear()\n    } else {\n      clearTimeout(timeout)\n    }\n  }\n}\n", "'use strict'\n\n/**\n * Copyright Brian White. All rights reserved.\n *\n * @see https://github.com/mscdex/streamsearch\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n * Based heavily on the Streaming Boyer-Moore-Horspool C++ implementation\n * by Hongli Lai at: https://github.com/FooBarWidget/boyer-moore-horspool\n */\nconst EventEmitter = require('node:events').EventEmitter\nconst inherits = require('node:util').inherits\n\nfunction SBMH (needle) {\n  if (typeof needle === 'string') {\n    needle = Buffer.from(needle)\n  }\n\n  if (!Buffer.isBuffer(needle)) {\n    throw new TypeError('The needle has to be a String or a Buffer.')\n  }\n\n  const needleLength = needle.length\n\n  if (needleLength === 0) {\n    throw new Error('The needle cannot be an empty String/Buffer.')\n  }\n\n  if (needleLength > 256) {\n    throw new Error('The needle cannot have a length bigger than 256.')\n  }\n\n  this.maxMatches = Infinity\n  this.matches = 0\n\n  this._occ = new Array(256)\n    .fill(needleLength) // Initialize occurrence table.\n  this._lookbehind_size = 0\n  this._needle = needle\n  this._bufpos = 0\n\n  this._lookbehind = Buffer.alloc(needleLength)\n\n  // Populate occurrence table with analysis of the needle,\n  // ignoring last letter.\n  for (var i = 0; i < needleLength - 1; ++i) { // eslint-disable-line no-var\n    this._occ[needle[i]] = needleLength - 1 - i\n  }\n}\ninherits(SBMH, EventEmitter)\n\nSBMH.prototype.reset = function () {\n  this._lookbehind_size = 0\n  this.matches = 0\n  this._bufpos = 0\n}\n\nSBMH.prototype.push = function (chunk, pos) {\n  if (!Buffer.isBuffer(chunk)) {\n    chunk = Buffer.from(chunk, 'binary')\n  }\n  const chlen = chunk.length\n  this._bufpos = pos || 0\n  let r\n  while (r !== chlen && this.matches < this.maxMatches) { r = this._sbmh_feed(chunk) }\n  return r\n}\n\nSBMH.prototype._sbmh_feed = function (data) {\n  const len = data.length\n  const needle = this._needle\n  const needleLength = needle.length\n  const lastNeedleChar = needle[needleLength - 1]\n\n  // Positive: points to a position in `data`\n  //           pos == 3 points to data[3]\n  // Negative: points to a position in the lookbehind buffer\n  //           pos == -2 points to lookbehind[lookbehind_size - 2]\n  let pos = -this._lookbehind_size\n  let ch\n\n  if (pos < 0) {\n    // Lookbehind buffer is not empty. Perform Boyer-Moore-Horspool\n    // search with character lookup code that considers both the\n    // lookbehind buffer and the current round's haystack data.\n    //\n    // Loop until\n    //   there is a match.\n    // or until\n    //   we've moved past the position that requires the\n    //   lookbehind buffer. In this case we switch to the\n    //   optimized loop.\n    // or until\n    //   the character to look at lies outside the haystack.\n    while (pos < 0 && pos <= len - needleLength) {\n      ch = this._sbmh_lookup_char(data, pos + needleLength - 1)\n\n      if (\n        ch === lastNeedleChar &&\n        this._sbmh_memcmp(data, pos, needleLength - 1)\n      ) {\n        this._lookbehind_size = 0\n        ++this.matches\n        this.emit('info', true)\n\n        return (this._bufpos = pos + needleLength)\n      }\n      pos += this._occ[ch]\n    }\n\n    // No match.\n\n    if (pos < 0) {\n      // There's too few data for Boyer-Moore-Horspool to run,\n      // so let's use a different algorithm to skip as much as\n      // we can.\n      // Forward pos until\n      //   the trailing part of lookbehind + data\n      //   looks like the beginning of the needle\n      // or until\n      //   pos == 0\n      while (pos < 0 && !this._sbmh_memcmp(data, pos, len - pos)) { ++pos }\n    }\n\n    if (pos >= 0) {\n      // Discard lookbehind buffer.\n      this.emit('info', false, this._lookbehind, 0, this._lookbehind_size)\n      this._lookbehind_size = 0\n    } else {\n      // Cut off part of the lookbehind buffer that has\n      // been processed and append the entire haystack\n      // into it.\n      const bytesToCutOff = this._lookbehind_size + pos\n      if (bytesToCutOff > 0) {\n        // The cut off data is guaranteed not to contain the needle.\n        this.emit('info', false, this._lookbehind, 0, bytesToCutOff)\n      }\n\n      this._lookbehind.copy(this._lookbehind, 0, bytesToCutOff,\n        this._lookbehind_size - bytesToCutOff)\n      this._lookbehind_size -= bytesToCutOff\n\n      data.copy(this._lookbehind, this._lookbehind_size)\n      this._lookbehind_size += len\n\n      this._bufpos = len\n      return len\n    }\n  }\n\n  pos += (pos >= 0) * this._bufpos\n\n  // Lookbehind buffer is now empty. We only need to check if the\n  // needle is in the haystack.\n  if (data.indexOf(needle, pos) !== -1) {\n    pos = data.indexOf(needle, pos)\n    ++this.matches\n    if (pos > 0) { this.emit('info', true, data, this._bufpos, pos) } else { this.emit('info', true) }\n\n    return (this._bufpos = pos + needleLength)\n  } else {\n    pos = len - needleLength\n  }\n\n  // There was no match. If there's trailing haystack data that we cannot\n  // match yet using the Boyer-Moore-Horspool algorithm (because the trailing\n  // data is less than the needle size) then match using a modified\n  // algorithm that starts matching from the beginning instead of the end.\n  // Whatever trailing data is left after running this algorithm is added to\n  // the lookbehind buffer.\n  while (\n    pos < len &&\n    (\n      data[pos] !== needle[0] ||\n      (\n        (Buffer.compare(\n          data.subarray(pos, pos + len - pos),\n          needle.subarray(0, len - pos)\n        ) !== 0)\n      )\n    )\n  ) {\n    ++pos\n  }\n  if (pos < len) {\n    data.copy(this._lookbehind, 0, pos, pos + (len - pos))\n    this._lookbehind_size = len - pos\n  }\n\n  // Everything until pos is guaranteed not to contain needle data.\n  if (pos > 0) { this.emit('info', false, data, this._bufpos, pos < len ? pos : len) }\n\n  this._bufpos = len\n  return len\n}\n\nSBMH.prototype._sbmh_lookup_char = function (data, pos) {\n  return (pos < 0)\n    ? this._lookbehind[this._lookbehind_size + pos]\n    : data[pos]\n}\n\nSBMH.prototype._sbmh_memcmp = function (data, pos, len) {\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    if (this._sbmh_lookup_char(data, pos + i) !== this._needle[i]) { return false }\n  }\n  return true\n}\n\nmodule.exports = SBMH\n", "'use strict'\n\nconst inherits = require('node:util').inherits\nconst ReadableStream = require('node:stream').Readable\n\nfunction PartStream (opts) {\n  ReadableStream.call(this, opts)\n}\ninherits(PartStream, ReadableStream)\n\nPartStream.prototype._read = function (n) {}\n\nmodule.exports = PartStream\n", "'use strict'\n\nmodule.exports = function getLimit (limits, name, defaultLimit) {\n  if (\n    !limits ||\n    limits[name] === undefined ||\n    limits[name] === null\n  ) { return defaultLimit }\n\n  if (\n    typeof limits[name] !== 'number' ||\n    isNaN(limits[name])\n  ) { throw new TypeError('Limit ' + name + ' is not a valid number') }\n\n  return limits[name]\n}\n", "'use strict'\n\nconst EventEmitter = require('node:events').EventEmitter\nconst inherits = require('node:util').inherits\nconst getLimit = require('../../../lib/utils/getLimit')\n\nconst StreamSearch = require('../../streamsearch/sbmh')\n\nconst B_DCRLF = Buffer.from('\\r\\n\\r\\n')\nconst RE_CRLF = /\\r\\n/g\nconst RE_HDR = /^([^:]+):[ \\t]?([\\x00-\\xFF]+)?$/ // eslint-disable-line no-control-regex\n\nfunction HeaderParser (cfg) {\n  EventEmitter.call(this)\n\n  cfg = cfg || {}\n  const self = this\n  this.nread = 0\n  this.maxed = false\n  this.npairs = 0\n  this.maxHeaderPairs = getLimit(cfg, 'maxHeaderPairs', 2000)\n  this.maxHeaderSize = getLimit(cfg, 'maxHeaderSize', 80 * 1024)\n  this.buffer = ''\n  this.header = {}\n  this.finished = false\n  this.ss = new StreamSearch(B_DCRLF)\n  this.ss.on('info', function (isMatch, data, start, end) {\n    if (data && !self.maxed) {\n      if (self.nread + end - start >= self.maxHeaderSize) {\n        end = self.maxHeaderSize - self.nread + start\n        self.nread = self.maxHeaderSize\n        self.maxed = true\n      } else { self.nread += (end - start) }\n\n      self.buffer += data.toString('binary', start, end)\n    }\n    if (isMatch) { self._finish() }\n  })\n}\ninherits(HeaderParser, EventEmitter)\n\nHeaderParser.prototype.push = function (data) {\n  const r = this.ss.push(data)\n  if (this.finished) { return r }\n}\n\nHeaderParser.prototype.reset = function () {\n  this.finished = false\n  this.buffer = ''\n  this.header = {}\n  this.ss.reset()\n}\n\nHeaderParser.prototype._finish = function () {\n  if (this.buffer) { this._parseHeader() }\n  this.ss.matches = this.ss.maxMatches\n  const header = this.header\n  this.header = {}\n  this.buffer = ''\n  this.finished = true\n  this.nread = this.npairs = 0\n  this.maxed = false\n  this.emit('header', header)\n}\n\nHeaderParser.prototype._parseHeader = function () {\n  if (this.npairs === this.maxHeaderPairs) { return }\n\n  const lines = this.buffer.split(RE_CRLF)\n  const len = lines.length\n  let m, h\n\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    if (lines[i].length === 0) { continue }\n    if (lines[i][0] === '\\t' || lines[i][0] === ' ') {\n      // folded header content\n      // RFC2822 says to just remove the CRLF and not the whitespace following\n      // it, so we follow the RFC and include the leading whitespace ...\n      if (h) {\n        this.header[h][this.header[h].length - 1] += lines[i]\n        continue\n      }\n    }\n\n    const posColon = lines[i].indexOf(':')\n    if (\n      posColon === -1 ||\n      posColon === 0\n    ) {\n      return\n    }\n    m = RE_HDR.exec(lines[i])\n    h = m[1].toLowerCase()\n    this.header[h] = this.header[h] || []\n    this.header[h].push((m[2] || ''))\n    if (++this.npairs === this.maxHeaderPairs) { break }\n  }\n}\n\nmodule.exports = HeaderParser\n", "'use strict'\n\nconst WritableStream = require('node:stream').Writable\nconst inherits = require('node:util').inherits\n\nconst StreamSearch = require('../../streamsearch/sbmh')\n\nconst PartStream = require('./PartStream')\nconst HeaderParser = require('./HeaderParser')\n\nconst DASH = 45\nconst B_ONEDASH = Buffer.from('-')\nconst B_CRLF = Buffer.from('\\r\\n')\nconst EMPTY_FN = function () {}\n\nfunction Dicer (cfg) {\n  if (!(this instanceof Dicer)) { return new Dicer(cfg) }\n  WritableStream.call(this, cfg)\n\n  if (!cfg || (!cfg.headerFirst && typeof cfg.boundary !== 'string')) { throw new TypeError('Boundary required') }\n\n  if (typeof cfg.boundary === 'string') { this.setBoundary(cfg.boundary) } else { this._bparser = undefined }\n\n  this._headerFirst = cfg.headerFirst\n\n  this._dashes = 0\n  this._parts = 0\n  this._finished = false\n  this._realFinish = false\n  this._isPreamble = true\n  this._justMatched = false\n  this._firstWrite = true\n  this._inHeader = true\n  this._part = undefined\n  this._cb = undefined\n  this._ignoreData = false\n  this._partOpts = { highWaterMark: cfg.partHwm }\n  this._pause = false\n\n  const self = this\n  this._hparser = new HeaderParser(cfg)\n  this._hparser.on('header', function (header) {\n    self._inHeader = false\n    self._part.emit('header', header)\n  })\n}\ninherits(Dicer, WritableStream)\n\nDicer.prototype.emit = function (ev) {\n  if (ev === 'finish' && !this._realFinish) {\n    if (!this._finished) {\n      const self = this\n      process.nextTick(function () {\n        self.emit('error', new Error('Unexpected end of multipart data'))\n        if (self._part && !self._ignoreData) {\n          const type = (self._isPreamble ? 'Preamble' : 'Part')\n          self._part.emit('error', new Error(type + ' terminated early due to unexpected end of multipart data'))\n          self._part.push(null)\n          process.nextTick(function () {\n            self._realFinish = true\n            self.emit('finish')\n            self._realFinish = false\n          })\n          return\n        }\n        self._realFinish = true\n        self.emit('finish')\n        self._realFinish = false\n      })\n    }\n  } else { WritableStream.prototype.emit.apply(this, arguments) }\n}\n\nDicer.prototype._write = function (data, encoding, cb) {\n  // ignore unexpected data (e.g. extra trailer data after finished)\n  if (!this._hparser && !this._bparser) { return cb() }\n\n  if (this._headerFirst && this._isPreamble) {\n    if (!this._part) {\n      this._part = new PartStream(this._partOpts)\n      if (this.listenerCount('preamble') !== 0) { this.emit('preamble', this._part) } else { this._ignore() }\n    }\n    const r = this._hparser.push(data)\n    if (!this._inHeader && r !== undefined && r < data.length) { data = data.slice(r) } else { return cb() }\n  }\n\n  // allows for \"easier\" testing\n  if (this._firstWrite) {\n    this._bparser.push(B_CRLF)\n    this._firstWrite = false\n  }\n\n  this._bparser.push(data)\n\n  if (this._pause) { this._cb = cb } else { cb() }\n}\n\nDicer.prototype.reset = function () {\n  this._part = undefined\n  this._bparser = undefined\n  this._hparser = undefined\n}\n\nDicer.prototype.setBoundary = function (boundary) {\n  const self = this\n  this._bparser = new StreamSearch('\\r\\n--' + boundary)\n  this._bparser.on('info', function (isMatch, data, start, end) {\n    self._oninfo(isMatch, data, start, end)\n  })\n}\n\nDicer.prototype._ignore = function () {\n  if (this._part && !this._ignoreData) {\n    this._ignoreData = true\n    this._part.on('error', EMPTY_FN)\n    // we must perform some kind of read on the stream even though we are\n    // ignoring the data, otherwise node's Readable stream will not emit 'end'\n    // after pushing null to the stream\n    this._part.resume()\n  }\n}\n\nDicer.prototype._oninfo = function (isMatch, data, start, end) {\n  let buf; const self = this; let i = 0; let r; let shouldWriteMore = true\n\n  if (!this._part && this._justMatched && data) {\n    while (this._dashes < 2 && (start + i) < end) {\n      if (data[start + i] === DASH) {\n        ++i\n        ++this._dashes\n      } else {\n        if (this._dashes) { buf = B_ONEDASH }\n        this._dashes = 0\n        break\n      }\n    }\n    if (this._dashes === 2) {\n      if ((start + i) < end && this.listenerCount('trailer') !== 0) { this.emit('trailer', data.slice(start + i, end)) }\n      this.reset()\n      this._finished = true\n      // no more parts will be added\n      if (self._parts === 0) {\n        self._realFinish = true\n        self.emit('finish')\n        self._realFinish = false\n      }\n    }\n    if (this._dashes) { return }\n  }\n  if (this._justMatched) { this._justMatched = false }\n  if (!this._part) {\n    this._part = new PartStream(this._partOpts)\n    this._part._read = function (n) {\n      self._unpause()\n    }\n    if (this._isPreamble && this.listenerCount('preamble') !== 0) {\n      this.emit('preamble', this._part)\n    } else if (this._isPreamble !== true && this.listenerCount('part') !== 0) {\n      this.emit('part', this._part)\n    } else {\n      this._ignore()\n    }\n    if (!this._isPreamble) { this._inHeader = true }\n  }\n  if (data && start < end && !this._ignoreData) {\n    if (this._isPreamble || !this._inHeader) {\n      if (buf) { shouldWriteMore = this._part.push(buf) }\n      shouldWriteMore = this._part.push(data.slice(start, end))\n      if (!shouldWriteMore) { this._pause = true }\n    } else if (!this._isPreamble && this._inHeader) {\n      if (buf) { this._hparser.push(buf) }\n      r = this._hparser.push(data.slice(start, end))\n      if (!this._inHeader && r !== undefined && r < end) { this._oninfo(false, data, start + r, end) }\n    }\n  }\n  if (isMatch) {\n    this._hparser.reset()\n    if (this._isPreamble) { this._isPreamble = false } else {\n      if (start !== end) {\n        ++this._parts\n        this._part.on('end', function () {\n          if (--self._parts === 0) {\n            if (self._finished) {\n              self._realFinish = true\n              self.emit('finish')\n              self._realFinish = false\n            } else {\n              self._unpause()\n            }\n          }\n        })\n      }\n    }\n    this._part.push(null)\n    this._part = undefined\n    this._ignoreData = false\n    this._justMatched = true\n    this._dashes = 0\n  }\n}\n\nDicer.prototype._unpause = function () {\n  if (!this._pause) { return }\n\n  this._pause = false\n  if (this._cb) {\n    const cb = this._cb\n    this._cb = undefined\n    cb()\n  }\n}\n\nmodule.exports = Dicer\n", "'use strict'\n\n// Node has always utf-8\nconst utf8Decoder = new TextDecoder('utf-8')\nconst textDecoders = new Map([\n  ['utf-8', utf8Decoder],\n  ['utf8', utf8Decoder]\n])\n\nfunction getDecoder (charset) {\n  let lc\n  while (true) {\n    switch (charset) {\n      case 'utf-8':\n      case 'utf8':\n        return decoders.utf8\n      case 'latin1':\n      case 'ascii': // TODO: Make these a separate, strict decoder?\n      case 'us-ascii':\n      case 'iso-8859-1':\n      case 'iso8859-1':\n      case 'iso88591':\n      case 'iso_8859-1':\n      case 'windows-1252':\n      case 'iso_8859-1:1987':\n      case 'cp1252':\n      case 'x-cp1252':\n        return decoders.latin1\n      case 'utf16le':\n      case 'utf-16le':\n      case 'ucs2':\n      case 'ucs-2':\n        return decoders.utf16le\n      case 'base64':\n        return decoders.base64\n      default:\n        if (lc === undefined) {\n          lc = true\n          charset = charset.toLowerCase()\n          continue\n        }\n        return decoders.other.bind(charset)\n    }\n  }\n}\n\nconst decoders = {\n  utf8: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.utf8Slice(0, data.length)\n  },\n\n  latin1: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      return data\n    }\n    return data.latin1Slice(0, data.length)\n  },\n\n  utf16le: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.ucs2Slice(0, data.length)\n  },\n\n  base64: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n    return data.base64Slice(0, data.length)\n  },\n\n  other: (data, sourceEncoding) => {\n    if (data.length === 0) {\n      return ''\n    }\n    if (typeof data === 'string') {\n      data = Buffer.from(data, sourceEncoding)\n    }\n\n    if (textDecoders.has(this.toString())) {\n      try {\n        return textDecoders.get(this).decode(data)\n      } catch {}\n    }\n    return typeof data === 'string'\n      ? data\n      : data.toString()\n  }\n}\n\nfunction decodeText (text, sourceEncoding, destEncoding) {\n  if (text) {\n    return getDecoder(destEncoding)(text, sourceEncoding)\n  }\n  return text\n}\n\nmodule.exports = decodeText\n", "/* eslint-disable object-property-newline */\n'use strict'\n\nconst decodeText = require('./decodeText')\n\nconst RE_ENCODED = /%[a-fA-F0-9][a-fA-F0-9]/g\n\nconst EncodedLookup = {\n  '%00': '\\x00', '%01': '\\x01', '%02': '\\x02', '%03': '\\x03', '%04': '\\x04',\n  '%05': '\\x05', '%06': '\\x06', '%07': '\\x07', '%08': '\\x08', '%09': '\\x09',\n  '%0a': '\\x0a', '%0A': '\\x0a', '%0b': '\\x0b', '%0B': '\\x0b', '%0c': '\\x0c',\n  '%0C': '\\x0c', '%0d': '\\x0d', '%0D': '\\x0d', '%0e': '\\x0e', '%0E': '\\x0e',\n  '%0f': '\\x0f', '%0F': '\\x0f', '%10': '\\x10', '%11': '\\x11', '%12': '\\x12',\n  '%13': '\\x13', '%14': '\\x14', '%15': '\\x15', '%16': '\\x16', '%17': '\\x17',\n  '%18': '\\x18', '%19': '\\x19', '%1a': '\\x1a', '%1A': '\\x1a', '%1b': '\\x1b',\n  '%1B': '\\x1b', '%1c': '\\x1c', '%1C': '\\x1c', '%1d': '\\x1d', '%1D': '\\x1d',\n  '%1e': '\\x1e', '%1E': '\\x1e', '%1f': '\\x1f', '%1F': '\\x1f', '%20': '\\x20',\n  '%21': '\\x21', '%22': '\\x22', '%23': '\\x23', '%24': '\\x24', '%25': '\\x25',\n  '%26': '\\x26', '%27': '\\x27', '%28': '\\x28', '%29': '\\x29', '%2a': '\\x2a',\n  '%2A': '\\x2a', '%2b': '\\x2b', '%2B': '\\x2b', '%2c': '\\x2c', '%2C': '\\x2c',\n  '%2d': '\\x2d', '%2D': '\\x2d', '%2e': '\\x2e', '%2E': '\\x2e', '%2f': '\\x2f',\n  '%2F': '\\x2f', '%30': '\\x30', '%31': '\\x31', '%32': '\\x32', '%33': '\\x33',\n  '%34': '\\x34', '%35': '\\x35', '%36': '\\x36', '%37': '\\x37', '%38': '\\x38',\n  '%39': '\\x39', '%3a': '\\x3a', '%3A': '\\x3a', '%3b': '\\x3b', '%3B': '\\x3b',\n  '%3c': '\\x3c', '%3C': '\\x3c', '%3d': '\\x3d', '%3D': '\\x3d', '%3e': '\\x3e',\n  '%3E': '\\x3e', '%3f': '\\x3f', '%3F': '\\x3f', '%40': '\\x40', '%41': '\\x41',\n  '%42': '\\x42', '%43': '\\x43', '%44': '\\x44', '%45': '\\x45', '%46': '\\x46',\n  '%47': '\\x47', '%48': '\\x48', '%49': '\\x49', '%4a': '\\x4a', '%4A': '\\x4a',\n  '%4b': '\\x4b', '%4B': '\\x4b', '%4c': '\\x4c', '%4C': '\\x4c', '%4d': '\\x4d',\n  '%4D': '\\x4d', '%4e': '\\x4e', '%4E': '\\x4e', '%4f': '\\x4f', '%4F': '\\x4f',\n  '%50': '\\x50', '%51': '\\x51', '%52': '\\x52', '%53': '\\x53', '%54': '\\x54',\n  '%55': '\\x55', '%56': '\\x56', '%57': '\\x57', '%58': '\\x58', '%59': '\\x59',\n  '%5a': '\\x5a', '%5A': '\\x5a', '%5b': '\\x5b', '%5B': '\\x5b', '%5c': '\\x5c',\n  '%5C': '\\x5c', '%5d': '\\x5d', '%5D': '\\x5d', '%5e': '\\x5e', '%5E': '\\x5e',\n  '%5f': '\\x5f', '%5F': '\\x5f', '%60': '\\x60', '%61': '\\x61', '%62': '\\x62',\n  '%63': '\\x63', '%64': '\\x64', '%65': '\\x65', '%66': '\\x66', '%67': '\\x67',\n  '%68': '\\x68', '%69': '\\x69', '%6a': '\\x6a', '%6A': '\\x6a', '%6b': '\\x6b',\n  '%6B': '\\x6b', '%6c': '\\x6c', '%6C': '\\x6c', '%6d': '\\x6d', '%6D': '\\x6d',\n  '%6e': '\\x6e', '%6E': '\\x6e', '%6f': '\\x6f', '%6F': '\\x6f', '%70': '\\x70',\n  '%71': '\\x71', '%72': '\\x72', '%73': '\\x73', '%74': '\\x74', '%75': '\\x75',\n  '%76': '\\x76', '%77': '\\x77', '%78': '\\x78', '%79': '\\x79', '%7a': '\\x7a',\n  '%7A': '\\x7a', '%7b': '\\x7b', '%7B': '\\x7b', '%7c': '\\x7c', '%7C': '\\x7c',\n  '%7d': '\\x7d', '%7D': '\\x7d', '%7e': '\\x7e', '%7E': '\\x7e', '%7f': '\\x7f',\n  '%7F': '\\x7f', '%80': '\\x80', '%81': '\\x81', '%82': '\\x82', '%83': '\\x83',\n  '%84': '\\x84', '%85': '\\x85', '%86': '\\x86', '%87': '\\x87', '%88': '\\x88',\n  '%89': '\\x89', '%8a': '\\x8a', '%8A': '\\x8a', '%8b': '\\x8b', '%8B': '\\x8b',\n  '%8c': '\\x8c', '%8C': '\\x8c', '%8d': '\\x8d', '%8D': '\\x8d', '%8e': '\\x8e',\n  '%8E': '\\x8e', '%8f': '\\x8f', '%8F': '\\x8f', '%90': '\\x90', '%91': '\\x91',\n  '%92': '\\x92', '%93': '\\x93', '%94': '\\x94', '%95': '\\x95', '%96': '\\x96',\n  '%97': '\\x97', '%98': '\\x98', '%99': '\\x99', '%9a': '\\x9a', '%9A': '\\x9a',\n  '%9b': '\\x9b', '%9B': '\\x9b', '%9c': '\\x9c', '%9C': '\\x9c', '%9d': '\\x9d',\n  '%9D': '\\x9d', '%9e': '\\x9e', '%9E': '\\x9e', '%9f': '\\x9f', '%9F': '\\x9f',\n  '%a0': '\\xa0', '%A0': '\\xa0', '%a1': '\\xa1', '%A1': '\\xa1', '%a2': '\\xa2',\n  '%A2': '\\xa2', '%a3': '\\xa3', '%A3': '\\xa3', '%a4': '\\xa4', '%A4': '\\xa4',\n  '%a5': '\\xa5', '%A5': '\\xa5', '%a6': '\\xa6', '%A6': '\\xa6', '%a7': '\\xa7',\n  '%A7': '\\xa7', '%a8': '\\xa8', '%A8': '\\xa8', '%a9': '\\xa9', '%A9': '\\xa9',\n  '%aa': '\\xaa', '%Aa': '\\xaa', '%aA': '\\xaa', '%AA': '\\xaa', '%ab': '\\xab',\n  '%Ab': '\\xab', '%aB': '\\xab', '%AB': '\\xab', '%ac': '\\xac', '%Ac': '\\xac',\n  '%aC': '\\xac', '%AC': '\\xac', '%ad': '\\xad', '%Ad': '\\xad', '%aD': '\\xad',\n  '%AD': '\\xad', '%ae': '\\xae', '%Ae': '\\xae', '%aE': '\\xae', '%AE': '\\xae',\n  '%af': '\\xaf', '%Af': '\\xaf', '%aF': '\\xaf', '%AF': '\\xaf', '%b0': '\\xb0',\n  '%B0': '\\xb0', '%b1': '\\xb1', '%B1': '\\xb1', '%b2': '\\xb2', '%B2': '\\xb2',\n  '%b3': '\\xb3', '%B3': '\\xb3', '%b4': '\\xb4', '%B4': '\\xb4', '%b5': '\\xb5',\n  '%B5': '\\xb5', '%b6': '\\xb6', '%B6': '\\xb6', '%b7': '\\xb7', '%B7': '\\xb7',\n  '%b8': '\\xb8', '%B8': '\\xb8', '%b9': '\\xb9', '%B9': '\\xb9', '%ba': '\\xba',\n  '%Ba': '\\xba', '%bA': '\\xba', '%BA': '\\xba', '%bb': '\\xbb', '%Bb': '\\xbb',\n  '%bB': '\\xbb', '%BB': '\\xbb', '%bc': '\\xbc', '%Bc': '\\xbc', '%bC': '\\xbc',\n  '%BC': '\\xbc', '%bd': '\\xbd', '%Bd': '\\xbd', '%bD': '\\xbd', '%BD': '\\xbd',\n  '%be': '\\xbe', '%Be': '\\xbe', '%bE': '\\xbe', '%BE': '\\xbe', '%bf': '\\xbf',\n  '%Bf': '\\xbf', '%bF': '\\xbf', '%BF': '\\xbf', '%c0': '\\xc0', '%C0': '\\xc0',\n  '%c1': '\\xc1', '%C1': '\\xc1', '%c2': '\\xc2', '%C2': '\\xc2', '%c3': '\\xc3',\n  '%C3': '\\xc3', '%c4': '\\xc4', '%C4': '\\xc4', '%c5': '\\xc5', '%C5': '\\xc5',\n  '%c6': '\\xc6', '%C6': '\\xc6', '%c7': '\\xc7', '%C7': '\\xc7', '%c8': '\\xc8',\n  '%C8': '\\xc8', '%c9': '\\xc9', '%C9': '\\xc9', '%ca': '\\xca', '%Ca': '\\xca',\n  '%cA': '\\xca', '%CA': '\\xca', '%cb': '\\xcb', '%Cb': '\\xcb', '%cB': '\\xcb',\n  '%CB': '\\xcb', '%cc': '\\xcc', '%Cc': '\\xcc', '%cC': '\\xcc', '%CC': '\\xcc',\n  '%cd': '\\xcd', '%Cd': '\\xcd', '%cD': '\\xcd', '%CD': '\\xcd', '%ce': '\\xce',\n  '%Ce': '\\xce', '%cE': '\\xce', '%CE': '\\xce', '%cf': '\\xcf', '%Cf': '\\xcf',\n  '%cF': '\\xcf', '%CF': '\\xcf', '%d0': '\\xd0', '%D0': '\\xd0', '%d1': '\\xd1',\n  '%D1': '\\xd1', '%d2': '\\xd2', '%D2': '\\xd2', '%d3': '\\xd3', '%D3': '\\xd3',\n  '%d4': '\\xd4', '%D4': '\\xd4', '%d5': '\\xd5', '%D5': '\\xd5', '%d6': '\\xd6',\n  '%D6': '\\xd6', '%d7': '\\xd7', '%D7': '\\xd7', '%d8': '\\xd8', '%D8': '\\xd8',\n  '%d9': '\\xd9', '%D9': '\\xd9', '%da': '\\xda', '%Da': '\\xda', '%dA': '\\xda',\n  '%DA': '\\xda', '%db': '\\xdb', '%Db': '\\xdb', '%dB': '\\xdb', '%DB': '\\xdb',\n  '%dc': '\\xdc', '%Dc': '\\xdc', '%dC': '\\xdc', '%DC': '\\xdc', '%dd': '\\xdd',\n  '%Dd': '\\xdd', '%dD': '\\xdd', '%DD': '\\xdd', '%de': '\\xde', '%De': '\\xde',\n  '%dE': '\\xde', '%DE': '\\xde', '%df': '\\xdf', '%Df': '\\xdf', '%dF': '\\xdf',\n  '%DF': '\\xdf', '%e0': '\\xe0', '%E0': '\\xe0', '%e1': '\\xe1', '%E1': '\\xe1',\n  '%e2': '\\xe2', '%E2': '\\xe2', '%e3': '\\xe3', '%E3': '\\xe3', '%e4': '\\xe4',\n  '%E4': '\\xe4', '%e5': '\\xe5', '%E5': '\\xe5', '%e6': '\\xe6', '%E6': '\\xe6',\n  '%e7': '\\xe7', '%E7': '\\xe7', '%e8': '\\xe8', '%E8': '\\xe8', '%e9': '\\xe9',\n  '%E9': '\\xe9', '%ea': '\\xea', '%Ea': '\\xea', '%eA': '\\xea', '%EA': '\\xea',\n  '%eb': '\\xeb', '%Eb': '\\xeb', '%eB': '\\xeb', '%EB': '\\xeb', '%ec': '\\xec',\n  '%Ec': '\\xec', '%eC': '\\xec', '%EC': '\\xec', '%ed': '\\xed', '%Ed': '\\xed',\n  '%eD': '\\xed', '%ED': '\\xed', '%ee': '\\xee', '%Ee': '\\xee', '%eE': '\\xee',\n  '%EE': '\\xee', '%ef': '\\xef', '%Ef': '\\xef', '%eF': '\\xef', '%EF': '\\xef',\n  '%f0': '\\xf0', '%F0': '\\xf0', '%f1': '\\xf1', '%F1': '\\xf1', '%f2': '\\xf2',\n  '%F2': '\\xf2', '%f3': '\\xf3', '%F3': '\\xf3', '%f4': '\\xf4', '%F4': '\\xf4',\n  '%f5': '\\xf5', '%F5': '\\xf5', '%f6': '\\xf6', '%F6': '\\xf6', '%f7': '\\xf7',\n  '%F7': '\\xf7', '%f8': '\\xf8', '%F8': '\\xf8', '%f9': '\\xf9', '%F9': '\\xf9',\n  '%fa': '\\xfa', '%Fa': '\\xfa', '%fA': '\\xfa', '%FA': '\\xfa', '%fb': '\\xfb',\n  '%Fb': '\\xfb', '%fB': '\\xfb', '%FB': '\\xfb', '%fc': '\\xfc', '%Fc': '\\xfc',\n  '%fC': '\\xfc', '%FC': '\\xfc', '%fd': '\\xfd', '%Fd': '\\xfd', '%fD': '\\xfd',\n  '%FD': '\\xfd', '%fe': '\\xfe', '%Fe': '\\xfe', '%fE': '\\xfe', '%FE': '\\xfe',\n  '%ff': '\\xff', '%Ff': '\\xff', '%fF': '\\xff', '%FF': '\\xff'\n}\n\nfunction encodedReplacer (match) {\n  return EncodedLookup[match]\n}\n\nconst STATE_KEY = 0\nconst STATE_VALUE = 1\nconst STATE_CHARSET = 2\nconst STATE_LANG = 3\n\nfunction parseParams (str) {\n  const res = []\n  let state = STATE_KEY\n  let charset = ''\n  let inquote = false\n  let escaping = false\n  let p = 0\n  let tmp = ''\n  const len = str.length\n\n  for (var i = 0; i < len; ++i) { // eslint-disable-line no-var\n    const char = str[i]\n    if (char === '\\\\' && inquote) {\n      if (escaping) { escaping = false } else {\n        escaping = true\n        continue\n      }\n    } else if (char === '\"') {\n      if (!escaping) {\n        if (inquote) {\n          inquote = false\n          state = STATE_KEY\n        } else { inquote = true }\n        continue\n      } else { escaping = false }\n    } else {\n      if (escaping && inquote) { tmp += '\\\\' }\n      escaping = false\n      if ((state === STATE_CHARSET || state === STATE_LANG) && char === \"'\") {\n        if (state === STATE_CHARSET) {\n          state = STATE_LANG\n          charset = tmp.substring(1)\n        } else { state = STATE_VALUE }\n        tmp = ''\n        continue\n      } else if (state === STATE_KEY &&\n        (char === '*' || char === '=') &&\n        res.length) {\n        state = char === '*'\n          ? STATE_CHARSET\n          : STATE_VALUE\n        res[p] = [tmp, undefined]\n        tmp = ''\n        continue\n      } else if (!inquote && char === ';') {\n        state = STATE_KEY\n        if (charset) {\n          if (tmp.length) {\n            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),\n              'binary',\n              charset)\n          }\n          charset = ''\n        } else if (tmp.length) {\n          tmp = decodeText(tmp, 'binary', 'utf8')\n        }\n        if (res[p] === undefined) { res[p] = tmp } else { res[p][1] = tmp }\n        tmp = ''\n        ++p\n        continue\n      } else if (!inquote && (char === ' ' || char === '\\t')) { continue }\n    }\n    tmp += char\n  }\n  if (charset && tmp.length) {\n    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),\n      'binary',\n      charset)\n  } else if (tmp) {\n    tmp = decodeText(tmp, 'binary', 'utf8')\n  }\n\n  if (res[p] === undefined) {\n    if (tmp) { res[p] = tmp }\n  } else { res[p][1] = tmp }\n\n  return res\n}\n\nmodule.exports = parseParams\n", "'use strict'\n\nmodule.exports = function basename (path) {\n  if (typeof path !== 'string') { return '' }\n  for (var i = path.length - 1; i >= 0; --i) { // eslint-disable-line no-var\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n      case 0x5C: // '\\'\n        path = path.slice(i + 1)\n        return (path === '..' || path === '.' ? '' : path)\n    }\n  }\n  return (path === '..' || path === '.' ? '' : path)\n}\n", "'use strict'\n\n// TODO:\n//  * support 1 nested multipart level\n//    (see second multipart example here:\n//     http://www.w3.org/TR/html401/interact/forms.html#didx-multipartform-data)\n//  * support limits.fieldNameSize\n//     -- this will require modifications to utils.parseParams\n\nconst { Readable } = require('node:stream')\nconst { inherits } = require('node:util')\n\nconst Dicer = require('../../deps/dicer/lib/Dicer')\n\nconst parseParams = require('../utils/parseParams')\nconst decodeText = require('../utils/decodeText')\nconst basename = require('../utils/basename')\nconst getLimit = require('../utils/getLimit')\n\nconst RE_BOUNDARY = /^boundary$/i\nconst RE_FIELD = /^form-data$/i\nconst RE_CHARSET = /^charset$/i\nconst RE_FILENAME = /^filename$/i\nconst RE_NAME = /^name$/i\n\nMultipart.detect = /^multipart\\/form-data/i\nfunction Multipart (boy, cfg) {\n  let i\n  let len\n  const self = this\n  let boundary\n  const limits = cfg.limits\n  const isPartAFile = cfg.isPartAFile || ((fieldName, contentType, fileName) => (contentType === 'application/octet-stream' || fileName !== undefined))\n  const parsedConType = cfg.parsedConType || []\n  const defCharset = cfg.defCharset || 'utf8'\n  const preservePath = cfg.preservePath\n  const fileOpts = { highWaterMark: cfg.fileHwm }\n\n  for (i = 0, len = parsedConType.length; i < len; ++i) {\n    if (Array.isArray(parsedConType[i]) &&\n      RE_BOUNDARY.test(parsedConType[i][0])) {\n      boundary = parsedConType[i][1]\n      break\n    }\n  }\n\n  function checkFinished () {\n    if (nends === 0 && finished && !boy._done) {\n      finished = false\n      self.end()\n    }\n  }\n\n  if (typeof boundary !== 'string') { throw new Error('Multipart: Boundary not found') }\n\n  const fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)\n  const fileSizeLimit = getLimit(limits, 'fileSize', Infinity)\n  const filesLimit = getLimit(limits, 'files', Infinity)\n  const fieldsLimit = getLimit(limits, 'fields', Infinity)\n  const partsLimit = getLimit(limits, 'parts', Infinity)\n  const headerPairsLimit = getLimit(limits, 'headerPairs', 2000)\n  const headerSizeLimit = getLimit(limits, 'headerSize', 80 * 1024)\n\n  let nfiles = 0\n  let nfields = 0\n  let nends = 0\n  let curFile\n  let curField\n  let finished = false\n\n  this._needDrain = false\n  this._pause = false\n  this._cb = undefined\n  this._nparts = 0\n  this._boy = boy\n\n  const parserCfg = {\n    boundary,\n    maxHeaderPairs: headerPairsLimit,\n    maxHeaderSize: headerSizeLimit,\n    partHwm: fileOpts.highWaterMark,\n    highWaterMark: cfg.highWaterMark\n  }\n\n  this.parser = new Dicer(parserCfg)\n  this.parser.on('drain', function () {\n    self._needDrain = false\n    if (self._cb && !self._pause) {\n      const cb = self._cb\n      self._cb = undefined\n      cb()\n    }\n  }).on('part', function onPart (part) {\n    if (++self._nparts > partsLimit) {\n      self.parser.removeListener('part', onPart)\n      self.parser.on('part', skipPart)\n      boy.hitPartsLimit = true\n      boy.emit('partsLimit')\n      return skipPart(part)\n    }\n\n    // hack because streams2 _always_ doesn't emit 'end' until nextTick, so let\n    // us emit 'end' early since we know the part has ended if we are already\n    // seeing the next part\n    if (curField) {\n      const field = curField\n      field.emit('end')\n      field.removeAllListeners('end')\n    }\n\n    part.on('header', function (header) {\n      let contype\n      let fieldname\n      let parsed\n      let charset\n      let encoding\n      let filename\n      let nsize = 0\n\n      if (header['content-type']) {\n        parsed = parseParams(header['content-type'][0])\n        if (parsed[0]) {\n          contype = parsed[0].toLowerCase()\n          for (i = 0, len = parsed.length; i < len; ++i) {\n            if (RE_CHARSET.test(parsed[i][0])) {\n              charset = parsed[i][1].toLowerCase()\n              break\n            }\n          }\n        }\n      }\n\n      if (contype === undefined) { contype = 'text/plain' }\n      if (charset === undefined) { charset = defCharset }\n\n      if (header['content-disposition']) {\n        parsed = parseParams(header['content-disposition'][0])\n        if (!RE_FIELD.test(parsed[0])) { return skipPart(part) }\n        for (i = 0, len = parsed.length; i < len; ++i) {\n          if (RE_NAME.test(parsed[i][0])) {\n            fieldname = parsed[i][1]\n          } else if (RE_FILENAME.test(parsed[i][0])) {\n            filename = parsed[i][1]\n            if (!preservePath) { filename = basename(filename) }\n          }\n        }\n      } else { return skipPart(part) }\n\n      if (header['content-transfer-encoding']) { encoding = header['content-transfer-encoding'][0].toLowerCase() } else { encoding = '7bit' }\n\n      let onData,\n        onEnd\n\n      if (isPartAFile(fieldname, contype, filename)) {\n        // file/binary field\n        if (nfiles === filesLimit) {\n          if (!boy.hitFilesLimit) {\n            boy.hitFilesLimit = true\n            boy.emit('filesLimit')\n          }\n          return skipPart(part)\n        }\n\n        ++nfiles\n\n        if (boy.listenerCount('file') === 0) {\n          self.parser._ignore()\n          return\n        }\n\n        ++nends\n        const file = new FileStream(fileOpts)\n        curFile = file\n        file.on('end', function () {\n          --nends\n          self._pause = false\n          checkFinished()\n          if (self._cb && !self._needDrain) {\n            const cb = self._cb\n            self._cb = undefined\n            cb()\n          }\n        })\n        file._read = function (n) {\n          if (!self._pause) { return }\n          self._pause = false\n          if (self._cb && !self._needDrain) {\n            const cb = self._cb\n            self._cb = undefined\n            cb()\n          }\n        }\n        boy.emit('file', fieldname, file, filename, encoding, contype)\n\n        onData = function (data) {\n          if ((nsize += data.length) > fileSizeLimit) {\n            const extralen = fileSizeLimit - nsize + data.length\n            if (extralen > 0) { file.push(data.slice(0, extralen)) }\n            file.truncated = true\n            file.bytesRead = fileSizeLimit\n            part.removeAllListeners('data')\n            file.emit('limit')\n            return\n          } else if (!file.push(data)) { self._pause = true }\n\n          file.bytesRead = nsize\n        }\n\n        onEnd = function () {\n          curFile = undefined\n          file.push(null)\n        }\n      } else {\n        // non-file field\n        if (nfields === fieldsLimit) {\n          if (!boy.hitFieldsLimit) {\n            boy.hitFieldsLimit = true\n            boy.emit('fieldsLimit')\n          }\n          return skipPart(part)\n        }\n\n        ++nfields\n        ++nends\n        let buffer = ''\n        let truncated = false\n        curField = part\n\n        onData = function (data) {\n          if ((nsize += data.length) > fieldSizeLimit) {\n            const extralen = (fieldSizeLimit - (nsize - data.length))\n            buffer += data.toString('binary', 0, extralen)\n            truncated = true\n            part.removeAllListeners('data')\n          } else { buffer += data.toString('binary') }\n        }\n\n        onEnd = function () {\n          curField = undefined\n          if (buffer.length) { buffer = decodeText(buffer, 'binary', charset) }\n          boy.emit('field', fieldname, buffer, false, truncated, encoding, contype)\n          --nends\n          checkFinished()\n        }\n      }\n\n      /* As of node@2efe4ab761666 (v0.10.29+/v0.11.14+), busboy had become\n         broken. Streams2/streams3 is a huge black box of confusion, but\n         somehow overriding the sync state seems to fix things again (and still\n         seems to work for previous node versions).\n      */\n      part._readableState.sync = false\n\n      part.on('data', onData)\n      part.on('end', onEnd)\n    }).on('error', function (err) {\n      if (curFile) { curFile.emit('error', err) }\n    })\n  }).on('error', function (err) {\n    boy.emit('error', err)\n  }).on('finish', function () {\n    finished = true\n    checkFinished()\n  })\n}\n\nMultipart.prototype.write = function (chunk, cb) {\n  const r = this.parser.write(chunk)\n  if (r && !this._pause) {\n    cb()\n  } else {\n    this._needDrain = !r\n    this._cb = cb\n  }\n}\n\nMultipart.prototype.end = function () {\n  const self = this\n\n  if (self.parser.writable) {\n    self.parser.end()\n  } else if (!self._boy._done) {\n    process.nextTick(function () {\n      self._boy._done = true\n      self._boy.emit('finish')\n    })\n  }\n}\n\nfunction skipPart (part) {\n  part.resume()\n}\n\nfunction FileStream (opts) {\n  Readable.call(this, opts)\n\n  this.bytesRead = 0\n\n  this.truncated = false\n}\n\ninherits(FileStream, Readable)\n\nFileStream.prototype._read = function (n) {}\n\nmodule.exports = Multipart\n", "'use strict'\n\nconst RE_PLUS = /\\+/g\n\nconst HEX = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n]\n\nfunction Decoder () {\n  this.buffer = undefined\n}\nDecoder.prototype.write = function (str) {\n  // Replace '+' with ' ' before decoding\n  str = str.replace(RE_PLUS, ' ')\n  let res = ''\n  let i = 0; let p = 0; const len = str.length\n  for (; i < len; ++i) {\n    if (this.buffer !== undefined) {\n      if (!HEX[str.charCodeAt(i)]) {\n        res += '%' + this.buffer\n        this.buffer = undefined\n        --i // retry character\n      } else {\n        this.buffer += str[i]\n        ++p\n        if (this.buffer.length === 2) {\n          res += String.fromCharCode(parseInt(this.buffer, 16))\n          this.buffer = undefined\n        }\n      }\n    } else if (str[i] === '%') {\n      if (i > p) {\n        res += str.substring(p, i)\n        p = i\n      }\n      this.buffer = ''\n      ++p\n    }\n  }\n  if (p < len && this.buffer === undefined) { res += str.substring(p) }\n  return res\n}\nDecoder.prototype.reset = function () {\n  this.buffer = undefined\n}\n\nmodule.exports = Decoder\n", "'use strict'\n\nconst Decoder = require('../utils/Decoder')\nconst decodeText = require('../utils/decodeText')\nconst getLimit = require('../utils/getLimit')\n\nconst RE_CHARSET = /^charset$/i\n\nUrlEncoded.detect = /^application\\/x-www-form-urlencoded/i\nfunction UrlEncoded (boy, cfg) {\n  const limits = cfg.limits\n  const parsedConType = cfg.parsedConType\n  this.boy = boy\n\n  this.fieldSizeLimit = getLimit(limits, 'fieldSize', 1 * 1024 * 1024)\n  this.fieldNameSizeLimit = getLimit(limits, 'fieldNameSize', 100)\n  this.fieldsLimit = getLimit(limits, 'fields', Infinity)\n\n  let charset\n  for (var i = 0, len = parsedConType.length; i < len; ++i) { // eslint-disable-line no-var\n    if (Array.isArray(parsedConType[i]) &&\n        RE_CHARSET.test(parsedConType[i][0])) {\n      charset = parsedConType[i][1].toLowerCase()\n      break\n    }\n  }\n\n  if (charset === undefined) { charset = cfg.defCharset || 'utf8' }\n\n  this.decoder = new Decoder()\n  this.charset = charset\n  this._fields = 0\n  this._state = 'key'\n  this._checkingBytes = true\n  this._bytesKey = 0\n  this._bytesVal = 0\n  this._key = ''\n  this._val = ''\n  this._keyTrunc = false\n  this._valTrunc = false\n  this._hitLimit = false\n}\n\nUrlEncoded.prototype.write = function (data, cb) {\n  if (this._fields === this.fieldsLimit) {\n    if (!this.boy.hitFieldsLimit) {\n      this.boy.hitFieldsLimit = true\n      this.boy.emit('fieldsLimit')\n    }\n    return cb()\n  }\n\n  let idxeq; let idxamp; let i; let p = 0; const len = data.length\n\n  while (p < len) {\n    if (this._state === 'key') {\n      idxeq = idxamp = undefined\n      for (i = p; i < len; ++i) {\n        if (!this._checkingBytes) { ++p }\n        if (data[i] === 0x3D/* = */) {\n          idxeq = i\n          break\n        } else if (data[i] === 0x26/* & */) {\n          idxamp = i\n          break\n        }\n        if (this._checkingBytes && this._bytesKey === this.fieldNameSizeLimit) {\n          this._hitLimit = true\n          break\n        } else if (this._checkingBytes) { ++this._bytesKey }\n      }\n\n      if (idxeq !== undefined) {\n        // key with assignment\n        if (idxeq > p) { this._key += this.decoder.write(data.toString('binary', p, idxeq)) }\n        this._state = 'val'\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._val = ''\n        this._bytesVal = 0\n        this._valTrunc = false\n        this.decoder.reset()\n\n        p = idxeq + 1\n      } else if (idxamp !== undefined) {\n        // key with no assignment\n        ++this._fields\n        let key; const keyTrunc = this._keyTrunc\n        if (idxamp > p) { key = (this._key += this.decoder.write(data.toString('binary', p, idxamp))) } else { key = this._key }\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._key = ''\n        this._bytesKey = 0\n        this._keyTrunc = false\n        this.decoder.reset()\n\n        if (key.length) {\n          this.boy.emit('field', decodeText(key, 'binary', this.charset),\n            '',\n            keyTrunc,\n            false)\n        }\n\n        p = idxamp + 1\n        if (this._fields === this.fieldsLimit) { return cb() }\n      } else if (this._hitLimit) {\n        // we may not have hit the actual limit if there are encoded bytes...\n        if (i > p) { this._key += this.decoder.write(data.toString('binary', p, i)) }\n        p = i\n        if ((this._bytesKey = this._key.length) === this.fieldNameSizeLimit) {\n          // yep, we actually did hit the limit\n          this._checkingBytes = false\n          this._keyTrunc = true\n        }\n      } else {\n        if (p < len) { this._key += this.decoder.write(data.toString('binary', p)) }\n        p = len\n      }\n    } else {\n      idxamp = undefined\n      for (i = p; i < len; ++i) {\n        if (!this._checkingBytes) { ++p }\n        if (data[i] === 0x26/* & */) {\n          idxamp = i\n          break\n        }\n        if (this._checkingBytes && this._bytesVal === this.fieldSizeLimit) {\n          this._hitLimit = true\n          break\n        } else if (this._checkingBytes) { ++this._bytesVal }\n      }\n\n      if (idxamp !== undefined) {\n        ++this._fields\n        if (idxamp > p) { this._val += this.decoder.write(data.toString('binary', p, idxamp)) }\n        this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n          decodeText(this._val, 'binary', this.charset),\n          this._keyTrunc,\n          this._valTrunc)\n        this._state = 'key'\n\n        this._hitLimit = false\n        this._checkingBytes = true\n        this._key = ''\n        this._bytesKey = 0\n        this._keyTrunc = false\n        this.decoder.reset()\n\n        p = idxamp + 1\n        if (this._fields === this.fieldsLimit) { return cb() }\n      } else if (this._hitLimit) {\n        // we may not have hit the actual limit if there are encoded bytes...\n        if (i > p) { this._val += this.decoder.write(data.toString('binary', p, i)) }\n        p = i\n        if ((this._val === '' && this.fieldSizeLimit === 0) ||\n            (this._bytesVal = this._val.length) === this.fieldSizeLimit) {\n          // yep, we actually did hit the limit\n          this._checkingBytes = false\n          this._valTrunc = true\n        }\n      } else {\n        if (p < len) { this._val += this.decoder.write(data.toString('binary', p)) }\n        p = len\n      }\n    }\n  }\n  cb()\n}\n\nUrlEncoded.prototype.end = function () {\n  if (this.boy._done) { return }\n\n  if (this._state === 'key' && this._key.length > 0) {\n    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n      '',\n      this._keyTrunc,\n      false)\n  } else if (this._state === 'val') {\n    this.boy.emit('field', decodeText(this._key, 'binary', this.charset),\n      decodeText(this._val, 'binary', this.charset),\n      this._keyTrunc,\n      this._valTrunc)\n  }\n  this.boy._done = true\n  this.boy.emit('finish')\n}\n\nmodule.exports = UrlEncoded\n", "'use strict'\n\nconst WritableStream = require('node:stream').Writable\nconst { inherits } = require('node:util')\nconst Dicer = require('../deps/dicer/lib/Dicer')\n\nconst MultipartParser = require('./types/multipart')\nconst UrlencodedParser = require('./types/urlencoded')\nconst parseParams = require('./utils/parseParams')\n\nfunction Busboy (opts) {\n  if (!(this instanceof Busboy)) { return new Busboy(opts) }\n\n  if (typeof opts !== 'object') {\n    throw new TypeError('Busboy expected an options-Object.')\n  }\n  if (typeof opts.headers !== 'object') {\n    throw new TypeError('Busboy expected an options-Object with headers-attribute.')\n  }\n  if (typeof opts.headers['content-type'] !== 'string') {\n    throw new TypeError('Missing Content-Type-header.')\n  }\n\n  const {\n    headers,\n    ...streamOptions\n  } = opts\n\n  this.opts = {\n    autoDestroy: false,\n    ...streamOptions\n  }\n  WritableStream.call(this, this.opts)\n\n  this._done = false\n  this._parser = this.getParserByHeaders(headers)\n  this._finished = false\n}\ninherits(Busboy, WritableStream)\n\nBusboy.prototype.emit = function (ev) {\n  if (ev === 'finish') {\n    if (!this._done) {\n      this._parser?.end()\n      return\n    } else if (this._finished) {\n      return\n    }\n    this._finished = true\n  }\n  WritableStream.prototype.emit.apply(this, arguments)\n}\n\nBusboy.prototype.getParserByHeaders = function (headers) {\n  const parsed = parseParams(headers['content-type'])\n\n  const cfg = {\n    defCharset: this.opts.defCharset,\n    fileHwm: this.opts.fileHwm,\n    headers,\n    highWaterMark: this.opts.highWaterMark,\n    isPartAFile: this.opts.isPartAFile,\n    limits: this.opts.limits,\n    parsedConType: parsed,\n    preservePath: this.opts.preservePath\n  }\n\n  if (MultipartParser.detect.test(parsed[0])) {\n    return new MultipartParser(this, cfg)\n  }\n  if (UrlencodedParser.detect.test(parsed[0])) {\n    return new UrlencodedParser(this, cfg)\n  }\n  throw new Error('Unsupported Content-Type.')\n}\n\nBusboy.prototype._write = function (chunk, encoding, cb) {\n  this._parser.write(chunk, cb)\n}\n\nmodule.exports = Busboy\nmodule.exports.default = Busboy\nmodule.exports.Busboy = Busboy\n\nmodule.exports.Dicer = Dicer\n", "'use strict'\n\nconst { MessageChannel, receiveMessageOnPort } = require('worker_threads')\n\nconst corsSafeListedMethods = ['GET', 'HEAD', 'POST']\nconst corsSafeListedMethodsSet = new Set(corsSafeListedMethods)\n\nconst nullBodyStatus = [101, 204, 205, 304]\n\nconst redirectStatus = [301, 302, 303, 307, 308]\nconst redirectStatusSet = new Set(redirectStatus)\n\n// https://fetch.spec.whatwg.org/#block-bad-port\nconst badPorts = [\n  '1', '7', '9', '11', '13', '15', '17', '19', '20', '21', '22', '23', '25', '37', '42', '43', '53', '69', '77', '79',\n  '87', '95', '101', '102', '103', '104', '109', '110', '111', '113', '115', '117', '119', '123', '135', '137',\n  '139', '143', '161', '179', '389', '427', '465', '512', '513', '514', '515', '526', '530', '531', '532',\n  '540', '548', '554', '556', '563', '587', '601', '636', '989', '990', '993', '995', '1719', '1720', '1723',\n  '2049', '3659', '4045', '5060', '5061', '6000', '6566', '6665', '6666', '6667', '6668', '6669', '6697',\n  '10080'\n]\n\nconst badPortsSet = new Set(badPorts)\n\n// https://w3c.github.io/webappsec-referrer-policy/#referrer-policies\nconst referrerPolicy = [\n  '',\n  'no-referrer',\n  'no-referrer-when-downgrade',\n  'same-origin',\n  'origin',\n  'strict-origin',\n  'origin-when-cross-origin',\n  'strict-origin-when-cross-origin',\n  'unsafe-url'\n]\nconst referrerPolicySet = new Set(referrerPolicy)\n\nconst requestRedirect = ['follow', 'manual', 'error']\n\nconst safeMethods = ['GET', 'HEAD', 'OPTIONS', 'TRACE']\nconst safeMethodsSet = new Set(safeMethods)\n\nconst requestMode = ['navigate', 'same-origin', 'no-cors', 'cors']\n\nconst requestCredentials = ['omit', 'same-origin', 'include']\n\nconst requestCache = [\n  'default',\n  'no-store',\n  'reload',\n  'no-cache',\n  'force-cache',\n  'only-if-cached'\n]\n\n// https://fetch.spec.whatwg.org/#request-body-header-name\nconst requestBodyHeader = [\n  'content-encoding',\n  'content-language',\n  'content-location',\n  'content-type',\n  // See https://github.com/nodejs/undici/issues/2021\n  // 'Content-Length' is a forbidden header name, which is typically\n  // removed in the Headers implementation. However, undici doesn't\n  // filter out headers, so we add it here.\n  'content-length'\n]\n\n// https://fetch.spec.whatwg.org/#enumdef-requestduplex\nconst requestDuplex = [\n  'half'\n]\n\n// http://fetch.spec.whatwg.org/#forbidden-method\nconst forbiddenMethods = ['CONNECT', 'TRACE', 'TRACK']\nconst forbiddenMethodsSet = new Set(forbiddenMethods)\n\nconst subresource = [\n  'audio',\n  'audioworklet',\n  'font',\n  'image',\n  'manifest',\n  'paintworklet',\n  'script',\n  'style',\n  'track',\n  'video',\n  'xslt',\n  ''\n]\nconst subresourceSet = new Set(subresource)\n\n/** @type {globalThis['DOMException']} */\nconst DOMException = globalThis.DOMException ?? (() => {\n  // DOMException was only made a global in Node v17.0.0,\n  // but fetch supports >= v16.8.\n  try {\n    atob('~')\n  } catch (err) {\n    return Object.getPrototypeOf(err).constructor\n  }\n})()\n\nlet channel\n\n/** @type {globalThis['structuredClone']} */\nconst structuredClone =\n  globalThis.structuredClone ??\n  // https://github.com/nodejs/node/blob/b27ae24dcc4251bad726d9d84baf678d1f707fed/lib/internal/structured_clone.js\n  // structuredClone was added in v17.0.0, but fetch supports v16.8\n  function structuredClone (value, options = undefined) {\n    if (arguments.length === 0) {\n      throw new TypeError('missing argument')\n    }\n\n    if (!channel) {\n      channel = new MessageChannel()\n    }\n    channel.port1.unref()\n    channel.port2.unref()\n    channel.port1.postMessage(value, options?.transfer)\n    return receiveMessageOnPort(channel.port2).message\n  }\n\nmodule.exports = {\n  DOMException,\n  structuredClone,\n  subresource,\n  forbiddenMethods,\n  requestBodyHeader,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  redirectStatus,\n  corsSafeListedMethods,\n  nullBodyStatus,\n  safeMethods,\n  badPorts,\n  requestDuplex,\n  subresourceSet,\n  badPortsSet,\n  redirectStatusSet,\n  corsSafeListedMethodsSet,\n  safeMethodsSet,\n  forbiddenMethodsSet,\n  referrerPolicySet\n}\n", "'use strict'\n\n// In case of breaking changes, increase the version\n// number to avoid conflicts.\nconst globalOrigin = Symbol.for('undici.globalOrigin.1')\n\nfunction getGlobalOrigin () {\n  return globalThis[globalOrigin]\n}\n\nfunction setGlobalOrigin (newOrigin) {\n  if (newOrigin === undefined) {\n    Object.defineProperty(globalThis, globalOrigin, {\n      value: undefined,\n      writable: true,\n      enumerable: false,\n      configurable: false\n    })\n\n    return\n  }\n\n  const parsedURL = new URL(newOrigin)\n\n  if (parsedURL.protocol !== 'http:' && parsedURL.protocol !== 'https:') {\n    throw new TypeError(`Only http & https urls are allowed, received ${parsedURL.protocol}`)\n  }\n\n  Object.defineProperty(globalThis, globalOrigin, {\n    value: parsedURL,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  })\n}\n\nmodule.exports = {\n  getGlobalOrigin,\n  setGlobalOrigin\n}\n", "'use strict'\n\nconst { redirectStatusSet, referrerPolicySet: referrerPolicyTokens, badPortsSet } = require('./constants')\nconst { getGlobalOrigin } = require('./global')\nconst { performance } = require('perf_hooks')\nconst { isBlobLike, toUSVString, ReadableStreamFrom } = require('../core/util')\nconst assert = require('assert')\nconst { isUint8Array } = require('util/types')\n\nlet supportedHashes = []\n\n// https://nodejs.org/api/crypto.html#determining-if-crypto-support-is-unavailable\n/** @type {import('crypto')|undefined} */\nlet crypto\n\ntry {\n  crypto = require('crypto')\n  const possibleRelevantHashes = ['sha256', 'sha384', 'sha512']\n  supportedHashes = crypto.getHashes().filter((hash) => possibleRelevantHashes.includes(hash))\n/* c8 ignore next 3 */\n} catch {\n}\n\nfunction responseURL (response) {\n  // https://fetch.spec.whatwg.org/#responses\n  // A response has an associated URL. It is a pointer to the last URL\n  // in response\u2019s URL list and null if response\u2019s URL list is empty.\n  const urlList = response.urlList\n  const length = urlList.length\n  return length === 0 ? null : urlList[length - 1].toString()\n}\n\n// https://fetch.spec.whatwg.org/#concept-response-location-url\nfunction responseLocationURL (response, requestFragment) {\n  // 1. If response\u2019s status is not a redirect status, then return null.\n  if (!redirectStatusSet.has(response.status)) {\n    return null\n  }\n\n  // 2. Let location be the result of extracting header list values given\n  // `Location` and response\u2019s header list.\n  let location = response.headersList.get('location')\n\n  // 3. If location is a header value, then set location to the result of\n  //    parsing location with response\u2019s URL.\n  if (location !== null && isValidHeaderValue(location)) {\n    location = new URL(location, responseURL(response))\n  }\n\n  // 4. If location is a URL whose fragment is null, then set location\u2019s\n  // fragment to requestFragment.\n  if (location && !location.hash) {\n    location.hash = requestFragment\n  }\n\n  // 5. Return location.\n  return location\n}\n\n/** @returns {URL} */\nfunction requestCurrentURL (request) {\n  return request.urlList[request.urlList.length - 1]\n}\n\nfunction requestBadPort (request) {\n  // 1. Let url be request\u2019s current URL.\n  const url = requestCurrentURL(request)\n\n  // 2. If url\u2019s scheme is an HTTP(S) scheme and url\u2019s port is a bad port,\n  // then return blocked.\n  if (urlIsHttpHttpsScheme(url) && badPortsSet.has(url.port)) {\n    return 'blocked'\n  }\n\n  // 3. Return allowed.\n  return 'allowed'\n}\n\nfunction isErrorLike (object) {\n  return object instanceof Error || (\n    object?.constructor?.name === 'Error' ||\n    object?.constructor?.name === 'DOMException'\n  )\n}\n\n// Check whether |statusText| is a ByteString and\n// matches the Reason-Phrase token production.\n// RFC 2616: https://tools.ietf.org/html/rfc2616\n// RFC 7230: https://tools.ietf.org/html/rfc7230\n// \"reason-phrase = *( HTAB / SP / VCHAR / obs-text )\"\n// https://github.com/chromium/chromium/blob/94.0.4604.1/third_party/blink/renderer/core/fetch/response.cc#L116\nfunction isValidReasonPhrase (statusText) {\n  for (let i = 0; i < statusText.length; ++i) {\n    const c = statusText.charCodeAt(i)\n    if (\n      !(\n        (\n          c === 0x09 || // HTAB\n          (c >= 0x20 && c <= 0x7e) || // SP / VCHAR\n          (c >= 0x80 && c <= 0xff)\n        ) // obs-text\n      )\n    ) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @see https://tools.ietf.org/html/rfc7230#section-3.2.6\n * @param {number} c\n */\nfunction isTokenCharCode (c) {\n  switch (c) {\n    case 0x22:\n    case 0x28:\n    case 0x29:\n    case 0x2c:\n    case 0x2f:\n    case 0x3a:\n    case 0x3b:\n    case 0x3c:\n    case 0x3d:\n    case 0x3e:\n    case 0x3f:\n    case 0x40:\n    case 0x5b:\n    case 0x5c:\n    case 0x5d:\n    case 0x7b:\n    case 0x7d:\n      // DQUOTE and \"(),/:;<=>?@[\\]{}\"\n      return false\n    default:\n      // VCHAR %x21-7E\n      return c >= 0x21 && c <= 0x7e\n  }\n}\n\n/**\n * @param {string} characters\n */\nfunction isValidHTTPToken (characters) {\n  if (characters.length === 0) {\n    return false\n  }\n  for (let i = 0; i < characters.length; ++i) {\n    if (!isTokenCharCode(characters.charCodeAt(i))) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-name\n * @param {string} potentialValue\n */\nfunction isValidHeaderName (potentialValue) {\n  return isValidHTTPToken(potentialValue)\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#header-value\n * @param {string} potentialValue\n */\nfunction isValidHeaderValue (potentialValue) {\n  // - Has no leading or trailing HTTP tab or space bytes.\n  // - Contains no 0x00 (NUL) or HTTP newline bytes.\n  if (\n    potentialValue.startsWith('\\t') ||\n    potentialValue.startsWith(' ') ||\n    potentialValue.endsWith('\\t') ||\n    potentialValue.endsWith(' ')\n  ) {\n    return false\n  }\n\n  if (\n    potentialValue.includes('\\0') ||\n    potentialValue.includes('\\r') ||\n    potentialValue.includes('\\n')\n  ) {\n    return false\n  }\n\n  return true\n}\n\n// https://w3c.github.io/webappsec-referrer-policy/#set-requests-referrer-policy-on-redirect\nfunction setRequestReferrerPolicyOnRedirect (request, actualResponse) {\n  //  Given a request request and a response actualResponse, this algorithm\n  //  updates request\u2019s referrer policy according to the Referrer-Policy\n  //  header (if any) in actualResponse.\n\n  // 1. Let policy be the result of executing \u00A7 8.1 Parse a referrer policy\n  // from a Referrer-Policy header on actualResponse.\n\n  // 8.1 Parse a referrer policy from a Referrer-Policy header\n  // 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy` and response\u2019s header list.\n  const { headersList } = actualResponse\n  // 2. Let policy be the empty string.\n  // 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty string, then set policy to token.\n  // 4. Return policy.\n  const policyHeader = (headersList.get('referrer-policy') ?? '').split(',')\n\n  // Note: As the referrer-policy can contain multiple policies\n  // separated by comma, we need to loop through all of them\n  // and pick the first valid one.\n  // Ref: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy#specify_a_fallback_policy\n  let policy = ''\n  if (policyHeader.length > 0) {\n    // The right-most policy takes precedence.\n    // The left-most policy is the fallback.\n    for (let i = policyHeader.length; i !== 0; i--) {\n      const token = policyHeader[i - 1].trim()\n      if (referrerPolicyTokens.has(token)) {\n        policy = token\n        break\n      }\n    }\n  }\n\n  // 2. If policy is not the empty string, then set request\u2019s referrer policy to policy.\n  if (policy !== '') {\n    request.referrerPolicy = policy\n  }\n}\n\n// https://fetch.spec.whatwg.org/#cross-origin-resource-policy-check\nfunction crossOriginResourcePolicyCheck () {\n  // TODO\n  return 'allowed'\n}\n\n// https://fetch.spec.whatwg.org/#concept-cors-check\nfunction corsCheck () {\n  // TODO\n  return 'success'\n}\n\n// https://fetch.spec.whatwg.org/#concept-tao-check\nfunction TAOCheck () {\n  // TODO\n  return 'success'\n}\n\nfunction appendFetchMetadata (httpRequest) {\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-dest-header\n  //  TODO\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-mode-header\n\n  //  1. Assert: r\u2019s url is a potentially trustworthy URL.\n  //  TODO\n\n  //  2. Let header be a Structured Header whose value is a token.\n  let header = null\n\n  //  3. Set header\u2019s value to r\u2019s mode.\n  header = httpRequest.mode\n\n  //  4. Set a structured field value `Sec-Fetch-Mode`/header in r\u2019s header list.\n  httpRequest.headersList.set('sec-fetch-mode', header)\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-site-header\n  //  TODO\n\n  //  https://w3c.github.io/webappsec-fetch-metadata/#sec-fetch-user-header\n  //  TODO\n}\n\n// https://fetch.spec.whatwg.org/#append-a-request-origin-header\nfunction appendRequestOriginHeader (request) {\n  // 1. Let serializedOrigin be the result of byte-serializing a request origin with request.\n  let serializedOrigin = request.origin\n\n  // 2. If request\u2019s response tainting is \"cors\" or request\u2019s mode is \"websocket\", then append (`Origin`, serializedOrigin) to request\u2019s header list.\n  if (request.responseTainting === 'cors' || request.mode === 'websocket') {\n    if (serializedOrigin) {\n      request.headersList.append('origin', serializedOrigin)\n    }\n\n  // 3. Otherwise, if request\u2019s method is neither `GET` nor `HEAD`, then:\n  } else if (request.method !== 'GET' && request.method !== 'HEAD') {\n    // 1. Switch on request\u2019s referrer policy:\n    switch (request.referrerPolicy) {\n      case 'no-referrer':\n        // Set serializedOrigin to `null`.\n        serializedOrigin = null\n        break\n      case 'no-referrer-when-downgrade':\n      case 'strict-origin':\n      case 'strict-origin-when-cross-origin':\n        // If request\u2019s origin is a tuple origin, its scheme is \"https\", and request\u2019s current URL\u2019s scheme is not \"https\", then set serializedOrigin to `null`.\n        if (request.origin && urlHasHttpsScheme(request.origin) && !urlHasHttpsScheme(requestCurrentURL(request))) {\n          serializedOrigin = null\n        }\n        break\n      case 'same-origin':\n        // If request\u2019s origin is not same origin with request\u2019s current URL\u2019s origin, then set serializedOrigin to `null`.\n        if (!sameOrigin(request, requestCurrentURL(request))) {\n          serializedOrigin = null\n        }\n        break\n      default:\n        // Do nothing.\n    }\n\n    if (serializedOrigin) {\n      // 2. Append (`Origin`, serializedOrigin) to request\u2019s header list.\n      request.headersList.append('origin', serializedOrigin)\n    }\n  }\n}\n\nfunction coarsenedSharedCurrentTime (crossOriginIsolatedCapability) {\n  // TODO\n  return performance.now()\n}\n\n// https://fetch.spec.whatwg.org/#create-an-opaque-timing-info\nfunction createOpaqueTimingInfo (timingInfo) {\n  return {\n    startTime: timingInfo.startTime ?? 0,\n    redirectStartTime: 0,\n    redirectEndTime: 0,\n    postRedirectStartTime: timingInfo.startTime ?? 0,\n    finalServiceWorkerStartTime: 0,\n    finalNetworkResponseStartTime: 0,\n    finalNetworkRequestStartTime: 0,\n    endTime: 0,\n    encodedBodySize: 0,\n    decodedBodySize: 0,\n    finalConnectionTimingInfo: null\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/origin.html#policy-container\nfunction makePolicyContainer () {\n  // Note: the fetch spec doesn't make use of embedder policy or CSP list\n  return {\n    referrerPolicy: 'strict-origin-when-cross-origin'\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/origin.html#clone-a-policy-container\nfunction clonePolicyContainer (policyContainer) {\n  return {\n    referrerPolicy: policyContainer.referrerPolicy\n  }\n}\n\n// https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer\nfunction determineRequestsReferrer (request) {\n  // 1. Let policy be request's referrer policy.\n  const policy = request.referrerPolicy\n\n  // Note: policy cannot (shouldn't) be null or an empty string.\n  assert(policy)\n\n  // 2. Let environment be request\u2019s client.\n\n  let referrerSource = null\n\n  // 3. Switch on request\u2019s referrer:\n  if (request.referrer === 'client') {\n    // Note: node isn't a browser and doesn't implement document/iframes,\n    // so we bypass this step and replace it with our own.\n\n    const globalOrigin = getGlobalOrigin()\n\n    if (!globalOrigin || globalOrigin.origin === 'null') {\n      return 'no-referrer'\n    }\n\n    // note: we need to clone it as it's mutated\n    referrerSource = new URL(globalOrigin)\n  } else if (request.referrer instanceof URL) {\n    // Let referrerSource be request\u2019s referrer.\n    referrerSource = request.referrer\n  }\n\n  // 4. Let request\u2019s referrerURL be the result of stripping referrerSource for\n  //    use as a referrer.\n  let referrerURL = stripURLForReferrer(referrerSource)\n\n  // 5. Let referrerOrigin be the result of stripping referrerSource for use as\n  //    a referrer, with the origin-only flag set to true.\n  const referrerOrigin = stripURLForReferrer(referrerSource, true)\n\n  // 6. If the result of serializing referrerURL is a string whose length is\n  //    greater than 4096, set referrerURL to referrerOrigin.\n  if (referrerURL.toString().length > 4096) {\n    referrerURL = referrerOrigin\n  }\n\n  const areSameOrigin = sameOrigin(request, referrerURL)\n  const isNonPotentiallyTrustWorthy = isURLPotentiallyTrustworthy(referrerURL) &&\n    !isURLPotentiallyTrustworthy(request.url)\n\n  // 8. Execute the switch statements corresponding to the value of policy:\n  switch (policy) {\n    case 'origin': return referrerOrigin != null ? referrerOrigin : stripURLForReferrer(referrerSource, true)\n    case 'unsafe-url': return referrerURL\n    case 'same-origin':\n      return areSameOrigin ? referrerOrigin : 'no-referrer'\n    case 'origin-when-cross-origin':\n      return areSameOrigin ? referrerURL : referrerOrigin\n    case 'strict-origin-when-cross-origin': {\n      const currentURL = requestCurrentURL(request)\n\n      // 1. If the origin of referrerURL and the origin of request\u2019s current\n      //    URL are the same, then return referrerURL.\n      if (sameOrigin(referrerURL, currentURL)) {\n        return referrerURL\n      }\n\n      // 2. If referrerURL is a potentially trustworthy URL and request\u2019s\n      //    current URL is not a potentially trustworthy URL, then return no\n      //    referrer.\n      if (isURLPotentiallyTrustworthy(referrerURL) && !isURLPotentiallyTrustworthy(currentURL)) {\n        return 'no-referrer'\n      }\n\n      // 3. Return referrerOrigin.\n      return referrerOrigin\n    }\n    case 'strict-origin': // eslint-disable-line\n      /**\n         * 1. If referrerURL is a potentially trustworthy URL and\n         * request\u2019s current URL is not a potentially trustworthy URL,\n         * then return no referrer.\n         * 2. Return referrerOrigin\n        */\n    case 'no-referrer-when-downgrade': // eslint-disable-line\n      /**\n       * 1. If referrerURL is a potentially trustworthy URL and\n       * request\u2019s current URL is not a potentially trustworthy URL,\n       * then return no referrer.\n       * 2. Return referrerOrigin\n      */\n\n    default: // eslint-disable-line\n      return isNonPotentiallyTrustWorthy ? 'no-referrer' : referrerOrigin\n  }\n}\n\n/**\n * @see https://w3c.github.io/webappsec-referrer-policy/#strip-url\n * @param {URL} url\n * @param {boolean|undefined} originOnly\n */\nfunction stripURLForReferrer (url, originOnly) {\n  // 1. Assert: url is a URL.\n  assert(url instanceof URL)\n\n  // 2. If url\u2019s scheme is a local scheme, then return no referrer.\n  if (url.protocol === 'file:' || url.protocol === 'about:' || url.protocol === 'blank:') {\n    return 'no-referrer'\n  }\n\n  // 3. Set url\u2019s username to the empty string.\n  url.username = ''\n\n  // 4. Set url\u2019s password to the empty string.\n  url.password = ''\n\n  // 5. Set url\u2019s fragment to null.\n  url.hash = ''\n\n  // 6. If the origin-only flag is true, then:\n  if (originOnly) {\n    // 1. Set url\u2019s path to \u00AB the empty string \u00BB.\n    url.pathname = ''\n\n    // 2. Set url\u2019s query to null.\n    url.search = ''\n  }\n\n  // 7. Return url.\n  return url\n}\n\nfunction isURLPotentiallyTrustworthy (url) {\n  if (!(url instanceof URL)) {\n    return false\n  }\n\n  // If child of about, return true\n  if (url.href === 'about:blank' || url.href === 'about:srcdoc') {\n    return true\n  }\n\n  // If scheme is data, return true\n  if (url.protocol === 'data:') return true\n\n  // If file, return true\n  if (url.protocol === 'file:') return true\n\n  return isOriginPotentiallyTrustworthy(url.origin)\n\n  function isOriginPotentiallyTrustworthy (origin) {\n    // If origin is explicitly null, return false\n    if (origin == null || origin === 'null') return false\n\n    const originAsURL = new URL(origin)\n\n    // If secure, return true\n    if (originAsURL.protocol === 'https:' || originAsURL.protocol === 'wss:') {\n      return true\n    }\n\n    // If localhost or variants, return true\n    if (/^127(?:\\.[0-9]+){0,2}\\.[0-9]+$|^\\[(?:0*:)*?:?0*1\\]$/.test(originAsURL.hostname) ||\n     (originAsURL.hostname === 'localhost' || originAsURL.hostname.includes('localhost.')) ||\n     (originAsURL.hostname.endsWith('.localhost'))) {\n      return true\n    }\n\n    // If any other, return false\n    return false\n  }\n}\n\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#does-response-match-metadatalist\n * @param {Uint8Array} bytes\n * @param {string} metadataList\n */\nfunction bytesMatch (bytes, metadataList) {\n  // If node is not built with OpenSSL support, we cannot check\n  // a request's integrity, so allow it by default (the spec will\n  // allow requests if an invalid hash is given, as precedence).\n  /* istanbul ignore if: only if node is built with --without-ssl */\n  if (crypto === undefined) {\n    return true\n  }\n\n  // 1. Let parsedMetadata be the result of parsing metadataList.\n  const parsedMetadata = parseMetadata(metadataList)\n\n  // 2. If parsedMetadata is no metadata, return true.\n  if (parsedMetadata === 'no metadata') {\n    return true\n  }\n\n  // 3. If response is not eligible for integrity validation, return false.\n  // TODO\n\n  // 4. If parsedMetadata is the empty set, return true.\n  if (parsedMetadata.length === 0) {\n    return true\n  }\n\n  // 5. Let metadata be the result of getting the strongest\n  //    metadata from parsedMetadata.\n  const strongest = getStrongestMetadata(parsedMetadata)\n  const metadata = filterMetadataListByAlgorithm(parsedMetadata, strongest)\n\n  // 6. For each item in metadata:\n  for (const item of metadata) {\n    // 1. Let algorithm be the alg component of item.\n    const algorithm = item.algo\n\n    // 2. Let expectedValue be the val component of item.\n    const expectedValue = item.hash\n\n    // See https://github.com/web-platform-tests/wpt/commit/e4c5cc7a5e48093220528dfdd1c4012dc3837a0e\n    // \"be liberal with padding\". This is annoying, and it's not even in the spec.\n\n    // 3. Let actualValue be the result of applying algorithm to bytes.\n    let actualValue = crypto.createHash(algorithm).update(bytes).digest('base64')\n\n    if (actualValue[actualValue.length - 1] === '=') {\n      if (actualValue[actualValue.length - 2] === '=') {\n        actualValue = actualValue.slice(0, -2)\n      } else {\n        actualValue = actualValue.slice(0, -1)\n      }\n    }\n\n    // 4. If actualValue is a case-sensitive match for expectedValue,\n    //    return true.\n    if (compareBase64Mixed(actualValue, expectedValue)) {\n      return true\n    }\n  }\n\n  // 7. Return false.\n  return false\n}\n\n// https://w3c.github.io/webappsec-subresource-integrity/#grammardef-hash-with-options\n// https://www.w3.org/TR/CSP2/#source-list-syntax\n// https://www.rfc-editor.org/rfc/rfc5234#appendix-B.1\nconst parseHashWithOptions = /(?<algo>sha256|sha384|sha512)-((?<hash>[A-Za-z0-9+/]+|[A-Za-z0-9_-]+)={0,2}(?:\\s|$)( +[!-~]*)?)?/i\n\n/**\n * @see https://w3c.github.io/webappsec-subresource-integrity/#parse-metadata\n * @param {string} metadata\n */\nfunction parseMetadata (metadata) {\n  // 1. Let result be the empty set.\n  /** @type {{ algo: string, hash: string }[]} */\n  const result = []\n\n  // 2. Let empty be equal to true.\n  let empty = true\n\n  // 3. For each token returned by splitting metadata on spaces:\n  for (const token of metadata.split(' ')) {\n    // 1. Set empty to false.\n    empty = false\n\n    // 2. Parse token as a hash-with-options.\n    const parsedToken = parseHashWithOptions.exec(token)\n\n    // 3. If token does not parse, continue to the next token.\n    if (\n      parsedToken === null ||\n      parsedToken.groups === undefined ||\n      parsedToken.groups.algo === undefined\n    ) {\n      // Note: Chromium blocks the request at this point, but Firefox\n      // gives a warning that an invalid integrity was given. The\n      // correct behavior is to ignore these, and subsequently not\n      // check the integrity of the resource.\n      continue\n    }\n\n    // 4. Let algorithm be the hash-algo component of token.\n    const algorithm = parsedToken.groups.algo.toLowerCase()\n\n    // 5. If algorithm is a hash function recognized by the user\n    //    agent, add the parsed token to result.\n    if (supportedHashes.includes(algorithm)) {\n      result.push(parsedToken.groups)\n    }\n  }\n\n  // 4. Return no metadata if empty is true, otherwise return result.\n  if (empty === true) {\n    return 'no metadata'\n  }\n\n  return result\n}\n\n/**\n * @param {{ algo: 'sha256' | 'sha384' | 'sha512' }[]} metadataList\n */\nfunction getStrongestMetadata (metadataList) {\n  // Let algorithm be the algo component of the first item in metadataList.\n  // Can be sha256\n  let algorithm = metadataList[0].algo\n  // If the algorithm is sha512, then it is the strongest\n  // and we can return immediately\n  if (algorithm[3] === '5') {\n    return algorithm\n  }\n\n  for (let i = 1; i < metadataList.length; ++i) {\n    const metadata = metadataList[i]\n    // If the algorithm is sha512, then it is the strongest\n    // and we can break the loop immediately\n    if (metadata.algo[3] === '5') {\n      algorithm = 'sha512'\n      break\n    // If the algorithm is sha384, then a potential sha256 or sha384 is ignored\n    } else if (algorithm[3] === '3') {\n      continue\n    // algorithm is sha256, check if algorithm is sha384 and if so, set it as\n    // the strongest\n    } else if (metadata.algo[3] === '3') {\n      algorithm = 'sha384'\n    }\n  }\n  return algorithm\n}\n\nfunction filterMetadataListByAlgorithm (metadataList, algorithm) {\n  if (metadataList.length === 1) {\n    return metadataList\n  }\n\n  let pos = 0\n  for (let i = 0; i < metadataList.length; ++i) {\n    if (metadataList[i].algo === algorithm) {\n      metadataList[pos++] = metadataList[i]\n    }\n  }\n\n  metadataList.length = pos\n\n  return metadataList\n}\n\n/**\n * Compares two base64 strings, allowing for base64url\n * in the second string.\n *\n* @param {string} actualValue always base64\n * @param {string} expectedValue base64 or base64url\n * @returns {boolean}\n */\nfunction compareBase64Mixed (actualValue, expectedValue) {\n  if (actualValue.length !== expectedValue.length) {\n    return false\n  }\n  for (let i = 0; i < actualValue.length; ++i) {\n    if (actualValue[i] !== expectedValue[i]) {\n      if (\n        (actualValue[i] === '+' && expectedValue[i] === '-') ||\n        (actualValue[i] === '/' && expectedValue[i] === '_')\n      ) {\n        continue\n      }\n      return false\n    }\n  }\n\n  return true\n}\n\n// https://w3c.github.io/webappsec-upgrade-insecure-requests/#upgrade-request\nfunction tryUpgradeRequestToAPotentiallyTrustworthyURL (request) {\n  // TODO\n}\n\n/**\n * @link {https://html.spec.whatwg.org/multipage/origin.html#same-origin}\n * @param {URL} A\n * @param {URL} B\n */\nfunction sameOrigin (A, B) {\n  // 1. If A and B are the same opaque origin, then return true.\n  if (A.origin === B.origin && A.origin === 'null') {\n    return true\n  }\n\n  // 2. If A and B are both tuple origins and their schemes,\n  //    hosts, and port are identical, then return true.\n  if (A.protocol === B.protocol && A.hostname === B.hostname && A.port === B.port) {\n    return true\n  }\n\n  // 3. Return false.\n  return false\n}\n\nfunction createDeferredPromise () {\n  let res\n  let rej\n  const promise = new Promise((resolve, reject) => {\n    res = resolve\n    rej = reject\n  })\n\n  return { promise, resolve: res, reject: rej }\n}\n\nfunction isAborted (fetchParams) {\n  return fetchParams.controller.state === 'aborted'\n}\n\nfunction isCancelled (fetchParams) {\n  return fetchParams.controller.state === 'aborted' ||\n    fetchParams.controller.state === 'terminated'\n}\n\nconst normalizeMethodRecord = {\n  delete: 'DELETE',\n  DELETE: 'DELETE',\n  get: 'GET',\n  GET: 'GET',\n  head: 'HEAD',\n  HEAD: 'HEAD',\n  options: 'OPTIONS',\n  OPTIONS: 'OPTIONS',\n  post: 'POST',\n  POST: 'POST',\n  put: 'PUT',\n  PUT: 'PUT'\n}\n\n// Note: object prototypes should not be able to be referenced. e.g. `Object#hasOwnProperty`.\nObject.setPrototypeOf(normalizeMethodRecord, null)\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-method-normalize\n * @param {string} method\n */\nfunction normalizeMethod (method) {\n  return normalizeMethodRecord[method.toLowerCase()] ?? method\n}\n\n// https://infra.spec.whatwg.org/#serialize-a-javascript-value-to-a-json-string\nfunction serializeJavascriptValueToJSONString (value) {\n  // 1. Let result be ? Call(%JSON.stringify%, undefined, \u00AB value \u00BB).\n  const result = JSON.stringify(value)\n\n  // 2. If result is undefined, then throw a TypeError.\n  if (result === undefined) {\n    throw new TypeError('Value is not JSON serializable')\n  }\n\n  // 3. Assert: result is a string.\n  assert(typeof result === 'string')\n\n  // 4. Return result.\n  return result\n}\n\n// https://tc39.es/ecma262/#sec-%25iteratorprototype%25-object\nconst esIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))\n\n/**\n * @see https://webidl.spec.whatwg.org/#dfn-iterator-prototype-object\n * @param {() => unknown[]} iterator\n * @param {string} name name of the instance\n * @param {'key'|'value'|'key+value'} kind\n */\nfunction makeIterator (iterator, name, kind) {\n  const object = {\n    index: 0,\n    kind,\n    target: iterator\n  }\n\n  const i = {\n    next () {\n      // 1. Let interface be the interface for which the iterator prototype object exists.\n\n      // 2. Let thisValue be the this value.\n\n      // 3. Let object be ? ToObject(thisValue).\n\n      // 4. If object is a platform object, then perform a security\n      //    check, passing:\n\n      // 5. If object is not a default iterator object for interface,\n      //    then throw a TypeError.\n      if (Object.getPrototypeOf(this) !== i) {\n        throw new TypeError(\n          `'next' called on an object that does not implement interface ${name} Iterator.`\n        )\n      }\n\n      // 6. Let index be object\u2019s index.\n      // 7. Let kind be object\u2019s kind.\n      // 8. Let values be object\u2019s target's value pairs to iterate over.\n      const { index, kind, target } = object\n      const values = target()\n\n      // 9. Let len be the length of values.\n      const len = values.length\n\n      // 10. If index is greater than or equal to len, then return\n      //     CreateIterResultObject(undefined, true).\n      if (index >= len) {\n        return { value: undefined, done: true }\n      }\n\n      // 11. Let pair be the entry in values at index index.\n      const pair = values[index]\n\n      // 12. Set object\u2019s index to index + 1.\n      object.index = index + 1\n\n      // 13. Return the iterator result for pair and kind.\n      return iteratorResult(pair, kind)\n    },\n    // The class string of an iterator prototype object for a given interface is the\n    // result of concatenating the identifier of the interface and the string \" Iterator\".\n    [Symbol.toStringTag]: `${name} Iterator`\n  }\n\n  // The [[Prototype]] internal slot of an iterator prototype object must be %IteratorPrototype%.\n  Object.setPrototypeOf(i, esIteratorPrototype)\n  // esIteratorPrototype needs to be the prototype of i\n  // which is the prototype of an empty object. Yes, it's confusing.\n  return Object.setPrototypeOf({}, i)\n}\n\n// https://webidl.spec.whatwg.org/#iterator-result\nfunction iteratorResult (pair, kind) {\n  let result\n\n  // 1. Let result be a value determined by the value of kind:\n  switch (kind) {\n    case 'key': {\n      // 1. Let idlKey be pair\u2019s key.\n      // 2. Let key be the result of converting idlKey to an\n      //    ECMAScript value.\n      // 3. result is key.\n      result = pair[0]\n      break\n    }\n    case 'value': {\n      // 1. Let idlValue be pair\u2019s value.\n      // 2. Let value be the result of converting idlValue to\n      //    an ECMAScript value.\n      // 3. result is value.\n      result = pair[1]\n      break\n    }\n    case 'key+value': {\n      // 1. Let idlKey be pair\u2019s key.\n      // 2. Let idlValue be pair\u2019s value.\n      // 3. Let key be the result of converting idlKey to an\n      //    ECMAScript value.\n      // 4. Let value be the result of converting idlValue to\n      //    an ECMAScript value.\n      // 5. Let array be ! ArrayCreate(2).\n      // 6. Call ! CreateDataProperty(array, \"0\", key).\n      // 7. Call ! CreateDataProperty(array, \"1\", value).\n      // 8. result is array.\n      result = pair\n      break\n    }\n  }\n\n  // 2. Return CreateIterResultObject(result, false).\n  return { value: result, done: false }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#body-fully-read\n */\nasync function fullyReadBody (body, processBody, processBodyError) {\n  // 1. If taskDestination is null, then set taskDestination to\n  //    the result of starting a new parallel queue.\n\n  // 2. Let successSteps given a byte sequence bytes be to queue a\n  //    fetch task to run processBody given bytes, with taskDestination.\n  const successSteps = processBody\n\n  // 3. Let errorSteps be to queue a fetch task to run processBodyError,\n  //    with taskDestination.\n  const errorSteps = processBodyError\n\n  // 4. Let reader be the result of getting a reader for body\u2019s stream.\n  //    If that threw an exception, then run errorSteps with that\n  //    exception and return.\n  let reader\n\n  try {\n    reader = body.stream.getReader()\n  } catch (e) {\n    errorSteps(e)\n    return\n  }\n\n  // 5. Read all bytes from reader, given successSteps and errorSteps.\n  try {\n    const result = await readAllBytes(reader)\n    successSteps(result)\n  } catch (e) {\n    errorSteps(e)\n  }\n}\n\n/** @type {ReadableStream} */\nlet ReadableStream = globalThis.ReadableStream\n\nfunction isReadableStreamLike (stream) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  return stream instanceof ReadableStream || (\n    stream[Symbol.toStringTag] === 'ReadableStream' &&\n    typeof stream.tee === 'function'\n  )\n}\n\nconst MAXIMUM_ARGUMENT_LENGTH = 65535\n\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-decode\n * @param {number[]|Uint8Array} input\n */\nfunction isomorphicDecode (input) {\n  // 1. To isomorphic decode a byte sequence input, return a string whose code point\n  //    length is equal to input\u2019s length and whose code points have the same values\n  //    as the values of input\u2019s bytes, in the same order.\n\n  if (input.length < MAXIMUM_ARGUMENT_LENGTH) {\n    return String.fromCharCode(...input)\n  }\n\n  return input.reduce((previous, current) => previous + String.fromCharCode(current), '')\n}\n\n/**\n * @param {ReadableStreamController<Uint8Array>} controller\n */\nfunction readableStreamClose (controller) {\n  try {\n    controller.close()\n  } catch (err) {\n    // TODO: add comment explaining why this error occurs.\n    if (!err.message.includes('Controller is already closed')) {\n      throw err\n    }\n  }\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#isomorphic-encode\n * @param {string} input\n */\nfunction isomorphicEncode (input) {\n  // 1. Assert: input contains no code points greater than U+00FF.\n  for (let i = 0; i < input.length; i++) {\n    assert(input.charCodeAt(i) <= 0xFF)\n  }\n\n  // 2. Return a byte sequence whose length is equal to input\u2019s code\n  //    point length and whose bytes have the same values as the\n  //    values of input\u2019s code points, in the same order\n  return input\n}\n\n/**\n * @see https://streams.spec.whatwg.org/#readablestreamdefaultreader-read-all-bytes\n * @see https://streams.spec.whatwg.org/#read-loop\n * @param {ReadableStreamDefaultReader} reader\n */\nasync function readAllBytes (reader) {\n  const bytes = []\n  let byteLength = 0\n\n  while (true) {\n    const { done, value: chunk } = await reader.read()\n\n    if (done) {\n      // 1. Call successSteps with bytes.\n      return Buffer.concat(bytes, byteLength)\n    }\n\n    // 1. If chunk is not a Uint8Array object, call failureSteps\n    //    with a TypeError and abort these steps.\n    if (!isUint8Array(chunk)) {\n      throw new TypeError('Received non-Uint8Array chunk')\n    }\n\n    // 2. Append the bytes represented by chunk to bytes.\n    bytes.push(chunk)\n    byteLength += chunk.length\n\n    // 3. Read-loop given reader, bytes, successSteps, and failureSteps.\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#is-local\n * @param {URL} url\n */\nfunction urlIsLocal (url) {\n  assert('protocol' in url) // ensure it's a url object\n\n  const protocol = url.protocol\n\n  return protocol === 'about:' || protocol === 'blob:' || protocol === 'data:'\n}\n\n/**\n * @param {string|URL} url\n */\nfunction urlHasHttpsScheme (url) {\n  if (typeof url === 'string') {\n    return url.startsWith('https:')\n  }\n\n  return url.protocol === 'https:'\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-scheme\n * @param {URL} url\n */\nfunction urlIsHttpHttpsScheme (url) {\n  assert('protocol' in url) // ensure it's a url object\n\n  const protocol = url.protocol\n\n  return protocol === 'http:' || protocol === 'https:'\n}\n\n/**\n * Fetch supports node >= 16.8.0, but Object.hasOwn was added in v16.9.0.\n */\nconst hasOwn = Object.hasOwn || ((dict, key) => Object.prototype.hasOwnProperty.call(dict, key))\n\nmodule.exports = {\n  isAborted,\n  isCancelled,\n  createDeferredPromise,\n  ReadableStreamFrom,\n  toUSVString,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  coarsenedSharedCurrentTime,\n  determineRequestsReferrer,\n  makePolicyContainer,\n  clonePolicyContainer,\n  appendFetchMetadata,\n  appendRequestOriginHeader,\n  TAOCheck,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  createOpaqueTimingInfo,\n  setRequestReferrerPolicyOnRedirect,\n  isValidHTTPToken,\n  requestBadPort,\n  requestCurrentURL,\n  responseURL,\n  responseLocationURL,\n  isBlobLike,\n  isURLPotentiallyTrustworthy,\n  isValidReasonPhrase,\n  sameOrigin,\n  normalizeMethod,\n  serializeJavascriptValueToJSONString,\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue,\n  hasOwn,\n  isErrorLike,\n  fullyReadBody,\n  bytesMatch,\n  isReadableStreamLike,\n  readableStreamClose,\n  isomorphicEncode,\n  isomorphicDecode,\n  urlIsLocal,\n  urlHasHttpsScheme,\n  urlIsHttpHttpsScheme,\n  readAllBytes,\n  normalizeMethodRecord,\n  parseMetadata\n}\n", "'use strict'\n\nmodule.exports = {\n  kUrl: Symbol('url'),\n  kHeaders: Symbol('headers'),\n  kSignal: Symbol('signal'),\n  kState: Symbol('state'),\n  kGuard: Symbol('guard'),\n  kRealm: Symbol('realm')\n}\n", "'use strict'\n\nconst { types } = require('util')\nconst { hasOwn, toUSVString } = require('./util')\n\n/** @type {import('../../types/webidl').Webidl} */\nconst webidl = {}\nwebidl.converters = {}\nwebidl.util = {}\nwebidl.errors = {}\n\nwebidl.errors.exception = function (message) {\n  return new TypeError(`${message.header}: ${message.message}`)\n}\n\nwebidl.errors.conversionFailed = function (context) {\n  const plural = context.types.length === 1 ? '' : ' one of'\n  const message =\n    `${context.argument} could not be converted to` +\n    `${plural}: ${context.types.join(', ')}.`\n\n  return webidl.errors.exception({\n    header: context.prefix,\n    message\n  })\n}\n\nwebidl.errors.invalidArgument = function (context) {\n  return webidl.errors.exception({\n    header: context.prefix,\n    message: `\"${context.value}\" is an invalid ${context.type}.`\n  })\n}\n\n// https://webidl.spec.whatwg.org/#implements\nwebidl.brandCheck = function (V, I, opts = undefined) {\n  if (opts?.strict !== false && !(V instanceof I)) {\n    throw new TypeError('Illegal invocation')\n  } else {\n    return V?.[Symbol.toStringTag] === I.prototype[Symbol.toStringTag]\n  }\n}\n\nwebidl.argumentLengthCheck = function ({ length }, min, ctx) {\n  if (length < min) {\n    throw webidl.errors.exception({\n      message: `${min} argument${min !== 1 ? 's' : ''} required, ` +\n               `but${length ? ' only' : ''} ${length} found.`,\n      ...ctx\n    })\n  }\n}\n\nwebidl.illegalConstructor = function () {\n  throw webidl.errors.exception({\n    header: 'TypeError',\n    message: 'Illegal constructor'\n  })\n}\n\n// https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values\nwebidl.util.Type = function (V) {\n  switch (typeof V) {\n    case 'undefined': return 'Undefined'\n    case 'boolean': return 'Boolean'\n    case 'string': return 'String'\n    case 'symbol': return 'Symbol'\n    case 'number': return 'Number'\n    case 'bigint': return 'BigInt'\n    case 'function':\n    case 'object': {\n      if (V === null) {\n        return 'Null'\n      }\n\n      return 'Object'\n    }\n  }\n}\n\n// https://webidl.spec.whatwg.org/#abstract-opdef-converttoint\nwebidl.util.ConvertToInt = function (V, bitLength, signedness, opts = {}) {\n  let upperBound\n  let lowerBound\n\n  // 1. If bitLength is 64, then:\n  if (bitLength === 64) {\n    // 1. Let upperBound be 2^53 \u2212 1.\n    upperBound = Math.pow(2, 53) - 1\n\n    // 2. If signedness is \"unsigned\", then let lowerBound be 0.\n    if (signedness === 'unsigned') {\n      lowerBound = 0\n    } else {\n      // 3. Otherwise let lowerBound be \u22122^53 + 1.\n      lowerBound = Math.pow(-2, 53) + 1\n    }\n  } else if (signedness === 'unsigned') {\n    // 2. Otherwise, if signedness is \"unsigned\", then:\n\n    // 1. Let lowerBound be 0.\n    lowerBound = 0\n\n    // 2. Let upperBound be 2^bitLength \u2212 1.\n    upperBound = Math.pow(2, bitLength) - 1\n  } else {\n    // 3. Otherwise:\n\n    // 1. Let lowerBound be -2^bitLength \u2212 1.\n    lowerBound = Math.pow(-2, bitLength) - 1\n\n    // 2. Let upperBound be 2^bitLength \u2212 1 \u2212 1.\n    upperBound = Math.pow(2, bitLength - 1) - 1\n  }\n\n  // 4. Let x be ? ToNumber(V).\n  let x = Number(V)\n\n  // 5. If x is \u22120, then set x to +0.\n  if (x === 0) {\n    x = 0\n  }\n\n  // 6. If the conversion is to an IDL type associated\n  //    with the [EnforceRange] extended attribute, then:\n  if (opts.enforceRange === true) {\n    // 1. If x is NaN, +\u221E, or \u2212\u221E, then throw a TypeError.\n    if (\n      Number.isNaN(x) ||\n      x === Number.POSITIVE_INFINITY ||\n      x === Number.NEGATIVE_INFINITY\n    ) {\n      throw webidl.errors.exception({\n        header: 'Integer conversion',\n        message: `Could not convert ${V} to an integer.`\n      })\n    }\n\n    // 2. Set x to IntegerPart(x).\n    x = webidl.util.IntegerPart(x)\n\n    // 3. If x < lowerBound or x > upperBound, then\n    //    throw a TypeError.\n    if (x < lowerBound || x > upperBound) {\n      throw webidl.errors.exception({\n        header: 'Integer conversion',\n        message: `Value must be between ${lowerBound}-${upperBound}, got ${x}.`\n      })\n    }\n\n    // 4. Return x.\n    return x\n  }\n\n  // 7. If x is not NaN and the conversion is to an IDL\n  //    type associated with the [Clamp] extended\n  //    attribute, then:\n  if (!Number.isNaN(x) && opts.clamp === true) {\n    // 1. Set x to min(max(x, lowerBound), upperBound).\n    x = Math.min(Math.max(x, lowerBound), upperBound)\n\n    // 2. Round x to the nearest integer, choosing the\n    //    even integer if it lies halfway between two,\n    //    and choosing +0 rather than \u22120.\n    if (Math.floor(x) % 2 === 0) {\n      x = Math.floor(x)\n    } else {\n      x = Math.ceil(x)\n    }\n\n    // 3. Return x.\n    return x\n  }\n\n  // 8. If x is NaN, +0, +\u221E, or \u2212\u221E, then return +0.\n  if (\n    Number.isNaN(x) ||\n    (x === 0 && Object.is(0, x)) ||\n    x === Number.POSITIVE_INFINITY ||\n    x === Number.NEGATIVE_INFINITY\n  ) {\n    return 0\n  }\n\n  // 9. Set x to IntegerPart(x).\n  x = webidl.util.IntegerPart(x)\n\n  // 10. Set x to x modulo 2^bitLength.\n  x = x % Math.pow(2, bitLength)\n\n  // 11. If signedness is \"signed\" and x \u2265 2^bitLength \u2212 1,\n  //    then return x \u2212 2^bitLength.\n  if (signedness === 'signed' && x >= Math.pow(2, bitLength) - 1) {\n    return x - Math.pow(2, bitLength)\n  }\n\n  // 12. Otherwise, return x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#abstract-opdef-integerpart\nwebidl.util.IntegerPart = function (n) {\n  // 1. Let r be floor(abs(n)).\n  const r = Math.floor(Math.abs(n))\n\n  // 2. If n < 0, then return -1 \u00D7 r.\n  if (n < 0) {\n    return -1 * r\n  }\n\n  // 3. Otherwise, return r.\n  return r\n}\n\n// https://webidl.spec.whatwg.org/#es-sequence\nwebidl.sequenceConverter = function (converter) {\n  return (V) => {\n    // 1. If Type(V) is not Object, throw a TypeError.\n    if (webidl.util.Type(V) !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Sequence',\n        message: `Value of type ${webidl.util.Type(V)} is not an Object.`\n      })\n    }\n\n    // 2. Let method be ? GetMethod(V, @@iterator).\n    /** @type {Generator} */\n    const method = V?.[Symbol.iterator]?.()\n    const seq = []\n\n    // 3. If method is undefined, throw a TypeError.\n    if (\n      method === undefined ||\n      typeof method.next !== 'function'\n    ) {\n      throw webidl.errors.exception({\n        header: 'Sequence',\n        message: 'Object is not an iterator.'\n      })\n    }\n\n    // https://webidl.spec.whatwg.org/#create-sequence-from-iterable\n    while (true) {\n      const { done, value } = method.next()\n\n      if (done) {\n        break\n      }\n\n      seq.push(converter(value))\n    }\n\n    return seq\n  }\n}\n\n// https://webidl.spec.whatwg.org/#es-to-record\nwebidl.recordConverter = function (keyConverter, valueConverter) {\n  return (O) => {\n    // 1. If Type(O) is not Object, throw a TypeError.\n    if (webidl.util.Type(O) !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Record',\n        message: `Value of type ${webidl.util.Type(O)} is not an Object.`\n      })\n    }\n\n    // 2. Let result be a new empty instance of record<K, V>.\n    const result = {}\n\n    if (!types.isProxy(O)) {\n      // Object.keys only returns enumerable properties\n      const keys = Object.keys(O)\n\n      for (const key of keys) {\n        // 1. Let typedKey be key converted to an IDL value of type K.\n        const typedKey = keyConverter(key)\n\n        // 2. Let value be ? Get(O, key).\n        // 3. Let typedValue be value converted to an IDL value of type V.\n        const typedValue = valueConverter(O[key])\n\n        // 4. Set result[typedKey] to typedValue.\n        result[typedKey] = typedValue\n      }\n\n      // 5. Return result.\n      return result\n    }\n\n    // 3. Let keys be ? O.[[OwnPropertyKeys]]().\n    const keys = Reflect.ownKeys(O)\n\n    // 4. For each key of keys.\n    for (const key of keys) {\n      // 1. Let desc be ? O.[[GetOwnProperty]](key).\n      const desc = Reflect.getOwnPropertyDescriptor(O, key)\n\n      // 2. If desc is not undefined and desc.[[Enumerable]] is true:\n      if (desc?.enumerable) {\n        // 1. Let typedKey be key converted to an IDL value of type K.\n        const typedKey = keyConverter(key)\n\n        // 2. Let value be ? Get(O, key).\n        // 3. Let typedValue be value converted to an IDL value of type V.\n        const typedValue = valueConverter(O[key])\n\n        // 4. Set result[typedKey] to typedValue.\n        result[typedKey] = typedValue\n      }\n    }\n\n    // 5. Return result.\n    return result\n  }\n}\n\nwebidl.interfaceConverter = function (i) {\n  return (V, opts = {}) => {\n    if (opts.strict !== false && !(V instanceof i)) {\n      throw webidl.errors.exception({\n        header: i.name,\n        message: `Expected ${V} to be an instance of ${i.name}.`\n      })\n    }\n\n    return V\n  }\n}\n\nwebidl.dictionaryConverter = function (converters) {\n  return (dictionary) => {\n    const type = webidl.util.Type(dictionary)\n    const dict = {}\n\n    if (type === 'Null' || type === 'Undefined') {\n      return dict\n    } else if (type !== 'Object') {\n      throw webidl.errors.exception({\n        header: 'Dictionary',\n        message: `Expected ${dictionary} to be one of: Null, Undefined, Object.`\n      })\n    }\n\n    for (const options of converters) {\n      const { key, defaultValue, required, converter } = options\n\n      if (required === true) {\n        if (!hasOwn(dictionary, key)) {\n          throw webidl.errors.exception({\n            header: 'Dictionary',\n            message: `Missing required key \"${key}\".`\n          })\n        }\n      }\n\n      let value = dictionary[key]\n      const hasDefault = hasOwn(options, 'defaultValue')\n\n      // Only use defaultValue if value is undefined and\n      // a defaultValue options was provided.\n      if (hasDefault && value !== null) {\n        value = value ?? defaultValue\n      }\n\n      // A key can be optional and have no default value.\n      // When this happens, do not perform a conversion,\n      // and do not assign the key a value.\n      if (required || hasDefault || value !== undefined) {\n        value = converter(value)\n\n        if (\n          options.allowedValues &&\n          !options.allowedValues.includes(value)\n        ) {\n          throw webidl.errors.exception({\n            header: 'Dictionary',\n            message: `${value} is not an accepted type. Expected one of ${options.allowedValues.join(', ')}.`\n          })\n        }\n\n        dict[key] = value\n      }\n    }\n\n    return dict\n  }\n}\n\nwebidl.nullableConverter = function (converter) {\n  return (V) => {\n    if (V === null) {\n      return V\n    }\n\n    return converter(V)\n  }\n}\n\n// https://webidl.spec.whatwg.org/#es-DOMString\nwebidl.converters.DOMString = function (V, opts = {}) {\n  // 1. If V is null and the conversion is to an IDL type\n  //    associated with the [LegacyNullToEmptyString]\n  //    extended attribute, then return the DOMString value\n  //    that represents the empty string.\n  if (V === null && opts.legacyNullToEmptyString) {\n    return ''\n  }\n\n  // 2. Let x be ? ToString(V).\n  if (typeof V === 'symbol') {\n    throw new TypeError('Could not convert argument of type symbol to string.')\n  }\n\n  // 3. Return the IDL DOMString value that represents the\n  //    same sequence of code units as the one the\n  //    ECMAScript String value x represents.\n  return String(V)\n}\n\n// https://webidl.spec.whatwg.org/#es-ByteString\nwebidl.converters.ByteString = function (V) {\n  // 1. Let x be ? ToString(V).\n  // Note: DOMString converter perform ? ToString(V)\n  const x = webidl.converters.DOMString(V)\n\n  // 2. If the value of any element of x is greater than\n  //    255, then throw a TypeError.\n  for (let index = 0; index < x.length; index++) {\n    if (x.charCodeAt(index) > 255) {\n      throw new TypeError(\n        'Cannot convert argument to a ByteString because the character at ' +\n        `index ${index} has a value of ${x.charCodeAt(index)} which is greater than 255.`\n      )\n    }\n  }\n\n  // 3. Return an IDL ByteString value whose length is the\n  //    length of x, and where the value of each element is\n  //    the value of the corresponding element of x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-USVString\nwebidl.converters.USVString = toUSVString\n\n// https://webidl.spec.whatwg.org/#es-boolean\nwebidl.converters.boolean = function (V) {\n  // 1. Let x be the result of computing ToBoolean(V).\n  const x = Boolean(V)\n\n  // 2. Return the IDL boolean value that is the one that represents\n  //    the same truth value as the ECMAScript Boolean value x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-any\nwebidl.converters.any = function (V) {\n  return V\n}\n\n// https://webidl.spec.whatwg.org/#es-long-long\nwebidl.converters['long long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 64, \"signed\").\n  const x = webidl.util.ConvertToInt(V, 64, 'signed')\n\n  // 2. Return the IDL long long value that represents\n  //    the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-long-long\nwebidl.converters['unsigned long long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 64, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 64, 'unsigned')\n\n  // 2. Return the IDL unsigned long long value that\n  //    represents the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-long\nwebidl.converters['unsigned long'] = function (V) {\n  // 1. Let x be ? ConvertToInt(V, 32, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 32, 'unsigned')\n\n  // 2. Return the IDL unsigned long value that\n  //    represents the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#es-unsigned-short\nwebidl.converters['unsigned short'] = function (V, opts) {\n  // 1. Let x be ? ConvertToInt(V, 16, \"unsigned\").\n  const x = webidl.util.ConvertToInt(V, 16, 'unsigned', opts)\n\n  // 2. Return the IDL unsigned short value that represents\n  //    the same numeric value as x.\n  return x\n}\n\n// https://webidl.spec.whatwg.org/#idl-ArrayBuffer\nwebidl.converters.ArrayBuffer = function (V, opts = {}) {\n  // 1. If Type(V) is not Object, or V does not have an\n  //    [[ArrayBufferData]] internal slot, then throw a\n  //    TypeError.\n  // see: https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-instances\n  // see: https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-instances\n  if (\n    webidl.util.Type(V) !== 'Object' ||\n    !types.isAnyArrayBuffer(V)\n  ) {\n    throw webidl.errors.conversionFailed({\n      prefix: `${V}`,\n      argument: `${V}`,\n      types: ['ArrayBuffer']\n    })\n  }\n\n  // 2. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V) is true, then throw a\n  //    TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V) is true, then throw a\n  //    TypeError.\n  // Note: resizable ArrayBuffers are currently a proposal.\n\n  // 4. Return the IDL ArrayBuffer value that is a\n  //    reference to the same object as V.\n  return V\n}\n\nwebidl.converters.TypedArray = function (V, T, opts = {}) {\n  // 1. Let T be the IDL type V is being converted to.\n\n  // 2. If Type(V) is not Object, or V does not have a\n  //    [[TypedArrayName]] internal slot with a value\n  //    equal to T\u2019s name, then throw a TypeError.\n  if (\n    webidl.util.Type(V) !== 'Object' ||\n    !types.isTypedArray(V) ||\n    V.constructor.name !== T.name\n  ) {\n    throw webidl.errors.conversionFailed({\n      prefix: `${T.name}`,\n      argument: `${V}`,\n      types: [T.name]\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 4. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  // Note: resizable array buffers are currently a proposal\n\n  // 5. Return the IDL value of type T that is a reference\n  //    to the same object as V.\n  return V\n}\n\nwebidl.converters.DataView = function (V, opts = {}) {\n  // 1. If Type(V) is not Object, or V does not have a\n  //    [[DataView]] internal slot, then throw a TypeError.\n  if (webidl.util.Type(V) !== 'Object' || !types.isDataView(V)) {\n    throw webidl.errors.exception({\n      header: 'DataView',\n      message: 'Object is not a DataView.'\n    })\n  }\n\n  // 2. If the conversion is not to an IDL type associated\n  //    with the [AllowShared] extended attribute, and\n  //    IsSharedArrayBuffer(V.[[ViewedArrayBuffer]]) is true,\n  //    then throw a TypeError.\n  if (opts.allowShared === false && types.isSharedArrayBuffer(V.buffer)) {\n    throw webidl.errors.exception({\n      header: 'ArrayBuffer',\n      message: 'SharedArrayBuffer is not allowed.'\n    })\n  }\n\n  // 3. If the conversion is not to an IDL type associated\n  //    with the [AllowResizable] extended attribute, and\n  //    IsResizableArrayBuffer(V.[[ViewedArrayBuffer]]) is\n  //    true, then throw a TypeError.\n  // Note: resizable ArrayBuffers are currently a proposal\n\n  // 4. Return the IDL DataView value that is a reference\n  //    to the same object as V.\n  return V\n}\n\n// https://webidl.spec.whatwg.org/#BufferSource\nwebidl.converters.BufferSource = function (V, opts = {}) {\n  if (types.isAnyArrayBuffer(V)) {\n    return webidl.converters.ArrayBuffer(V, opts)\n  }\n\n  if (types.isTypedArray(V)) {\n    return webidl.converters.TypedArray(V, V.constructor)\n  }\n\n  if (types.isDataView(V)) {\n    return webidl.converters.DataView(V, opts)\n  }\n\n  throw new TypeError(`Could not convert ${V} to a BufferSource.`)\n}\n\nwebidl.converters['sequence<ByteString>'] = webidl.sequenceConverter(\n  webidl.converters.ByteString\n)\n\nwebidl.converters['sequence<sequence<ByteString>>'] = webidl.sequenceConverter(\n  webidl.converters['sequence<ByteString>']\n)\n\nwebidl.converters['record<ByteString, ByteString>'] = webidl.recordConverter(\n  webidl.converters.ByteString,\n  webidl.converters.ByteString\n)\n\nmodule.exports = {\n  webidl\n}\n", "const assert = require('assert')\nconst { atob } = require('buffer')\nconst { isomorphicDecode } = require('./util')\n\nconst encoder = new TextEncoder()\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-token-code-point\n */\nconst HTTP_TOKEN_CODEPOINTS = /^[!#$%&'*+-.^_|~A-Za-z0-9]+$/\nconst HTTP_WHITESPACE_REGEX = /(\\u000A|\\u000D|\\u0009|\\u0020)/ // eslint-disable-line\n/**\n * @see https://mimesniff.spec.whatwg.org/#http-quoted-string-token-code-point\n */\nconst HTTP_QUOTED_STRING_TOKENS = /[\\u0009|\\u0020-\\u007E|\\u0080-\\u00FF]/ // eslint-disable-line\n\n// https://fetch.spec.whatwg.org/#data-url-processor\n/** @param {URL} dataURL */\nfunction dataURLProcessor (dataURL) {\n  // 1. Assert: dataURL\u2019s scheme is \"data\".\n  assert(dataURL.protocol === 'data:')\n\n  // 2. Let input be the result of running the URL\n  // serializer on dataURL with exclude fragment\n  // set to true.\n  let input = URLSerializer(dataURL, true)\n\n  // 3. Remove the leading \"data:\" string from input.\n  input = input.slice(5)\n\n  // 4. Let position point at the start of input.\n  const position = { position: 0 }\n\n  // 5. Let mimeType be the result of collecting a\n  // sequence of code points that are not equal\n  // to U+002C (,), given position.\n  let mimeType = collectASequenceOfCodePointsFast(\n    ',',\n    input,\n    position\n  )\n\n  // 6. Strip leading and trailing ASCII whitespace\n  // from mimeType.\n  // Undici implementation note: we need to store the\n  // length because if the mimetype has spaces removed,\n  // the wrong amount will be sliced from the input in\n  // step #9\n  const mimeTypeLength = mimeType.length\n  mimeType = removeASCIIWhitespace(mimeType, true, true)\n\n  // 7. If position is past the end of input, then\n  // return failure\n  if (position.position >= input.length) {\n    return 'failure'\n  }\n\n  // 8. Advance position by 1.\n  position.position++\n\n  // 9. Let encodedBody be the remainder of input.\n  const encodedBody = input.slice(mimeTypeLength + 1)\n\n  // 10. Let body be the percent-decoding of encodedBody.\n  let body = stringPercentDecode(encodedBody)\n\n  // 11. If mimeType ends with U+003B (;), followed by\n  // zero or more U+0020 SPACE, followed by an ASCII\n  // case-insensitive match for \"base64\", then:\n  if (/;(\\u0020){0,}base64$/i.test(mimeType)) {\n    // 1. Let stringBody be the isomorphic decode of body.\n    const stringBody = isomorphicDecode(body)\n\n    // 2. Set body to the forgiving-base64 decode of\n    // stringBody.\n    body = forgivingBase64(stringBody)\n\n    // 3. If body is failure, then return failure.\n    if (body === 'failure') {\n      return 'failure'\n    }\n\n    // 4. Remove the last 6 code points from mimeType.\n    mimeType = mimeType.slice(0, -6)\n\n    // 5. Remove trailing U+0020 SPACE code points from mimeType,\n    // if any.\n    mimeType = mimeType.replace(/(\\u0020)+$/, '')\n\n    // 6. Remove the last U+003B (;) code point from mimeType.\n    mimeType = mimeType.slice(0, -1)\n  }\n\n  // 12. If mimeType starts with U+003B (;), then prepend\n  // \"text/plain\" to mimeType.\n  if (mimeType.startsWith(';')) {\n    mimeType = 'text/plain' + mimeType\n  }\n\n  // 13. Let mimeTypeRecord be the result of parsing\n  // mimeType.\n  let mimeTypeRecord = parseMIMEType(mimeType)\n\n  // 14. If mimeTypeRecord is failure, then set\n  // mimeTypeRecord to text/plain;charset=US-ASCII.\n  if (mimeTypeRecord === 'failure') {\n    mimeTypeRecord = parseMIMEType('text/plain;charset=US-ASCII')\n  }\n\n  // 15. Return a new data: URL struct whose MIME\n  // type is mimeTypeRecord and body is body.\n  // https://fetch.spec.whatwg.org/#data-url-struct\n  return { mimeType: mimeTypeRecord, body }\n}\n\n// https://url.spec.whatwg.org/#concept-url-serializer\n/**\n * @param {URL} url\n * @param {boolean} excludeFragment\n */\nfunction URLSerializer (url, excludeFragment = false) {\n  if (!excludeFragment) {\n    return url.href\n  }\n\n  const href = url.href\n  const hashLength = url.hash.length\n\n  return hashLength === 0 ? href : href.substring(0, href.length - hashLength)\n}\n\n// https://infra.spec.whatwg.org/#collect-a-sequence-of-code-points\n/**\n * @param {(char: string) => boolean} condition\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePoints (condition, input, position) {\n  // 1. Let result be the empty string.\n  let result = ''\n\n  // 2. While position doesn\u2019t point past the end of input and the\n  // code point at position within input meets the condition condition:\n  while (position.position < input.length && condition(input[position.position])) {\n    // 1. Append that code point to the end of result.\n    result += input[position.position]\n\n    // 2. Advance position by 1.\n    position.position++\n  }\n\n  // 3. Return result.\n  return result\n}\n\n/**\n * A faster collectASequenceOfCodePoints that only works when comparing a single character.\n * @param {string} char\n * @param {string} input\n * @param {{ position: number }} position\n */\nfunction collectASequenceOfCodePointsFast (char, input, position) {\n  const idx = input.indexOf(char, position.position)\n  const start = position.position\n\n  if (idx === -1) {\n    position.position = input.length\n    return input.slice(start)\n  }\n\n  position.position = idx\n  return input.slice(start, position.position)\n}\n\n// https://url.spec.whatwg.org/#string-percent-decode\n/** @param {string} input */\nfunction stringPercentDecode (input) {\n  // 1. Let bytes be the UTF-8 encoding of input.\n  const bytes = encoder.encode(input)\n\n  // 2. Return the percent-decoding of bytes.\n  return percentDecode(bytes)\n}\n\n// https://url.spec.whatwg.org/#percent-decode\n/** @param {Uint8Array} input */\nfunction percentDecode (input) {\n  // 1. Let output be an empty byte sequence.\n  /** @type {number[]} */\n  const output = []\n\n  // 2. For each byte byte in input:\n  for (let i = 0; i < input.length; i++) {\n    const byte = input[i]\n\n    // 1. If byte is not 0x25 (%), then append byte to output.\n    if (byte !== 0x25) {\n      output.push(byte)\n\n    // 2. Otherwise, if byte is 0x25 (%) and the next two bytes\n    // after byte in input are not in the ranges\n    // 0x30 (0) to 0x39 (9), 0x41 (A) to 0x46 (F),\n    // and 0x61 (a) to 0x66 (f), all inclusive, append byte\n    // to output.\n    } else if (\n      byte === 0x25 &&\n      !/^[0-9A-Fa-f]{2}$/i.test(String.fromCharCode(input[i + 1], input[i + 2]))\n    ) {\n      output.push(0x25)\n\n    // 3. Otherwise:\n    } else {\n      // 1. Let bytePoint be the two bytes after byte in input,\n      // decoded, and then interpreted as hexadecimal number.\n      const nextTwoBytes = String.fromCharCode(input[i + 1], input[i + 2])\n      const bytePoint = Number.parseInt(nextTwoBytes, 16)\n\n      // 2. Append a byte whose value is bytePoint to output.\n      output.push(bytePoint)\n\n      // 3. Skip the next two bytes in input.\n      i += 2\n    }\n  }\n\n  // 3. Return output.\n  return Uint8Array.from(output)\n}\n\n// https://mimesniff.spec.whatwg.org/#parse-a-mime-type\n/** @param {string} input */\nfunction parseMIMEType (input) {\n  // 1. Remove any leading and trailing HTTP whitespace\n  // from input.\n  input = removeHTTPWhitespace(input, true, true)\n\n  // 2. Let position be a position variable for input,\n  // initially pointing at the start of input.\n  const position = { position: 0 }\n\n  // 3. Let type be the result of collecting a sequence\n  // of code points that are not U+002F (/) from\n  // input, given position.\n  const type = collectASequenceOfCodePointsFast(\n    '/',\n    input,\n    position\n  )\n\n  // 4. If type is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  // https://mimesniff.spec.whatwg.org/#http-token-code-point\n  if (type.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(type)) {\n    return 'failure'\n  }\n\n  // 5. If position is past the end of input, then return\n  // failure\n  if (position.position > input.length) {\n    return 'failure'\n  }\n\n  // 6. Advance position by 1. (This skips past U+002F (/).)\n  position.position++\n\n  // 7. Let subtype be the result of collecting a sequence of\n  // code points that are not U+003B (;) from input, given\n  // position.\n  let subtype = collectASequenceOfCodePointsFast(\n    ';',\n    input,\n    position\n  )\n\n  // 8. Remove any trailing HTTP whitespace from subtype.\n  subtype = removeHTTPWhitespace(subtype, false, true)\n\n  // 9. If subtype is the empty string or does not solely\n  // contain HTTP token code points, then return failure.\n  if (subtype.length === 0 || !HTTP_TOKEN_CODEPOINTS.test(subtype)) {\n    return 'failure'\n  }\n\n  const typeLowercase = type.toLowerCase()\n  const subtypeLowercase = subtype.toLowerCase()\n\n  // 10. Let mimeType be a new MIME type record whose type\n  // is type, in ASCII lowercase, and subtype is subtype,\n  // in ASCII lowercase.\n  // https://mimesniff.spec.whatwg.org/#mime-type\n  const mimeType = {\n    type: typeLowercase,\n    subtype: subtypeLowercase,\n    /** @type {Map<string, string>} */\n    parameters: new Map(),\n    // https://mimesniff.spec.whatwg.org/#mime-type-essence\n    essence: `${typeLowercase}/${subtypeLowercase}`\n  }\n\n  // 11. While position is not past the end of input:\n  while (position.position < input.length) {\n    // 1. Advance position by 1. (This skips past U+003B (;).)\n    position.position++\n\n    // 2. Collect a sequence of code points that are HTTP\n    // whitespace from input given position.\n    collectASequenceOfCodePoints(\n      // https://fetch.spec.whatwg.org/#http-whitespace\n      char => HTTP_WHITESPACE_REGEX.test(char),\n      input,\n      position\n    )\n\n    // 3. Let parameterName be the result of collecting a\n    // sequence of code points that are not U+003B (;)\n    // or U+003D (=) from input, given position.\n    let parameterName = collectASequenceOfCodePoints(\n      (char) => char !== ';' && char !== '=',\n      input,\n      position\n    )\n\n    // 4. Set parameterName to parameterName, in ASCII\n    // lowercase.\n    parameterName = parameterName.toLowerCase()\n\n    // 5. If position is not past the end of input, then:\n    if (position.position < input.length) {\n      // 1. If the code point at position within input is\n      // U+003B (;), then continue.\n      if (input[position.position] === ';') {\n        continue\n      }\n\n      // 2. Advance position by 1. (This skips past U+003D (=).)\n      position.position++\n    }\n\n    // 6. If position is past the end of input, then break.\n    if (position.position > input.length) {\n      break\n    }\n\n    // 7. Let parameterValue be null.\n    let parameterValue = null\n\n    // 8. If the code point at position within input is\n    // U+0022 (\"), then:\n    if (input[position.position] === '\"') {\n      // 1. Set parameterValue to the result of collecting\n      // an HTTP quoted string from input, given position\n      // and the extract-value flag.\n      parameterValue = collectAnHTTPQuotedString(input, position, true)\n\n      // 2. Collect a sequence of code points that are not\n      // U+003B (;) from input, given position.\n      collectASequenceOfCodePointsFast(\n        ';',\n        input,\n        position\n      )\n\n    // 9. Otherwise:\n    } else {\n      // 1. Set parameterValue to the result of collecting\n      // a sequence of code points that are not U+003B (;)\n      // from input, given position.\n      parameterValue = collectASequenceOfCodePointsFast(\n        ';',\n        input,\n        position\n      )\n\n      // 2. Remove any trailing HTTP whitespace from parameterValue.\n      parameterValue = removeHTTPWhitespace(parameterValue, false, true)\n\n      // 3. If parameterValue is the empty string, then continue.\n      if (parameterValue.length === 0) {\n        continue\n      }\n    }\n\n    // 10. If all of the following are true\n    // - parameterName is not the empty string\n    // - parameterName solely contains HTTP token code points\n    // - parameterValue solely contains HTTP quoted-string token code points\n    // - mimeType\u2019s parameters[parameterName] does not exist\n    // then set mimeType\u2019s parameters[parameterName] to parameterValue.\n    if (\n      parameterName.length !== 0 &&\n      HTTP_TOKEN_CODEPOINTS.test(parameterName) &&\n      (parameterValue.length === 0 || HTTP_QUOTED_STRING_TOKENS.test(parameterValue)) &&\n      !mimeType.parameters.has(parameterName)\n    ) {\n      mimeType.parameters.set(parameterName, parameterValue)\n    }\n  }\n\n  // 12. Return mimeType.\n  return mimeType\n}\n\n// https://infra.spec.whatwg.org/#forgiving-base64-decode\n/** @param {string} data */\nfunction forgivingBase64 (data) {\n  // 1. Remove all ASCII whitespace from data.\n  data = data.replace(/[\\u0009\\u000A\\u000C\\u000D\\u0020]/g, '')  // eslint-disable-line\n\n  // 2. If data\u2019s code point length divides by 4 leaving\n  // no remainder, then:\n  if (data.length % 4 === 0) {\n    // 1. If data ends with one or two U+003D (=) code points,\n    // then remove them from data.\n    data = data.replace(/=?=$/, '')\n  }\n\n  // 3. If data\u2019s code point length divides by 4 leaving\n  // a remainder of 1, then return failure.\n  if (data.length % 4 === 1) {\n    return 'failure'\n  }\n\n  // 4. If data contains a code point that is not one of\n  //  U+002B (+)\n  //  U+002F (/)\n  //  ASCII alphanumeric\n  // then return failure.\n  if (/[^+/0-9A-Za-z]/.test(data)) {\n    return 'failure'\n  }\n\n  const binary = atob(data)\n  const bytes = new Uint8Array(binary.length)\n\n  for (let byte = 0; byte < binary.length; byte++) {\n    bytes[byte] = binary.charCodeAt(byte)\n  }\n\n  return bytes\n}\n\n// https://fetch.spec.whatwg.org/#collect-an-http-quoted-string\n// tests: https://fetch.spec.whatwg.org/#example-http-quoted-string\n/**\n * @param {string} input\n * @param {{ position: number }} position\n * @param {boolean?} extractValue\n */\nfunction collectAnHTTPQuotedString (input, position, extractValue) {\n  // 1. Let positionStart be position.\n  const positionStart = position.position\n\n  // 2. Let value be the empty string.\n  let value = ''\n\n  // 3. Assert: the code point at position within input\n  // is U+0022 (\").\n  assert(input[position.position] === '\"')\n\n  // 4. Advance position by 1.\n  position.position++\n\n  // 5. While true:\n  while (true) {\n    // 1. Append the result of collecting a sequence of code points\n    // that are not U+0022 (\") or U+005C (\\) from input, given\n    // position, to value.\n    value += collectASequenceOfCodePoints(\n      (char) => char !== '\"' && char !== '\\\\',\n      input,\n      position\n    )\n\n    // 2. If position is past the end of input, then break.\n    if (position.position >= input.length) {\n      break\n    }\n\n    // 3. Let quoteOrBackslash be the code point at position within\n    // input.\n    const quoteOrBackslash = input[position.position]\n\n    // 4. Advance position by 1.\n    position.position++\n\n    // 5. If quoteOrBackslash is U+005C (\\), then:\n    if (quoteOrBackslash === '\\\\') {\n      // 1. If position is past the end of input, then append\n      // U+005C (\\) to value and break.\n      if (position.position >= input.length) {\n        value += '\\\\'\n        break\n      }\n\n      // 2. Append the code point at position within input to value.\n      value += input[position.position]\n\n      // 3. Advance position by 1.\n      position.position++\n\n    // 6. Otherwise:\n    } else {\n      // 1. Assert: quoteOrBackslash is U+0022 (\").\n      assert(quoteOrBackslash === '\"')\n\n      // 2. Break.\n      break\n    }\n  }\n\n  // 6. If the extract-value flag is set, then return value.\n  if (extractValue) {\n    return value\n  }\n\n  // 7. Return the code points from positionStart to position,\n  // inclusive, within input.\n  return input.slice(positionStart, position.position)\n}\n\n/**\n * @see https://mimesniff.spec.whatwg.org/#serialize-a-mime-type\n */\nfunction serializeAMimeType (mimeType) {\n  assert(mimeType !== 'failure')\n  const { parameters, essence } = mimeType\n\n  // 1. Let serialization be the concatenation of mimeType\u2019s\n  //    type, U+002F (/), and mimeType\u2019s subtype.\n  let serialization = essence\n\n  // 2. For each name \u2192 value of mimeType\u2019s parameters:\n  for (let [name, value] of parameters.entries()) {\n    // 1. Append U+003B (;) to serialization.\n    serialization += ';'\n\n    // 2. Append name to serialization.\n    serialization += name\n\n    // 3. Append U+003D (=) to serialization.\n    serialization += '='\n\n    // 4. If value does not solely contain HTTP token code\n    //    points or value is the empty string, then:\n    if (!HTTP_TOKEN_CODEPOINTS.test(value)) {\n      // 1. Precede each occurence of U+0022 (\") or\n      //    U+005C (\\) in value with U+005C (\\).\n      value = value.replace(/(\\\\|\")/g, '\\\\$1')\n\n      // 2. Prepend U+0022 (\") to value.\n      value = '\"' + value\n\n      // 3. Append U+0022 (\") to value.\n      value += '\"'\n    }\n\n    // 5. Append value to serialization.\n    serialization += value\n  }\n\n  // 3. Return serialization.\n  return serialization\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} char\n */\nfunction isHTTPWhiteSpace (char) {\n  return char === '\\r' || char === '\\n' || char === '\\t' || char === ' '\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#http-whitespace\n * @param {string} str\n */\nfunction removeHTTPWhitespace (str, leading = true, trailing = true) {\n  let lead = 0\n  let trail = str.length - 1\n\n  if (leading) {\n    for (; lead < str.length && isHTTPWhiteSpace(str[lead]); lead++);\n  }\n\n  if (trailing) {\n    for (; trail > 0 && isHTTPWhiteSpace(str[trail]); trail--);\n  }\n\n  return str.slice(lead, trail + 1)\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#ascii-whitespace\n * @param {string} char\n */\nfunction isASCIIWhitespace (char) {\n  return char === '\\r' || char === '\\n' || char === '\\t' || char === '\\f' || char === ' '\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\n */\nfunction removeASCIIWhitespace (str, leading = true, trailing = true) {\n  let lead = 0\n  let trail = str.length - 1\n\n  if (leading) {\n    for (; lead < str.length && isASCIIWhitespace(str[lead]); lead++);\n  }\n\n  if (trailing) {\n    for (; trail > 0 && isASCIIWhitespace(str[trail]); trail--);\n  }\n\n  return str.slice(lead, trail + 1)\n}\n\nmodule.exports = {\n  dataURLProcessor,\n  URLSerializer,\n  collectASequenceOfCodePoints,\n  collectASequenceOfCodePointsFast,\n  stringPercentDecode,\n  parseMIMEType,\n  collectAnHTTPQuotedString,\n  serializeAMimeType\n}\n", "'use strict'\n\nconst { Blob, File: NativeFile } = require('buffer')\nconst { types } = require('util')\nconst { kState } = require('./symbols')\nconst { isBlobLike } = require('./util')\nconst { webidl } = require('./webidl')\nconst { parseMIMEType, serializeAMimeType } = require('./dataURL')\nconst { kEnumerableProperty } = require('../core/util')\nconst encoder = new TextEncoder()\n\nclass File extends Blob {\n  constructor (fileBits, fileName, options = {}) {\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n    webidl.argumentLengthCheck(arguments, 2, { header: 'File constructor' })\n\n    fileBits = webidl.converters['sequence<BlobPart>'](fileBits)\n    fileName = webidl.converters.USVString(fileName)\n    options = webidl.converters.FilePropertyBag(options)\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n    // Note: Blob handles this for us\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    2. Convert every character in t to ASCII lowercase.\n    let t = options.type\n    let d\n\n    // eslint-disable-next-line no-labels\n    substep: {\n      if (t) {\n        t = parseMIMEType(t)\n\n        if (t === 'failure') {\n          t = ''\n          // eslint-disable-next-line no-labels\n          break substep\n        }\n\n        t = serializeAMimeType(t).toLowerCase()\n      }\n\n      //    3. If the lastModified member is provided, let d be set to the\n      //    lastModified dictionary member. If it is not provided, set d to the\n      //    current date and time represented as the number of milliseconds since\n      //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n      d = options.lastModified\n    }\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    super(processBlobParts(fileBits, options), { type: t })\n    this[kState] = {\n      name: n,\n      lastModified: d,\n      type: t\n    }\n  }\n\n  get name () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].lastModified\n  }\n\n  get type () {\n    webidl.brandCheck(this, File)\n\n    return this[kState].type\n  }\n}\n\nclass FileLike {\n  constructor (blobLike, fileName, options = {}) {\n    // TODO: argument idl type check\n\n    // The File constructor is invoked with two or three parameters, depending\n    // on whether the optional dictionary parameter is used. When the File()\n    // constructor is invoked, user agents must run the following steps:\n\n    // 1. Let bytes be the result of processing blob parts given fileBits and\n    // options.\n\n    // 2. Let n be the fileName argument to the constructor.\n    const n = fileName\n\n    // 3. Process FilePropertyBag dictionary argument by running the following\n    // substeps:\n\n    //    1. If the type member is provided and is not the empty string, let t\n    //    be set to the type dictionary member. If t contains any characters\n    //    outside the range U+0020 to U+007E, then set t to the empty string\n    //    and return from these substeps.\n    //    TODO\n    const t = options.type\n\n    //    2. Convert every character in t to ASCII lowercase.\n    //    TODO\n\n    //    3. If the lastModified member is provided, let d be set to the\n    //    lastModified dictionary member. If it is not provided, set d to the\n    //    current date and time represented as the number of milliseconds since\n    //    the Unix Epoch (which is the equivalent of Date.now() [ECMA-262]).\n    const d = options.lastModified ?? Date.now()\n\n    // 4. Return a new File object F such that:\n    // F refers to the bytes byte sequence.\n    // F.size is set to the number of total bytes in bytes.\n    // F.name is set to n.\n    // F.type is set to t.\n    // F.lastModified is set to d.\n\n    this[kState] = {\n      blobLike,\n      name: n,\n      type: t,\n      lastModified: d\n    }\n  }\n\n  stream (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.stream(...args)\n  }\n\n  arrayBuffer (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.arrayBuffer(...args)\n  }\n\n  slice (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.slice(...args)\n  }\n\n  text (...args) {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.text(...args)\n  }\n\n  get size () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.size\n  }\n\n  get type () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].blobLike.type\n  }\n\n  get name () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].name\n  }\n\n  get lastModified () {\n    webidl.brandCheck(this, FileLike)\n\n    return this[kState].lastModified\n  }\n\n  get [Symbol.toStringTag] () {\n    return 'File'\n  }\n}\n\nObject.defineProperties(File.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'File',\n    configurable: true\n  },\n  name: kEnumerableProperty,\n  lastModified: kEnumerableProperty\n})\n\nwebidl.converters.Blob = webidl.interfaceConverter(Blob)\n\nwebidl.converters.BlobPart = function (V, opts) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    if (\n      ArrayBuffer.isView(V) ||\n      types.isAnyArrayBuffer(V)\n    ) {\n      return webidl.converters.BufferSource(V, opts)\n    }\n  }\n\n  return webidl.converters.USVString(V, opts)\n}\n\nwebidl.converters['sequence<BlobPart>'] = webidl.sequenceConverter(\n  webidl.converters.BlobPart\n)\n\n// https://www.w3.org/TR/FileAPI/#dfn-FilePropertyBag\nwebidl.converters.FilePropertyBag = webidl.dictionaryConverter([\n  {\n    key: 'lastModified',\n    converter: webidl.converters['long long'],\n    get defaultValue () {\n      return Date.now()\n    }\n  },\n  {\n    key: 'type',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'endings',\n    converter: (value) => {\n      value = webidl.converters.DOMString(value)\n      value = value.toLowerCase()\n\n      if (value !== 'native') {\n        value = 'transparent'\n      }\n\n      return value\n    },\n    defaultValue: 'transparent'\n  }\n])\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#process-blob-parts\n * @param {(NodeJS.TypedArray|Blob|string)[]} parts\n * @param {{ type: string, endings: string }} options\n */\nfunction processBlobParts (parts, options) {\n  // 1. Let bytes be an empty sequence of bytes.\n  /** @type {NodeJS.TypedArray[]} */\n  const bytes = []\n\n  // 2. For each element in parts:\n  for (const element of parts) {\n    // 1. If element is a USVString, run the following substeps:\n    if (typeof element === 'string') {\n      // 1. Let s be element.\n      let s = element\n\n      // 2. If the endings member of options is \"native\", set s\n      //    to the result of converting line endings to native\n      //    of element.\n      if (options.endings === 'native') {\n        s = convertLineEndingsNative(s)\n      }\n\n      // 3. Append the result of UTF-8 encoding s to bytes.\n      bytes.push(encoder.encode(s))\n    } else if (\n      types.isAnyArrayBuffer(element) ||\n      types.isTypedArray(element)\n    ) {\n      // 2. If element is a BufferSource, get a copy of the\n      //    bytes held by the buffer source, and append those\n      //    bytes to bytes.\n      if (!element.buffer) { // ArrayBuffer\n        bytes.push(new Uint8Array(element))\n      } else {\n        bytes.push(\n          new Uint8Array(element.buffer, element.byteOffset, element.byteLength)\n        )\n      }\n    } else if (isBlobLike(element)) {\n      // 3. If element is a Blob, append the bytes it represents\n      //    to bytes.\n      bytes.push(element)\n    }\n  }\n\n  // 3. Return bytes.\n  return bytes\n}\n\n/**\n * @see https://www.w3.org/TR/FileAPI/#convert-line-endings-to-native\n * @param {string} s\n */\nfunction convertLineEndingsNative (s) {\n  // 1. Let native line ending be be the code point U+000A LF.\n  let nativeLineEnding = '\\n'\n\n  // 2. If the underlying platform\u2019s conventions are to\n  //    represent newlines as a carriage return and line feed\n  //    sequence, set native line ending to the code point\n  //    U+000D CR followed by the code point U+000A LF.\n  if (process.platform === 'win32') {\n    nativeLineEnding = '\\r\\n'\n  }\n\n  return s.replace(/\\r?\\n/g, nativeLineEnding)\n}\n\n// If this function is moved to ./util.js, some tools (such as\n// rollup) will warn about circular dependencies. See:\n// https://github.com/nodejs/undici/issues/1629\nfunction isFileLike (object) {\n  return (\n    (NativeFile && object instanceof NativeFile) ||\n    object instanceof File || (\n      object &&\n      (typeof object.stream === 'function' ||\n      typeof object.arrayBuffer === 'function') &&\n      object[Symbol.toStringTag] === 'File'\n    )\n  )\n}\n\nmodule.exports = { File, FileLike, isFileLike }\n", "'use strict'\n\nconst { isBlobLike, toUSVString, makeIterator } = require('./util')\nconst { kState } = require('./symbols')\nconst { File: UndiciFile, FileLike, isFileLike } = require('./file')\nconst { webidl } = require('./webidl')\nconst { Blob, File: NativeFile } = require('buffer')\n\n/** @type {globalThis['File']} */\nconst File = NativeFile ?? UndiciFile\n\n// https://xhr.spec.whatwg.org/#formdata\nclass FormData {\n  constructor (form) {\n    if (form !== undefined) {\n      throw webidl.errors.conversionFailed({\n        prefix: 'FormData constructor',\n        argument: 'Argument 1',\n        types: ['undefined']\n      })\n    }\n\n    this[kState] = []\n  }\n\n  append (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.append' })\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'append' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? webidl.converters.USVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with\n    // name, value, and filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. Append entry to this\u2019s entry list.\n    this[kState].push(entry)\n  }\n\n  delete (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.delete' })\n\n    name = webidl.converters.USVString(name)\n\n    // The delete(name) method steps are to remove all entries whose name\n    // is name from this\u2019s entry list.\n    this[kState] = this[kState].filter(entry => entry.name !== name)\n  }\n\n  get (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.get' })\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this\u2019s entry list,\n    // then return null.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx === -1) {\n      return null\n    }\n\n    // 2. Return the value of the first entry whose name is name from\n    // this\u2019s entry list.\n    return this[kState][idx].value\n  }\n\n  getAll (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.getAll' })\n\n    name = webidl.converters.USVString(name)\n\n    // 1. If there is no entry whose name is name in this\u2019s entry list,\n    // then return the empty list.\n    // 2. Return the values of all entries whose name is name, in order,\n    // from this\u2019s entry list.\n    return this[kState]\n      .filter((entry) => entry.name === name)\n      .map((entry) => entry.value)\n  }\n\n  has (name) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.has' })\n\n    name = webidl.converters.USVString(name)\n\n    // The has(name) method steps are to return true if there is an entry\n    // whose name is name in this\u2019s entry list; otherwise false.\n    return this[kState].findIndex((entry) => entry.name === name) !== -1\n  }\n\n  set (name, value, filename = undefined) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'FormData.set' })\n\n    if (arguments.length === 3 && !isBlobLike(value)) {\n      throw new TypeError(\n        \"Failed to execute 'set' on 'FormData': parameter 2 is not of type 'Blob'\"\n      )\n    }\n\n    // The set(name, value) and set(name, blobValue, filename) method steps\n    // are:\n\n    // 1. Let value be value if given; otherwise blobValue.\n\n    name = webidl.converters.USVString(name)\n    value = isBlobLike(value)\n      ? webidl.converters.Blob(value, { strict: false })\n      : webidl.converters.USVString(value)\n    filename = arguments.length === 3\n      ? toUSVString(filename)\n      : undefined\n\n    // 2. Let entry be the result of creating an entry with name, value, and\n    // filename if given.\n    const entry = makeEntry(name, value, filename)\n\n    // 3. If there are entries in this\u2019s entry list whose name is name, then\n    // replace the first such entry with entry and remove the others.\n    const idx = this[kState].findIndex((entry) => entry.name === name)\n    if (idx !== -1) {\n      this[kState] = [\n        ...this[kState].slice(0, idx),\n        entry,\n        ...this[kState].slice(idx + 1).filter((entry) => entry.name !== name)\n      ]\n    } else {\n      // 4. Otherwise, append entry to this\u2019s entry list.\n      this[kState].push(entry)\n    }\n  }\n\n  entries () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'key+value'\n    )\n  }\n\n  keys () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, FormData)\n\n    return makeIterator(\n      () => this[kState].map(pair => [pair.name, pair.value]),\n      'FormData',\n      'value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: FormData) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, FormData)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FormData.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'FormData': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n}\n\nFormData.prototype[Symbol.iterator] = FormData.prototype.entries\n\nObject.defineProperties(FormData.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'FormData',\n    configurable: true\n  }\n})\n\n/**\n * @see https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#create-an-entry\n * @param {string} name\n * @param {string|Blob} value\n * @param {?string} filename\n * @returns\n */\nfunction makeEntry (name, value, filename) {\n  // 1. Set name to the result of converting name into a scalar value string.\n  // \"To convert a string into a scalar value string, replace any surrogates\n  //  with U+FFFD.\"\n  // see: https://nodejs.org/dist/latest-v18.x/docs/api/buffer.html#buftostringencoding-start-end\n  name = Buffer.from(name).toString('utf8')\n\n  // 2. If value is a string, then set value to the result of converting\n  //    value into a scalar value string.\n  if (typeof value === 'string') {\n    value = Buffer.from(value).toString('utf8')\n  } else {\n    // 3. Otherwise:\n\n    // 1. If value is not a File object, then set value to a new File object,\n    //    representing the same bytes, whose name attribute value is \"blob\"\n    if (!isFileLike(value)) {\n      value = value instanceof Blob\n        ? new File([value], 'blob', { type: value.type })\n        : new FileLike(value, 'blob', { type: value.type })\n    }\n\n    // 2. If filename is given, then set value to a new File object,\n    //    representing the same bytes, whose name attribute is filename.\n    if (filename !== undefined) {\n      /** @type {FilePropertyBag} */\n      const options = {\n        type: value.type,\n        lastModified: value.lastModified\n      }\n\n      value = (NativeFile && value instanceof NativeFile) || value instanceof UndiciFile\n        ? new File([value], filename, options)\n        : new FileLike(value, filename, options)\n    }\n  }\n\n  // 4. Return an entry whose name is name and whose value is value.\n  return { name, value }\n}\n\nmodule.exports = { FormData }\n", "'use strict'\n\nconst Busboy = require('@fastify/busboy')\nconst util = require('../core/util')\nconst {\n  ReadableStreamFrom,\n  isBlobLike,\n  isReadableStreamLike,\n  readableStreamClose,\n  createDeferredPromise,\n  fullyReadBody\n} = require('./util')\nconst { FormData } = require('./formdata')\nconst { kState } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { DOMException, structuredClone } = require('./constants')\nconst { Blob, File: NativeFile } = require('buffer')\nconst { kBodyUsed } = require('../core/symbols')\nconst assert = require('assert')\nconst { isErrored } = require('../core/util')\nconst { isUint8Array, isArrayBuffer } = require('util/types')\nconst { File: UndiciFile } = require('./file')\nconst { parseMIMEType, serializeAMimeType } = require('./dataURL')\n\nlet random\ntry {\n  const crypto = require('node:crypto')\n  random = (max) => crypto.randomInt(0, max)\n} catch {\n  random = (max) => Math.floor(Math.random(max))\n}\n\nlet ReadableStream = globalThis.ReadableStream\n\n/** @type {globalThis['File']} */\nconst File = NativeFile ?? UndiciFile\nconst textEncoder = new TextEncoder()\nconst textDecoder = new TextDecoder()\n\n// https://fetch.spec.whatwg.org/#concept-bodyinit-extract\nfunction extractBody (object, keepalive = false) {\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  // 1. Let stream be null.\n  let stream = null\n\n  // 2. If object is a ReadableStream object, then set stream to object.\n  if (object instanceof ReadableStream) {\n    stream = object\n  } else if (isBlobLike(object)) {\n    // 3. Otherwise, if object is a Blob object, set stream to the\n    //    result of running object\u2019s get stream.\n    stream = object.stream()\n  } else {\n    // 4. Otherwise, set stream to a new ReadableStream object, and set\n    //    up stream.\n    stream = new ReadableStream({\n      async pull (controller) {\n        controller.enqueue(\n          typeof source === 'string' ? textEncoder.encode(source) : source\n        )\n        queueMicrotask(() => readableStreamClose(controller))\n      },\n      start () {},\n      type: undefined\n    })\n  }\n\n  // 5. Assert: stream is a ReadableStream object.\n  assert(isReadableStreamLike(stream))\n\n  // 6. Let action be null.\n  let action = null\n\n  // 7. Let source be null.\n  let source = null\n\n  // 8. Let length be null.\n  let length = null\n\n  // 9. Let type be null.\n  let type = null\n\n  // 10. Switch on object:\n  if (typeof object === 'string') {\n    // Set source to the UTF-8 encoding of object.\n    // Note: setting source to a Uint8Array here breaks some mocking assumptions.\n    source = object\n\n    // Set type to `text/plain;charset=UTF-8`.\n    type = 'text/plain;charset=UTF-8'\n  } else if (object instanceof URLSearchParams) {\n    // URLSearchParams\n\n    // spec says to run application/x-www-form-urlencoded on body.list\n    // this is implemented in Node.js as apart of an URLSearchParams instance toString method\n    // See: https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L490\n    // and https://github.com/nodejs/node/blob/e46c680bf2b211bbd52cf959ca17ee98c7f657f5/lib/internal/url.js#L1100\n\n    // Set source to the result of running the application/x-www-form-urlencoded serializer with object\u2019s list.\n    source = object.toString()\n\n    // Set type to `application/x-www-form-urlencoded;charset=UTF-8`.\n    type = 'application/x-www-form-urlencoded;charset=UTF-8'\n  } else if (isArrayBuffer(object)) {\n    // BufferSource/ArrayBuffer\n\n    // Set source to a copy of the bytes held by object.\n    source = new Uint8Array(object.slice())\n  } else if (ArrayBuffer.isView(object)) {\n    // BufferSource/ArrayBufferView\n\n    // Set source to a copy of the bytes held by object.\n    source = new Uint8Array(object.buffer.slice(object.byteOffset, object.byteOffset + object.byteLength))\n  } else if (util.isFormDataLike(object)) {\n    const boundary = `----formdata-undici-0${`${random(1e11)}`.padStart(11, '0')}`\n    const prefix = `--${boundary}\\r\\nContent-Disposition: form-data`\n\n    /*! formdata-polyfill. MIT License. Jimmy W\u00E4rting <https://jimmy.warting.se/opensource> */\n    const escape = (str) =>\n      str.replace(/\\n/g, '%0A').replace(/\\r/g, '%0D').replace(/\"/g, '%22')\n    const normalizeLinefeeds = (value) => value.replace(/\\r?\\n|\\r/g, '\\r\\n')\n\n    // Set action to this step: run the multipart/form-data\n    // encoding algorithm, with object\u2019s entry list and UTF-8.\n    // - This ensures that the body is immutable and can't be changed afterwords\n    // - That the content-length is calculated in advance.\n    // - And that all parts are pre-encoded and ready to be sent.\n\n    const blobParts = []\n    const rn = new Uint8Array([13, 10]) // '\\r\\n'\n    length = 0\n    let hasUnknownSizeValue = false\n\n    for (const [name, value] of object) {\n      if (typeof value === 'string') {\n        const chunk = textEncoder.encode(prefix +\n          `; name=\"${escape(normalizeLinefeeds(name))}\"` +\n          `\\r\\n\\r\\n${normalizeLinefeeds(value)}\\r\\n`)\n        blobParts.push(chunk)\n        length += chunk.byteLength\n      } else {\n        const chunk = textEncoder.encode(`${prefix}; name=\"${escape(normalizeLinefeeds(name))}\"` +\n          (value.name ? `; filename=\"${escape(value.name)}\"` : '') + '\\r\\n' +\n          `Content-Type: ${\n            value.type || 'application/octet-stream'\n          }\\r\\n\\r\\n`)\n        blobParts.push(chunk, value, rn)\n        if (typeof value.size === 'number') {\n          length += chunk.byteLength + value.size + rn.byteLength\n        } else {\n          hasUnknownSizeValue = true\n        }\n      }\n    }\n\n    const chunk = textEncoder.encode(`--${boundary}--`)\n    blobParts.push(chunk)\n    length += chunk.byteLength\n    if (hasUnknownSizeValue) {\n      length = null\n    }\n\n    // Set source to object.\n    source = object\n\n    action = async function * () {\n      for (const part of blobParts) {\n        if (part.stream) {\n          yield * part.stream()\n        } else {\n          yield part\n        }\n      }\n    }\n\n    // Set type to `multipart/form-data; boundary=`,\n    // followed by the multipart/form-data boundary string generated\n    // by the multipart/form-data encoding algorithm.\n    type = 'multipart/form-data; boundary=' + boundary\n  } else if (isBlobLike(object)) {\n    // Blob\n\n    // Set source to object.\n    source = object\n\n    // Set length to object\u2019s size.\n    length = object.size\n\n    // If object\u2019s type attribute is not the empty byte sequence, set\n    // type to its value.\n    if (object.type) {\n      type = object.type\n    }\n  } else if (typeof object[Symbol.asyncIterator] === 'function') {\n    // If keepalive is true, then throw a TypeError.\n    if (keepalive) {\n      throw new TypeError('keepalive')\n    }\n\n    // If object is disturbed or locked, then throw a TypeError.\n    if (util.isDisturbed(object) || object.locked) {\n      throw new TypeError(\n        'Response body object should not be disturbed or locked'\n      )\n    }\n\n    stream =\n      object instanceof ReadableStream ? object : ReadableStreamFrom(object)\n  }\n\n  // 11. If source is a byte sequence, then set action to a\n  // step that returns source and length to source\u2019s length.\n  if (typeof source === 'string' || util.isBuffer(source)) {\n    length = Buffer.byteLength(source)\n  }\n\n  // 12. If action is non-null, then run these steps in in parallel:\n  if (action != null) {\n    // Run action.\n    let iterator\n    stream = new ReadableStream({\n      async start () {\n        iterator = action(object)[Symbol.asyncIterator]()\n      },\n      async pull (controller) {\n        const { value, done } = await iterator.next()\n        if (done) {\n          // When running action is done, close stream.\n          queueMicrotask(() => {\n            controller.close()\n          })\n        } else {\n          // Whenever one or more bytes are available and stream is not errored,\n          // enqueue a Uint8Array wrapping an ArrayBuffer containing the available\n          // bytes into stream.\n          if (!isErrored(stream)) {\n            controller.enqueue(new Uint8Array(value))\n          }\n        }\n        return controller.desiredSize > 0\n      },\n      async cancel (reason) {\n        await iterator.return()\n      },\n      type: undefined\n    })\n  }\n\n  // 13. Let body be a body whose stream is stream, source is source,\n  // and length is length.\n  const body = { stream, source, length }\n\n  // 14. Return (body, type).\n  return [body, type]\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit-safely-extract\nfunction safelyExtractBody (object, keepalive = false) {\n  if (!ReadableStream) {\n    // istanbul ignore next\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  // To safely extract a body and a `Content-Type` value from\n  // a byte sequence or BodyInit object object, run these steps:\n\n  // 1. If object is a ReadableStream object, then:\n  if (object instanceof ReadableStream) {\n    // Assert: object is neither disturbed nor locked.\n    // istanbul ignore next\n    assert(!util.isDisturbed(object), 'The body has already been consumed.')\n    // istanbul ignore next\n    assert(!object.locked, 'The stream is locked.')\n  }\n\n  // 2. Return the results of extracting object.\n  return extractBody(object, keepalive)\n}\n\nfunction cloneBody (body) {\n  // To clone a body body, run these steps:\n\n  // https://fetch.spec.whatwg.org/#concept-body-clone\n\n  // 1. Let \u00AB out1, out2 \u00BB be the result of teeing body\u2019s stream.\n  const [out1, out2] = body.stream.tee()\n  const out2Clone = structuredClone(out2, { transfer: [out2] })\n  // This, for whatever reasons, unrefs out2Clone which allows\n  // the process to exit by itself.\n  const [, finalClone] = out2Clone.tee()\n\n  // 2. Set body\u2019s stream to out1.\n  body.stream = out1\n\n  // 3. Return a body whose stream is out2 and other members are copied from body.\n  return {\n    stream: finalClone,\n    length: body.length,\n    source: body.source\n  }\n}\n\nasync function * consumeBody (body) {\n  if (body) {\n    if (isUint8Array(body)) {\n      yield body\n    } else {\n      const stream = body.stream\n\n      if (util.isDisturbed(stream)) {\n        throw new TypeError('The body has already been consumed.')\n      }\n\n      if (stream.locked) {\n        throw new TypeError('The stream is locked.')\n      }\n\n      // Compat.\n      stream[kBodyUsed] = true\n\n      yield * stream\n    }\n  }\n}\n\nfunction throwIfAborted (state) {\n  if (state.aborted) {\n    throw new DOMException('The operation was aborted.', 'AbortError')\n  }\n}\n\nfunction bodyMixinMethods (instance) {\n  const methods = {\n    blob () {\n      // The blob() method steps are to return the result of\n      // running consume body with this and the following step\n      // given a byte sequence bytes: return a Blob whose\n      // contents are bytes and whose type attribute is this\u2019s\n      // MIME type.\n      return specConsumeBody(this, (bytes) => {\n        let mimeType = bodyMimeType(this)\n\n        if (mimeType === 'failure') {\n          mimeType = ''\n        } else if (mimeType) {\n          mimeType = serializeAMimeType(mimeType)\n        }\n\n        // Return a Blob whose contents are bytes and type attribute\n        // is mimeType.\n        return new Blob([bytes], { type: mimeType })\n      }, instance)\n    },\n\n    arrayBuffer () {\n      // The arrayBuffer() method steps are to return the result\n      // of running consume body with this and the following step\n      // given a byte sequence bytes: return a new ArrayBuffer\n      // whose contents are bytes.\n      return specConsumeBody(this, (bytes) => {\n        return new Uint8Array(bytes).buffer\n      }, instance)\n    },\n\n    text () {\n      // The text() method steps are to return the result of running\n      // consume body with this and UTF-8 decode.\n      return specConsumeBody(this, utf8DecodeBytes, instance)\n    },\n\n    json () {\n      // The json() method steps are to return the result of running\n      // consume body with this and parse JSON from bytes.\n      return specConsumeBody(this, parseJSONFromBytes, instance)\n    },\n\n    async formData () {\n      webidl.brandCheck(this, instance)\n\n      throwIfAborted(this[kState])\n\n      const contentType = this.headers.get('Content-Type')\n\n      // If mimeType\u2019s essence is \"multipart/form-data\", then:\n      if (/multipart\\/form-data/.test(contentType)) {\n        const headers = {}\n        for (const [key, value] of this.headers) headers[key.toLowerCase()] = value\n\n        const responseFormData = new FormData()\n\n        let busboy\n\n        try {\n          busboy = new Busboy({\n            headers,\n            preservePath: true\n          })\n        } catch (err) {\n          throw new DOMException(`${err}`, 'AbortError')\n        }\n\n        busboy.on('field', (name, value) => {\n          responseFormData.append(name, value)\n        })\n        busboy.on('file', (name, value, filename, encoding, mimeType) => {\n          const chunks = []\n\n          if (encoding === 'base64' || encoding.toLowerCase() === 'base64') {\n            let base64chunk = ''\n\n            value.on('data', (chunk) => {\n              base64chunk += chunk.toString().replace(/[\\r\\n]/gm, '')\n\n              const end = base64chunk.length - base64chunk.length % 4\n              chunks.push(Buffer.from(base64chunk.slice(0, end), 'base64'))\n\n              base64chunk = base64chunk.slice(end)\n            })\n            value.on('end', () => {\n              chunks.push(Buffer.from(base64chunk, 'base64'))\n              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))\n            })\n          } else {\n            value.on('data', (chunk) => {\n              chunks.push(chunk)\n            })\n            value.on('end', () => {\n              responseFormData.append(name, new File(chunks, filename, { type: mimeType }))\n            })\n          }\n        })\n\n        const busboyResolve = new Promise((resolve, reject) => {\n          busboy.on('finish', resolve)\n          busboy.on('error', (err) => reject(new TypeError(err)))\n        })\n\n        if (this.body !== null) for await (const chunk of consumeBody(this[kState].body)) busboy.write(chunk)\n        busboy.end()\n        await busboyResolve\n\n        return responseFormData\n      } else if (/application\\/x-www-form-urlencoded/.test(contentType)) {\n        // Otherwise, if mimeType\u2019s essence is \"application/x-www-form-urlencoded\", then:\n\n        // 1. Let entries be the result of parsing bytes.\n        let entries\n        try {\n          let text = ''\n          // application/x-www-form-urlencoded parser will keep the BOM.\n          // https://url.spec.whatwg.org/#concept-urlencoded-parser\n          // Note that streaming decoder is stateful and cannot be reused\n          const streamingDecoder = new TextDecoder('utf-8', { ignoreBOM: true })\n\n          for await (const chunk of consumeBody(this[kState].body)) {\n            if (!isUint8Array(chunk)) {\n              throw new TypeError('Expected Uint8Array chunk')\n            }\n            text += streamingDecoder.decode(chunk, { stream: true })\n          }\n          text += streamingDecoder.decode()\n          entries = new URLSearchParams(text)\n        } catch (err) {\n          // istanbul ignore next: Unclear when new URLSearchParams can fail on a string.\n          // 2. If entries is failure, then throw a TypeError.\n          throw Object.assign(new TypeError(), { cause: err })\n        }\n\n        // 3. Return a new FormData object whose entries are entries.\n        const formData = new FormData()\n        for (const [name, value] of entries) {\n          formData.append(name, value)\n        }\n        return formData\n      } else {\n        // Wait a tick before checking if the request has been aborted.\n        // Otherwise, a TypeError can be thrown when an AbortError should.\n        await Promise.resolve()\n\n        throwIfAborted(this[kState])\n\n        // Otherwise, throw a TypeError.\n        throw webidl.errors.exception({\n          header: `${instance.name}.formData`,\n          message: 'Could not parse content as FormData.'\n        })\n      }\n    }\n  }\n\n  return methods\n}\n\nfunction mixinBody (prototype) {\n  Object.assign(prototype.prototype, bodyMixinMethods(prototype))\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-consume-body\n * @param {Response|Request} object\n * @param {(value: unknown) => unknown} convertBytesToJSValue\n * @param {Response|Request} instance\n */\nasync function specConsumeBody (object, convertBytesToJSValue, instance) {\n  webidl.brandCheck(object, instance)\n\n  throwIfAborted(object[kState])\n\n  // 1. If object is unusable, then return a promise rejected\n  //    with a TypeError.\n  if (bodyUnusable(object[kState].body)) {\n    throw new TypeError('Body is unusable')\n  }\n\n  // 2. Let promise be a new promise.\n  const promise = createDeferredPromise()\n\n  // 3. Let errorSteps given error be to reject promise with error.\n  const errorSteps = (error) => promise.reject(error)\n\n  // 4. Let successSteps given a byte sequence data be to resolve\n  //    promise with the result of running convertBytesToJSValue\n  //    with data. If that threw an exception, then run errorSteps\n  //    with that exception.\n  const successSteps = (data) => {\n    try {\n      promise.resolve(convertBytesToJSValue(data))\n    } catch (e) {\n      errorSteps(e)\n    }\n  }\n\n  // 5. If object\u2019s body is null, then run successSteps with an\n  //    empty byte sequence.\n  if (object[kState].body == null) {\n    successSteps(new Uint8Array())\n    return promise.promise\n  }\n\n  // 6. Otherwise, fully read object\u2019s body given successSteps,\n  //    errorSteps, and object\u2019s relevant global object.\n  await fullyReadBody(object[kState].body, successSteps, errorSteps)\n\n  // 7. Return promise.\n  return promise.promise\n}\n\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction bodyUnusable (body) {\n  // An object including the Body interface mixin is\n  // said to be unusable if its body is non-null and\n  // its body\u2019s stream is disturbed or locked.\n  return body != null && (body.stream.locked || util.isDisturbed(body.stream))\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#utf-8-decode\n * @param {Buffer} buffer\n */\nfunction utf8DecodeBytes (buffer) {\n  if (buffer.length === 0) {\n    return ''\n  }\n\n  // 1. Let buffer be the result of peeking three bytes from\n  //    ioQueue, converted to a byte sequence.\n\n  // 2. If buffer is 0xEF 0xBB 0xBF, then read three\n  //    bytes from ioQueue. (Do nothing with those bytes.)\n  if (buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n    buffer = buffer.subarray(3)\n  }\n\n  // 3. Process a queue with an instance of UTF-8\u2019s\n  //    decoder, ioQueue, output, and \"replacement\".\n  const output = textDecoder.decode(buffer)\n\n  // 4. Return output.\n  return output\n}\n\n/**\n * @see https://infra.spec.whatwg.org/#parse-json-bytes-to-a-javascript-value\n * @param {Uint8Array} bytes\n */\nfunction parseJSONFromBytes (bytes) {\n  return JSON.parse(utf8DecodeBytes(bytes))\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-body-mime-type\n * @param {import('./response').Response|import('./request').Request} object\n */\nfunction bodyMimeType (object) {\n  const { headersList } = object[kState]\n  const contentType = headersList.get('content-type')\n\n  if (contentType === null) {\n    return 'failure'\n  }\n\n  return parseMIMEType(contentType)\n}\n\nmodule.exports = {\n  extractBody,\n  safelyExtractBody,\n  cloneBody,\n  mixinBody\n}\n", "'use strict'\n\nconst {\n  InvalidArgumentError,\n  NotSupportedError\n} = require('./errors')\nconst assert = require('assert')\nconst { kHTTP2BuildRequest, kHTTP2CopyHeaders, kHTTP1BuildRequest } = require('./symbols')\nconst util = require('./util')\n\n// tokenRegExp and headerCharRegex have been lifted from\n// https://github.com/nodejs/node/blob/main/lib/_http_common.js\n\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n */\nconst tokenRegExp = /^[\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]+$/\n\n/**\n * Matches if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n */\nconst headerCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/\n\n// Verifies that a given path is valid does not contain control chars \\x00 to \\x20\nconst invalidPathRegex = /[^\\u0021-\\u00ff]/\n\nconst kHandler = Symbol('handler')\n\nconst channels = {}\n\nlet extractBody\n\ntry {\n  const diagnosticsChannel = require('diagnostics_channel')\n  channels.create = diagnosticsChannel.channel('undici:request:create')\n  channels.bodySent = diagnosticsChannel.channel('undici:request:bodySent')\n  channels.headers = diagnosticsChannel.channel('undici:request:headers')\n  channels.trailers = diagnosticsChannel.channel('undici:request:trailers')\n  channels.error = diagnosticsChannel.channel('undici:request:error')\n} catch {\n  channels.create = { hasSubscribers: false }\n  channels.bodySent = { hasSubscribers: false }\n  channels.headers = { hasSubscribers: false }\n  channels.trailers = { hasSubscribers: false }\n  channels.error = { hasSubscribers: false }\n}\n\nclass Request {\n  constructor (origin, {\n    path,\n    method,\n    body,\n    headers,\n    query,\n    idempotent,\n    blocking,\n    upgrade,\n    headersTimeout,\n    bodyTimeout,\n    reset,\n    throwOnError,\n    expectContinue\n  }, handler) {\n    if (typeof path !== 'string') {\n      throw new InvalidArgumentError('path must be a string')\n    } else if (\n      path[0] !== '/' &&\n      !(path.startsWith('http://') || path.startsWith('https://')) &&\n      method !== 'CONNECT'\n    ) {\n      throw new InvalidArgumentError('path must be an absolute URL or start with a slash')\n    } else if (invalidPathRegex.exec(path) !== null) {\n      throw new InvalidArgumentError('invalid request path')\n    }\n\n    if (typeof method !== 'string') {\n      throw new InvalidArgumentError('method must be a string')\n    } else if (tokenRegExp.exec(method) === null) {\n      throw new InvalidArgumentError('invalid request method')\n    }\n\n    if (upgrade && typeof upgrade !== 'string') {\n      throw new InvalidArgumentError('upgrade must be a string')\n    }\n\n    if (headersTimeout != null && (!Number.isFinite(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('invalid headersTimeout')\n    }\n\n    if (bodyTimeout != null && (!Number.isFinite(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('invalid bodyTimeout')\n    }\n\n    if (reset != null && typeof reset !== 'boolean') {\n      throw new InvalidArgumentError('invalid reset')\n    }\n\n    if (expectContinue != null && typeof expectContinue !== 'boolean') {\n      throw new InvalidArgumentError('invalid expectContinue')\n    }\n\n    this.headersTimeout = headersTimeout\n\n    this.bodyTimeout = bodyTimeout\n\n    this.throwOnError = throwOnError === true\n\n    this.method = method\n\n    this.abort = null\n\n    if (body == null) {\n      this.body = null\n    } else if (util.isStream(body)) {\n      this.body = body\n\n      const rState = this.body._readableState\n      if (!rState || !rState.autoDestroy) {\n        this.endHandler = function autoDestroy () {\n          util.destroy(this)\n        }\n        this.body.on('end', this.endHandler)\n      }\n\n      this.errorHandler = err => {\n        if (this.abort) {\n          this.abort(err)\n        } else {\n          this.error = err\n        }\n      }\n      this.body.on('error', this.errorHandler)\n    } else if (util.isBuffer(body)) {\n      this.body = body.byteLength ? body : null\n    } else if (ArrayBuffer.isView(body)) {\n      this.body = body.buffer.byteLength ? Buffer.from(body.buffer, body.byteOffset, body.byteLength) : null\n    } else if (body instanceof ArrayBuffer) {\n      this.body = body.byteLength ? Buffer.from(body) : null\n    } else if (typeof body === 'string') {\n      this.body = body.length ? Buffer.from(body) : null\n    } else if (util.isFormDataLike(body) || util.isIterable(body) || util.isBlobLike(body)) {\n      this.body = body\n    } else {\n      throw new InvalidArgumentError('body must be a string, a Buffer, a Readable stream, an iterable, or an async iterable')\n    }\n\n    this.completed = false\n\n    this.aborted = false\n\n    this.upgrade = upgrade || null\n\n    this.path = query ? util.buildURL(path, query) : path\n\n    this.origin = origin\n\n    this.idempotent = idempotent == null\n      ? method === 'HEAD' || method === 'GET'\n      : idempotent\n\n    this.blocking = blocking == null ? false : blocking\n\n    this.reset = reset == null ? null : reset\n\n    this.host = null\n\n    this.contentLength = null\n\n    this.contentType = null\n\n    this.headers = ''\n\n    // Only for H2\n    this.expectContinue = expectContinue != null ? expectContinue : false\n\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even')\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(this, headers[i], headers[i + 1])\n      }\n    } else if (headers && typeof headers === 'object') {\n      const keys = Object.keys(headers)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        processHeader(this, key, headers[key])\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array')\n    }\n\n    if (util.isFormDataLike(this.body)) {\n      if (util.nodeMajor < 16 || (util.nodeMajor === 16 && util.nodeMinor < 8)) {\n        throw new InvalidArgumentError('Form-Data bodies are only supported in node v16.8 and newer.')\n      }\n\n      if (!extractBody) {\n        extractBody = require('../fetch/body.js').extractBody\n      }\n\n      const [bodyStream, contentType] = extractBody(body)\n      if (this.contentType == null) {\n        this.contentType = contentType\n        this.headers += `content-type: ${contentType}\\r\\n`\n      }\n      this.body = bodyStream.stream\n      this.contentLength = bodyStream.length\n    } else if (util.isBlobLike(body) && this.contentType == null && body.type) {\n      this.contentType = body.type\n      this.headers += `content-type: ${body.type}\\r\\n`\n    }\n\n    util.validateHandler(handler, method, upgrade)\n\n    this.servername = util.getServerName(this.host)\n\n    this[kHandler] = handler\n\n    if (channels.create.hasSubscribers) {\n      channels.create.publish({ request: this })\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this[kHandler].onBodySent) {\n      try {\n        return this[kHandler].onBodySent(chunk)\n      } catch (err) {\n        this.abort(err)\n      }\n    }\n  }\n\n  onRequestSent () {\n    if (channels.bodySent.hasSubscribers) {\n      channels.bodySent.publish({ request: this })\n    }\n\n    if (this[kHandler].onRequestSent) {\n      try {\n        return this[kHandler].onRequestSent()\n      } catch (err) {\n        this.abort(err)\n      }\n    }\n  }\n\n  onConnect (abort) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    if (this.error) {\n      abort(this.error)\n    } else {\n      this.abort = abort\n      return this[kHandler].onConnect(abort)\n    }\n  }\n\n  onHeaders (statusCode, headers, resume, statusText) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    if (channels.headers.hasSubscribers) {\n      channels.headers.publish({ request: this, response: { statusCode, headers, statusText } })\n    }\n\n    try {\n      return this[kHandler].onHeaders(statusCode, headers, resume, statusText)\n    } catch (err) {\n      this.abort(err)\n    }\n  }\n\n  onData (chunk) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    try {\n      return this[kHandler].onData(chunk)\n    } catch (err) {\n      this.abort(err)\n      return false\n    }\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    assert(!this.aborted)\n    assert(!this.completed)\n\n    return this[kHandler].onUpgrade(statusCode, headers, socket)\n  }\n\n  onComplete (trailers) {\n    this.onFinally()\n\n    assert(!this.aborted)\n\n    this.completed = true\n    if (channels.trailers.hasSubscribers) {\n      channels.trailers.publish({ request: this, trailers })\n    }\n\n    try {\n      return this[kHandler].onComplete(trailers)\n    } catch (err) {\n      // TODO (fix): This might be a bad idea?\n      this.onError(err)\n    }\n  }\n\n  onError (error) {\n    this.onFinally()\n\n    if (channels.error.hasSubscribers) {\n      channels.error.publish({ request: this, error })\n    }\n\n    if (this.aborted) {\n      return\n    }\n    this.aborted = true\n\n    return this[kHandler].onError(error)\n  }\n\n  onFinally () {\n    if (this.errorHandler) {\n      this.body.off('error', this.errorHandler)\n      this.errorHandler = null\n    }\n\n    if (this.endHandler) {\n      this.body.off('end', this.endHandler)\n      this.endHandler = null\n    }\n  }\n\n  // TODO: adjust to support H2\n  addHeader (key, value) {\n    processHeader(this, key, value)\n    return this\n  }\n\n  static [kHTTP1BuildRequest] (origin, opts, handler) {\n    // TODO: Migrate header parsing here, to make Requests\n    // HTTP agnostic\n    return new Request(origin, opts, handler)\n  }\n\n  static [kHTTP2BuildRequest] (origin, opts, handler) {\n    const headers = opts.headers\n    opts = { ...opts, headers: null }\n\n    const request = new Request(origin, opts, handler)\n\n    request.headers = {}\n\n    if (Array.isArray(headers)) {\n      if (headers.length % 2 !== 0) {\n        throw new InvalidArgumentError('headers array must be even')\n      }\n      for (let i = 0; i < headers.length; i += 2) {\n        processHeader(request, headers[i], headers[i + 1], true)\n      }\n    } else if (headers && typeof headers === 'object') {\n      const keys = Object.keys(headers)\n      for (let i = 0; i < keys.length; i++) {\n        const key = keys[i]\n        processHeader(request, key, headers[key], true)\n      }\n    } else if (headers != null) {\n      throw new InvalidArgumentError('headers must be an object or an array')\n    }\n\n    return request\n  }\n\n  static [kHTTP2CopyHeaders] (raw) {\n    const rawHeaders = raw.split('\\r\\n')\n    const headers = {}\n\n    for (const header of rawHeaders) {\n      const [key, value] = header.split(': ')\n\n      if (value == null || value.length === 0) continue\n\n      if (headers[key]) headers[key] += `,${value}`\n      else headers[key] = value\n    }\n\n    return headers\n  }\n}\n\nfunction processHeaderValue (key, val, skipAppend) {\n  if (val && typeof val === 'object') {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  }\n\n  val = val != null ? `${val}` : ''\n\n  if (headerCharRegex.exec(val) !== null) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  }\n\n  return skipAppend ? val : `${key}: ${val}\\r\\n`\n}\n\nfunction processHeader (request, key, val, skipAppend = false) {\n  if (val && (typeof val === 'object' && !Array.isArray(val))) {\n    throw new InvalidArgumentError(`invalid ${key} header`)\n  } else if (val === undefined) {\n    return\n  }\n\n  if (\n    request.host === null &&\n    key.length === 4 &&\n    key.toLowerCase() === 'host'\n  ) {\n    if (headerCharRegex.exec(val) !== null) {\n      throw new InvalidArgumentError(`invalid ${key} header`)\n    }\n    // Consumed by Client\n    request.host = val\n  } else if (\n    request.contentLength === null &&\n    key.length === 14 &&\n    key.toLowerCase() === 'content-length'\n  ) {\n    request.contentLength = parseInt(val, 10)\n    if (!Number.isFinite(request.contentLength)) {\n      throw new InvalidArgumentError('invalid content-length header')\n    }\n  } else if (\n    request.contentType === null &&\n    key.length === 12 &&\n    key.toLowerCase() === 'content-type'\n  ) {\n    request.contentType = val\n    if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)\n    else request.headers += processHeaderValue(key, val)\n  } else if (\n    key.length === 17 &&\n    key.toLowerCase() === 'transfer-encoding'\n  ) {\n    throw new InvalidArgumentError('invalid transfer-encoding header')\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'connection'\n  ) {\n    const value = typeof val === 'string' ? val.toLowerCase() : null\n    if (value !== 'close' && value !== 'keep-alive') {\n      throw new InvalidArgumentError('invalid connection header')\n    } else if (value === 'close') {\n      request.reset = true\n    }\n  } else if (\n    key.length === 10 &&\n    key.toLowerCase() === 'keep-alive'\n  ) {\n    throw new InvalidArgumentError('invalid keep-alive header')\n  } else if (\n    key.length === 7 &&\n    key.toLowerCase() === 'upgrade'\n  ) {\n    throw new InvalidArgumentError('invalid upgrade header')\n  } else if (\n    key.length === 6 &&\n    key.toLowerCase() === 'expect'\n  ) {\n    throw new NotSupportedError('expect header not supported')\n  } else if (tokenRegExp.exec(key) === null) {\n    throw new InvalidArgumentError('invalid header key')\n  } else {\n    if (Array.isArray(val)) {\n      for (let i = 0; i < val.length; i++) {\n        if (skipAppend) {\n          if (request.headers[key]) request.headers[key] += `,${processHeaderValue(key, val[i], skipAppend)}`\n          else request.headers[key] = processHeaderValue(key, val[i], skipAppend)\n        } else {\n          request.headers += processHeaderValue(key, val[i])\n        }\n      }\n    } else {\n      if (skipAppend) request.headers[key] = processHeaderValue(key, val, skipAppend)\n      else request.headers += processHeaderValue(key, val)\n    }\n  }\n}\n\nmodule.exports = Request\n", "'use strict'\n\nconst EventEmitter = require('events')\n\nclass Dispatcher extends EventEmitter {\n  dispatch () {\n    throw new Error('not implemented')\n  }\n\n  close () {\n    throw new Error('not implemented')\n  }\n\n  destroy () {\n    throw new Error('not implemented')\n  }\n}\n\nmodule.exports = Dispatcher\n", "'use strict'\n\nconst Dispatcher = require('./dispatcher')\nconst {\n  ClientDestroyedError,\n  ClientClosedError,\n  InvalidArgumentError\n} = require('./core/errors')\nconst { kDestroy, kClose, kDispatch, kInterceptors } = require('./core/symbols')\n\nconst kDestroyed = Symbol('destroyed')\nconst kClosed = Symbol('closed')\nconst kOnDestroyed = Symbol('onDestroyed')\nconst kOnClosed = Symbol('onClosed')\nconst kInterceptedDispatch = Symbol('Intercepted Dispatch')\n\nclass DispatcherBase extends Dispatcher {\n  constructor () {\n    super()\n\n    this[kDestroyed] = false\n    this[kOnDestroyed] = null\n    this[kClosed] = false\n    this[kOnClosed] = []\n  }\n\n  get destroyed () {\n    return this[kDestroyed]\n  }\n\n  get closed () {\n    return this[kClosed]\n  }\n\n  get interceptors () {\n    return this[kInterceptors]\n  }\n\n  set interceptors (newInterceptors) {\n    if (newInterceptors) {\n      for (let i = newInterceptors.length - 1; i >= 0; i--) {\n        const interceptor = this[kInterceptors][i]\n        if (typeof interceptor !== 'function') {\n          throw new InvalidArgumentError('interceptor must be an function')\n        }\n      }\n    }\n\n    this[kInterceptors] = newInterceptors\n  }\n\n  close (callback) {\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        this.close((err, data) => {\n          return err ? reject(err) : resolve(data)\n        })\n      })\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    if (this[kDestroyed]) {\n      queueMicrotask(() => callback(new ClientDestroyedError(), null))\n      return\n    }\n\n    if (this[kClosed]) {\n      if (this[kOnClosed]) {\n        this[kOnClosed].push(callback)\n      } else {\n        queueMicrotask(() => callback(null, null))\n      }\n      return\n    }\n\n    this[kClosed] = true\n    this[kOnClosed].push(callback)\n\n    const onClosed = () => {\n      const callbacks = this[kOnClosed]\n      this[kOnClosed] = null\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](null, null)\n      }\n    }\n\n    // Should not error.\n    this[kClose]()\n      .then(() => this.destroy())\n      .then(() => {\n        queueMicrotask(onClosed)\n      })\n  }\n\n  destroy (err, callback) {\n    if (typeof err === 'function') {\n      callback = err\n      err = null\n    }\n\n    if (callback === undefined) {\n      return new Promise((resolve, reject) => {\n        this.destroy(err, (err, data) => {\n          return err ? /* istanbul ignore next: should never error */ reject(err) : resolve(data)\n        })\n      })\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    if (this[kDestroyed]) {\n      if (this[kOnDestroyed]) {\n        this[kOnDestroyed].push(callback)\n      } else {\n        queueMicrotask(() => callback(null, null))\n      }\n      return\n    }\n\n    if (!err) {\n      err = new ClientDestroyedError()\n    }\n\n    this[kDestroyed] = true\n    this[kOnDestroyed] = this[kOnDestroyed] || []\n    this[kOnDestroyed].push(callback)\n\n    const onDestroyed = () => {\n      const callbacks = this[kOnDestroyed]\n      this[kOnDestroyed] = null\n      for (let i = 0; i < callbacks.length; i++) {\n        callbacks[i](null, null)\n      }\n    }\n\n    // Should not error.\n    this[kDestroy](err).then(() => {\n      queueMicrotask(onDestroyed)\n    })\n  }\n\n  [kInterceptedDispatch] (opts, handler) {\n    if (!this[kInterceptors] || this[kInterceptors].length === 0) {\n      this[kInterceptedDispatch] = this[kDispatch]\n      return this[kDispatch](opts, handler)\n    }\n\n    let dispatch = this[kDispatch].bind(this)\n    for (let i = this[kInterceptors].length - 1; i >= 0; i--) {\n      dispatch = this[kInterceptors][i](dispatch)\n    }\n    this[kInterceptedDispatch] = dispatch\n    return dispatch(opts, handler)\n  }\n\n  dispatch (opts, handler) {\n    if (!handler || typeof handler !== 'object') {\n      throw new InvalidArgumentError('handler must be an object')\n    }\n\n    try {\n      if (!opts || typeof opts !== 'object') {\n        throw new InvalidArgumentError('opts must be an object.')\n      }\n\n      if (this[kDestroyed] || this[kOnDestroyed]) {\n        throw new ClientDestroyedError()\n      }\n\n      if (this[kClosed]) {\n        throw new ClientClosedError()\n      }\n\n      return this[kInterceptedDispatch](opts, handler)\n    } catch (err) {\n      if (typeof handler.onError !== 'function') {\n        throw new InvalidArgumentError('invalid onError method')\n      }\n\n      handler.onError(err)\n\n      return false\n    }\n  }\n}\n\nmodule.exports = DispatcherBase\n", "'use strict'\n\nconst net = require('net')\nconst assert = require('assert')\nconst util = require('./util')\nconst { InvalidArgumentError, ConnectTimeoutError } = require('./errors')\n\nlet tls // include tls conditionally since it is not always available\n\n// TODO: session re-use does not wait for the first\n// connection to resolve the session and might therefore\n// resolve the same servername multiple times even when\n// re-use is enabled.\n\nlet SessionCache\n// FIXME: remove workaround when the Node bug is fixed\n// https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\nif (global.FinalizationRegistry && !process.env.NODE_V8_COVERAGE) {\n  SessionCache = class WeakSessionCache {\n    constructor (maxCachedSessions) {\n      this._maxCachedSessions = maxCachedSessions\n      this._sessionCache = new Map()\n      this._sessionRegistry = new global.FinalizationRegistry((key) => {\n        if (this._sessionCache.size < this._maxCachedSessions) {\n          return\n        }\n\n        const ref = this._sessionCache.get(key)\n        if (ref !== undefined && ref.deref() === undefined) {\n          this._sessionCache.delete(key)\n        }\n      })\n    }\n\n    get (sessionKey) {\n      const ref = this._sessionCache.get(sessionKey)\n      return ref ? ref.deref() : null\n    }\n\n    set (sessionKey, session) {\n      if (this._maxCachedSessions === 0) {\n        return\n      }\n\n      this._sessionCache.set(sessionKey, new WeakRef(session))\n      this._sessionRegistry.register(session, sessionKey)\n    }\n  }\n} else {\n  SessionCache = class SimpleSessionCache {\n    constructor (maxCachedSessions) {\n      this._maxCachedSessions = maxCachedSessions\n      this._sessionCache = new Map()\n    }\n\n    get (sessionKey) {\n      return this._sessionCache.get(sessionKey)\n    }\n\n    set (sessionKey, session) {\n      if (this._maxCachedSessions === 0) {\n        return\n      }\n\n      if (this._sessionCache.size >= this._maxCachedSessions) {\n        // remove the oldest session\n        const { value: oldestKey } = this._sessionCache.keys().next()\n        this._sessionCache.delete(oldestKey)\n      }\n\n      this._sessionCache.set(sessionKey, session)\n    }\n  }\n}\n\nfunction buildConnector ({ allowH2, maxCachedSessions, socketPath, timeout, ...opts }) {\n  if (maxCachedSessions != null && (!Number.isInteger(maxCachedSessions) || maxCachedSessions < 0)) {\n    throw new InvalidArgumentError('maxCachedSessions must be a positive integer or zero')\n  }\n\n  const options = { path: socketPath, ...opts }\n  const sessionCache = new SessionCache(maxCachedSessions == null ? 100 : maxCachedSessions)\n  timeout = timeout == null ? 10e3 : timeout\n  allowH2 = allowH2 != null ? allowH2 : false\n  return function connect ({ hostname, host, protocol, port, servername, localAddress, httpSocket }, callback) {\n    let socket\n    if (protocol === 'https:') {\n      if (!tls) {\n        tls = require('tls')\n      }\n      servername = servername || options.servername || util.getServerName(host) || null\n\n      const sessionKey = servername || hostname\n      const session = sessionCache.get(sessionKey) || null\n\n      assert(sessionKey)\n\n      socket = tls.connect({\n        highWaterMark: 16384, // TLS in node can't have bigger HWM anyway...\n        ...options,\n        servername,\n        session,\n        localAddress,\n        // TODO(HTTP/2): Add support for h2c\n        ALPNProtocols: allowH2 ? ['http/1.1', 'h2'] : ['http/1.1'],\n        socket: httpSocket, // upgrade socket connection\n        port: port || 443,\n        host: hostname\n      })\n\n      socket\n        .on('session', function (session) {\n          // TODO (fix): Can a session become invalid once established? Don't think so?\n          sessionCache.set(sessionKey, session)\n        })\n    } else {\n      assert(!httpSocket, 'httpSocket can only be sent on TLS update')\n      socket = net.connect({\n        highWaterMark: 64 * 1024, // Same as nodejs fs streams.\n        ...options,\n        localAddress,\n        port: port || 80,\n        host: hostname\n      })\n    }\n\n    // Set TCP keep alive options on the socket here instead of in connect() for the case of assigning the socket\n    if (options.keepAlive == null || options.keepAlive) {\n      const keepAliveInitialDelay = options.keepAliveInitialDelay === undefined ? 60e3 : options.keepAliveInitialDelay\n      socket.setKeepAlive(true, keepAliveInitialDelay)\n    }\n\n    const cancelTimeout = setupTimeout(() => onConnectTimeout(socket), timeout)\n\n    socket\n      .setNoDelay(true)\n      .once(protocol === 'https:' ? 'secureConnect' : 'connect', function () {\n        cancelTimeout()\n\n        if (callback) {\n          const cb = callback\n          callback = null\n          cb(null, this)\n        }\n      })\n      .on('error', function (err) {\n        cancelTimeout()\n\n        if (callback) {\n          const cb = callback\n          callback = null\n          cb(err)\n        }\n      })\n\n    return socket\n  }\n}\n\nfunction setupTimeout (onConnectTimeout, timeout) {\n  if (!timeout) {\n    return () => {}\n  }\n\n  let s1 = null\n  let s2 = null\n  const timeoutId = setTimeout(() => {\n    // setImmediate is added to make sure that we priotorise socket error events over timeouts\n    s1 = setImmediate(() => {\n      if (process.platform === 'win32') {\n        // Windows needs an extra setImmediate probably due to implementation differences in the socket logic\n        s2 = setImmediate(() => onConnectTimeout())\n      } else {\n        onConnectTimeout()\n      }\n    })\n  }, timeout)\n  return () => {\n    clearTimeout(timeoutId)\n    clearImmediate(s1)\n    clearImmediate(s2)\n  }\n}\n\nfunction onConnectTimeout (socket) {\n  util.destroy(socket, new ConnectTimeoutError())\n}\n\nmodule.exports = buildConnector\n", null, null, "'use strict'\n\nconst util = require('../core/util')\nconst { kBodyUsed } = require('../core/symbols')\nconst assert = require('assert')\nconst { InvalidArgumentError } = require('../core/errors')\nconst EE = require('events')\n\nconst redirectableStatusCodes = [300, 301, 302, 303, 307, 308]\n\nconst kBody = Symbol('body')\n\nclass BodyAsyncIterable {\n  constructor (body) {\n    this[kBody] = body\n    this[kBodyUsed] = false\n  }\n\n  async * [Symbol.asyncIterator] () {\n    assert(!this[kBodyUsed], 'disturbed')\n    this[kBodyUsed] = true\n    yield * this[kBody]\n  }\n}\n\nclass RedirectHandler {\n  constructor (dispatch, maxRedirections, opts, handler) {\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    util.validateHandler(handler, opts.method, opts.upgrade)\n\n    this.dispatch = dispatch\n    this.location = null\n    this.abort = null\n    this.opts = { ...opts, maxRedirections: 0 } // opts must be a copy\n    this.maxRedirections = maxRedirections\n    this.handler = handler\n    this.history = []\n\n    if (util.isStream(this.opts.body)) {\n      // TODO (fix): Provide some way for the user to cache the file to e.g. /tmp\n      // so that it can be dispatched again?\n      // TODO (fix): Do we need 100-expect support to provide a way to do this properly?\n      if (util.bodyLength(this.opts.body) === 0) {\n        this.opts.body\n          .on('data', function () {\n            assert(false)\n          })\n      }\n\n      if (typeof this.opts.body.readableDidRead !== 'boolean') {\n        this.opts.body[kBodyUsed] = false\n        EE.prototype.on.call(this.opts.body, 'data', function () {\n          this[kBodyUsed] = true\n        })\n      }\n    } else if (this.opts.body && typeof this.opts.body.pipeTo === 'function') {\n      // TODO (fix): We can't access ReadableStream internal state\n      // to determine whether or not it has been disturbed. This is just\n      // a workaround.\n      this.opts.body = new BodyAsyncIterable(this.opts.body)\n    } else if (\n      this.opts.body &&\n      typeof this.opts.body !== 'string' &&\n      !ArrayBuffer.isView(this.opts.body) &&\n      util.isIterable(this.opts.body)\n    ) {\n      // TODO: Should we allow re-using iterable if !this.opts.idempotent\n      // or through some other flag?\n      this.opts.body = new BodyAsyncIterable(this.opts.body)\n    }\n  }\n\n  onConnect (abort) {\n    this.abort = abort\n    this.handler.onConnect(abort, { history: this.history })\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    this.handler.onUpgrade(statusCode, headers, socket)\n  }\n\n  onError (error) {\n    this.handler.onError(error)\n  }\n\n  onHeaders (statusCode, headers, resume, statusText) {\n    this.location = this.history.length >= this.maxRedirections || util.isDisturbed(this.opts.body)\n      ? null\n      : parseLocation(statusCode, headers)\n\n    if (this.opts.origin) {\n      this.history.push(new URL(this.opts.path, this.opts.origin))\n    }\n\n    if (!this.location) {\n      return this.handler.onHeaders(statusCode, headers, resume, statusText)\n    }\n\n    const { origin, pathname, search } = util.parseURL(new URL(this.location, this.opts.origin && new URL(this.opts.path, this.opts.origin)))\n    const path = search ? `${pathname}${search}` : pathname\n\n    // Remove headers referring to the original URL.\n    // By default it is Host only, unless it's a 303 (see below), which removes also all Content-* headers.\n    // https://tools.ietf.org/html/rfc7231#section-6.4\n    this.opts.headers = cleanRequestHeaders(this.opts.headers, statusCode === 303, this.opts.origin !== origin)\n    this.opts.path = path\n    this.opts.origin = origin\n    this.opts.maxRedirections = 0\n    this.opts.query = null\n\n    // https://tools.ietf.org/html/rfc7231#section-6.4.4\n    // In case of HTTP 303, always replace method to be either HEAD or GET\n    if (statusCode === 303 && this.opts.method !== 'HEAD') {\n      this.opts.method = 'GET'\n      this.opts.body = null\n    }\n  }\n\n  onData (chunk) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response bodies.\n\n        Redirection is used to serve the requested resource from another URL, so it is assumes that\n        no body is generated (and thus can be ignored). Even though generating a body is not prohibited.\n\n        For status 301, 302, 303, 307 and 308 (the latter from RFC 7238), the specs mention that the body usually\n        (which means it's optional and not mandated) contain just an hyperlink to the value of\n        the Location response header, so the body can be ignored safely.\n\n        For status 300, which is \"Multiple Choices\", the spec mentions both generating a Location\n        response header AND a response body with the other possible location to follow.\n        Since the spec explicitily chooses not to specify a format for such body and leave it to\n        servers and browsers implementors, we ignore the body as there is no specified way to eventually parse it.\n      */\n    } else {\n      return this.handler.onData(chunk)\n    }\n  }\n\n  onComplete (trailers) {\n    if (this.location) {\n      /*\n        https://tools.ietf.org/html/rfc7231#section-6.4\n\n        TLDR: undici always ignores 3xx response trailers as they are not expected in case of redirections\n        and neither are useful if present.\n\n        See comment on onData method above for more detailed informations.\n      */\n\n      this.location = null\n      this.abort = null\n\n      this.dispatch(this.opts, this)\n    } else {\n      this.handler.onComplete(trailers)\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this.handler.onBodySent) {\n      this.handler.onBodySent(chunk)\n    }\n  }\n}\n\nfunction parseLocation (statusCode, headers) {\n  if (redirectableStatusCodes.indexOf(statusCode) === -1) {\n    return null\n  }\n\n  for (let i = 0; i < headers.length; i += 2) {\n    if (headers[i].toString().toLowerCase() === 'location') {\n      return headers[i + 1]\n    }\n  }\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4.4\nfunction shouldRemoveHeader (header, removeContent, unknownOrigin) {\n  if (header.length === 4) {\n    return util.headerNameToString(header) === 'host'\n  }\n  if (removeContent && util.headerNameToString(header).startsWith('content-')) {\n    return true\n  }\n  if (unknownOrigin && (header.length === 13 || header.length === 6 || header.length === 19)) {\n    const name = util.headerNameToString(header)\n    return name === 'authorization' || name === 'cookie' || name === 'proxy-authorization'\n  }\n  return false\n}\n\n// https://tools.ietf.org/html/rfc7231#section-6.4\nfunction cleanRequestHeaders (headers, removeContent, unknownOrigin) {\n  const ret = []\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (!shouldRemoveHeader(headers[i], removeContent, unknownOrigin)) {\n        ret.push(headers[i], headers[i + 1])\n      }\n    }\n  } else if (headers && typeof headers === 'object') {\n    for (const key of Object.keys(headers)) {\n      if (!shouldRemoveHeader(key, removeContent, unknownOrigin)) {\n        ret.push(key, headers[key])\n      }\n    }\n  } else {\n    assert(headers == null, 'headers must be an object or an array')\n  }\n  return ret\n}\n\nmodule.exports = RedirectHandler\n", "'use strict'\n\nconst RedirectHandler = require('../handler/RedirectHandler')\n\nfunction createRedirectInterceptor ({ maxRedirections: defaultMaxRedirections }) {\n  return (dispatch) => {\n    return function Intercept (opts, handler) {\n      const { maxRedirections = defaultMaxRedirections } = opts\n\n      if (!maxRedirections) {\n        return dispatch(opts, handler)\n      }\n\n      const redirectHandler = new RedirectHandler(dispatch, maxRedirections, opts, handler)\n      opts = { ...opts, maxRedirections: 0 } // Stop sub dispatcher from also redirecting.\n      return dispatch(opts, redirectHandler)\n    }\n  }\n}\n\nmodule.exports = createRedirectInterceptor\n", "module.exports = ''\n", "module.exports = ''\n", "// @ts-check\n\n'use strict'\n\n/* global WebAssembly */\n\nconst assert = require('assert')\nconst net = require('net')\nconst http = require('http')\nconst { pipeline } = require('stream')\nconst util = require('./core/util')\nconst timers = require('./timers')\nconst Request = require('./core/request')\nconst DispatcherBase = require('./dispatcher-base')\nconst {\n  RequestContentLengthMismatchError,\n  ResponseContentLengthMismatchError,\n  InvalidArgumentError,\n  RequestAbortedError,\n  HeadersTimeoutError,\n  HeadersOverflowError,\n  SocketError,\n  InformationalError,\n  BodyTimeoutError,\n  HTTPParserError,\n  ResponseExceededMaxSizeError,\n  ClientDestroyedError\n} = require('./core/errors')\nconst buildConnector = require('./core/connect')\nconst {\n  kUrl,\n  kReset,\n  kServerName,\n  kClient,\n  kBusy,\n  kParser,\n  kConnect,\n  kBlocking,\n  kResuming,\n  kRunning,\n  kPending,\n  kSize,\n  kWriting,\n  kQueue,\n  kConnected,\n  kConnecting,\n  kNeedDrain,\n  kNoRef,\n  kKeepAliveDefaultTimeout,\n  kHostHeader,\n  kPendingIdx,\n  kRunningIdx,\n  kError,\n  kPipelining,\n  kSocket,\n  kKeepAliveTimeoutValue,\n  kMaxHeadersSize,\n  kKeepAliveMaxTimeout,\n  kKeepAliveTimeoutThreshold,\n  kHeadersTimeout,\n  kBodyTimeout,\n  kStrictContentLength,\n  kConnector,\n  kMaxRedirections,\n  kMaxRequests,\n  kCounter,\n  kClose,\n  kDestroy,\n  kDispatch,\n  kInterceptors,\n  kLocalAddress,\n  kMaxResponseSize,\n  kHTTPConnVersion,\n  // HTTP2\n  kHost,\n  kHTTP2Session,\n  kHTTP2SessionState,\n  kHTTP2BuildRequest,\n  kHTTP2CopyHeaders,\n  kHTTP1BuildRequest\n} = require('./core/symbols')\n\n/** @type {import('http2')} */\nlet http2\ntry {\n  http2 = require('http2')\n} catch {\n  // @ts-ignore\n  http2 = { constants: {} }\n}\n\nconst {\n  constants: {\n    HTTP2_HEADER_AUTHORITY,\n    HTTP2_HEADER_METHOD,\n    HTTP2_HEADER_PATH,\n    HTTP2_HEADER_SCHEME,\n    HTTP2_HEADER_CONTENT_LENGTH,\n    HTTP2_HEADER_EXPECT,\n    HTTP2_HEADER_STATUS\n  }\n} = http2\n\n// Experimental\nlet h2ExperimentalWarned = false\n\nconst FastBuffer = Buffer[Symbol.species]\n\nconst kClosedResolve = Symbol('kClosedResolve')\n\nconst channels = {}\n\ntry {\n  const diagnosticsChannel = require('diagnostics_channel')\n  channels.sendHeaders = diagnosticsChannel.channel('undici:client:sendHeaders')\n  channels.beforeConnect = diagnosticsChannel.channel('undici:client:beforeConnect')\n  channels.connectError = diagnosticsChannel.channel('undici:client:connectError')\n  channels.connected = diagnosticsChannel.channel('undici:client:connected')\n} catch {\n  channels.sendHeaders = { hasSubscribers: false }\n  channels.beforeConnect = { hasSubscribers: false }\n  channels.connectError = { hasSubscribers: false }\n  channels.connected = { hasSubscribers: false }\n}\n\n/**\n * @type {import('../types/client').default}\n */\nclass Client extends DispatcherBase {\n  /**\n   *\n   * @param {string|URL} url\n   * @param {import('../types/client').Client.Options} options\n   */\n  constructor (url, {\n    interceptors,\n    maxHeaderSize,\n    headersTimeout,\n    socketTimeout,\n    requestTimeout,\n    connectTimeout,\n    bodyTimeout,\n    idleTimeout,\n    keepAlive,\n    keepAliveTimeout,\n    maxKeepAliveTimeout,\n    keepAliveMaxTimeout,\n    keepAliveTimeoutThreshold,\n    socketPath,\n    pipelining,\n    tls,\n    strictContentLength,\n    maxCachedSessions,\n    maxRedirections,\n    connect,\n    maxRequestsPerClient,\n    localAddress,\n    maxResponseSize,\n    autoSelectFamily,\n    autoSelectFamilyAttemptTimeout,\n    // h2\n    allowH2,\n    maxConcurrentStreams\n  } = {}) {\n    super()\n\n    if (keepAlive !== undefined) {\n      throw new InvalidArgumentError('unsupported keepAlive, use pipelining=0 instead')\n    }\n\n    if (socketTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported socketTimeout, use headersTimeout & bodyTimeout instead')\n    }\n\n    if (requestTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported requestTimeout, use headersTimeout & bodyTimeout instead')\n    }\n\n    if (idleTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported idleTimeout, use keepAliveTimeout instead')\n    }\n\n    if (maxKeepAliveTimeout !== undefined) {\n      throw new InvalidArgumentError('unsupported maxKeepAliveTimeout, use keepAliveMaxTimeout instead')\n    }\n\n    if (maxHeaderSize != null && !Number.isFinite(maxHeaderSize)) {\n      throw new InvalidArgumentError('invalid maxHeaderSize')\n    }\n\n    if (socketPath != null && typeof socketPath !== 'string') {\n      throw new InvalidArgumentError('invalid socketPath')\n    }\n\n    if (connectTimeout != null && (!Number.isFinite(connectTimeout) || connectTimeout < 0)) {\n      throw new InvalidArgumentError('invalid connectTimeout')\n    }\n\n    if (keepAliveTimeout != null && (!Number.isFinite(keepAliveTimeout) || keepAliveTimeout <= 0)) {\n      throw new InvalidArgumentError('invalid keepAliveTimeout')\n    }\n\n    if (keepAliveMaxTimeout != null && (!Number.isFinite(keepAliveMaxTimeout) || keepAliveMaxTimeout <= 0)) {\n      throw new InvalidArgumentError('invalid keepAliveMaxTimeout')\n    }\n\n    if (keepAliveTimeoutThreshold != null && !Number.isFinite(keepAliveTimeoutThreshold)) {\n      throw new InvalidArgumentError('invalid keepAliveTimeoutThreshold')\n    }\n\n    if (headersTimeout != null && (!Number.isInteger(headersTimeout) || headersTimeout < 0)) {\n      throw new InvalidArgumentError('headersTimeout must be a positive integer or zero')\n    }\n\n    if (bodyTimeout != null && (!Number.isInteger(bodyTimeout) || bodyTimeout < 0)) {\n      throw new InvalidArgumentError('bodyTimeout must be a positive integer or zero')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (maxRedirections != null && (!Number.isInteger(maxRedirections) || maxRedirections < 0)) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    if (maxRequestsPerClient != null && (!Number.isInteger(maxRequestsPerClient) || maxRequestsPerClient < 0)) {\n      throw new InvalidArgumentError('maxRequestsPerClient must be a positive number')\n    }\n\n    if (localAddress != null && (typeof localAddress !== 'string' || net.isIP(localAddress) === 0)) {\n      throw new InvalidArgumentError('localAddress must be valid string IP address')\n    }\n\n    if (maxResponseSize != null && (!Number.isInteger(maxResponseSize) || maxResponseSize < -1)) {\n      throw new InvalidArgumentError('maxResponseSize must be a positive number')\n    }\n\n    if (\n      autoSelectFamilyAttemptTimeout != null &&\n      (!Number.isInteger(autoSelectFamilyAttemptTimeout) || autoSelectFamilyAttemptTimeout < -1)\n    ) {\n      throw new InvalidArgumentError('autoSelectFamilyAttemptTimeout must be a positive number')\n    }\n\n    // h2\n    if (allowH2 != null && typeof allowH2 !== 'boolean') {\n      throw new InvalidArgumentError('allowH2 must be a valid boolean value')\n    }\n\n    if (maxConcurrentStreams != null && (typeof maxConcurrentStreams !== 'number' || maxConcurrentStreams < 1)) {\n      throw new InvalidArgumentError('maxConcurrentStreams must be a possitive integer, greater than 0')\n    }\n\n    if (typeof connect !== 'function') {\n      connect = buildConnector({\n        ...tls,\n        maxCachedSessions,\n        allowH2,\n        socketPath,\n        timeout: connectTimeout,\n        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),\n        ...connect\n      })\n    }\n\n    this[kInterceptors] = interceptors && interceptors.Client && Array.isArray(interceptors.Client)\n      ? interceptors.Client\n      : [createRedirectInterceptor({ maxRedirections })]\n    this[kUrl] = util.parseOrigin(url)\n    this[kConnector] = connect\n    this[kSocket] = null\n    this[kPipelining] = pipelining != null ? pipelining : 1\n    this[kMaxHeadersSize] = maxHeaderSize || http.maxHeaderSize\n    this[kKeepAliveDefaultTimeout] = keepAliveTimeout == null ? 4e3 : keepAliveTimeout\n    this[kKeepAliveMaxTimeout] = keepAliveMaxTimeout == null ? 600e3 : keepAliveMaxTimeout\n    this[kKeepAliveTimeoutThreshold] = keepAliveTimeoutThreshold == null ? 1e3 : keepAliveTimeoutThreshold\n    this[kKeepAliveTimeoutValue] = this[kKeepAliveDefaultTimeout]\n    this[kServerName] = null\n    this[kLocalAddress] = localAddress != null ? localAddress : null\n    this[kResuming] = 0 // 0, idle, 1, scheduled, 2 resuming\n    this[kNeedDrain] = 0 // 0, idle, 1, scheduled, 2 resuming\n    this[kHostHeader] = `host: ${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}\\r\\n`\n    this[kBodyTimeout] = bodyTimeout != null ? bodyTimeout : 300e3\n    this[kHeadersTimeout] = headersTimeout != null ? headersTimeout : 300e3\n    this[kStrictContentLength] = strictContentLength == null ? true : strictContentLength\n    this[kMaxRedirections] = maxRedirections\n    this[kMaxRequests] = maxRequestsPerClient\n    this[kClosedResolve] = null\n    this[kMaxResponseSize] = maxResponseSize > -1 ? maxResponseSize : -1\n    this[kHTTPConnVersion] = 'h1'\n\n    // HTTP/2\n    this[kHTTP2Session] = null\n    this[kHTTP2SessionState] = !allowH2\n      ? null\n      : {\n        // streams: null, // Fixed queue of streams - For future support of `push`\n          openStreams: 0, // Keep track of them to decide wether or not unref the session\n          maxConcurrentStreams: maxConcurrentStreams != null ? maxConcurrentStreams : 100 // Max peerConcurrentStreams for a Node h2 server\n        }\n    this[kHost] = `${this[kUrl].hostname}${this[kUrl].port ? `:${this[kUrl].port}` : ''}`\n\n    // kQueue is built up of 3 sections separated by\n    // the kRunningIdx and kPendingIdx indices.\n    // |   complete   |   running   |   pending   |\n    //                ^ kRunningIdx ^ kPendingIdx ^ kQueue.length\n    // kRunningIdx points to the first running element.\n    // kPendingIdx points to the first pending element.\n    // This implements a fast queue with an amortized\n    // time of O(1).\n\n    this[kQueue] = []\n    this[kRunningIdx] = 0\n    this[kPendingIdx] = 0\n  }\n\n  get pipelining () {\n    return this[kPipelining]\n  }\n\n  set pipelining (value) {\n    this[kPipelining] = value\n    resume(this, true)\n  }\n\n  get [kPending] () {\n    return this[kQueue].length - this[kPendingIdx]\n  }\n\n  get [kRunning] () {\n    return this[kPendingIdx] - this[kRunningIdx]\n  }\n\n  get [kSize] () {\n    return this[kQueue].length - this[kRunningIdx]\n  }\n\n  get [kConnected] () {\n    return !!this[kSocket] && !this[kConnecting] && !this[kSocket].destroyed\n  }\n\n  get [kBusy] () {\n    const socket = this[kSocket]\n    return (\n      (socket && (socket[kReset] || socket[kWriting] || socket[kBlocking])) ||\n      (this[kSize] >= (this[kPipelining] || 1)) ||\n      this[kPending] > 0\n    )\n  }\n\n  /* istanbul ignore: only used for test */\n  [kConnect] (cb) {\n    connect(this)\n    this.once('connect', cb)\n  }\n\n  [kDispatch] (opts, handler) {\n    const origin = opts.origin || this[kUrl].origin\n\n    const request = this[kHTTPConnVersion] === 'h2'\n      ? Request[kHTTP2BuildRequest](origin, opts, handler)\n      : Request[kHTTP1BuildRequest](origin, opts, handler)\n\n    this[kQueue].push(request)\n    if (this[kResuming]) {\n      // Do nothing.\n    } else if (util.bodyLength(request.body) == null && util.isIterable(request.body)) {\n      // Wait a tick in case stream/iterator is ended in the same tick.\n      this[kResuming] = 1\n      process.nextTick(resume, this)\n    } else {\n      resume(this, true)\n    }\n\n    if (this[kResuming] && this[kNeedDrain] !== 2 && this[kBusy]) {\n      this[kNeedDrain] = 2\n    }\n\n    return this[kNeedDrain] < 2\n  }\n\n  async [kClose] () {\n    // TODO: for H2 we need to gracefully flush the remaining enqueued\n    // request and close each stream.\n    return new Promise((resolve) => {\n      if (!this[kSize]) {\n        resolve(null)\n      } else {\n        this[kClosedResolve] = resolve\n      }\n    })\n  }\n\n  async [kDestroy] (err) {\n    return new Promise((resolve) => {\n      const requests = this[kQueue].splice(this[kPendingIdx])\n      for (let i = 0; i < requests.length; i++) {\n        const request = requests[i]\n        errorRequest(this, request, err)\n      }\n\n      const callback = () => {\n        if (this[kClosedResolve]) {\n          // TODO (fix): Should we error here with ClientDestroyedError?\n          this[kClosedResolve]()\n          this[kClosedResolve] = null\n        }\n        resolve()\n      }\n\n      if (this[kHTTP2Session] != null) {\n        util.destroy(this[kHTTP2Session], err)\n        this[kHTTP2Session] = null\n        this[kHTTP2SessionState] = null\n      }\n\n      if (!this[kSocket]) {\n        queueMicrotask(callback)\n      } else {\n        util.destroy(this[kSocket].on('close', callback), err)\n      }\n\n      resume(this)\n    })\n  }\n}\n\nfunction onHttp2SessionError (err) {\n  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')\n\n  this[kSocket][kError] = err\n\n  onError(this[kClient], err)\n}\n\nfunction onHttp2FrameError (type, code, id) {\n  const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`)\n\n  if (id === 0) {\n    this[kSocket][kError] = err\n    onError(this[kClient], err)\n  }\n}\n\nfunction onHttp2SessionEnd () {\n  util.destroy(this, new SocketError('other side closed'))\n  util.destroy(this[kSocket], new SocketError('other side closed'))\n}\n\nfunction onHTTP2GoAway (code) {\n  const client = this[kClient]\n  const err = new InformationalError(`HTTP/2: \"GOAWAY\" frame received with code ${code}`)\n  client[kSocket] = null\n  client[kHTTP2Session] = null\n\n  if (client.destroyed) {\n    assert(this[kPending] === 0)\n\n    // Fail entire queue.\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(this, request, err)\n    }\n  } else if (client[kRunning] > 0) {\n    // Fail head of pipeline.\n    const request = client[kQueue][client[kRunningIdx]]\n    client[kQueue][client[kRunningIdx]++] = null\n\n    errorRequest(client, request, err)\n  }\n\n  client[kPendingIdx] = client[kRunningIdx]\n\n  assert(client[kRunning] === 0)\n\n  client.emit('disconnect',\n    client[kUrl],\n    [client],\n    err\n  )\n\n  resume(client)\n}\n\nconst constants = require('./llhttp/constants')\nconst createRedirectInterceptor = require('./interceptor/redirectInterceptor')\nconst EMPTY_BUF = Buffer.alloc(0)\n\nasync function lazyllhttp () {\n  const llhttpWasmData = process.env.JEST_WORKER_ID ? require('./llhttp/llhttp-wasm.js') : undefined\n\n  let mod\n  try {\n    mod = await WebAssembly.compile(Buffer.from(require('./llhttp/llhttp_simd-wasm.js'), 'base64'))\n  } catch (e) {\n    /* istanbul ignore next */\n\n    // We could check if the error was caused by the simd option not\n    // being enabled, but the occurring of this other error\n    // * https://github.com/emscripten-core/emscripten/issues/11495\n    // got me to remove that check to avoid breaking Node 12.\n    mod = await WebAssembly.compile(Buffer.from(llhttpWasmData || require('./llhttp/llhttp-wasm.js'), 'base64'))\n  }\n\n  return await WebAssembly.instantiate(mod, {\n    env: {\n      /* eslint-disable camelcase */\n\n      wasm_on_url: (p, at, len) => {\n        /* istanbul ignore next */\n        return 0\n      },\n      wasm_on_status: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onStatus(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_message_begin: (p) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onMessageBegin() || 0\n      },\n      wasm_on_header_field: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onHeaderField(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_header_value: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onHeaderValue(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_headers_complete: (p, statusCode, upgrade, shouldKeepAlive) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onHeadersComplete(statusCode, Boolean(upgrade), Boolean(shouldKeepAlive)) || 0\n      },\n      wasm_on_body: (p, at, len) => {\n        assert.strictEqual(currentParser.ptr, p)\n        const start = at - currentBufferPtr + currentBufferRef.byteOffset\n        return currentParser.onBody(new FastBuffer(currentBufferRef.buffer, start, len)) || 0\n      },\n      wasm_on_message_complete: (p) => {\n        assert.strictEqual(currentParser.ptr, p)\n        return currentParser.onMessageComplete() || 0\n      }\n\n      /* eslint-enable camelcase */\n    }\n  })\n}\n\nlet llhttpInstance = null\nlet llhttpPromise = lazyllhttp()\nllhttpPromise.catch()\n\nlet currentParser = null\nlet currentBufferRef = null\nlet currentBufferSize = 0\nlet currentBufferPtr = null\n\nconst TIMEOUT_HEADERS = 1\nconst TIMEOUT_BODY = 2\nconst TIMEOUT_IDLE = 3\n\nclass Parser {\n  constructor (client, socket, { exports }) {\n    assert(Number.isFinite(client[kMaxHeadersSize]) && client[kMaxHeadersSize] > 0)\n\n    this.llhttp = exports\n    this.ptr = this.llhttp.llhttp_alloc(constants.TYPE.RESPONSE)\n    this.client = client\n    this.socket = socket\n    this.timeout = null\n    this.timeoutValue = null\n    this.timeoutType = null\n    this.statusCode = null\n    this.statusText = ''\n    this.upgrade = false\n    this.headers = []\n    this.headersSize = 0\n    this.headersMaxSize = client[kMaxHeadersSize]\n    this.shouldKeepAlive = false\n    this.paused = false\n    this.resume = this.resume.bind(this)\n\n    this.bytesRead = 0\n\n    this.keepAlive = ''\n    this.contentLength = ''\n    this.connection = ''\n    this.maxResponseSize = client[kMaxResponseSize]\n  }\n\n  setTimeout (value, type) {\n    this.timeoutType = type\n    if (value !== this.timeoutValue) {\n      timers.clearTimeout(this.timeout)\n      if (value) {\n        this.timeout = timers.setTimeout(onParserTimeout, value, this)\n        // istanbul ignore else: only for jest\n        if (this.timeout.unref) {\n          this.timeout.unref()\n        }\n      } else {\n        this.timeout = null\n      }\n      this.timeoutValue = value\n    } else if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n  }\n\n  resume () {\n    if (this.socket.destroyed || !this.paused) {\n      return\n    }\n\n    assert(this.ptr != null)\n    assert(currentParser == null)\n\n    this.llhttp.llhttp_resume(this.ptr)\n\n    assert(this.timeoutType === TIMEOUT_BODY)\n    if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    this.paused = false\n    this.execute(this.socket.read() || EMPTY_BUF) // Flush parser.\n    this.readMore()\n  }\n\n  readMore () {\n    while (!this.paused && this.ptr) {\n      const chunk = this.socket.read()\n      if (chunk === null) {\n        break\n      }\n      this.execute(chunk)\n    }\n  }\n\n  execute (data) {\n    assert(this.ptr != null)\n    assert(currentParser == null)\n    assert(!this.paused)\n\n    const { socket, llhttp } = this\n\n    if (data.length > currentBufferSize) {\n      if (currentBufferPtr) {\n        llhttp.free(currentBufferPtr)\n      }\n      currentBufferSize = Math.ceil(data.length / 4096) * 4096\n      currentBufferPtr = llhttp.malloc(currentBufferSize)\n    }\n\n    new Uint8Array(llhttp.memory.buffer, currentBufferPtr, currentBufferSize).set(data)\n\n    // Call `execute` on the wasm parser.\n    // We pass the `llhttp_parser` pointer address, the pointer address of buffer view data,\n    // and finally the length of bytes to parse.\n    // The return value is an error code or `constants.ERROR.OK`.\n    try {\n      let ret\n\n      try {\n        currentBufferRef = data\n        currentParser = this\n        ret = llhttp.llhttp_execute(this.ptr, currentBufferPtr, data.length)\n        /* eslint-disable-next-line no-useless-catch */\n      } catch (err) {\n        /* istanbul ignore next: difficult to make a test case for */\n        throw err\n      } finally {\n        currentParser = null\n        currentBufferRef = null\n      }\n\n      const offset = llhttp.llhttp_get_error_pos(this.ptr) - currentBufferPtr\n\n      if (ret === constants.ERROR.PAUSED_UPGRADE) {\n        this.onUpgrade(data.slice(offset))\n      } else if (ret === constants.ERROR.PAUSED) {\n        this.paused = true\n        socket.unshift(data.slice(offset))\n      } else if (ret !== constants.ERROR.OK) {\n        const ptr = llhttp.llhttp_get_error_reason(this.ptr)\n        let message = ''\n        /* istanbul ignore else: difficult to make a test case for */\n        if (ptr) {\n          const len = new Uint8Array(llhttp.memory.buffer, ptr).indexOf(0)\n          message =\n            'Response does not match the HTTP/1.1 protocol (' +\n            Buffer.from(llhttp.memory.buffer, ptr, len).toString() +\n            ')'\n        }\n        throw new HTTPParserError(message, constants.ERROR[ret], data.slice(offset))\n      }\n    } catch (err) {\n      util.destroy(socket, err)\n    }\n  }\n\n  destroy () {\n    assert(this.ptr != null)\n    assert(currentParser == null)\n\n    this.llhttp.llhttp_free(this.ptr)\n    this.ptr = null\n\n    timers.clearTimeout(this.timeout)\n    this.timeout = null\n    this.timeoutValue = null\n    this.timeoutType = null\n\n    this.paused = false\n  }\n\n  onStatus (buf) {\n    this.statusText = buf.toString()\n  }\n\n  onMessageBegin () {\n    const { socket, client } = this\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    if (!request) {\n      return -1\n    }\n  }\n\n  onHeaderField (buf) {\n    const len = this.headers.length\n\n    if ((len & 1) === 0) {\n      this.headers.push(buf)\n    } else {\n      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])\n    }\n\n    this.trackHeader(buf.length)\n  }\n\n  onHeaderValue (buf) {\n    let len = this.headers.length\n\n    if ((len & 1) === 1) {\n      this.headers.push(buf)\n      len += 1\n    } else {\n      this.headers[len - 1] = Buffer.concat([this.headers[len - 1], buf])\n    }\n\n    const key = this.headers[len - 2]\n    if (key.length === 10 && key.toString().toLowerCase() === 'keep-alive') {\n      this.keepAlive += buf.toString()\n    } else if (key.length === 10 && key.toString().toLowerCase() === 'connection') {\n      this.connection += buf.toString()\n    } else if (key.length === 14 && key.toString().toLowerCase() === 'content-length') {\n      this.contentLength += buf.toString()\n    }\n\n    this.trackHeader(buf.length)\n  }\n\n  trackHeader (len) {\n    this.headersSize += len\n    if (this.headersSize >= this.headersMaxSize) {\n      util.destroy(this.socket, new HeadersOverflowError())\n    }\n  }\n\n  onUpgrade (head) {\n    const { upgrade, client, socket, headers, statusCode } = this\n\n    assert(upgrade)\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert(!socket.destroyed)\n    assert(socket === client[kSocket])\n    assert(!this.paused)\n    assert(request.upgrade || request.method === 'CONNECT')\n\n    this.statusCode = null\n    this.statusText = ''\n    this.shouldKeepAlive = null\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    socket.unshift(head)\n\n    socket[kParser].destroy()\n    socket[kParser] = null\n\n    socket[kClient] = null\n    socket[kError] = null\n    socket\n      .removeListener('error', onSocketError)\n      .removeListener('readable', onSocketReadable)\n      .removeListener('end', onSocketEnd)\n      .removeListener('close', onSocketClose)\n\n    client[kSocket] = null\n    client[kQueue][client[kRunningIdx]++] = null\n    client.emit('disconnect', client[kUrl], [client], new InformationalError('upgrade'))\n\n    try {\n      request.onUpgrade(statusCode, headers, socket)\n    } catch (err) {\n      util.destroy(socket, err)\n    }\n\n    resume(client)\n  }\n\n  onHeadersComplete (statusCode, upgrade, shouldKeepAlive) {\n    const { client, socket, headers, statusText } = this\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n\n    /* istanbul ignore next: difficult to make a test case for */\n    if (!request) {\n      return -1\n    }\n\n    assert(!this.upgrade)\n    assert(this.statusCode < 200)\n\n    if (statusCode === 100) {\n      util.destroy(socket, new SocketError('bad response', util.getSocketInfo(socket)))\n      return -1\n    }\n\n    /* this can only happen if server is misbehaving */\n    if (upgrade && !request.upgrade) {\n      util.destroy(socket, new SocketError('bad upgrade', util.getSocketInfo(socket)))\n      return -1\n    }\n\n    assert.strictEqual(this.timeoutType, TIMEOUT_HEADERS)\n\n    this.statusCode = statusCode\n    this.shouldKeepAlive = (\n      shouldKeepAlive ||\n      // Override llhttp value which does not allow keepAlive for HEAD.\n      (request.method === 'HEAD' && !socket[kReset] && this.connection.toLowerCase() === 'keep-alive')\n    )\n\n    if (this.statusCode >= 200) {\n      const bodyTimeout = request.bodyTimeout != null\n        ? request.bodyTimeout\n        : client[kBodyTimeout]\n      this.setTimeout(bodyTimeout, TIMEOUT_BODY)\n    } else if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    if (request.method === 'CONNECT') {\n      assert(client[kRunning] === 1)\n      this.upgrade = true\n      return 2\n    }\n\n    if (upgrade) {\n      assert(client[kRunning] === 1)\n      this.upgrade = true\n      return 2\n    }\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    if (this.shouldKeepAlive && client[kPipelining]) {\n      const keepAliveTimeout = this.keepAlive ? util.parseKeepAliveTimeout(this.keepAlive) : null\n\n      if (keepAliveTimeout != null) {\n        const timeout = Math.min(\n          keepAliveTimeout - client[kKeepAliveTimeoutThreshold],\n          client[kKeepAliveMaxTimeout]\n        )\n        if (timeout <= 0) {\n          socket[kReset] = true\n        } else {\n          client[kKeepAliveTimeoutValue] = timeout\n        }\n      } else {\n        client[kKeepAliveTimeoutValue] = client[kKeepAliveDefaultTimeout]\n      }\n    } else {\n      // Stop more requests from being dispatched.\n      socket[kReset] = true\n    }\n\n    const pause = request.onHeaders(statusCode, headers, this.resume, statusText) === false\n\n    if (request.aborted) {\n      return -1\n    }\n\n    if (request.method === 'HEAD') {\n      return 1\n    }\n\n    if (statusCode < 200) {\n      return 1\n    }\n\n    if (socket[kBlocking]) {\n      socket[kBlocking] = false\n      resume(client)\n    }\n\n    return pause ? constants.ERROR.PAUSED : 0\n  }\n\n  onBody (buf) {\n    const { client, socket, statusCode, maxResponseSize } = this\n\n    if (socket.destroyed) {\n      return -1\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert.strictEqual(this.timeoutType, TIMEOUT_BODY)\n    if (this.timeout) {\n      // istanbul ignore else: only for jest\n      if (this.timeout.refresh) {\n        this.timeout.refresh()\n      }\n    }\n\n    assert(statusCode >= 200)\n\n    if (maxResponseSize > -1 && this.bytesRead + buf.length > maxResponseSize) {\n      util.destroy(socket, new ResponseExceededMaxSizeError())\n      return -1\n    }\n\n    this.bytesRead += buf.length\n\n    if (request.onData(buf) === false) {\n      return constants.ERROR.PAUSED\n    }\n  }\n\n  onMessageComplete () {\n    const { client, socket, statusCode, upgrade, headers, contentLength, bytesRead, shouldKeepAlive } = this\n\n    if (socket.destroyed && (!statusCode || shouldKeepAlive)) {\n      return -1\n    }\n\n    if (upgrade) {\n      return\n    }\n\n    const request = client[kQueue][client[kRunningIdx]]\n    assert(request)\n\n    assert(statusCode >= 100)\n\n    this.statusCode = null\n    this.statusText = ''\n    this.bytesRead = 0\n    this.contentLength = ''\n    this.keepAlive = ''\n    this.connection = ''\n\n    assert(this.headers.length % 2 === 0)\n    this.headers = []\n    this.headersSize = 0\n\n    if (statusCode < 200) {\n      return\n    }\n\n    /* istanbul ignore next: should be handled by llhttp? */\n    if (request.method !== 'HEAD' && contentLength && bytesRead !== parseInt(contentLength, 10)) {\n      util.destroy(socket, new ResponseContentLengthMismatchError())\n      return -1\n    }\n\n    request.onComplete(headers)\n\n    client[kQueue][client[kRunningIdx]++] = null\n\n    if (socket[kWriting]) {\n      assert.strictEqual(client[kRunning], 0)\n      // Response completed before request.\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (!shouldKeepAlive) {\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (socket[kReset] && client[kRunning] === 0) {\n      // Destroy socket once all requests have completed.\n      // The request at the tail of the pipeline is the one\n      // that requested reset and no further requests should\n      // have been queued since then.\n      util.destroy(socket, new InformationalError('reset'))\n      return constants.ERROR.PAUSED\n    } else if (client[kPipelining] === 1) {\n      // We must wait a full event loop cycle to reuse this socket to make sure\n      // that non-spec compliant servers are not closing the connection even if they\n      // said they won't.\n      setImmediate(resume, client)\n    } else {\n      resume(client)\n    }\n  }\n}\n\nfunction onParserTimeout (parser) {\n  const { socket, timeoutType, client } = parser\n\n  /* istanbul ignore else */\n  if (timeoutType === TIMEOUT_HEADERS) {\n    if (!socket[kWriting] || socket.writableNeedDrain || client[kRunning] > 1) {\n      assert(!parser.paused, 'cannot be paused while waiting for headers')\n      util.destroy(socket, new HeadersTimeoutError())\n    }\n  } else if (timeoutType === TIMEOUT_BODY) {\n    if (!parser.paused) {\n      util.destroy(socket, new BodyTimeoutError())\n    }\n  } else if (timeoutType === TIMEOUT_IDLE) {\n    assert(client[kRunning] === 0 && client[kKeepAliveTimeoutValue])\n    util.destroy(socket, new InformationalError('socket idle timeout'))\n  }\n}\n\nfunction onSocketReadable () {\n  const { [kParser]: parser } = this\n  if (parser) {\n    parser.readMore()\n  }\n}\n\nfunction onSocketError (err) {\n  const { [kClient]: client, [kParser]: parser } = this\n\n  assert(err.code !== 'ERR_TLS_CERT_ALTNAME_INVALID')\n\n  if (client[kHTTPConnVersion] !== 'h2') {\n    // On Mac OS, we get an ECONNRESET even if there is a full body to be forwarded\n    // to the user.\n    if (err.code === 'ECONNRESET' && parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so for as a valid response.\n      parser.onMessageComplete()\n      return\n    }\n  }\n\n  this[kError] = err\n\n  onError(this[kClient], err)\n}\n\nfunction onError (client, err) {\n  if (\n    client[kRunning] === 0 &&\n    err.code !== 'UND_ERR_INFO' &&\n    err.code !== 'UND_ERR_SOCKET'\n  ) {\n    // Error is not caused by running request and not a recoverable\n    // socket error.\n\n    assert(client[kPendingIdx] === client[kRunningIdx])\n\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(client, request, err)\n    }\n    assert(client[kSize] === 0)\n  }\n}\n\nfunction onSocketEnd () {\n  const { [kParser]: parser, [kClient]: client } = this\n\n  if (client[kHTTPConnVersion] !== 'h2') {\n    if (parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so far as a valid response.\n      parser.onMessageComplete()\n      return\n    }\n  }\n\n  util.destroy(this, new SocketError('other side closed', util.getSocketInfo(this)))\n}\n\nfunction onSocketClose () {\n  const { [kClient]: client, [kParser]: parser } = this\n\n  if (client[kHTTPConnVersion] === 'h1' && parser) {\n    if (!this[kError] && parser.statusCode && !parser.shouldKeepAlive) {\n      // We treat all incoming data so far as a valid response.\n      parser.onMessageComplete()\n    }\n\n    this[kParser].destroy()\n    this[kParser] = null\n  }\n\n  const err = this[kError] || new SocketError('closed', util.getSocketInfo(this))\n\n  client[kSocket] = null\n\n  if (client.destroyed) {\n    assert(client[kPending] === 0)\n\n    // Fail entire queue.\n    const requests = client[kQueue].splice(client[kRunningIdx])\n    for (let i = 0; i < requests.length; i++) {\n      const request = requests[i]\n      errorRequest(client, request, err)\n    }\n  } else if (client[kRunning] > 0 && err.code !== 'UND_ERR_INFO') {\n    // Fail head of pipeline.\n    const request = client[kQueue][client[kRunningIdx]]\n    client[kQueue][client[kRunningIdx]++] = null\n\n    errorRequest(client, request, err)\n  }\n\n  client[kPendingIdx] = client[kRunningIdx]\n\n  assert(client[kRunning] === 0)\n\n  client.emit('disconnect', client[kUrl], [client], err)\n\n  resume(client)\n}\n\nasync function connect (client) {\n  assert(!client[kConnecting])\n  assert(!client[kSocket])\n\n  let { host, hostname, protocol, port } = client[kUrl]\n\n  // Resolve ipv6\n  if (hostname[0] === '[') {\n    const idx = hostname.indexOf(']')\n\n    assert(idx !== -1)\n    const ip = hostname.substring(1, idx)\n\n    assert(net.isIP(ip))\n    hostname = ip\n  }\n\n  client[kConnecting] = true\n\n  if (channels.beforeConnect.hasSubscribers) {\n    channels.beforeConnect.publish({\n      connectParams: {\n        host,\n        hostname,\n        protocol,\n        port,\n        servername: client[kServerName],\n        localAddress: client[kLocalAddress]\n      },\n      connector: client[kConnector]\n    })\n  }\n\n  try {\n    const socket = await new Promise((resolve, reject) => {\n      client[kConnector]({\n        host,\n        hostname,\n        protocol,\n        port,\n        servername: client[kServerName],\n        localAddress: client[kLocalAddress]\n      }, (err, socket) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(socket)\n        }\n      })\n    })\n\n    if (client.destroyed) {\n      util.destroy(socket.on('error', () => {}), new ClientDestroyedError())\n      return\n    }\n\n    client[kConnecting] = false\n\n    assert(socket)\n\n    const isH2 = socket.alpnProtocol === 'h2'\n    if (isH2) {\n      if (!h2ExperimentalWarned) {\n        h2ExperimentalWarned = true\n        process.emitWarning('H2 support is experimental, expect them to change at any time.', {\n          code: 'UNDICI-H2'\n        })\n      }\n\n      const session = http2.connect(client[kUrl], {\n        createConnection: () => socket,\n        peerMaxConcurrentStreams: client[kHTTP2SessionState].maxConcurrentStreams\n      })\n\n      client[kHTTPConnVersion] = 'h2'\n      session[kClient] = client\n      session[kSocket] = socket\n      session.on('error', onHttp2SessionError)\n      session.on('frameError', onHttp2FrameError)\n      session.on('end', onHttp2SessionEnd)\n      session.on('goaway', onHTTP2GoAway)\n      session.on('close', onSocketClose)\n      session.unref()\n\n      client[kHTTP2Session] = session\n      socket[kHTTP2Session] = session\n    } else {\n      if (!llhttpInstance) {\n        llhttpInstance = await llhttpPromise\n        llhttpPromise = null\n      }\n\n      socket[kNoRef] = false\n      socket[kWriting] = false\n      socket[kReset] = false\n      socket[kBlocking] = false\n      socket[kParser] = new Parser(client, socket, llhttpInstance)\n    }\n\n    socket[kCounter] = 0\n    socket[kMaxRequests] = client[kMaxRequests]\n    socket[kClient] = client\n    socket[kError] = null\n\n    socket\n      .on('error', onSocketError)\n      .on('readable', onSocketReadable)\n      .on('end', onSocketEnd)\n      .on('close', onSocketClose)\n\n    client[kSocket] = socket\n\n    if (channels.connected.hasSubscribers) {\n      channels.connected.publish({\n        connectParams: {\n          host,\n          hostname,\n          protocol,\n          port,\n          servername: client[kServerName],\n          localAddress: client[kLocalAddress]\n        },\n        connector: client[kConnector],\n        socket\n      })\n    }\n    client.emit('connect', client[kUrl], [client])\n  } catch (err) {\n    if (client.destroyed) {\n      return\n    }\n\n    client[kConnecting] = false\n\n    if (channels.connectError.hasSubscribers) {\n      channels.connectError.publish({\n        connectParams: {\n          host,\n          hostname,\n          protocol,\n          port,\n          servername: client[kServerName],\n          localAddress: client[kLocalAddress]\n        },\n        connector: client[kConnector],\n        error: err\n      })\n    }\n\n    if (err.code === 'ERR_TLS_CERT_ALTNAME_INVALID') {\n      assert(client[kRunning] === 0)\n      while (client[kPending] > 0 && client[kQueue][client[kPendingIdx]].servername === client[kServerName]) {\n        const request = client[kQueue][client[kPendingIdx]++]\n        errorRequest(client, request, err)\n      }\n    } else {\n      onError(client, err)\n    }\n\n    client.emit('connectionError', client[kUrl], [client], err)\n  }\n\n  resume(client)\n}\n\nfunction emitDrain (client) {\n  client[kNeedDrain] = 0\n  client.emit('drain', client[kUrl], [client])\n}\n\nfunction resume (client, sync) {\n  if (client[kResuming] === 2) {\n    return\n  }\n\n  client[kResuming] = 2\n\n  _resume(client, sync)\n  client[kResuming] = 0\n\n  if (client[kRunningIdx] > 256) {\n    client[kQueue].splice(0, client[kRunningIdx])\n    client[kPendingIdx] -= client[kRunningIdx]\n    client[kRunningIdx] = 0\n  }\n}\n\nfunction _resume (client, sync) {\n  while (true) {\n    if (client.destroyed) {\n      assert(client[kPending] === 0)\n      return\n    }\n\n    if (client[kClosedResolve] && !client[kSize]) {\n      client[kClosedResolve]()\n      client[kClosedResolve] = null\n      return\n    }\n\n    const socket = client[kSocket]\n\n    if (socket && !socket.destroyed && socket.alpnProtocol !== 'h2') {\n      if (client[kSize] === 0) {\n        if (!socket[kNoRef] && socket.unref) {\n          socket.unref()\n          socket[kNoRef] = true\n        }\n      } else if (socket[kNoRef] && socket.ref) {\n        socket.ref()\n        socket[kNoRef] = false\n      }\n\n      if (client[kSize] === 0) {\n        if (socket[kParser].timeoutType !== TIMEOUT_IDLE) {\n          socket[kParser].setTimeout(client[kKeepAliveTimeoutValue], TIMEOUT_IDLE)\n        }\n      } else if (client[kRunning] > 0 && socket[kParser].statusCode < 200) {\n        if (socket[kParser].timeoutType !== TIMEOUT_HEADERS) {\n          const request = client[kQueue][client[kRunningIdx]]\n          const headersTimeout = request.headersTimeout != null\n            ? request.headersTimeout\n            : client[kHeadersTimeout]\n          socket[kParser].setTimeout(headersTimeout, TIMEOUT_HEADERS)\n        }\n      }\n    }\n\n    if (client[kBusy]) {\n      client[kNeedDrain] = 2\n    } else if (client[kNeedDrain] === 2) {\n      if (sync) {\n        client[kNeedDrain] = 1\n        process.nextTick(emitDrain, client)\n      } else {\n        emitDrain(client)\n      }\n      continue\n    }\n\n    if (client[kPending] === 0) {\n      return\n    }\n\n    if (client[kRunning] >= (client[kPipelining] || 1)) {\n      return\n    }\n\n    const request = client[kQueue][client[kPendingIdx]]\n\n    if (client[kUrl].protocol === 'https:' && client[kServerName] !== request.servername) {\n      if (client[kRunning] > 0) {\n        return\n      }\n\n      client[kServerName] = request.servername\n\n      if (socket && socket.servername !== request.servername) {\n        util.destroy(socket, new InformationalError('servername changed'))\n        return\n      }\n    }\n\n    if (client[kConnecting]) {\n      return\n    }\n\n    if (!socket && !client[kHTTP2Session]) {\n      connect(client)\n      return\n    }\n\n    if (socket.destroyed || socket[kWriting] || socket[kReset] || socket[kBlocking]) {\n      return\n    }\n\n    if (client[kRunning] > 0 && !request.idempotent) {\n      // Non-idempotent request cannot be retried.\n      // Ensure that no other requests are inflight and\n      // could cause failure.\n      return\n    }\n\n    if (client[kRunning] > 0 && (request.upgrade || request.method === 'CONNECT')) {\n      // Don't dispatch an upgrade until all preceding requests have completed.\n      // A misbehaving server might upgrade the connection before all pipelined\n      // request has completed.\n      return\n    }\n\n    if (client[kRunning] > 0 && util.bodyLength(request.body) !== 0 &&\n      (util.isStream(request.body) || util.isAsyncIterable(request.body))) {\n      // Request with stream or iterator body can error while other requests\n      // are inflight and indirectly error those as well.\n      // Ensure this doesn't happen by waiting for inflight\n      // to complete before dispatching.\n\n      // Request with stream or iterator body cannot be retried.\n      // Ensure that no other requests are inflight and\n      // could cause failure.\n      return\n    }\n\n    if (!request.aborted && write(client, request)) {\n      client[kPendingIdx]++\n    } else {\n      client[kQueue].splice(client[kPendingIdx], 1)\n    }\n  }\n}\n\n// https://www.rfc-editor.org/rfc/rfc7230#section-3.3.2\nfunction shouldSendContentLength (method) {\n  return method !== 'GET' && method !== 'HEAD' && method !== 'OPTIONS' && method !== 'TRACE' && method !== 'CONNECT'\n}\n\nfunction write (client, request) {\n  if (client[kHTTPConnVersion] === 'h2') {\n    writeH2(client, client[kHTTP2Session], request)\n    return\n  }\n\n  const { body, method, path, host, upgrade, headers, blocking, reset } = request\n\n  // https://tools.ietf.org/html/rfc7231#section-4.3.1\n  // https://tools.ietf.org/html/rfc7231#section-4.3.2\n  // https://tools.ietf.org/html/rfc7231#section-4.3.5\n\n  // Sending a payload body on a request that does not\n  // expect it can cause undefined behavior on some\n  // servers and corrupt connection state. Do not\n  // re-use the connection for further requests.\n\n  const expectsPayload = (\n    method === 'PUT' ||\n    method === 'POST' ||\n    method === 'PATCH'\n  )\n\n  if (body && typeof body.read === 'function') {\n    // Try to read EOF in order to get length.\n    body.read(0)\n  }\n\n  const bodyLength = util.bodyLength(body)\n\n  let contentLength = bodyLength\n\n  if (contentLength === null) {\n    contentLength = request.contentLength\n  }\n\n  if (contentLength === 0 && !expectsPayload) {\n    // https://tools.ietf.org/html/rfc7230#section-3.3.2\n    // A user agent SHOULD NOT send a Content-Length header field when\n    // the request message does not contain a payload body and the method\n    // semantics do not anticipate such a body.\n\n    contentLength = null\n  }\n\n  // https://github.com/nodejs/undici/issues/2046\n  // A user agent may send a Content-Length header with 0 value, this should be allowed.\n  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength !== null && request.contentLength !== contentLength) {\n    if (client[kStrictContentLength]) {\n      errorRequest(client, request, new RequestContentLengthMismatchError())\n      return false\n    }\n\n    process.emitWarning(new RequestContentLengthMismatchError())\n  }\n\n  const socket = client[kSocket]\n\n  try {\n    request.onConnect((err) => {\n      if (request.aborted || request.completed) {\n        return\n      }\n\n      errorRequest(client, request, err || new RequestAbortedError())\n\n      util.destroy(socket, new InformationalError('aborted'))\n    })\n  } catch (err) {\n    errorRequest(client, request, err)\n  }\n\n  if (request.aborted) {\n    return false\n  }\n\n  if (method === 'HEAD') {\n    // https://github.com/mcollina/undici/issues/258\n    // Close after a HEAD request to interop with misbehaving servers\n    // that may send a body in the response.\n\n    socket[kReset] = true\n  }\n\n  if (upgrade || method === 'CONNECT') {\n    // On CONNECT or upgrade, block pipeline from dispatching further\n    // requests on this connection.\n\n    socket[kReset] = true\n  }\n\n  if (reset != null) {\n    socket[kReset] = reset\n  }\n\n  if (client[kMaxRequests] && socket[kCounter]++ >= client[kMaxRequests]) {\n    socket[kReset] = true\n  }\n\n  if (blocking) {\n    socket[kBlocking] = true\n  }\n\n  let header = `${method} ${path} HTTP/1.1\\r\\n`\n\n  if (typeof host === 'string') {\n    header += `host: ${host}\\r\\n`\n  } else {\n    header += client[kHostHeader]\n  }\n\n  if (upgrade) {\n    header += `connection: upgrade\\r\\nupgrade: ${upgrade}\\r\\n`\n  } else if (client[kPipelining] && !socket[kReset]) {\n    header += 'connection: keep-alive\\r\\n'\n  } else {\n    header += 'connection: close\\r\\n'\n  }\n\n  if (headers) {\n    header += headers\n  }\n\n  if (channels.sendHeaders.hasSubscribers) {\n    channels.sendHeaders.publish({ request, headers: header, socket })\n  }\n\n  /* istanbul ignore else: assertion */\n  if (!body || bodyLength === 0) {\n    if (contentLength === 0) {\n      socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1')\n    } else {\n      assert(contentLength === null, 'no body must not have content length')\n      socket.write(`${header}\\r\\n`, 'latin1')\n    }\n    request.onRequestSent()\n  } else if (util.isBuffer(body)) {\n    assert(contentLength === body.byteLength, 'buffer body must have content length')\n\n    socket.cork()\n    socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n    socket.write(body)\n    socket.uncork()\n    request.onBodySent(body)\n    request.onRequestSent()\n    if (!expectsPayload) {\n      socket[kReset] = true\n    }\n  } else if (util.isBlobLike(body)) {\n    if (typeof body.stream === 'function') {\n      writeIterable({ body: body.stream(), client, request, socket, contentLength, header, expectsPayload })\n    } else {\n      writeBlob({ body, client, request, socket, contentLength, header, expectsPayload })\n    }\n  } else if (util.isStream(body)) {\n    writeStream({ body, client, request, socket, contentLength, header, expectsPayload })\n  } else if (util.isIterable(body)) {\n    writeIterable({ body, client, request, socket, contentLength, header, expectsPayload })\n  } else {\n    assert(false)\n  }\n\n  return true\n}\n\nfunction writeH2 (client, session, request) {\n  const { body, method, path, host, upgrade, expectContinue, signal, headers: reqHeaders } = request\n\n  let headers\n  if (typeof reqHeaders === 'string') headers = Request[kHTTP2CopyHeaders](reqHeaders.trim())\n  else headers = reqHeaders\n\n  if (upgrade) {\n    errorRequest(client, request, new Error('Upgrade not supported for H2'))\n    return false\n  }\n\n  try {\n    // TODO(HTTP/2): Should we call onConnect immediately or on stream ready event?\n    request.onConnect((err) => {\n      if (request.aborted || request.completed) {\n        return\n      }\n\n      errorRequest(client, request, err || new RequestAbortedError())\n    })\n  } catch (err) {\n    errorRequest(client, request, err)\n  }\n\n  if (request.aborted) {\n    return false\n  }\n\n  /** @type {import('node:http2').ClientHttp2Stream} */\n  let stream\n  const h2State = client[kHTTP2SessionState]\n\n  headers[HTTP2_HEADER_AUTHORITY] = host || client[kHost]\n  headers[HTTP2_HEADER_METHOD] = method\n\n  if (method === 'CONNECT') {\n    session.ref()\n    // we are already connected, streams are pending, first request\n    // will create a new stream. We trigger a request to create the stream and wait until\n    // `ready` event is triggered\n    // We disabled endStream to allow the user to write to the stream\n    stream = session.request(headers, { endStream: false, signal })\n\n    if (stream.id && !stream.pending) {\n      request.onUpgrade(null, null, stream)\n      ++h2State.openStreams\n    } else {\n      stream.once('ready', () => {\n        request.onUpgrade(null, null, stream)\n        ++h2State.openStreams\n      })\n    }\n\n    stream.once('close', () => {\n      h2State.openStreams -= 1\n      // TODO(HTTP/2): unref only if current streams count is 0\n      if (h2State.openStreams === 0) session.unref()\n    })\n\n    return true\n  }\n\n  // https://tools.ietf.org/html/rfc7540#section-8.3\n  // :path and :scheme headers must be omited when sending CONNECT\n\n  headers[HTTP2_HEADER_PATH] = path\n  headers[HTTP2_HEADER_SCHEME] = 'https'\n\n  // https://tools.ietf.org/html/rfc7231#section-4.3.1\n  // https://tools.ietf.org/html/rfc7231#section-4.3.2\n  // https://tools.ietf.org/html/rfc7231#section-4.3.5\n\n  // Sending a payload body on a request that does not\n  // expect it can cause undefined behavior on some\n  // servers and corrupt connection state. Do not\n  // re-use the connection for further requests.\n\n  const expectsPayload = (\n    method === 'PUT' ||\n    method === 'POST' ||\n    method === 'PATCH'\n  )\n\n  if (body && typeof body.read === 'function') {\n    // Try to read EOF in order to get length.\n    body.read(0)\n  }\n\n  let contentLength = util.bodyLength(body)\n\n  if (contentLength == null) {\n    contentLength = request.contentLength\n  }\n\n  if (contentLength === 0 || !expectsPayload) {\n    // https://tools.ietf.org/html/rfc7230#section-3.3.2\n    // A user agent SHOULD NOT send a Content-Length header field when\n    // the request message does not contain a payload body and the method\n    // semantics do not anticipate such a body.\n\n    contentLength = null\n  }\n\n  // https://github.com/nodejs/undici/issues/2046\n  // A user agent may send a Content-Length header with 0 value, this should be allowed.\n  if (shouldSendContentLength(method) && contentLength > 0 && request.contentLength != null && request.contentLength !== contentLength) {\n    if (client[kStrictContentLength]) {\n      errorRequest(client, request, new RequestContentLengthMismatchError())\n      return false\n    }\n\n    process.emitWarning(new RequestContentLengthMismatchError())\n  }\n\n  if (contentLength != null) {\n    assert(body, 'no body must not have content length')\n    headers[HTTP2_HEADER_CONTENT_LENGTH] = `${contentLength}`\n  }\n\n  session.ref()\n\n  const shouldEndStream = method === 'GET' || method === 'HEAD'\n  if (expectContinue) {\n    headers[HTTP2_HEADER_EXPECT] = '100-continue'\n    stream = session.request(headers, { endStream: shouldEndStream, signal })\n\n    stream.once('continue', writeBodyH2)\n  } else {\n    stream = session.request(headers, {\n      endStream: shouldEndStream,\n      signal\n    })\n    writeBodyH2()\n  }\n\n  // Increment counter as we have new several streams open\n  ++h2State.openStreams\n\n  stream.once('response', headers => {\n    const { [HTTP2_HEADER_STATUS]: statusCode, ...realHeaders } = headers\n\n    if (request.onHeaders(Number(statusCode), realHeaders, stream.resume.bind(stream), '') === false) {\n      stream.pause()\n    }\n  })\n\n  stream.once('end', () => {\n    request.onComplete([])\n  })\n\n  stream.on('data', (chunk) => {\n    if (request.onData(chunk) === false) {\n      stream.pause()\n    }\n  })\n\n  stream.once('close', () => {\n    h2State.openStreams -= 1\n    // TODO(HTTP/2): unref only if current streams count is 0\n    if (h2State.openStreams === 0) {\n      session.unref()\n    }\n  })\n\n  stream.once('error', function (err) {\n    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {\n      h2State.streams -= 1\n      util.destroy(stream, err)\n    }\n  })\n\n  stream.once('frameError', (type, code) => {\n    const err = new InformationalError(`HTTP/2: \"frameError\" received - type ${type}, code ${code}`)\n    errorRequest(client, request, err)\n\n    if (client[kHTTP2Session] && !client[kHTTP2Session].destroyed && !this.closed && !this.destroyed) {\n      h2State.streams -= 1\n      util.destroy(stream, err)\n    }\n  })\n\n  // stream.on('aborted', () => {\n  //   // TODO(HTTP/2): Support aborted\n  // })\n\n  // stream.on('timeout', () => {\n  //   // TODO(HTTP/2): Support timeout\n  // })\n\n  // stream.on('push', headers => {\n  //   // TODO(HTTP/2): Suppor push\n  // })\n\n  // stream.on('trailers', headers => {\n  //   // TODO(HTTP/2): Support trailers\n  // })\n\n  return true\n\n  function writeBodyH2 () {\n    /* istanbul ignore else: assertion */\n    if (!body) {\n      request.onRequestSent()\n    } else if (util.isBuffer(body)) {\n      assert(contentLength === body.byteLength, 'buffer body must have content length')\n      stream.cork()\n      stream.write(body)\n      stream.uncork()\n      stream.end()\n      request.onBodySent(body)\n      request.onRequestSent()\n    } else if (util.isBlobLike(body)) {\n      if (typeof body.stream === 'function') {\n        writeIterable({\n          client,\n          request,\n          contentLength,\n          h2stream: stream,\n          expectsPayload,\n          body: body.stream(),\n          socket: client[kSocket],\n          header: ''\n        })\n      } else {\n        writeBlob({\n          body,\n          client,\n          request,\n          contentLength,\n          expectsPayload,\n          h2stream: stream,\n          header: '',\n          socket: client[kSocket]\n        })\n      }\n    } else if (util.isStream(body)) {\n      writeStream({\n        body,\n        client,\n        request,\n        contentLength,\n        expectsPayload,\n        socket: client[kSocket],\n        h2stream: stream,\n        header: ''\n      })\n    } else if (util.isIterable(body)) {\n      writeIterable({\n        body,\n        client,\n        request,\n        contentLength,\n        expectsPayload,\n        header: '',\n        h2stream: stream,\n        socket: client[kSocket]\n      })\n    } else {\n      assert(false)\n    }\n  }\n}\n\nfunction writeStream ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'stream body cannot be pipelined')\n\n  if (client[kHTTPConnVersion] === 'h2') {\n    // For HTTP/2, is enough to pipe the stream\n    const pipe = pipeline(\n      body,\n      h2stream,\n      (err) => {\n        if (err) {\n          util.destroy(body, err)\n          util.destroy(h2stream, err)\n        } else {\n          request.onRequestSent()\n        }\n      }\n    )\n\n    pipe.on('data', onPipeData)\n    pipe.once('end', () => {\n      pipe.removeListener('data', onPipeData)\n      util.destroy(pipe)\n    })\n\n    function onPipeData (chunk) {\n      request.onBodySent(chunk)\n    }\n\n    return\n  }\n\n  let finished = false\n\n  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })\n\n  const onData = function (chunk) {\n    if (finished) {\n      return\n    }\n\n    try {\n      if (!writer.write(chunk) && this.pause) {\n        this.pause()\n      }\n    } catch (err) {\n      util.destroy(this, err)\n    }\n  }\n  const onDrain = function () {\n    if (finished) {\n      return\n    }\n\n    if (body.resume) {\n      body.resume()\n    }\n  }\n  const onAbort = function () {\n    if (finished) {\n      return\n    }\n    const err = new RequestAbortedError()\n    queueMicrotask(() => onFinished(err))\n  }\n  const onFinished = function (err) {\n    if (finished) {\n      return\n    }\n\n    finished = true\n\n    assert(socket.destroyed || (socket[kWriting] && client[kRunning] <= 1))\n\n    socket\n      .off('drain', onDrain)\n      .off('error', onFinished)\n\n    body\n      .removeListener('data', onData)\n      .removeListener('end', onFinished)\n      .removeListener('error', onFinished)\n      .removeListener('close', onAbort)\n\n    if (!err) {\n      try {\n        writer.end()\n      } catch (er) {\n        err = er\n      }\n    }\n\n    writer.destroy(err)\n\n    if (err && (err.code !== 'UND_ERR_INFO' || err.message !== 'reset')) {\n      util.destroy(body, err)\n    } else {\n      util.destroy(body)\n    }\n  }\n\n  body\n    .on('data', onData)\n    .on('end', onFinished)\n    .on('error', onFinished)\n    .on('close', onAbort)\n\n  if (body.resume) {\n    body.resume()\n  }\n\n  socket\n    .on('drain', onDrain)\n    .on('error', onFinished)\n}\n\nasync function writeBlob ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength === body.size, 'blob body must have content length')\n\n  const isH2 = client[kHTTPConnVersion] === 'h2'\n  try {\n    if (contentLength != null && contentLength !== body.size) {\n      throw new RequestContentLengthMismatchError()\n    }\n\n    const buffer = Buffer.from(await body.arrayBuffer())\n\n    if (isH2) {\n      h2stream.cork()\n      h2stream.write(buffer)\n      h2stream.uncork()\n    } else {\n      socket.cork()\n      socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n      socket.write(buffer)\n      socket.uncork()\n    }\n\n    request.onBodySent(buffer)\n    request.onRequestSent()\n\n    if (!expectsPayload) {\n      socket[kReset] = true\n    }\n\n    resume(client)\n  } catch (err) {\n    util.destroy(isH2 ? h2stream : socket, err)\n  }\n}\n\nasync function writeIterable ({ h2stream, body, client, request, socket, contentLength, header, expectsPayload }) {\n  assert(contentLength !== 0 || client[kRunning] === 0, 'iterator body cannot be pipelined')\n\n  let callback = null\n  function onDrain () {\n    if (callback) {\n      const cb = callback\n      callback = null\n      cb()\n    }\n  }\n\n  const waitForDrain = () => new Promise((resolve, reject) => {\n    assert(callback === null)\n\n    if (socket[kError]) {\n      reject(socket[kError])\n    } else {\n      callback = resolve\n    }\n  })\n\n  if (client[kHTTPConnVersion] === 'h2') {\n    h2stream\n      .on('close', onDrain)\n      .on('drain', onDrain)\n\n    try {\n      // It's up to the user to somehow abort the async iterable.\n      for await (const chunk of body) {\n        if (socket[kError]) {\n          throw socket[kError]\n        }\n\n        const res = h2stream.write(chunk)\n        request.onBodySent(chunk)\n        if (!res) {\n          await waitForDrain()\n        }\n      }\n    } catch (err) {\n      h2stream.destroy(err)\n    } finally {\n      request.onRequestSent()\n      h2stream.end()\n      h2stream\n        .off('close', onDrain)\n        .off('drain', onDrain)\n    }\n\n    return\n  }\n\n  socket\n    .on('close', onDrain)\n    .on('drain', onDrain)\n\n  const writer = new AsyncWriter({ socket, request, contentLength, client, expectsPayload, header })\n  try {\n    // It's up to the user to somehow abort the async iterable.\n    for await (const chunk of body) {\n      if (socket[kError]) {\n        throw socket[kError]\n      }\n\n      if (!writer.write(chunk)) {\n        await waitForDrain()\n      }\n    }\n\n    writer.end()\n  } catch (err) {\n    writer.destroy(err)\n  } finally {\n    socket\n      .off('close', onDrain)\n      .off('drain', onDrain)\n  }\n}\n\nclass AsyncWriter {\n  constructor ({ socket, request, contentLength, client, expectsPayload, header }) {\n    this.socket = socket\n    this.request = request\n    this.contentLength = contentLength\n    this.client = client\n    this.bytesWritten = 0\n    this.expectsPayload = expectsPayload\n    this.header = header\n\n    socket[kWriting] = true\n  }\n\n  write (chunk) {\n    const { socket, request, contentLength, client, bytesWritten, expectsPayload, header } = this\n\n    if (socket[kError]) {\n      throw socket[kError]\n    }\n\n    if (socket.destroyed) {\n      return false\n    }\n\n    const len = Buffer.byteLength(chunk)\n    if (!len) {\n      return true\n    }\n\n    // We should defer writing chunks.\n    if (contentLength !== null && bytesWritten + len > contentLength) {\n      if (client[kStrictContentLength]) {\n        throw new RequestContentLengthMismatchError()\n      }\n\n      process.emitWarning(new RequestContentLengthMismatchError())\n    }\n\n    socket.cork()\n\n    if (bytesWritten === 0) {\n      if (!expectsPayload) {\n        socket[kReset] = true\n      }\n\n      if (contentLength === null) {\n        socket.write(`${header}transfer-encoding: chunked\\r\\n`, 'latin1')\n      } else {\n        socket.write(`${header}content-length: ${contentLength}\\r\\n\\r\\n`, 'latin1')\n      }\n    }\n\n    if (contentLength === null) {\n      socket.write(`\\r\\n${len.toString(16)}\\r\\n`, 'latin1')\n    }\n\n    this.bytesWritten += len\n\n    const ret = socket.write(chunk)\n\n    socket.uncork()\n\n    request.onBodySent(chunk)\n\n    if (!ret) {\n      if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n        // istanbul ignore else: only for jest\n        if (socket[kParser].timeout.refresh) {\n          socket[kParser].timeout.refresh()\n        }\n      }\n    }\n\n    return ret\n  }\n\n  end () {\n    const { socket, contentLength, client, bytesWritten, expectsPayload, header, request } = this\n    request.onRequestSent()\n\n    socket[kWriting] = false\n\n    if (socket[kError]) {\n      throw socket[kError]\n    }\n\n    if (socket.destroyed) {\n      return\n    }\n\n    if (bytesWritten === 0) {\n      if (expectsPayload) {\n        // https://tools.ietf.org/html/rfc7230#section-3.3.2\n        // A user agent SHOULD send a Content-Length in a request message when\n        // no Transfer-Encoding is sent and the request method defines a meaning\n        // for an enclosed payload body.\n\n        socket.write(`${header}content-length: 0\\r\\n\\r\\n`, 'latin1')\n      } else {\n        socket.write(`${header}\\r\\n`, 'latin1')\n      }\n    } else if (contentLength === null) {\n      socket.write('\\r\\n0\\r\\n\\r\\n', 'latin1')\n    }\n\n    if (contentLength !== null && bytesWritten !== contentLength) {\n      if (client[kStrictContentLength]) {\n        throw new RequestContentLengthMismatchError()\n      } else {\n        process.emitWarning(new RequestContentLengthMismatchError())\n      }\n    }\n\n    if (socket[kParser].timeout && socket[kParser].timeoutType === TIMEOUT_HEADERS) {\n      // istanbul ignore else: only for jest\n      if (socket[kParser].timeout.refresh) {\n        socket[kParser].timeout.refresh()\n      }\n    }\n\n    resume(client)\n  }\n\n  destroy (err) {\n    const { socket, client } = this\n\n    socket[kWriting] = false\n\n    if (err) {\n      assert(client[kRunning] <= 1, 'pipeline should only contain this request')\n      util.destroy(socket, err)\n    }\n  }\n}\n\nfunction errorRequest (client, request, err) {\n  try {\n    request.onError(err)\n    assert(request.aborted)\n  } catch (err) {\n    client.emit('error', err)\n  }\n}\n\nmodule.exports = Client\n", "/* eslint-disable */\n\n'use strict'\n\n// Extracted from node/lib/internal/fixed_queue.js\n\n// Currently optimal queue size, tested on V8 6.0 - 6.6. Must be power of two.\nconst kSize = 2048;\nconst kMask = kSize - 1;\n\n// The FixedQueue is implemented as a singly-linked list of fixed-size\n// circular buffers. It looks something like this:\n//\n//  head                                                       tail\n//    |                                                          |\n//    v                                                          v\n// +-----------+ <-----\\       +-----------+ <------\\         +-----------+\n// |  [null]   |        \\----- |   next    |         \\------- |   next    |\n// +-----------+               +-----------+                  +-----------+\n// |   item    | <-- bottom    |   item    | <-- bottom       |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |                  |  [empty]  |\n// |   item    |               |   item    |       bottom --> |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |    ...    |               |    ...    |                  |    ...    |\n// |   item    |               |   item    |                  |   item    |\n// |   item    |               |   item    |                  |   item    |\n// |  [empty]  | <-- top       |   item    |                  |   item    |\n// |  [empty]  |               |   item    |                  |   item    |\n// |  [empty]  |               |  [empty]  | <-- top  top --> |  [empty]  |\n// +-----------+               +-----------+                  +-----------+\n//\n// Or, if there is only one circular buffer, it looks something\n// like either of these:\n//\n//  head   tail                                 head   tail\n//    |     |                                     |     |\n//    v     v                                     v     v\n// +-----------+                               +-----------+\n// |  [null]   |                               |  [null]   |\n// +-----------+                               +-----------+\n// |  [empty]  |                               |   item    |\n// |  [empty]  |                               |   item    |\n// |   item    | <-- bottom            top --> |  [empty]  |\n// |   item    |                               |  [empty]  |\n// |  [empty]  | <-- top            bottom --> |   item    |\n// |  [empty]  |                               |   item    |\n// +-----------+                               +-----------+\n//\n// Adding a value means moving `top` forward by one, removing means\n// moving `bottom` forward by one. After reaching the end, the queue\n// wraps around.\n//\n// When `top === bottom` the current queue is empty and when\n// `top + 1 === bottom` it's full. This wastes a single space of storage\n// but allows much quicker checks.\n\nclass FixedCircularBuffer {\n  constructor() {\n    this.bottom = 0;\n    this.top = 0;\n    this.list = new Array(kSize);\n    this.next = null;\n  }\n\n  isEmpty() {\n    return this.top === this.bottom;\n  }\n\n  isFull() {\n    return ((this.top + 1) & kMask) === this.bottom;\n  }\n\n  push(data) {\n    this.list[this.top] = data;\n    this.top = (this.top + 1) & kMask;\n  }\n\n  shift() {\n    const nextItem = this.list[this.bottom];\n    if (nextItem === undefined)\n      return null;\n    this.list[this.bottom] = undefined;\n    this.bottom = (this.bottom + 1) & kMask;\n    return nextItem;\n  }\n}\n\nmodule.exports = class FixedQueue {\n  constructor() {\n    this.head = this.tail = new FixedCircularBuffer();\n  }\n\n  isEmpty() {\n    return this.head.isEmpty();\n  }\n\n  push(data) {\n    if (this.head.isFull()) {\n      // Head is full: Creates a new queue, sets the old queue's `.next` to it,\n      // and sets it as the new main queue.\n      this.head = this.head.next = new FixedCircularBuffer();\n    }\n    this.head.push(data);\n  }\n\n  shift() {\n    const tail = this.tail;\n    const next = tail.shift();\n    if (tail.isEmpty() && tail.next !== null) {\n      // If there is another queue, it forms the new tail.\n      this.tail = tail.next;\n    }\n    return next;\n  }\n};\n", "const { kFree, kConnected, kPending, kQueued, kRunning, kSize } = require('./core/symbols')\nconst kPool = Symbol('pool')\n\nclass PoolStats {\n  constructor (pool) {\n    this[kPool] = pool\n  }\n\n  get connected () {\n    return this[kPool][kConnected]\n  }\n\n  get free () {\n    return this[kPool][kFree]\n  }\n\n  get pending () {\n    return this[kPool][kPending]\n  }\n\n  get queued () {\n    return this[kPool][kQueued]\n  }\n\n  get running () {\n    return this[kPool][kRunning]\n  }\n\n  get size () {\n    return this[kPool][kSize]\n  }\n}\n\nmodule.exports = PoolStats\n", "'use strict'\n\nconst DispatcherBase = require('./dispatcher-base')\nconst FixedQueue = require('./node/fixed-queue')\nconst { kConnected, kSize, kRunning, kPending, kQueued, kBusy, kFree, kUrl, kClose, kDestroy, kDispatch } = require('./core/symbols')\nconst PoolStats = require('./pool-stats')\n\nconst kClients = Symbol('clients')\nconst kNeedDrain = Symbol('needDrain')\nconst kQueue = Symbol('queue')\nconst kClosedResolve = Symbol('closed resolve')\nconst kOnDrain = Symbol('onDrain')\nconst kOnConnect = Symbol('onConnect')\nconst kOnDisconnect = Symbol('onDisconnect')\nconst kOnConnectionError = Symbol('onConnectionError')\nconst kGetDispatcher = Symbol('get dispatcher')\nconst kAddClient = Symbol('add client')\nconst kRemoveClient = Symbol('remove client')\nconst kStats = Symbol('stats')\n\nclass PoolBase extends DispatcherBase {\n  constructor () {\n    super()\n\n    this[kQueue] = new FixedQueue()\n    this[kClients] = []\n    this[kQueued] = 0\n\n    const pool = this\n\n    this[kOnDrain] = function onDrain (origin, targets) {\n      const queue = pool[kQueue]\n\n      let needDrain = false\n\n      while (!needDrain) {\n        const item = queue.shift()\n        if (!item) {\n          break\n        }\n        pool[kQueued]--\n        needDrain = !this.dispatch(item.opts, item.handler)\n      }\n\n      this[kNeedDrain] = needDrain\n\n      if (!this[kNeedDrain] && pool[kNeedDrain]) {\n        pool[kNeedDrain] = false\n        pool.emit('drain', origin, [pool, ...targets])\n      }\n\n      if (pool[kClosedResolve] && queue.isEmpty()) {\n        Promise\n          .all(pool[kClients].map(c => c.close()))\n          .then(pool[kClosedResolve])\n      }\n    }\n\n    this[kOnConnect] = (origin, targets) => {\n      pool.emit('connect', origin, [pool, ...targets])\n    }\n\n    this[kOnDisconnect] = (origin, targets, err) => {\n      pool.emit('disconnect', origin, [pool, ...targets], err)\n    }\n\n    this[kOnConnectionError] = (origin, targets, err) => {\n      pool.emit('connectionError', origin, [pool, ...targets], err)\n    }\n\n    this[kStats] = new PoolStats(this)\n  }\n\n  get [kBusy] () {\n    return this[kNeedDrain]\n  }\n\n  get [kConnected] () {\n    return this[kClients].filter(client => client[kConnected]).length\n  }\n\n  get [kFree] () {\n    return this[kClients].filter(client => client[kConnected] && !client[kNeedDrain]).length\n  }\n\n  get [kPending] () {\n    let ret = this[kQueued]\n    for (const { [kPending]: pending } of this[kClients]) {\n      ret += pending\n    }\n    return ret\n  }\n\n  get [kRunning] () {\n    let ret = 0\n    for (const { [kRunning]: running } of this[kClients]) {\n      ret += running\n    }\n    return ret\n  }\n\n  get [kSize] () {\n    let ret = this[kQueued]\n    for (const { [kSize]: size } of this[kClients]) {\n      ret += size\n    }\n    return ret\n  }\n\n  get stats () {\n    return this[kStats]\n  }\n\n  async [kClose] () {\n    if (this[kQueue].isEmpty()) {\n      return Promise.all(this[kClients].map(c => c.close()))\n    } else {\n      return new Promise((resolve) => {\n        this[kClosedResolve] = resolve\n      })\n    }\n  }\n\n  async [kDestroy] (err) {\n    while (true) {\n      const item = this[kQueue].shift()\n      if (!item) {\n        break\n      }\n      item.handler.onError(err)\n    }\n\n    return Promise.all(this[kClients].map(c => c.destroy(err)))\n  }\n\n  [kDispatch] (opts, handler) {\n    const dispatcher = this[kGetDispatcher]()\n\n    if (!dispatcher) {\n      this[kNeedDrain] = true\n      this[kQueue].push({ opts, handler })\n      this[kQueued]++\n    } else if (!dispatcher.dispatch(opts, handler)) {\n      dispatcher[kNeedDrain] = true\n      this[kNeedDrain] = !this[kGetDispatcher]()\n    }\n\n    return !this[kNeedDrain]\n  }\n\n  [kAddClient] (client) {\n    client\n      .on('drain', this[kOnDrain])\n      .on('connect', this[kOnConnect])\n      .on('disconnect', this[kOnDisconnect])\n      .on('connectionError', this[kOnConnectionError])\n\n    this[kClients].push(client)\n\n    if (this[kNeedDrain]) {\n      process.nextTick(() => {\n        if (this[kNeedDrain]) {\n          this[kOnDrain](client[kUrl], [this, client])\n        }\n      })\n    }\n\n    return this\n  }\n\n  [kRemoveClient] (client) {\n    client.close(() => {\n      const idx = this[kClients].indexOf(client)\n      if (idx !== -1) {\n        this[kClients].splice(idx, 1)\n      }\n    })\n\n    this[kNeedDrain] = this[kClients].some(dispatcher => (\n      !dispatcher[kNeedDrain] &&\n      dispatcher.closed !== true &&\n      dispatcher.destroyed !== true\n    ))\n  }\n}\n\nmodule.exports = {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n}\n", "'use strict'\n\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kGetDispatcher\n} = require('./pool-base')\nconst Client = require('./client')\nconst {\n  InvalidArgumentError\n} = require('./core/errors')\nconst util = require('./core/util')\nconst { kUrl, kInterceptors } = require('./core/symbols')\nconst buildConnector = require('./core/connect')\n\nconst kOptions = Symbol('options')\nconst kConnections = Symbol('connections')\nconst kFactory = Symbol('factory')\n\nfunction defaultFactory (origin, opts) {\n  return new Client(origin, opts)\n}\n\nclass Pool extends PoolBase {\n  constructor (origin, {\n    connections,\n    factory = defaultFactory,\n    connect,\n    connectTimeout,\n    tls,\n    maxCachedSessions,\n    socketPath,\n    autoSelectFamily,\n    autoSelectFamilyAttemptTimeout,\n    allowH2,\n    ...options\n  } = {}) {\n    super()\n\n    if (connections != null && (!Number.isFinite(connections) || connections < 0)) {\n      throw new InvalidArgumentError('invalid connections')\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (typeof connect !== 'function') {\n      connect = buildConnector({\n        ...tls,\n        maxCachedSessions,\n        allowH2,\n        socketPath,\n        timeout: connectTimeout,\n        ...(util.nodeHasAutoSelectFamily && autoSelectFamily ? { autoSelectFamily, autoSelectFamilyAttemptTimeout } : undefined),\n        ...connect\n      })\n    }\n\n    this[kInterceptors] = options.interceptors && options.interceptors.Pool && Array.isArray(options.interceptors.Pool)\n      ? options.interceptors.Pool\n      : []\n    this[kConnections] = connections || null\n    this[kUrl] = util.parseOrigin(origin)\n    this[kOptions] = { ...util.deepClone(options), connect, allowH2 }\n    this[kOptions].interceptors = options.interceptors\n      ? { ...options.interceptors }\n      : undefined\n    this[kFactory] = factory\n  }\n\n  [kGetDispatcher] () {\n    let dispatcher = this[kClients].find(dispatcher => !dispatcher[kNeedDrain])\n\n    if (dispatcher) {\n      return dispatcher\n    }\n\n    if (!this[kConnections] || this[kClients].length < this[kConnections]) {\n      dispatcher = this[kFactory](this[kUrl], this[kOptions])\n      this[kAddClient](dispatcher)\n    }\n\n    return dispatcher\n  }\n}\n\nmodule.exports = Pool\n", "'use strict'\n\nconst {\n  BalancedPoolMissingUpstreamError,\n  InvalidArgumentError\n} = require('./core/errors')\nconst {\n  PoolBase,\n  kClients,\n  kNeedDrain,\n  kAddClient,\n  kRemoveClient,\n  kGetDispatcher\n} = require('./pool-base')\nconst Pool = require('./pool')\nconst { kUrl, kInterceptors } = require('./core/symbols')\nconst { parseOrigin } = require('./core/util')\nconst kFactory = Symbol('factory')\n\nconst kOptions = Symbol('options')\nconst kGreatestCommonDivisor = Symbol('kGreatestCommonDivisor')\nconst kCurrentWeight = Symbol('kCurrentWeight')\nconst kIndex = Symbol('kIndex')\nconst kWeight = Symbol('kWeight')\nconst kMaxWeightPerServer = Symbol('kMaxWeightPerServer')\nconst kErrorPenalty = Symbol('kErrorPenalty')\n\nfunction getGreatestCommonDivisor (a, b) {\n  if (b === 0) return a\n  return getGreatestCommonDivisor(b, a % b)\n}\n\nfunction defaultFactory (origin, opts) {\n  return new Pool(origin, opts)\n}\n\nclass BalancedPool extends PoolBase {\n  constructor (upstreams = [], { factory = defaultFactory, ...opts } = {}) {\n    super()\n\n    this[kOptions] = opts\n    this[kIndex] = -1\n    this[kCurrentWeight] = 0\n\n    this[kMaxWeightPerServer] = this[kOptions].maxWeightPerServer || 100\n    this[kErrorPenalty] = this[kOptions].errorPenalty || 15\n\n    if (!Array.isArray(upstreams)) {\n      upstreams = [upstreams]\n    }\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    this[kInterceptors] = opts.interceptors && opts.interceptors.BalancedPool && Array.isArray(opts.interceptors.BalancedPool)\n      ? opts.interceptors.BalancedPool\n      : []\n    this[kFactory] = factory\n\n    for (const upstream of upstreams) {\n      this.addUpstream(upstream)\n    }\n    this._updateBalancedPoolStats()\n  }\n\n  addUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    if (this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))) {\n      return this\n    }\n    const pool = this[kFactory](upstreamOrigin, Object.assign({}, this[kOptions]))\n\n    this[kAddClient](pool)\n    pool.on('connect', () => {\n      pool[kWeight] = Math.min(this[kMaxWeightPerServer], pool[kWeight] + this[kErrorPenalty])\n    })\n\n    pool.on('connectionError', () => {\n      pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n      this._updateBalancedPoolStats()\n    })\n\n    pool.on('disconnect', (...args) => {\n      const err = args[2]\n      if (err && err.code === 'UND_ERR_SOCKET') {\n        // decrease the weight of the pool.\n        pool[kWeight] = Math.max(1, pool[kWeight] - this[kErrorPenalty])\n        this._updateBalancedPoolStats()\n      }\n    })\n\n    for (const client of this[kClients]) {\n      client[kWeight] = this[kMaxWeightPerServer]\n    }\n\n    this._updateBalancedPoolStats()\n\n    return this\n  }\n\n  _updateBalancedPoolStats () {\n    this[kGreatestCommonDivisor] = this[kClients].map(p => p[kWeight]).reduce(getGreatestCommonDivisor, 0)\n  }\n\n  removeUpstream (upstream) {\n    const upstreamOrigin = parseOrigin(upstream).origin\n\n    const pool = this[kClients].find((pool) => (\n      pool[kUrl].origin === upstreamOrigin &&\n      pool.closed !== true &&\n      pool.destroyed !== true\n    ))\n\n    if (pool) {\n      this[kRemoveClient](pool)\n    }\n\n    return this\n  }\n\n  get upstreams () {\n    return this[kClients]\n      .filter(dispatcher => dispatcher.closed !== true && dispatcher.destroyed !== true)\n      .map((p) => p[kUrl].origin)\n  }\n\n  [kGetDispatcher] () {\n    // We validate that pools is greater than 0,\n    // otherwise we would have to wait until an upstream\n    // is added, which might never happen.\n    if (this[kClients].length === 0) {\n      throw new BalancedPoolMissingUpstreamError()\n    }\n\n    const dispatcher = this[kClients].find(dispatcher => (\n      !dispatcher[kNeedDrain] &&\n      dispatcher.closed !== true &&\n      dispatcher.destroyed !== true\n    ))\n\n    if (!dispatcher) {\n      return\n    }\n\n    const allClientsBusy = this[kClients].map(pool => pool[kNeedDrain]).reduce((a, b) => a && b, true)\n\n    if (allClientsBusy) {\n      return\n    }\n\n    let counter = 0\n\n    let maxWeightIndex = this[kClients].findIndex(pool => !pool[kNeedDrain])\n\n    while (counter++ < this[kClients].length) {\n      this[kIndex] = (this[kIndex] + 1) % this[kClients].length\n      const pool = this[kClients][this[kIndex]]\n\n      // find pool index with the largest weight\n      if (pool[kWeight] > this[kClients][maxWeightIndex][kWeight] && !pool[kNeedDrain]) {\n        maxWeightIndex = this[kIndex]\n      }\n\n      // decrease the current weight every `this[kClients].length`.\n      if (this[kIndex] === 0) {\n        // Set the current weight to the next lower weight.\n        this[kCurrentWeight] = this[kCurrentWeight] - this[kGreatestCommonDivisor]\n\n        if (this[kCurrentWeight] <= 0) {\n          this[kCurrentWeight] = this[kMaxWeightPerServer]\n        }\n      }\n      if (pool[kWeight] >= this[kCurrentWeight] && (!pool[kNeedDrain])) {\n        return pool\n      }\n    }\n\n    this[kCurrentWeight] = this[kClients][maxWeightIndex][kWeight]\n    this[kIndex] = maxWeightIndex\n    return this[kClients][maxWeightIndex]\n  }\n}\n\nmodule.exports = BalancedPool\n", "'use strict'\n\n/* istanbul ignore file: only for Node 12 */\n\nconst { kConnected, kSize } = require('../core/symbols')\n\nclass CompatWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value[kConnected] === 0 && this.value[kSize] === 0\n      ? undefined\n      : this.value\n  }\n}\n\nclass CompatFinalizer {\n  constructor (finalizer) {\n    this.finalizer = finalizer\n  }\n\n  register (dispatcher, key) {\n    if (dispatcher.on) {\n      dispatcher.on('disconnect', () => {\n        if (dispatcher[kConnected] === 0 && dispatcher[kSize] === 0) {\n          this.finalizer(key)\n        }\n      })\n    }\n  }\n}\n\nmodule.exports = function () {\n  // FIXME: remove workaround when the Node bug is fixed\n  // https://github.com/nodejs/node/issues/49344#issuecomment-1741776308\n  if (process.env.NODE_V8_COVERAGE) {\n    return {\n      WeakRef: CompatWeakRef,\n      FinalizationRegistry: CompatFinalizer\n    }\n  }\n  return {\n    WeakRef: global.WeakRef || CompatWeakRef,\n    FinalizationRegistry: global.FinalizationRegistry || CompatFinalizer\n  }\n}\n", "'use strict'\n\nconst { InvalidArgumentError } = require('./core/errors')\nconst { kClients, kRunning, kClose, kDestroy, kDispatch, kInterceptors } = require('./core/symbols')\nconst DispatcherBase = require('./dispatcher-base')\nconst Pool = require('./pool')\nconst Client = require('./client')\nconst util = require('./core/util')\nconst createRedirectInterceptor = require('./interceptor/redirectInterceptor')\nconst { WeakRef, FinalizationRegistry } = require('./compat/dispatcher-weakref')()\n\nconst kOnConnect = Symbol('onConnect')\nconst kOnDisconnect = Symbol('onDisconnect')\nconst kOnConnectionError = Symbol('onConnectionError')\nconst kMaxRedirections = Symbol('maxRedirections')\nconst kOnDrain = Symbol('onDrain')\nconst kFactory = Symbol('factory')\nconst kFinalizer = Symbol('finalizer')\nconst kOptions = Symbol('options')\n\nfunction defaultFactory (origin, opts) {\n  return opts && opts.connections === 1\n    ? new Client(origin, opts)\n    : new Pool(origin, opts)\n}\n\nclass Agent extends DispatcherBase {\n  constructor ({ factory = defaultFactory, maxRedirections = 0, connect, ...options } = {}) {\n    super()\n\n    if (typeof factory !== 'function') {\n      throw new InvalidArgumentError('factory must be a function.')\n    }\n\n    if (connect != null && typeof connect !== 'function' && typeof connect !== 'object') {\n      throw new InvalidArgumentError('connect must be a function or an object')\n    }\n\n    if (!Number.isInteger(maxRedirections) || maxRedirections < 0) {\n      throw new InvalidArgumentError('maxRedirections must be a positive number')\n    }\n\n    if (connect && typeof connect !== 'function') {\n      connect = { ...connect }\n    }\n\n    this[kInterceptors] = options.interceptors && options.interceptors.Agent && Array.isArray(options.interceptors.Agent)\n      ? options.interceptors.Agent\n      : [createRedirectInterceptor({ maxRedirections })]\n\n    this[kOptions] = { ...util.deepClone(options), connect }\n    this[kOptions].interceptors = options.interceptors\n      ? { ...options.interceptors }\n      : undefined\n    this[kMaxRedirections] = maxRedirections\n    this[kFactory] = factory\n    this[kClients] = new Map()\n    this[kFinalizer] = new FinalizationRegistry(/* istanbul ignore next: gc is undeterministic */ key => {\n      const ref = this[kClients].get(key)\n      if (ref !== undefined && ref.deref() === undefined) {\n        this[kClients].delete(key)\n      }\n    })\n\n    const agent = this\n\n    this[kOnDrain] = (origin, targets) => {\n      agent.emit('drain', origin, [agent, ...targets])\n    }\n\n    this[kOnConnect] = (origin, targets) => {\n      agent.emit('connect', origin, [agent, ...targets])\n    }\n\n    this[kOnDisconnect] = (origin, targets, err) => {\n      agent.emit('disconnect', origin, [agent, ...targets], err)\n    }\n\n    this[kOnConnectionError] = (origin, targets, err) => {\n      agent.emit('connectionError', origin, [agent, ...targets], err)\n    }\n  }\n\n  get [kRunning] () {\n    let ret = 0\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore next: gc is undeterministic */\n      if (client) {\n        ret += client[kRunning]\n      }\n    }\n    return ret\n  }\n\n  [kDispatch] (opts, handler) {\n    let key\n    if (opts.origin && (typeof opts.origin === 'string' || opts.origin instanceof URL)) {\n      key = String(opts.origin)\n    } else {\n      throw new InvalidArgumentError('opts.origin must be a non-empty string or URL.')\n    }\n\n    const ref = this[kClients].get(key)\n\n    let dispatcher = ref ? ref.deref() : null\n    if (!dispatcher) {\n      dispatcher = this[kFactory](opts.origin, this[kOptions])\n        .on('drain', this[kOnDrain])\n        .on('connect', this[kOnConnect])\n        .on('disconnect', this[kOnDisconnect])\n        .on('connectionError', this[kOnConnectionError])\n\n      this[kClients].set(key, new WeakRef(dispatcher))\n      this[kFinalizer].register(dispatcher, key)\n    }\n\n    return dispatcher.dispatch(opts, handler)\n  }\n\n  async [kClose] () {\n    const closePromises = []\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore else: gc is undeterministic */\n      if (client) {\n        closePromises.push(client.close())\n      }\n    }\n\n    await Promise.all(closePromises)\n  }\n\n  async [kDestroy] (err) {\n    const destroyPromises = []\n    for (const ref of this[kClients].values()) {\n      const client = ref.deref()\n      /* istanbul ignore else: gc is undeterministic */\n      if (client) {\n        destroyPromises.push(client.destroy(err))\n      }\n    }\n\n    await Promise.all(destroyPromises)\n  }\n}\n\nmodule.exports = Agent\n", "// Ported from https://github.com/nodejs/undici/pull/907\n\n'use strict'\n\nconst assert = require('assert')\nconst { Readable } = require('stream')\nconst { RequestAbortedError, NotSupportedError, InvalidArgumentError } = require('../core/errors')\nconst util = require('../core/util')\nconst { ReadableStreamFrom, toUSVString } = require('../core/util')\n\nlet Blob\n\nconst kConsume = Symbol('kConsume')\nconst kReading = Symbol('kReading')\nconst kBody = Symbol('kBody')\nconst kAbort = Symbol('abort')\nconst kContentType = Symbol('kContentType')\n\nconst noop = () => {}\n\nmodule.exports = class BodyReadable extends Readable {\n  constructor ({\n    resume,\n    abort,\n    contentType = '',\n    highWaterMark = 64 * 1024 // Same as nodejs fs streams.\n  }) {\n    super({\n      autoDestroy: true,\n      read: resume,\n      highWaterMark\n    })\n\n    this._readableState.dataEmitted = false\n\n    this[kAbort] = abort\n    this[kConsume] = null\n    this[kBody] = null\n    this[kContentType] = contentType\n\n    // Is stream being consumed through Readable API?\n    // This is an optimization so that we avoid checking\n    // for 'data' and 'readable' listeners in the hot path\n    // inside push().\n    this[kReading] = false\n  }\n\n  destroy (err) {\n    if (this.destroyed) {\n      // Node < 16\n      return this\n    }\n\n    if (!err && !this._readableState.endEmitted) {\n      err = new RequestAbortedError()\n    }\n\n    if (err) {\n      this[kAbort]()\n    }\n\n    return super.destroy(err)\n  }\n\n  emit (ev, ...args) {\n    if (ev === 'data') {\n      // Node < 16.7\n      this._readableState.dataEmitted = true\n    } else if (ev === 'error') {\n      // Node < 16\n      this._readableState.errorEmitted = true\n    }\n    return super.emit(ev, ...args)\n  }\n\n  on (ev, ...args) {\n    if (ev === 'data' || ev === 'readable') {\n      this[kReading] = true\n    }\n    return super.on(ev, ...args)\n  }\n\n  addListener (ev, ...args) {\n    return this.on(ev, ...args)\n  }\n\n  off (ev, ...args) {\n    const ret = super.off(ev, ...args)\n    if (ev === 'data' || ev === 'readable') {\n      this[kReading] = (\n        this.listenerCount('data') > 0 ||\n        this.listenerCount('readable') > 0\n      )\n    }\n    return ret\n  }\n\n  removeListener (ev, ...args) {\n    return this.off(ev, ...args)\n  }\n\n  push (chunk) {\n    if (this[kConsume] && chunk !== null && this.readableLength === 0) {\n      consumePush(this[kConsume], chunk)\n      return this[kReading] ? super.push(chunk) : true\n    }\n    return super.push(chunk)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-text\n  async text () {\n    return consume(this, 'text')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-json\n  async json () {\n    return consume(this, 'json')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-blob\n  async blob () {\n    return consume(this, 'blob')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-arraybuffer\n  async arrayBuffer () {\n    return consume(this, 'arrayBuffer')\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-formdata\n  async formData () {\n    // TODO: Implement.\n    throw new NotSupportedError()\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-bodyused\n  get bodyUsed () {\n    return util.isDisturbed(this)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-body-body\n  get body () {\n    if (!this[kBody]) {\n      this[kBody] = ReadableStreamFrom(this)\n      if (this[kConsume]) {\n        // TODO: Is this the best way to force a lock?\n        this[kBody].getReader() // Ensure stream is locked.\n        assert(this[kBody].locked)\n      }\n    }\n    return this[kBody]\n  }\n\n  dump (opts) {\n    let limit = opts && Number.isFinite(opts.limit) ? opts.limit : 262144\n    const signal = opts && opts.signal\n\n    if (signal) {\n      try {\n        if (typeof signal !== 'object' || !('aborted' in signal)) {\n          throw new InvalidArgumentError('signal must be an AbortSignal')\n        }\n        util.throwIfAborted(signal)\n      } catch (err) {\n        return Promise.reject(err)\n      }\n    }\n\n    if (this.closed) {\n      return Promise.resolve(null)\n    }\n\n    return new Promise((resolve, reject) => {\n      const signalListenerCleanup = signal\n        ? util.addAbortListener(signal, () => {\n          this.destroy()\n        })\n        : noop\n\n      this\n        .on('close', function () {\n          signalListenerCleanup()\n          if (signal && signal.aborted) {\n            reject(signal.reason || Object.assign(new Error('The operation was aborted'), { name: 'AbortError' }))\n          } else {\n            resolve(null)\n          }\n        })\n        .on('error', noop)\n        .on('data', function (chunk) {\n          limit -= chunk.length\n          if (limit <= 0) {\n            this.destroy()\n          }\n        })\n        .resume()\n    })\n  }\n}\n\n// https://streams.spec.whatwg.org/#readablestream-locked\nfunction isLocked (self) {\n  // Consume is an implicit lock.\n  return (self[kBody] && self[kBody].locked === true) || self[kConsume]\n}\n\n// https://fetch.spec.whatwg.org/#body-unusable\nfunction isUnusable (self) {\n  return util.isDisturbed(self) || isLocked(self)\n}\n\nasync function consume (stream, type) {\n  if (isUnusable(stream)) {\n    throw new TypeError('unusable')\n  }\n\n  assert(!stream[kConsume])\n\n  return new Promise((resolve, reject) => {\n    stream[kConsume] = {\n      type,\n      stream,\n      resolve,\n      reject,\n      length: 0,\n      body: []\n    }\n\n    stream\n      .on('error', function (err) {\n        consumeFinish(this[kConsume], err)\n      })\n      .on('close', function () {\n        if (this[kConsume].body !== null) {\n          consumeFinish(this[kConsume], new RequestAbortedError())\n        }\n      })\n\n    process.nextTick(consumeStart, stream[kConsume])\n  })\n}\n\nfunction consumeStart (consume) {\n  if (consume.body === null) {\n    return\n  }\n\n  const { _readableState: state } = consume.stream\n\n  for (const chunk of state.buffer) {\n    consumePush(consume, chunk)\n  }\n\n  if (state.endEmitted) {\n    consumeEnd(this[kConsume])\n  } else {\n    consume.stream.on('end', function () {\n      consumeEnd(this[kConsume])\n    })\n  }\n\n  consume.stream.resume()\n\n  while (consume.stream.read() != null) {\n    // Loop\n  }\n}\n\nfunction consumeEnd (consume) {\n  const { type, body, resolve, stream, length } = consume\n\n  try {\n    if (type === 'text') {\n      resolve(toUSVString(Buffer.concat(body)))\n    } else if (type === 'json') {\n      resolve(JSON.parse(Buffer.concat(body)))\n    } else if (type === 'arrayBuffer') {\n      const dst = new Uint8Array(length)\n\n      let pos = 0\n      for (const buf of body) {\n        dst.set(buf, pos)\n        pos += buf.byteLength\n      }\n\n      resolve(dst.buffer)\n    } else if (type === 'blob') {\n      if (!Blob) {\n        Blob = require('buffer').Blob\n      }\n      resolve(new Blob(body, { type: stream[kContentType] }))\n    }\n\n    consumeFinish(consume)\n  } catch (err) {\n    stream.destroy(err)\n  }\n}\n\nfunction consumePush (consume, chunk) {\n  consume.length += chunk.length\n  consume.body.push(chunk)\n}\n\nfunction consumeFinish (consume, err) {\n  if (consume.body === null) {\n    return\n  }\n\n  if (err) {\n    consume.reject(err)\n  } else {\n    consume.resolve()\n  }\n\n  consume.type = null\n  consume.stream = null\n  consume.resolve = null\n  consume.reject = null\n  consume.length = 0\n  consume.body = null\n}\n", "const assert = require('assert')\nconst {\n  ResponseStatusCodeError\n} = require('../core/errors')\nconst { toUSVString } = require('../core/util')\n\nasync function getResolveErrorBodyCallback ({ callback, body, contentType, statusCode, statusMessage, headers }) {\n  assert(body)\n\n  let chunks = []\n  let limit = 0\n\n  for await (const chunk of body) {\n    chunks.push(chunk)\n    limit += chunk.length\n    if (limit > 128 * 1024) {\n      chunks = null\n      break\n    }\n  }\n\n  if (statusCode === 204 || !contentType || !chunks) {\n    process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))\n    return\n  }\n\n  try {\n    if (contentType.startsWith('application/json')) {\n      const payload = JSON.parse(toUSVString(Buffer.concat(chunks)))\n      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))\n      return\n    }\n\n    if (contentType.startsWith('text/')) {\n      const payload = toUSVString(Buffer.concat(chunks))\n      process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers, payload))\n      return\n    }\n  } catch (err) {\n    // Process in a fallback if error\n  }\n\n  process.nextTick(callback, new ResponseStatusCodeError(`Response status code ${statusCode}${statusMessage ? `: ${statusMessage}` : ''}`, statusCode, headers))\n}\n\nmodule.exports = { getResolveErrorBodyCallback }\n", "const { addAbortListener } = require('../core/util')\nconst { RequestAbortedError } = require('../core/errors')\n\nconst kListener = Symbol('kListener')\nconst kSignal = Symbol('kSignal')\n\nfunction abort (self) {\n  if (self.abort) {\n    self.abort()\n  } else {\n    self.onError(new RequestAbortedError())\n  }\n}\n\nfunction addSignal (self, signal) {\n  self[kSignal] = null\n  self[kListener] = null\n\n  if (!signal) {\n    return\n  }\n\n  if (signal.aborted) {\n    abort(self)\n    return\n  }\n\n  self[kSignal] = signal\n  self[kListener] = () => {\n    abort(self)\n  }\n\n  addAbortListener(self[kSignal], self[kListener])\n}\n\nfunction removeSignal (self) {\n  if (!self[kSignal]) {\n    return\n  }\n\n  if ('removeEventListener' in self[kSignal]) {\n    self[kSignal].removeEventListener('abort', self[kListener])\n  } else {\n    self[kSignal].removeListener('abort', self[kListener])\n  }\n\n  self[kSignal] = null\n  self[kListener] = null\n}\n\nmodule.exports = {\n  addSignal,\n  removeSignal\n}\n", "'use strict'\n\nconst Readable = require('./readable')\nconst {\n  InvalidArgumentError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { getResolveErrorBodyCallback } = require('./util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass RequestHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError, highWaterMark } = opts\n\n    try {\n      if (typeof callback !== 'function') {\n        throw new InvalidArgumentError('invalid callback')\n      }\n\n      if (highWaterMark && (typeof highWaterMark !== 'number' || highWaterMark < 0)) {\n        throw new InvalidArgumentError('invalid highWaterMark')\n      }\n\n      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n      }\n\n      if (method === 'CONNECT') {\n        throw new InvalidArgumentError('invalid method')\n      }\n\n      if (onInfo && typeof onInfo !== 'function') {\n        throw new InvalidArgumentError('invalid onInfo callback')\n      }\n\n      super('UNDICI_REQUEST')\n    } catch (err) {\n      if (util.isStream(body)) {\n        util.destroy(body.on('error', util.nop), err)\n      }\n      throw err\n    }\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.callback = callback\n    this.res = null\n    this.abort = null\n    this.body = body\n    this.trailers = {}\n    this.context = null\n    this.onInfo = onInfo || null\n    this.throwOnError = throwOnError\n    this.highWaterMark = highWaterMark\n\n    if (util.isStream(body)) {\n      body.on('error', (err) => {\n        this.onError(err)\n      })\n    }\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const { callback, opaque, abort, context, responseHeaders, highWaterMark } = this\n\n    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers\n    const contentType = parsedHeaders['content-type']\n    const body = new Readable({ resume, abort, contentType, highWaterMark })\n\n    this.callback = null\n    this.res = body\n    if (callback !== null) {\n      if (this.throwOnError && statusCode >= 400) {\n        this.runInAsyncScope(getResolveErrorBodyCallback, null,\n          { callback, body, contentType, statusCode, statusMessage, headers }\n        )\n      } else {\n        this.runInAsyncScope(callback, null, null, {\n          statusCode,\n          headers,\n          trailers: this.trailers,\n          opaque,\n          body,\n          context\n        })\n      }\n    }\n  }\n\n  onData (chunk) {\n    const { res } = this\n    return res.push(chunk)\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n\n    removeSignal(this)\n\n    util.parseHeaders(trailers, this.trailers)\n\n    res.push(null)\n  }\n\n  onError (err) {\n    const { res, callback, body, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      // TODO: Does this need queueMicrotask?\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n\n    if (res) {\n      this.res = null\n      // Ensure all queued handlers are invoked before destroying res.\n      queueMicrotask(() => {\n        util.destroy(res, err)\n      })\n    }\n\n    if (body) {\n      this.body = null\n      util.destroy(body, err)\n    }\n  }\n}\n\nfunction request (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      request.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    this.dispatch(opts, new RequestHandler(opts, callback))\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = request\nmodule.exports.RequestHandler = RequestHandler\n", "'use strict'\n\nconst { finished, PassThrough } = require('stream')\nconst {\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { getResolveErrorBodyCallback } = require('./util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass StreamHandler extends AsyncResource {\n  constructor (opts, factory, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    const { signal, method, opaque, body, onInfo, responseHeaders, throwOnError } = opts\n\n    try {\n      if (typeof callback !== 'function') {\n        throw new InvalidArgumentError('invalid callback')\n      }\n\n      if (typeof factory !== 'function') {\n        throw new InvalidArgumentError('invalid factory')\n      }\n\n      if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n        throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n      }\n\n      if (method === 'CONNECT') {\n        throw new InvalidArgumentError('invalid method')\n      }\n\n      if (onInfo && typeof onInfo !== 'function') {\n        throw new InvalidArgumentError('invalid onInfo callback')\n      }\n\n      super('UNDICI_STREAM')\n    } catch (err) {\n      if (util.isStream(body)) {\n        util.destroy(body.on('error', util.nop), err)\n      }\n      throw err\n    }\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.factory = factory\n    this.callback = callback\n    this.res = null\n    this.abort = null\n    this.context = null\n    this.trailers = null\n    this.body = body\n    this.onInfo = onInfo || null\n    this.throwOnError = throwOnError || false\n\n    if (util.isStream(body)) {\n      body.on('error', (err) => {\n        this.onError(err)\n      })\n    }\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const { factory, opaque, context, callback, responseHeaders } = this\n\n    const headers = responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    this.factory = null\n\n    let res\n\n    if (this.throwOnError && statusCode >= 400) {\n      const parsedHeaders = responseHeaders === 'raw' ? util.parseHeaders(rawHeaders) : headers\n      const contentType = parsedHeaders['content-type']\n      res = new PassThrough()\n\n      this.callback = null\n      this.runInAsyncScope(getResolveErrorBodyCallback, null,\n        { callback, body: res, contentType, statusCode, statusMessage, headers }\n      )\n    } else {\n      if (factory === null) {\n        return\n      }\n\n      res = this.runInAsyncScope(factory, null, {\n        statusCode,\n        headers,\n        opaque,\n        context\n      })\n\n      if (\n        !res ||\n        typeof res.write !== 'function' ||\n        typeof res.end !== 'function' ||\n        typeof res.on !== 'function'\n      ) {\n        throw new InvalidReturnValueError('expected Writable')\n      }\n\n      // TODO: Avoid finished. It registers an unnecessary amount of listeners.\n      finished(res, { readable: false }, (err) => {\n        const { callback, res, opaque, trailers, abort } = this\n\n        this.res = null\n        if (err || !res.readable) {\n          util.destroy(res, err)\n        }\n\n        this.callback = null\n        this.runInAsyncScope(callback, null, err || null, { opaque, trailers })\n\n        if (err) {\n          abort()\n        }\n      })\n    }\n\n    res.on('drain', resume)\n\n    this.res = res\n\n    const needDrain = res.writableNeedDrain !== undefined\n      ? res.writableNeedDrain\n      : res._writableState && res._writableState.needDrain\n\n    return needDrain !== true\n  }\n\n  onData (chunk) {\n    const { res } = this\n\n    return res ? res.write(chunk) : true\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n\n    removeSignal(this)\n\n    if (!res) {\n      return\n    }\n\n    this.trailers = util.parseHeaders(trailers)\n\n    res.end()\n  }\n\n  onError (err) {\n    const { res, callback, opaque, body } = this\n\n    removeSignal(this)\n\n    this.factory = null\n\n    if (res) {\n      this.res = null\n      util.destroy(res, err)\n    } else if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n\n    if (body) {\n      this.body = null\n      util.destroy(body, err)\n    }\n  }\n}\n\nfunction stream (opts, factory, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      stream.call(this, opts, factory, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    this.dispatch(opts, new StreamHandler(opts, factory, callback))\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = stream\n", "'use strict'\n\nconst {\n  Readable,\n  Duplex,\n  PassThrough\n} = require('stream')\nconst {\n  InvalidArgumentError,\n  InvalidReturnValueError,\n  RequestAbortedError\n} = require('../core/errors')\nconst util = require('../core/util')\nconst { AsyncResource } = require('async_hooks')\nconst { addSignal, removeSignal } = require('./abort-signal')\nconst assert = require('assert')\n\nconst kResume = Symbol('resume')\n\nclass PipelineRequest extends Readable {\n  constructor () {\n    super({ autoDestroy: true })\n\n    this[kResume] = null\n  }\n\n  _read () {\n    const { [kResume]: resume } = this\n\n    if (resume) {\n      this[kResume] = null\n      resume()\n    }\n  }\n\n  _destroy (err, callback) {\n    this._read()\n\n    callback(err)\n  }\n}\n\nclass PipelineResponse extends Readable {\n  constructor (resume) {\n    super({ autoDestroy: true })\n    this[kResume] = resume\n  }\n\n  _read () {\n    this[kResume]()\n  }\n\n  _destroy (err, callback) {\n    if (!err && !this._readableState.endEmitted) {\n      err = new RequestAbortedError()\n    }\n\n    callback(err)\n  }\n}\n\nclass PipelineHandler extends AsyncResource {\n  constructor (opts, handler) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof handler !== 'function') {\n      throw new InvalidArgumentError('invalid handler')\n    }\n\n    const { signal, method, opaque, onInfo, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    if (method === 'CONNECT') {\n      throw new InvalidArgumentError('invalid method')\n    }\n\n    if (onInfo && typeof onInfo !== 'function') {\n      throw new InvalidArgumentError('invalid onInfo callback')\n    }\n\n    super('UNDICI_PIPELINE')\n\n    this.opaque = opaque || null\n    this.responseHeaders = responseHeaders || null\n    this.handler = handler\n    this.abort = null\n    this.context = null\n    this.onInfo = onInfo || null\n\n    this.req = new PipelineRequest().on('error', util.nop)\n\n    this.ret = new Duplex({\n      readableObjectMode: opts.objectMode,\n      autoDestroy: true,\n      read: () => {\n        const { body } = this\n\n        if (body && body.resume) {\n          body.resume()\n        }\n      },\n      write: (chunk, encoding, callback) => {\n        const { req } = this\n\n        if (req.push(chunk, encoding) || req._readableState.destroyed) {\n          callback()\n        } else {\n          req[kResume] = callback\n        }\n      },\n      destroy: (err, callback) => {\n        const { body, req, res, ret, abort } = this\n\n        if (!err && !ret._readableState.endEmitted) {\n          err = new RequestAbortedError()\n        }\n\n        if (abort && err) {\n          abort()\n        }\n\n        util.destroy(body, err)\n        util.destroy(req, err)\n        util.destroy(res, err)\n\n        removeSignal(this)\n\n        callback(err)\n      }\n    }).on('prefinish', () => {\n      const { req } = this\n\n      // Node < 15 does not call _final in same tick.\n      req.push(null)\n    })\n\n    this.res = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    const { ret, res } = this\n\n    assert(!res, 'pipeline cannot be retried')\n\n    if (ret.destroyed) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders (statusCode, rawHeaders, resume) {\n    const { opaque, handler, context } = this\n\n    if (statusCode < 200) {\n      if (this.onInfo) {\n        const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n        this.onInfo({ statusCode, headers })\n      }\n      return\n    }\n\n    this.res = new PipelineResponse(resume)\n\n    let body\n    try {\n      this.handler = null\n      const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n      body = this.runInAsyncScope(handler, null, {\n        statusCode,\n        headers,\n        opaque,\n        body: this.res,\n        context\n      })\n    } catch (err) {\n      this.res.on('error', util.nop)\n      throw err\n    }\n\n    if (!body || typeof body.on !== 'function') {\n      throw new InvalidReturnValueError('expected Readable')\n    }\n\n    body\n      .on('data', (chunk) => {\n        const { ret, body } = this\n\n        if (!ret.push(chunk) && body.pause) {\n          body.pause()\n        }\n      })\n      .on('error', (err) => {\n        const { ret } = this\n\n        util.destroy(ret, err)\n      })\n      .on('end', () => {\n        const { ret } = this\n\n        ret.push(null)\n      })\n      .on('close', () => {\n        const { ret } = this\n\n        if (!ret._readableState.ended) {\n          util.destroy(ret, new RequestAbortedError())\n        }\n      })\n\n    this.body = body\n  }\n\n  onData (chunk) {\n    const { res } = this\n    return res.push(chunk)\n  }\n\n  onComplete (trailers) {\n    const { res } = this\n    res.push(null)\n  }\n\n  onError (err) {\n    const { ret } = this\n    this.handler = null\n    util.destroy(ret, err)\n  }\n}\n\nfunction pipeline (opts, handler) {\n  try {\n    const pipelineHandler = new PipelineHandler(opts, handler)\n    this.dispatch({ ...opts, body: pipelineHandler.req }, pipelineHandler)\n    return pipelineHandler.ret\n  } catch (err) {\n    return new PassThrough().destroy(err)\n  }\n}\n\nmodule.exports = pipeline\n", "'use strict'\n\nconst { InvalidArgumentError, RequestAbortedError, SocketError } = require('../core/errors')\nconst { AsyncResource } = require('async_hooks')\nconst util = require('../core/util')\nconst { addSignal, removeSignal } = require('./abort-signal')\nconst assert = require('assert')\n\nclass UpgradeHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    const { signal, opaque, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    super('UNDICI_UPGRADE')\n\n    this.responseHeaders = responseHeaders || null\n    this.opaque = opaque || null\n    this.callback = callback\n    this.abort = null\n    this.context = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = null\n  }\n\n  onHeaders () {\n    throw new SocketError('bad upgrade', null)\n  }\n\n  onUpgrade (statusCode, rawHeaders, socket) {\n    const { callback, opaque, context } = this\n\n    assert.strictEqual(statusCode, 101)\n\n    removeSignal(this)\n\n    this.callback = null\n    const headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n    this.runInAsyncScope(callback, null, null, {\n      headers,\n      socket,\n      opaque,\n      context\n    })\n  }\n\n  onError (err) {\n    const { callback, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n  }\n}\n\nfunction upgrade (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      upgrade.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    const upgradeHandler = new UpgradeHandler(opts, callback)\n    this.dispatch({\n      ...opts,\n      method: opts.method || 'GET',\n      upgrade: opts.protocol || 'Websocket'\n    }, upgradeHandler)\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = upgrade\n", "'use strict'\n\nconst { AsyncResource } = require('async_hooks')\nconst { InvalidArgumentError, RequestAbortedError, SocketError } = require('../core/errors')\nconst util = require('../core/util')\nconst { addSignal, removeSignal } = require('./abort-signal')\n\nclass ConnectHandler extends AsyncResource {\n  constructor (opts, callback) {\n    if (!opts || typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (typeof callback !== 'function') {\n      throw new InvalidArgumentError('invalid callback')\n    }\n\n    const { signal, opaque, responseHeaders } = opts\n\n    if (signal && typeof signal.on !== 'function' && typeof signal.addEventListener !== 'function') {\n      throw new InvalidArgumentError('signal must be an EventEmitter or EventTarget')\n    }\n\n    super('UNDICI_CONNECT')\n\n    this.opaque = opaque || null\n    this.responseHeaders = responseHeaders || null\n    this.callback = callback\n    this.abort = null\n\n    addSignal(this, signal)\n  }\n\n  onConnect (abort, context) {\n    if (!this.callback) {\n      throw new RequestAbortedError()\n    }\n\n    this.abort = abort\n    this.context = context\n  }\n\n  onHeaders () {\n    throw new SocketError('bad connect', null)\n  }\n\n  onUpgrade (statusCode, rawHeaders, socket) {\n    const { callback, opaque, context } = this\n\n    removeSignal(this)\n\n    this.callback = null\n\n    let headers = rawHeaders\n    // Indicates is an HTTP2Session\n    if (headers != null) {\n      headers = this.responseHeaders === 'raw' ? util.parseRawHeaders(rawHeaders) : util.parseHeaders(rawHeaders)\n    }\n\n    this.runInAsyncScope(callback, null, null, {\n      statusCode,\n      headers,\n      socket,\n      opaque,\n      context\n    })\n  }\n\n  onError (err) {\n    const { callback, opaque } = this\n\n    removeSignal(this)\n\n    if (callback) {\n      this.callback = null\n      queueMicrotask(() => {\n        this.runInAsyncScope(callback, null, err, { opaque })\n      })\n    }\n  }\n}\n\nfunction connect (opts, callback) {\n  if (callback === undefined) {\n    return new Promise((resolve, reject) => {\n      connect.call(this, opts, (err, data) => {\n        return err ? reject(err) : resolve(data)\n      })\n    })\n  }\n\n  try {\n    const connectHandler = new ConnectHandler(opts, callback)\n    this.dispatch({ ...opts, method: 'CONNECT' }, connectHandler)\n  } catch (err) {\n    if (typeof callback !== 'function') {\n      throw err\n    }\n    const opaque = opts && opts.opaque\n    queueMicrotask(() => callback(err, { opaque }))\n  }\n}\n\nmodule.exports = connect\n", "'use strict'\n\nmodule.exports.request = require('./api-request')\nmodule.exports.stream = require('./api-stream')\nmodule.exports.pipeline = require('./api-pipeline')\nmodule.exports.upgrade = require('./api-upgrade')\nmodule.exports.connect = require('./api-connect')\n", "'use strict'\n\nconst { UndiciError } = require('../core/errors')\n\nclass MockNotMatchedError extends UndiciError {\n  constructor (message) {\n    super(message)\n    Error.captureStackTrace(this, MockNotMatchedError)\n    this.name = 'MockNotMatchedError'\n    this.message = message || 'The request does not match any registered mock dispatches'\n    this.code = 'UND_MOCK_ERR_MOCK_NOT_MATCHED'\n  }\n}\n\nmodule.exports = {\n  MockNotMatchedError\n}\n", "'use strict'\n\nmodule.exports = {\n  kAgent: Symbol('agent'),\n  kOptions: Symbol('options'),\n  kFactory: Symbol('factory'),\n  kDispatches: Symbol('dispatches'),\n  kDispatchKey: Symbol('dispatch key'),\n  kDefaultHeaders: Symbol('default headers'),\n  kDefaultTrailers: Symbol('default trailers'),\n  kContentLength: Symbol('content length'),\n  kMockAgent: Symbol('mock agent'),\n  kMockAgentSet: Symbol('mock agent set'),\n  kMockAgentGet: Symbol('mock agent get'),\n  kMockDispatch: Symbol('mock dispatch'),\n  kClose: Symbol('close'),\n  kOriginalClose: Symbol('original agent close'),\n  kOrigin: Symbol('origin'),\n  kIsMockActive: Symbol('is mock active'),\n  kNetConnect: Symbol('net connect'),\n  kGetNetConnect: Symbol('get net connect'),\n  kConnected: Symbol('connected')\n}\n", "'use strict'\n\nconst { MockNotMatchedError } = require('./mock-errors')\nconst {\n  kDispatches,\n  kMockAgent,\n  kOriginalDispatch,\n  kOrigin,\n  kGetNetConnect\n} = require('./mock-symbols')\nconst { buildURL, nop } = require('../core/util')\nconst { STATUS_CODES } = require('http')\nconst {\n  types: {\n    isPromise\n  }\n} = require('util')\n\nfunction matchValue (match, value) {\n  if (typeof match === 'string') {\n    return match === value\n  }\n  if (match instanceof RegExp) {\n    return match.test(value)\n  }\n  if (typeof match === 'function') {\n    return match(value) === true\n  }\n  return false\n}\n\nfunction lowerCaseEntries (headers) {\n  return Object.fromEntries(\n    Object.entries(headers).map(([headerName, headerValue]) => {\n      return [headerName.toLocaleLowerCase(), headerValue]\n    })\n  )\n}\n\n/**\n * @param {import('../../index').Headers|string[]|Record<string, string>} headers\n * @param {string} key\n */\nfunction getHeaderByName (headers, key) {\n  if (Array.isArray(headers)) {\n    for (let i = 0; i < headers.length; i += 2) {\n      if (headers[i].toLocaleLowerCase() === key.toLocaleLowerCase()) {\n        return headers[i + 1]\n      }\n    }\n\n    return undefined\n  } else if (typeof headers.get === 'function') {\n    return headers.get(key)\n  } else {\n    return lowerCaseEntries(headers)[key.toLocaleLowerCase()]\n  }\n}\n\n/** @param {string[]} headers */\nfunction buildHeadersFromArray (headers) { // fetch HeadersList\n  const clone = headers.slice()\n  const entries = []\n  for (let index = 0; index < clone.length; index += 2) {\n    entries.push([clone[index], clone[index + 1]])\n  }\n  return Object.fromEntries(entries)\n}\n\nfunction matchHeaders (mockDispatch, headers) {\n  if (typeof mockDispatch.headers === 'function') {\n    if (Array.isArray(headers)) { // fetch HeadersList\n      headers = buildHeadersFromArray(headers)\n    }\n    return mockDispatch.headers(headers ? lowerCaseEntries(headers) : {})\n  }\n  if (typeof mockDispatch.headers === 'undefined') {\n    return true\n  }\n  if (typeof headers !== 'object' || typeof mockDispatch.headers !== 'object') {\n    return false\n  }\n\n  for (const [matchHeaderName, matchHeaderValue] of Object.entries(mockDispatch.headers)) {\n    const headerValue = getHeaderByName(headers, matchHeaderName)\n\n    if (!matchValue(matchHeaderValue, headerValue)) {\n      return false\n    }\n  }\n  return true\n}\n\nfunction safeUrl (path) {\n  if (typeof path !== 'string') {\n    return path\n  }\n\n  const pathSegments = path.split('?')\n\n  if (pathSegments.length !== 2) {\n    return path\n  }\n\n  const qp = new URLSearchParams(pathSegments.pop())\n  qp.sort()\n  return [...pathSegments, qp.toString()].join('?')\n}\n\nfunction matchKey (mockDispatch, { path, method, body, headers }) {\n  const pathMatch = matchValue(mockDispatch.path, path)\n  const methodMatch = matchValue(mockDispatch.method, method)\n  const bodyMatch = typeof mockDispatch.body !== 'undefined' ? matchValue(mockDispatch.body, body) : true\n  const headersMatch = matchHeaders(mockDispatch, headers)\n  return pathMatch && methodMatch && bodyMatch && headersMatch\n}\n\nfunction getResponseData (data) {\n  if (Buffer.isBuffer(data)) {\n    return data\n  } else if (typeof data === 'object') {\n    return JSON.stringify(data)\n  } else {\n    return data.toString()\n  }\n}\n\nfunction getMockDispatch (mockDispatches, key) {\n  const basePath = key.query ? buildURL(key.path, key.query) : key.path\n  const resolvedPath = typeof basePath === 'string' ? safeUrl(basePath) : basePath\n\n  // Match path\n  let matchedMockDispatches = mockDispatches.filter(({ consumed }) => !consumed).filter(({ path }) => matchValue(safeUrl(path), resolvedPath))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for path '${resolvedPath}'`)\n  }\n\n  // Match method\n  matchedMockDispatches = matchedMockDispatches.filter(({ method }) => matchValue(method, key.method))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for method '${key.method}'`)\n  }\n\n  // Match body\n  matchedMockDispatches = matchedMockDispatches.filter(({ body }) => typeof body !== 'undefined' ? matchValue(body, key.body) : true)\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for body '${key.body}'`)\n  }\n\n  // Match headers\n  matchedMockDispatches = matchedMockDispatches.filter((mockDispatch) => matchHeaders(mockDispatch, key.headers))\n  if (matchedMockDispatches.length === 0) {\n    throw new MockNotMatchedError(`Mock dispatch not matched for headers '${typeof key.headers === 'object' ? JSON.stringify(key.headers) : key.headers}'`)\n  }\n\n  return matchedMockDispatches[0]\n}\n\nfunction addMockDispatch (mockDispatches, key, data) {\n  const baseData = { timesInvoked: 0, times: 1, persist: false, consumed: false }\n  const replyData = typeof data === 'function' ? { callback: data } : { ...data }\n  const newMockDispatch = { ...baseData, ...key, pending: true, data: { error: null, ...replyData } }\n  mockDispatches.push(newMockDispatch)\n  return newMockDispatch\n}\n\nfunction deleteMockDispatch (mockDispatches, key) {\n  const index = mockDispatches.findIndex(dispatch => {\n    if (!dispatch.consumed) {\n      return false\n    }\n    return matchKey(dispatch, key)\n  })\n  if (index !== -1) {\n    mockDispatches.splice(index, 1)\n  }\n}\n\nfunction buildKey (opts) {\n  const { path, method, body, headers, query } = opts\n  return {\n    path,\n    method,\n    body,\n    headers,\n    query\n  }\n}\n\nfunction generateKeyValues (data) {\n  return Object.entries(data).reduce((keyValuePairs, [key, value]) => [\n    ...keyValuePairs,\n    Buffer.from(`${key}`),\n    Array.isArray(value) ? value.map(x => Buffer.from(`${x}`)) : Buffer.from(`${value}`)\n  ], [])\n}\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/HTTP/Status\n * @param {number} statusCode\n */\nfunction getStatusText (statusCode) {\n  return STATUS_CODES[statusCode] || 'unknown'\n}\n\nasync function getResponse (body) {\n  const buffers = []\n  for await (const data of body) {\n    buffers.push(data)\n  }\n  return Buffer.concat(buffers).toString('utf8')\n}\n\n/**\n * Mock dispatch function used to simulate undici dispatches\n */\nfunction mockDispatch (opts, handler) {\n  // Get mock dispatch from built key\n  const key = buildKey(opts)\n  const mockDispatch = getMockDispatch(this[kDispatches], key)\n\n  mockDispatch.timesInvoked++\n\n  // Here's where we resolve a callback if a callback is present for the dispatch data.\n  if (mockDispatch.data.callback) {\n    mockDispatch.data = { ...mockDispatch.data, ...mockDispatch.data.callback(opts) }\n  }\n\n  // Parse mockDispatch data\n  const { data: { statusCode, data, headers, trailers, error }, delay, persist } = mockDispatch\n  const { timesInvoked, times } = mockDispatch\n\n  // If it's used up and not persistent, mark as consumed\n  mockDispatch.consumed = !persist && timesInvoked >= times\n  mockDispatch.pending = timesInvoked < times\n\n  // If specified, trigger dispatch error\n  if (error !== null) {\n    deleteMockDispatch(this[kDispatches], key)\n    handler.onError(error)\n    return true\n  }\n\n  // Handle the request with a delay if necessary\n  if (typeof delay === 'number' && delay > 0) {\n    setTimeout(() => {\n      handleReply(this[kDispatches])\n    }, delay)\n  } else {\n    handleReply(this[kDispatches])\n  }\n\n  function handleReply (mockDispatches, _data = data) {\n    // fetch's HeadersList is a 1D string array\n    const optsHeaders = Array.isArray(opts.headers)\n      ? buildHeadersFromArray(opts.headers)\n      : opts.headers\n    const body = typeof _data === 'function'\n      ? _data({ ...opts, headers: optsHeaders })\n      : _data\n\n    // util.types.isPromise is likely needed for jest.\n    if (isPromise(body)) {\n      // If handleReply is asynchronous, throwing an error\n      // in the callback will reject the promise, rather than\n      // synchronously throw the error, which breaks some tests.\n      // Rather, we wait for the callback to resolve if it is a\n      // promise, and then re-run handleReply with the new body.\n      body.then((newData) => handleReply(mockDispatches, newData))\n      return\n    }\n\n    const responseData = getResponseData(body)\n    const responseHeaders = generateKeyValues(headers)\n    const responseTrailers = generateKeyValues(trailers)\n\n    handler.abort = nop\n    handler.onHeaders(statusCode, responseHeaders, resume, getStatusText(statusCode))\n    handler.onData(Buffer.from(responseData))\n    handler.onComplete(responseTrailers)\n    deleteMockDispatch(mockDispatches, key)\n  }\n\n  function resume () {}\n\n  return true\n}\n\nfunction buildMockDispatch () {\n  const agent = this[kMockAgent]\n  const origin = this[kOrigin]\n  const originalDispatch = this[kOriginalDispatch]\n\n  return function dispatch (opts, handler) {\n    if (agent.isMockActive) {\n      try {\n        mockDispatch.call(this, opts, handler)\n      } catch (error) {\n        if (error instanceof MockNotMatchedError) {\n          const netConnect = agent[kGetNetConnect]()\n          if (netConnect === false) {\n            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect disabled)`)\n          }\n          if (checkNetConnect(netConnect, origin)) {\n            originalDispatch.call(this, opts, handler)\n          } else {\n            throw new MockNotMatchedError(`${error.message}: subsequent request to origin ${origin} was not allowed (net.connect is not enabled for this origin)`)\n          }\n        } else {\n          throw error\n        }\n      }\n    } else {\n      originalDispatch.call(this, opts, handler)\n    }\n  }\n}\n\nfunction checkNetConnect (netConnect, origin) {\n  const url = new URL(origin)\n  if (netConnect === true) {\n    return true\n  } else if (Array.isArray(netConnect) && netConnect.some((matcher) => matchValue(matcher, url.host))) {\n    return true\n  }\n  return false\n}\n\nfunction buildMockOptions (opts) {\n  if (opts) {\n    const { agent, ...mockOptions } = opts\n    return mockOptions\n  }\n}\n\nmodule.exports = {\n  getResponseData,\n  getMockDispatch,\n  addMockDispatch,\n  deleteMockDispatch,\n  buildKey,\n  generateKeyValues,\n  matchValue,\n  getResponse,\n  getStatusText,\n  mockDispatch,\n  buildMockDispatch,\n  checkNetConnect,\n  buildMockOptions,\n  getHeaderByName\n}\n", "'use strict'\n\nconst { getResponseData, buildKey, addMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kDispatchKey,\n  kDefaultHeaders,\n  kDefaultTrailers,\n  kContentLength,\n  kMockDispatch\n} = require('./mock-symbols')\nconst { InvalidArgumentError } = require('../core/errors')\nconst { buildURL } = require('../core/util')\n\n/**\n * Defines the scope API for an interceptor reply\n */\nclass MockScope {\n  constructor (mockDispatch) {\n    this[kMockDispatch] = mockDispatch\n  }\n\n  /**\n   * Delay a reply by a set amount in ms.\n   */\n  delay (waitInMs) {\n    if (typeof waitInMs !== 'number' || !Number.isInteger(waitInMs) || waitInMs <= 0) {\n      throw new InvalidArgumentError('waitInMs must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].delay = waitInMs\n    return this\n  }\n\n  /**\n   * For a defined reply, never mark as consumed.\n   */\n  persist () {\n    this[kMockDispatch].persist = true\n    return this\n  }\n\n  /**\n   * Allow one to define a reply for a set amount of matching requests.\n   */\n  times (repeatTimes) {\n    if (typeof repeatTimes !== 'number' || !Number.isInteger(repeatTimes) || repeatTimes <= 0) {\n      throw new InvalidArgumentError('repeatTimes must be a valid integer > 0')\n    }\n\n    this[kMockDispatch].times = repeatTimes\n    return this\n  }\n}\n\n/**\n * Defines an interceptor for a Mock\n */\nclass MockInterceptor {\n  constructor (opts, mockDispatches) {\n    if (typeof opts !== 'object') {\n      throw new InvalidArgumentError('opts must be an object')\n    }\n    if (typeof opts.path === 'undefined') {\n      throw new InvalidArgumentError('opts.path must be defined')\n    }\n    if (typeof opts.method === 'undefined') {\n      opts.method = 'GET'\n    }\n    // See https://github.com/nodejs/undici/issues/1245\n    // As per RFC 3986, clients are not supposed to send URI\n    // fragments to servers when they retrieve a document,\n    if (typeof opts.path === 'string') {\n      if (opts.query) {\n        opts.path = buildURL(opts.path, opts.query)\n      } else {\n        // Matches https://github.com/nodejs/undici/blob/main/lib/fetch/index.js#L1811\n        const parsedURL = new URL(opts.path, 'data://')\n        opts.path = parsedURL.pathname + parsedURL.search\n      }\n    }\n    if (typeof opts.method === 'string') {\n      opts.method = opts.method.toUpperCase()\n    }\n\n    this[kDispatchKey] = buildKey(opts)\n    this[kDispatches] = mockDispatches\n    this[kDefaultHeaders] = {}\n    this[kDefaultTrailers] = {}\n    this[kContentLength] = false\n  }\n\n  createMockScopeDispatchData (statusCode, data, responseOptions = {}) {\n    const responseData = getResponseData(data)\n    const contentLength = this[kContentLength] ? { 'content-length': responseData.length } : {}\n    const headers = { ...this[kDefaultHeaders], ...contentLength, ...responseOptions.headers }\n    const trailers = { ...this[kDefaultTrailers], ...responseOptions.trailers }\n\n    return { statusCode, data, headers, trailers }\n  }\n\n  validateReplyParameters (statusCode, data, responseOptions) {\n    if (typeof statusCode === 'undefined') {\n      throw new InvalidArgumentError('statusCode must be defined')\n    }\n    if (typeof data === 'undefined') {\n      throw new InvalidArgumentError('data must be defined')\n    }\n    if (typeof responseOptions !== 'object') {\n      throw new InvalidArgumentError('responseOptions must be an object')\n    }\n  }\n\n  /**\n   * Mock an undici request with a defined reply.\n   */\n  reply (replyData) {\n    // Values of reply aren't available right now as they\n    // can only be available when the reply callback is invoked.\n    if (typeof replyData === 'function') {\n      // We'll first wrap the provided callback in another function,\n      // this function will properly resolve the data from the callback\n      // when invoked.\n      const wrappedDefaultsCallback = (opts) => {\n        // Our reply options callback contains the parameter for statusCode, data and options.\n        const resolvedData = replyData(opts)\n\n        // Check if it is in the right format\n        if (typeof resolvedData !== 'object') {\n          throw new InvalidArgumentError('reply options callback must return an object')\n        }\n\n        const { statusCode, data = '', responseOptions = {} } = resolvedData\n        this.validateReplyParameters(statusCode, data, responseOptions)\n        // Since the values can be obtained immediately we return them\n        // from this higher order function that will be resolved later.\n        return {\n          ...this.createMockScopeDispatchData(statusCode, data, responseOptions)\n        }\n      }\n\n      // Add usual dispatch data, but this time set the data parameter to function that will eventually provide data.\n      const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], wrappedDefaultsCallback)\n      return new MockScope(newMockDispatch)\n    }\n\n    // We can have either one or three parameters, if we get here,\n    // we should have 1-3 parameters. So we spread the arguments of\n    // this function to obtain the parameters, since replyData will always\n    // just be the statusCode.\n    const [statusCode, data = '', responseOptions = {}] = [...arguments]\n    this.validateReplyParameters(statusCode, data, responseOptions)\n\n    // Send in-already provided data like usual\n    const dispatchData = this.createMockScopeDispatchData(statusCode, data, responseOptions)\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], dispatchData)\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Mock an undici request with a defined error.\n   */\n  replyWithError (error) {\n    if (typeof error === 'undefined') {\n      throw new InvalidArgumentError('error must be defined')\n    }\n\n    const newMockDispatch = addMockDispatch(this[kDispatches], this[kDispatchKey], { error })\n    return new MockScope(newMockDispatch)\n  }\n\n  /**\n   * Set default reply headers on the interceptor for subsequent replies\n   */\n  defaultReplyHeaders (headers) {\n    if (typeof headers === 'undefined') {\n      throw new InvalidArgumentError('headers must be defined')\n    }\n\n    this[kDefaultHeaders] = headers\n    return this\n  }\n\n  /**\n   * Set default reply trailers on the interceptor for subsequent replies\n   */\n  defaultReplyTrailers (trailers) {\n    if (typeof trailers === 'undefined') {\n      throw new InvalidArgumentError('trailers must be defined')\n    }\n\n    this[kDefaultTrailers] = trailers\n    return this\n  }\n\n  /**\n   * Set reply content length header for replies on the interceptor\n   */\n  replyContentLength () {\n    this[kContentLength] = true\n    return this\n  }\n}\n\nmodule.exports.MockInterceptor = MockInterceptor\nmodule.exports.MockScope = MockScope\n", "'use strict'\n\nconst { promisify } = require('util')\nconst Client = require('../client')\nconst { buildMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kMockAgent,\n  kClose,\n  kOriginalClose,\n  kOrigin,\n  kOriginalDispatch,\n  kConnected\n} = require('./mock-symbols')\nconst { MockInterceptor } = require('./mock-interceptor')\nconst Symbols = require('../core/symbols')\nconst { InvalidArgumentError } = require('../core/errors')\n\n/**\n * MockClient provides an API that extends the Client to influence the mockDispatches.\n */\nclass MockClient extends Client {\n  constructor (origin, opts) {\n    super(origin, opts)\n\n    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n\n    this[kMockAgent] = opts.agent\n    this[kOrigin] = origin\n    this[kDispatches] = []\n    this[kConnected] = 1\n    this[kOriginalDispatch] = this.dispatch\n    this[kOriginalClose] = this.close.bind(this)\n\n    this.dispatch = buildMockDispatch.call(this)\n    this.close = this[kClose]\n  }\n\n  get [Symbols.kConnected] () {\n    return this[kConnected]\n  }\n\n  /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */\n  intercept (opts) {\n    return new MockInterceptor(opts, this[kDispatches])\n  }\n\n  async [kClose] () {\n    await promisify(this[kOriginalClose])()\n    this[kConnected] = 0\n    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])\n  }\n}\n\nmodule.exports = MockClient\n", "'use strict'\n\nconst { promisify } = require('util')\nconst Pool = require('../pool')\nconst { buildMockDispatch } = require('./mock-utils')\nconst {\n  kDispatches,\n  kMockAgent,\n  kClose,\n  kOriginalClose,\n  kOrigin,\n  kOriginalDispatch,\n  kConnected\n} = require('./mock-symbols')\nconst { MockInterceptor } = require('./mock-interceptor')\nconst Symbols = require('../core/symbols')\nconst { InvalidArgumentError } = require('../core/errors')\n\n/**\n * MockPool provides an API that extends the Pool to influence the mockDispatches.\n */\nclass MockPool extends Pool {\n  constructor (origin, opts) {\n    super(origin, opts)\n\n    if (!opts || !opts.agent || typeof opts.agent.dispatch !== 'function') {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n\n    this[kMockAgent] = opts.agent\n    this[kOrigin] = origin\n    this[kDispatches] = []\n    this[kConnected] = 1\n    this[kOriginalDispatch] = this.dispatch\n    this[kOriginalClose] = this.close.bind(this)\n\n    this.dispatch = buildMockDispatch.call(this)\n    this.close = this[kClose]\n  }\n\n  get [Symbols.kConnected] () {\n    return this[kConnected]\n  }\n\n  /**\n   * Sets up the base interceptor for mocking replies from undici.\n   */\n  intercept (opts) {\n    return new MockInterceptor(opts, this[kDispatches])\n  }\n\n  async [kClose] () {\n    await promisify(this[kOriginalClose])()\n    this[kConnected] = 0\n    this[kMockAgent][Symbols.kClients].delete(this[kOrigin])\n  }\n}\n\nmodule.exports = MockPool\n", "'use strict'\n\nconst singulars = {\n  pronoun: 'it',\n  is: 'is',\n  was: 'was',\n  this: 'this'\n}\n\nconst plurals = {\n  pronoun: 'they',\n  is: 'are',\n  was: 'were',\n  this: 'these'\n}\n\nmodule.exports = class Pluralizer {\n  constructor (singular, plural) {\n    this.singular = singular\n    this.plural = plural\n  }\n\n  pluralize (count) {\n    const one = count === 1\n    const keys = one ? singulars : plurals\n    const noun = one ? this.singular : this.plural\n    return { ...keys, count, noun }\n  }\n}\n", "'use strict'\n\nconst { Transform } = require('stream')\nconst { Console } = require('console')\n\n/**\n * Gets the output of `console.table(\u2026)` as a string.\n */\nmodule.exports = class PendingInterceptorsFormatter {\n  constructor ({ disableColors } = {}) {\n    this.transform = new Transform({\n      transform (chunk, _enc, cb) {\n        cb(null, chunk)\n      }\n    })\n\n    this.logger = new Console({\n      stdout: this.transform,\n      inspectOptions: {\n        colors: !disableColors && !process.env.CI\n      }\n    })\n  }\n\n  format (pendingInterceptors) {\n    const withPrettyHeaders = pendingInterceptors.map(\n      ({ method, path, data: { statusCode }, persist, times, timesInvoked, origin }) => ({\n        Method: method,\n        Origin: origin,\n        Path: path,\n        'Status code': statusCode,\n        Persistent: persist ? '\u2705' : '\u274C',\n        Invocations: timesInvoked,\n        Remaining: persist ? Infinity : times - timesInvoked\n      }))\n\n    this.logger.table(withPrettyHeaders)\n    return this.transform.read().toString()\n  }\n}\n", "'use strict'\n\nconst { kClients } = require('../core/symbols')\nconst Agent = require('../agent')\nconst {\n  kAgent,\n  kMockAgentSet,\n  kMockAgentGet,\n  kDispatches,\n  kIsMockActive,\n  kNetConnect,\n  kGetNetConnect,\n  kOptions,\n  kFactory\n} = require('./mock-symbols')\nconst MockClient = require('./mock-client')\nconst MockPool = require('./mock-pool')\nconst { matchValue, buildMockOptions } = require('./mock-utils')\nconst { InvalidArgumentError, UndiciError } = require('../core/errors')\nconst Dispatcher = require('../dispatcher')\nconst Pluralizer = require('./pluralizer')\nconst PendingInterceptorsFormatter = require('./pending-interceptors-formatter')\n\nclass FakeWeakRef {\n  constructor (value) {\n    this.value = value\n  }\n\n  deref () {\n    return this.value\n  }\n}\n\nclass MockAgent extends Dispatcher {\n  constructor (opts) {\n    super(opts)\n\n    this[kNetConnect] = true\n    this[kIsMockActive] = true\n\n    // Instantiate Agent and encapsulate\n    if ((opts && opts.agent && typeof opts.agent.dispatch !== 'function')) {\n      throw new InvalidArgumentError('Argument opts.agent must implement Agent')\n    }\n    const agent = opts && opts.agent ? opts.agent : new Agent(opts)\n    this[kAgent] = agent\n\n    this[kClients] = agent[kClients]\n    this[kOptions] = buildMockOptions(opts)\n  }\n\n  get (origin) {\n    let dispatcher = this[kMockAgentGet](origin)\n\n    if (!dispatcher) {\n      dispatcher = this[kFactory](origin)\n      this[kMockAgentSet](origin, dispatcher)\n    }\n    return dispatcher\n  }\n\n  dispatch (opts, handler) {\n    // Call MockAgent.get to perform additional setup before dispatching as normal\n    this.get(opts.origin)\n    return this[kAgent].dispatch(opts, handler)\n  }\n\n  async close () {\n    await this[kAgent].close()\n    this[kClients].clear()\n  }\n\n  deactivate () {\n    this[kIsMockActive] = false\n  }\n\n  activate () {\n    this[kIsMockActive] = true\n  }\n\n  enableNetConnect (matcher) {\n    if (typeof matcher === 'string' || typeof matcher === 'function' || matcher instanceof RegExp) {\n      if (Array.isArray(this[kNetConnect])) {\n        this[kNetConnect].push(matcher)\n      } else {\n        this[kNetConnect] = [matcher]\n      }\n    } else if (typeof matcher === 'undefined') {\n      this[kNetConnect] = true\n    } else {\n      throw new InvalidArgumentError('Unsupported matcher. Must be one of String|Function|RegExp.')\n    }\n  }\n\n  disableNetConnect () {\n    this[kNetConnect] = false\n  }\n\n  // This is required to bypass issues caused by using global symbols - see:\n  // https://github.com/nodejs/undici/issues/1447\n  get isMockActive () {\n    return this[kIsMockActive]\n  }\n\n  [kMockAgentSet] (origin, dispatcher) {\n    this[kClients].set(origin, new FakeWeakRef(dispatcher))\n  }\n\n  [kFactory] (origin) {\n    const mockOptions = Object.assign({ agent: this }, this[kOptions])\n    return this[kOptions] && this[kOptions].connections === 1\n      ? new MockClient(origin, mockOptions)\n      : new MockPool(origin, mockOptions)\n  }\n\n  [kMockAgentGet] (origin) {\n    // First check if we can immediately find it\n    const ref = this[kClients].get(origin)\n    if (ref) {\n      return ref.deref()\n    }\n\n    // If the origin is not a string create a dummy parent pool and return to user\n    if (typeof origin !== 'string') {\n      const dispatcher = this[kFactory]('http://localhost:9999')\n      this[kMockAgentSet](origin, dispatcher)\n      return dispatcher\n    }\n\n    // If we match, create a pool and assign the same dispatches\n    for (const [keyMatcher, nonExplicitRef] of Array.from(this[kClients])) {\n      const nonExplicitDispatcher = nonExplicitRef.deref()\n      if (nonExplicitDispatcher && typeof keyMatcher !== 'string' && matchValue(keyMatcher, origin)) {\n        const dispatcher = this[kFactory](origin)\n        this[kMockAgentSet](origin, dispatcher)\n        dispatcher[kDispatches] = nonExplicitDispatcher[kDispatches]\n        return dispatcher\n      }\n    }\n  }\n\n  [kGetNetConnect] () {\n    return this[kNetConnect]\n  }\n\n  pendingInterceptors () {\n    const mockAgentClients = this[kClients]\n\n    return Array.from(mockAgentClients.entries())\n      .flatMap(([origin, scope]) => scope.deref()[kDispatches].map(dispatch => ({ ...dispatch, origin })))\n      .filter(({ pending }) => pending)\n  }\n\n  assertNoPendingInterceptors ({ pendingInterceptorsFormatter = new PendingInterceptorsFormatter() } = {}) {\n    const pending = this.pendingInterceptors()\n\n    if (pending.length === 0) {\n      return\n    }\n\n    const pluralizer = new Pluralizer('interceptor', 'interceptors').pluralize(pending.length)\n\n    throw new UndiciError(`\n${pluralizer.count} ${pluralizer.noun} ${pluralizer.is} pending:\n\n${pendingInterceptorsFormatter.format(pending)}\n`.trim())\n  }\n}\n\nmodule.exports = MockAgent\n", "'use strict'\n\nconst { kProxy, kClose, kDestroy, kInterceptors } = require('./core/symbols')\nconst { URL } = require('url')\nconst Agent = require('./agent')\nconst Pool = require('./pool')\nconst DispatcherBase = require('./dispatcher-base')\nconst { InvalidArgumentError, RequestAbortedError } = require('./core/errors')\nconst buildConnector = require('./core/connect')\n\nconst kAgent = Symbol('proxy agent')\nconst kClient = Symbol('proxy client')\nconst kProxyHeaders = Symbol('proxy headers')\nconst kRequestTls = Symbol('request tls settings')\nconst kProxyTls = Symbol('proxy tls settings')\nconst kConnectEndpoint = Symbol('connect endpoint function')\n\nfunction defaultProtocolPort (protocol) {\n  return protocol === 'https:' ? 443 : 80\n}\n\nfunction buildProxyOptions (opts) {\n  if (typeof opts === 'string') {\n    opts = { uri: opts }\n  }\n\n  if (!opts || !opts.uri) {\n    throw new InvalidArgumentError('Proxy opts.uri is mandatory')\n  }\n\n  return {\n    uri: opts.uri,\n    protocol: opts.protocol || 'https'\n  }\n}\n\nfunction defaultFactory (origin, opts) {\n  return new Pool(origin, opts)\n}\n\nclass ProxyAgent extends DispatcherBase {\n  constructor (opts) {\n    super(opts)\n    this[kProxy] = buildProxyOptions(opts)\n    this[kAgent] = new Agent(opts)\n    this[kInterceptors] = opts.interceptors && opts.interceptors.ProxyAgent && Array.isArray(opts.interceptors.ProxyAgent)\n      ? opts.interceptors.ProxyAgent\n      : []\n\n    if (typeof opts === 'string') {\n      opts = { uri: opts }\n    }\n\n    if (!opts || !opts.uri) {\n      throw new InvalidArgumentError('Proxy opts.uri is mandatory')\n    }\n\n    const { clientFactory = defaultFactory } = opts\n\n    if (typeof clientFactory !== 'function') {\n      throw new InvalidArgumentError('Proxy opts.clientFactory must be a function.')\n    }\n\n    this[kRequestTls] = opts.requestTls\n    this[kProxyTls] = opts.proxyTls\n    this[kProxyHeaders] = opts.headers || {}\n\n    const resolvedUrl = new URL(opts.uri)\n    const { origin, port, host, username, password } = resolvedUrl\n\n    if (opts.auth && opts.token) {\n      throw new InvalidArgumentError('opts.auth cannot be used in combination with opts.token')\n    } else if (opts.auth) {\n      /* @deprecated in favour of opts.token */\n      this[kProxyHeaders]['proxy-authorization'] = `Basic ${opts.auth}`\n    } else if (opts.token) {\n      this[kProxyHeaders]['proxy-authorization'] = opts.token\n    } else if (username && password) {\n      this[kProxyHeaders]['proxy-authorization'] = `Basic ${Buffer.from(`${decodeURIComponent(username)}:${decodeURIComponent(password)}`).toString('base64')}`\n    }\n\n    const connect = buildConnector({ ...opts.proxyTls })\n    this[kConnectEndpoint] = buildConnector({ ...opts.requestTls })\n    this[kClient] = clientFactory(resolvedUrl, { connect })\n    this[kAgent] = new Agent({\n      ...opts,\n      connect: async (opts, callback) => {\n        let requestedHost = opts.host\n        if (!opts.port) {\n          requestedHost += `:${defaultProtocolPort(opts.protocol)}`\n        }\n        try {\n          const { socket, statusCode } = await this[kClient].connect({\n            origin,\n            port,\n            path: requestedHost,\n            signal: opts.signal,\n            headers: {\n              ...this[kProxyHeaders],\n              host\n            }\n          })\n          if (statusCode !== 200) {\n            socket.on('error', () => {}).destroy()\n            callback(new RequestAbortedError(`Proxy response (${statusCode}) !== 200 when HTTP Tunneling`))\n          }\n          if (opts.protocol !== 'https:') {\n            callback(null, socket)\n            return\n          }\n          let servername\n          if (this[kRequestTls]) {\n            servername = this[kRequestTls].servername\n          } else {\n            servername = opts.servername\n          }\n          this[kConnectEndpoint]({ ...opts, servername, httpSocket: socket }, callback)\n        } catch (err) {\n          callback(err)\n        }\n      }\n    })\n  }\n\n  dispatch (opts, handler) {\n    const { host } = new URL(opts.origin)\n    const headers = buildHeaders(opts.headers)\n    throwIfProxyAuthIsSent(headers)\n    return this[kAgent].dispatch(\n      {\n        ...opts,\n        headers: {\n          ...headers,\n          host\n        }\n      },\n      handler\n    )\n  }\n\n  async [kClose] () {\n    await this[kAgent].close()\n    await this[kClient].close()\n  }\n\n  async [kDestroy] () {\n    await this[kAgent].destroy()\n    await this[kClient].destroy()\n  }\n}\n\n/**\n * @param {string[] | Record<string, string>} headers\n * @returns {Record<string, string>}\n */\nfunction buildHeaders (headers) {\n  // When using undici.fetch, the headers list is stored\n  // as an array.\n  if (Array.isArray(headers)) {\n    /** @type {Record<string, string>} */\n    const headersPair = {}\n\n    for (let i = 0; i < headers.length; i += 2) {\n      headersPair[headers[i]] = headers[i + 1]\n    }\n\n    return headersPair\n  }\n\n  return headers\n}\n\n/**\n * @param {Record<string, string>} headers\n *\n * Previous versions of ProxyAgent suggests the Proxy-Authorization in request headers\n * Nevertheless, it was changed and to avoid a security vulnerability by end users\n * this check was created.\n * It should be removed in the next major version for performance reasons\n */\nfunction throwIfProxyAuthIsSent (headers) {\n  const existProxyAuth = headers && Object.keys(headers)\n    .find((key) => key.toLowerCase() === 'proxy-authorization')\n  if (existProxyAuth) {\n    throw new InvalidArgumentError('Proxy-Authorization should be sent in ProxyAgent constructor')\n  }\n}\n\nmodule.exports = ProxyAgent\n", "const assert = require('assert')\n\nconst { kRetryHandlerDefaultRetry } = require('../core/symbols')\nconst { RequestRetryError } = require('../core/errors')\nconst { isDisturbed, parseHeaders, parseRangeHeader } = require('../core/util')\n\nfunction calculateRetryAfterHeader (retryAfter) {\n  const current = Date.now()\n  const diff = new Date(retryAfter).getTime() - current\n\n  return diff\n}\n\nclass RetryHandler {\n  constructor (opts, handlers) {\n    const { retryOptions, ...dispatchOpts } = opts\n    const {\n      // Retry scoped\n      retry: retryFn,\n      maxRetries,\n      maxTimeout,\n      minTimeout,\n      timeoutFactor,\n      // Response scoped\n      methods,\n      errorCodes,\n      retryAfter,\n      statusCodes\n    } = retryOptions ?? {}\n\n    this.dispatch = handlers.dispatch\n    this.handler = handlers.handler\n    this.opts = dispatchOpts\n    this.abort = null\n    this.aborted = false\n    this.retryOpts = {\n      retry: retryFn ?? RetryHandler[kRetryHandlerDefaultRetry],\n      retryAfter: retryAfter ?? true,\n      maxTimeout: maxTimeout ?? 30 * 1000, // 30s,\n      timeout: minTimeout ?? 500, // .5s\n      timeoutFactor: timeoutFactor ?? 2,\n      maxRetries: maxRetries ?? 5,\n      // What errors we should retry\n      methods: methods ?? ['GET', 'HEAD', 'OPTIONS', 'PUT', 'DELETE', 'TRACE'],\n      // Indicates which errors to retry\n      statusCodes: statusCodes ?? [500, 502, 503, 504, 429],\n      // List of errors to retry\n      errorCodes: errorCodes ?? [\n        'ECONNRESET',\n        'ECONNREFUSED',\n        'ENOTFOUND',\n        'ENETDOWN',\n        'ENETUNREACH',\n        'EHOSTDOWN',\n        'EHOSTUNREACH',\n        'EPIPE'\n      ]\n    }\n\n    this.retryCount = 0\n    this.start = 0\n    this.end = null\n    this.etag = null\n    this.resume = null\n\n    // Handle possible onConnect duplication\n    this.handler.onConnect(reason => {\n      this.aborted = true\n      if (this.abort) {\n        this.abort(reason)\n      } else {\n        this.reason = reason\n      }\n    })\n  }\n\n  onRequestSent () {\n    if (this.handler.onRequestSent) {\n      this.handler.onRequestSent()\n    }\n  }\n\n  onUpgrade (statusCode, headers, socket) {\n    if (this.handler.onUpgrade) {\n      this.handler.onUpgrade(statusCode, headers, socket)\n    }\n  }\n\n  onConnect (abort) {\n    if (this.aborted) {\n      abort(this.reason)\n    } else {\n      this.abort = abort\n    }\n  }\n\n  onBodySent (chunk) {\n    if (this.handler.onBodySent) return this.handler.onBodySent(chunk)\n  }\n\n  static [kRetryHandlerDefaultRetry] (err, { state, opts }, cb) {\n    const { statusCode, code, headers } = err\n    const { method, retryOptions } = opts\n    const {\n      maxRetries,\n      timeout,\n      maxTimeout,\n      timeoutFactor,\n      statusCodes,\n      errorCodes,\n      methods\n    } = retryOptions\n    let { counter, currentTimeout } = state\n\n    currentTimeout =\n      currentTimeout != null && currentTimeout > 0 ? currentTimeout : timeout\n\n    // Any code that is not a Undici's originated and allowed to retry\n    if (\n      code &&\n      code !== 'UND_ERR_REQ_RETRY' &&\n      code !== 'UND_ERR_SOCKET' &&\n      !errorCodes.includes(code)\n    ) {\n      cb(err)\n      return\n    }\n\n    // If a set of method are provided and the current method is not in the list\n    if (Array.isArray(methods) && !methods.includes(method)) {\n      cb(err)\n      return\n    }\n\n    // If a set of status code are provided and the current status code is not in the list\n    if (\n      statusCode != null &&\n      Array.isArray(statusCodes) &&\n      !statusCodes.includes(statusCode)\n    ) {\n      cb(err)\n      return\n    }\n\n    // If we reached the max number of retries\n    if (counter > maxRetries) {\n      cb(err)\n      return\n    }\n\n    let retryAfterHeader = headers != null && headers['retry-after']\n    if (retryAfterHeader) {\n      retryAfterHeader = Number(retryAfterHeader)\n      retryAfterHeader = isNaN(retryAfterHeader)\n        ? calculateRetryAfterHeader(retryAfterHeader)\n        : retryAfterHeader * 1e3 // Retry-After is in seconds\n    }\n\n    const retryTimeout =\n      retryAfterHeader > 0\n        ? Math.min(retryAfterHeader, maxTimeout)\n        : Math.min(currentTimeout * timeoutFactor ** counter, maxTimeout)\n\n    state.currentTimeout = retryTimeout\n\n    setTimeout(() => cb(null), retryTimeout)\n  }\n\n  onHeaders (statusCode, rawHeaders, resume, statusMessage) {\n    const headers = parseHeaders(rawHeaders)\n\n    this.retryCount += 1\n\n    if (statusCode >= 300) {\n      this.abort(\n        new RequestRetryError('Request failed', statusCode, {\n          headers,\n          count: this.retryCount\n        })\n      )\n      return false\n    }\n\n    // Checkpoint for resume from where we left it\n    if (this.resume != null) {\n      this.resume = null\n\n      if (statusCode !== 206) {\n        return true\n      }\n\n      const contentRange = parseRangeHeader(headers['content-range'])\n      // If no content range\n      if (!contentRange) {\n        this.abort(\n          new RequestRetryError('Content-Range mismatch', statusCode, {\n            headers,\n            count: this.retryCount\n          })\n        )\n        return false\n      }\n\n      // Let's start with a weak etag check\n      if (this.etag != null && this.etag !== headers.etag) {\n        this.abort(\n          new RequestRetryError('ETag mismatch', statusCode, {\n            headers,\n            count: this.retryCount\n          })\n        )\n        return false\n      }\n\n      const { start, size, end = size } = contentRange\n\n      assert(this.start === start, 'content-range mismatch')\n      assert(this.end == null || this.end === end, 'content-range mismatch')\n\n      this.resume = resume\n      return true\n    }\n\n    if (this.end == null) {\n      if (statusCode === 206) {\n        // First time we receive 206\n        const range = parseRangeHeader(headers['content-range'])\n\n        if (range == null) {\n          return this.handler.onHeaders(\n            statusCode,\n            rawHeaders,\n            resume,\n            statusMessage\n          )\n        }\n\n        const { start, size, end = size } = range\n\n        assert(\n          start != null && Number.isFinite(start) && this.start !== start,\n          'content-range mismatch'\n        )\n        assert(Number.isFinite(start))\n        assert(\n          end != null && Number.isFinite(end) && this.end !== end,\n          'invalid content-length'\n        )\n\n        this.start = start\n        this.end = end\n      }\n\n      // We make our best to checkpoint the body for further range headers\n      if (this.end == null) {\n        const contentLength = headers['content-length']\n        this.end = contentLength != null ? Number(contentLength) : null\n      }\n\n      assert(Number.isFinite(this.start))\n      assert(\n        this.end == null || Number.isFinite(this.end),\n        'invalid content-length'\n      )\n\n      this.resume = resume\n      this.etag = headers.etag != null ? headers.etag : null\n\n      return this.handler.onHeaders(\n        statusCode,\n        rawHeaders,\n        resume,\n        statusMessage\n      )\n    }\n\n    const err = new RequestRetryError('Request failed', statusCode, {\n      headers,\n      count: this.retryCount\n    })\n\n    this.abort(err)\n\n    return false\n  }\n\n  onData (chunk) {\n    this.start += chunk.length\n\n    return this.handler.onData(chunk)\n  }\n\n  onComplete (rawTrailers) {\n    this.retryCount = 0\n    return this.handler.onComplete(rawTrailers)\n  }\n\n  onError (err) {\n    if (this.aborted || isDisturbed(this.opts.body)) {\n      return this.handler.onError(err)\n    }\n\n    this.retryOpts.retry(\n      err,\n      {\n        state: { counter: this.retryCount++, currentTimeout: this.retryAfter },\n        opts: { retryOptions: this.retryOpts, ...this.opts }\n      },\n      onRetry.bind(this)\n    )\n\n    function onRetry (err) {\n      if (err != null || this.aborted || isDisturbed(this.opts.body)) {\n        return this.handler.onError(err)\n      }\n\n      if (this.start !== 0) {\n        this.opts = {\n          ...this.opts,\n          headers: {\n            ...this.opts.headers,\n            range: `bytes=${this.start}-${this.end ?? ''}`\n          }\n        }\n      }\n\n      try {\n        this.dispatch(this.opts, this)\n      } catch (err) {\n        this.handler.onError(err)\n      }\n    }\n  }\n}\n\nmodule.exports = RetryHandler\n", "'use strict'\n\n// We include a version number for the Dispatcher API. In case of breaking changes,\n// this version number must be increased to avoid conflicts.\nconst globalDispatcher = Symbol.for('undici.globalDispatcher.1')\nconst { InvalidArgumentError } = require('./core/errors')\nconst Agent = require('./agent')\n\nif (getGlobalDispatcher() === undefined) {\n  setGlobalDispatcher(new Agent())\n}\n\nfunction setGlobalDispatcher (agent) {\n  if (!agent || typeof agent.dispatch !== 'function') {\n    throw new InvalidArgumentError('Argument agent must implement Agent')\n  }\n  Object.defineProperty(globalThis, globalDispatcher, {\n    value: agent,\n    writable: true,\n    enumerable: false,\n    configurable: false\n  })\n}\n\nfunction getGlobalDispatcher () {\n  return globalThis[globalDispatcher]\n}\n\nmodule.exports = {\n  setGlobalDispatcher,\n  getGlobalDispatcher\n}\n", "'use strict'\n\nmodule.exports = class DecoratorHandler {\n  constructor (handler) {\n    this.handler = handler\n  }\n\n  onConnect (...args) {\n    return this.handler.onConnect(...args)\n  }\n\n  onError (...args) {\n    return this.handler.onError(...args)\n  }\n\n  onUpgrade (...args) {\n    return this.handler.onUpgrade(...args)\n  }\n\n  onHeaders (...args) {\n    return this.handler.onHeaders(...args)\n  }\n\n  onData (...args) {\n    return this.handler.onData(...args)\n  }\n\n  onComplete (...args) {\n    return this.handler.onComplete(...args)\n  }\n\n  onBodySent (...args) {\n    return this.handler.onBodySent(...args)\n  }\n}\n", "// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst { kGuard } = require('./symbols')\nconst { kEnumerableProperty } = require('../core/util')\nconst {\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util')\nconst { webidl } = require('./webidl')\nconst assert = require('assert')\n\nconst kHeadersMap = Symbol('headers map')\nconst kHeadersSortedMap = Symbol('headers map sorted')\n\n/**\n * @param {number} code\n */\nfunction isHTTPWhiteSpaceCharCode (code) {\n  return code === 0x00a || code === 0x00d || code === 0x009 || code === 0x020\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize (potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n  let i = 0; let j = potentialValue.length\n\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(j - 1))) --j\n  while (j > i && isHTTPWhiteSpaceCharCode(potentialValue.charCodeAt(i))) ++i\n\n  return i === 0 && j === potentialValue.length ? potentialValue : potentialValue.substring(i, j)\n}\n\nfunction fill (headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (let i = 0; i < object.length; ++i) {\n      const header = object[i]\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        })\n      }\n\n      // 2. Append (header\u2019s first item, header\u2019s second item) to headers.\n      appendHeader(headers, header[0], header[1])\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key \u2192 value in object,\n    //    append (key, value) to headers\n    const keys = Object.keys(object)\n    for (let i = 0; i < keys.length; ++i) {\n      appendHeader(headers, keys[i], object[keys[i]])\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    })\n  }\n}\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-headers-append\n */\nfunction appendHeader (headers, name, value) {\n  // 1. Normalize value.\n  value = headerValueNormalize(value)\n\n  // 2. If name is not a header name or value is not a\n  //    header value, then throw a TypeError.\n  if (!isValidHeaderName(name)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value: name,\n      type: 'header name'\n    })\n  } else if (!isValidHeaderValue(value)) {\n    throw webidl.errors.invalidArgument({\n      prefix: 'Headers.append',\n      value,\n      type: 'header value'\n    })\n  }\n\n  // 3. If headers\u2019s guard is \"immutable\", then throw a TypeError.\n  // 4. Otherwise, if headers\u2019s guard is \"request\" and name is a\n  //    forbidden header name, return.\n  // Note: undici does not implement forbidden header names\n  if (headers[kGuard] === 'immutable') {\n    throw new TypeError('immutable')\n  } else if (headers[kGuard] === 'request-no-cors') {\n    // 5. Otherwise, if headers\u2019s guard is \"request-no-cors\":\n    // TODO\n  }\n\n  // 6. Otherwise, if headers\u2019s guard is \"response\" and name is a\n  //    forbidden response-header name, return.\n\n  // 7. Append (name, value) to headers\u2019s header list.\n  return headers[kHeadersList].append(name, value)\n\n  // 8. If headers\u2019s guard is \"request-no-cors\", then remove\n  //    privileged no-CORS request headers from headers\n}\n\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null\n\n  constructor (init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap])\n      this[kHeadersSortedMap] = init[kHeadersSortedMap]\n      this.cookies = init.cookies === null ? null : [...init.cookies]\n    } else {\n      this[kHeadersMap] = new Map(init)\n      this[kHeadersSortedMap] = null\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#header-list-contains\n  contains (name) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n    name = name.toLowerCase()\n\n    return this[kHeadersMap].has(name)\n  }\n\n  clear () {\n    this[kHeadersMap].clear()\n    this[kHeadersSortedMap] = null\n    this.cookies = null\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-append\n  append (name, value) {\n    this[kHeadersSortedMap] = null\n\n    // 1. If list contains name, then set name to the first such\n    //    header\u2019s name.\n    const lowercaseName = name.toLowerCase()\n    const exists = this[kHeadersMap].get(lowercaseName)\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}${delimiter}${value}`\n      })\n    } else {\n      this[kHeadersMap].set(lowercaseName, { name, value })\n    }\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies ??= []\n      this.cookies.push(value)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-set\n  set (name, value) {\n    this[kHeadersSortedMap] = null\n    const lowercaseName = name.toLowerCase()\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [value]\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    this[kHeadersMap].set(lowercaseName, { name, value })\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-delete\n  delete (name) {\n    this[kHeadersSortedMap] = null\n\n    name = name.toLowerCase()\n\n    if (name === 'set-cookie') {\n      this.cookies = null\n    }\n\n    this[kHeadersMap].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-get\n  get (name) {\n    const value = this[kHeadersMap].get(name.toLowerCase())\n\n    // 1. If list does not contain name, then return null.\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return value === undefined ? null : value.value\n  }\n\n  * [Symbol.iterator] () {\n    // use the lowercased name\n    for (const [name, { value }] of this[kHeadersMap]) {\n      yield [name, value]\n    }\n  }\n\n  get entries () {\n    const headers = {}\n\n    if (this[kHeadersMap].size) {\n      for (const { name, value } of this[kHeadersMap].values()) {\n        headers[name] = value\n      }\n    }\n\n    return headers\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  constructor (init = undefined) {\n    if (init === kConstruct) {\n      return\n    }\n    this[kHeadersList] = new HeadersList()\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this\u2019s guard to \"none\".\n    this[kGuard] = 'none'\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init)\n      fill(this, init)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    return appendHeader(this, name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. If this\u2019s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this\u2019s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this\u2019s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this\u2019s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 6. If this\u2019s header list does not contain name, then\n    //    return.\n    if (!this[kHeadersList].contains(name)) {\n      return\n    }\n\n    // 7. Delete name from this\u2019s header list.\n    // 8. If this\u2019s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    this[kHeadersList].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.get',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return the result of getting name from this\u2019s header\n    //    list.\n    return this[kHeadersList].get(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.has',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return true if this\u2019s header list contains name;\n    //    otherwise false.\n    return this[kHeadersList].contains(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value)\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value: name,\n        type: 'header name'\n      })\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value,\n        type: 'header value'\n      })\n    }\n\n    // 3. If this\u2019s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this\u2019s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this\u2019s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this\u2019s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 7. Set (name, value) in this\u2019s header list.\n    // 8. If this\u2019s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    this[kHeadersList].set(name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n  getSetCookie () {\n    webidl.brandCheck(this, Headers)\n\n    // 1. If this\u2019s header list does not contain `Set-Cookie`, then return \u00AB \u00BB.\n    // 2. Return the values of all headers in this\u2019s header list whose name is\n    //    a byte-case-insensitive match for `Set-Cookie`, in order.\n\n    const list = this[kHeadersList].cookies\n\n    if (list) {\n      return [...list]\n    }\n\n    return []\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n  get [kHeadersSortedMap] () {\n    if (this[kHeadersList][kHeadersSortedMap]) {\n      return this[kHeadersList][kHeadersSortedMap]\n    }\n\n    // 1. Let headers be an empty list of headers with the key being the name\n    //    and value the value.\n    const headers = []\n\n    // 2. Let names be the result of convert header names to a sorted-lowercase\n    //    set with all the names of the headers in list.\n    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1)\n    const cookies = this[kHeadersList].cookies\n\n    // 3. For each name of names:\n    for (let i = 0; i < names.length; ++i) {\n      const [name, value] = names[i]\n      // 1. If name is `set-cookie`, then:\n      if (name === 'set-cookie') {\n        // 1. Let values be a list of all values of headers in list whose name\n        //    is a byte-case-insensitive match for name, in order.\n\n        // 2. For each value of values:\n        // 1. Append (name, value) to headers.\n        for (let j = 0; j < cookies.length; ++j) {\n          headers.push([name, cookies[j]])\n        }\n      } else {\n        // 2. Otherwise:\n\n        // 1. Let value be the result of getting name from list.\n\n        // 2. Assert: value is non-null.\n        assert(value !== null)\n\n        // 3. Append (name, value) to headers.\n        headers.push([name, value])\n      }\n    }\n\n    this[kHeadersList][kHeadersSortedMap] = headers\n\n    // 4. Return headers.\n    return headers\n  }\n\n  keys () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'key')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'value')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'value'\n    )\n  }\n\n  entries () {\n    webidl.brandCheck(this, Headers)\n\n    if (this[kGuard] === 'immutable') {\n      const value = this[kHeadersSortedMap]\n      return makeIterator(() => value, 'Headers',\n        'key+value')\n    }\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'key+value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: Headers) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    webidl.brandCheck(this, Headers)\n\n    return this[kHeadersList]\n  }\n}\n\nHeaders.prototype[Symbol.iterator] = Headers.prototype.entries\n\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  getSetCookie: kEnumerableProperty,\n  keys: kEnumerableProperty,\n  values: kEnumerableProperty,\n  entries: kEnumerableProperty,\n  forEach: kEnumerableProperty,\n  [Symbol.iterator]: { enumerable: false },\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  }\n})\n\nwebidl.converters.HeadersInit = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (V[Symbol.iterator]) {\n      return webidl.converters['sequence<sequence<ByteString>>'](V)\n    }\n\n    return webidl.converters['record<ByteString, ByteString>'](V)\n  }\n\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  })\n}\n\nmodule.exports = {\n  fill,\n  Headers,\n  HeadersList\n}\n", "'use strict'\n\nconst { Headers, HeadersList, fill } = require('./headers')\nconst { extractBody, cloneBody, mixinBody } = require('./body')\nconst util = require('../core/util')\nconst { kEnumerableProperty } = util\nconst {\n  isValidReasonPhrase,\n  isCancelled,\n  isAborted,\n  isBlobLike,\n  serializeJavascriptValueToJSONString,\n  isErrorLike,\n  isomorphicEncode\n} = require('./util')\nconst {\n  redirectStatusSet,\n  nullBodyStatus,\n  DOMException\n} = require('./constants')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { FormData } = require('./formdata')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { types } = require('util')\n\nconst ReadableStream = globalThis.ReadableStream || require('stream/web').ReadableStream\nconst textEncoder = new TextEncoder('utf-8')\n\n// https://fetch.spec.whatwg.org/#response-class\nclass Response {\n  // Creates network error Response.\n  static error () {\n    // TODO\n    const relevantRealm = { settingsObject: {} }\n\n    // The static error() method steps are to return the result of creating a\n    // Response object, given a new network error, \"immutable\", and this\u2019s\n    // relevant Realm.\n    const responseObject = new Response()\n    responseObject[kState] = makeNetworkError()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = responseObject[kState].headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response-json\n  static json (data, init = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.json' })\n\n    if (init !== null) {\n      init = webidl.converters.ResponseInit(init)\n    }\n\n    // 1. Let bytes the result of running serialize a JavaScript value to JSON bytes on data.\n    const bytes = textEncoder.encode(\n      serializeJavascriptValueToJSONString(data)\n    )\n\n    // 2. Let body be the result of extracting bytes.\n    const body = extractBody(bytes)\n\n    // 3. Let responseObject be the result of creating a Response object, given a new response,\n    //    \"response\", and this\u2019s relevant Realm.\n    const relevantRealm = { settingsObject: {} }\n    const responseObject = new Response()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kGuard] = 'response'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 4. Perform initialize a response given responseObject, init, and (body, \"application/json\").\n    initializeResponse(responseObject, init, { body: body[0], type: 'application/json' })\n\n    // 5. Return responseObject.\n    return responseObject\n  }\n\n  // Creates a redirect Response that redirects to url with status status.\n  static redirect (url, status = 302) {\n    const relevantRealm = { settingsObject: {} }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Response.redirect' })\n\n    url = webidl.converters.USVString(url)\n    status = webidl.converters['unsigned short'](status)\n\n    // 1. Let parsedURL be the result of parsing url with current settings\n    // object\u2019s API base URL.\n    // 2. If parsedURL is failure, then throw a TypeError.\n    // TODO: base-URL?\n    let parsedURL\n    try {\n      parsedURL = new URL(url, getGlobalOrigin())\n    } catch (err) {\n      throw Object.assign(new TypeError('Failed to parse URL from ' + url), {\n        cause: err\n      })\n    }\n\n    // 3. If status is not a redirect status, then throw a RangeError.\n    if (!redirectStatusSet.has(status)) {\n      throw new RangeError('Invalid status code ' + status)\n    }\n\n    // 4. Let responseObject be the result of creating a Response object,\n    // given a new response, \"immutable\", and this\u2019s relevant Realm.\n    const responseObject = new Response()\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Set responseObject\u2019s response\u2019s status to status.\n    responseObject[kState].status = status\n\n    // 6. Let value be parsedURL, serialized and isomorphic encoded.\n    const value = isomorphicEncode(URLSerializer(parsedURL))\n\n    // 7. Append `Location`/value to responseObject\u2019s response\u2019s header list.\n    responseObject[kState].headersList.append('location', value)\n\n    // 8. Return responseObject.\n    return responseObject\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-response\n  constructor (body = null, init = {}) {\n    if (body !== null) {\n      body = webidl.converters.BodyInit(body)\n    }\n\n    init = webidl.converters.ResponseInit(init)\n\n    // TODO\n    this[kRealm] = { settingsObject: {} }\n\n    // 1. Set this\u2019s response to a new response.\n    this[kState] = makeResponse({})\n\n    // 2. Set this\u2019s headers to a new Headers object with this\u2019s relevant\n    // Realm, whose header list is this\u2019s response\u2019s header list and guard\n    // is \"response\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kGuard] = 'response'\n    this[kHeaders][kHeadersList] = this[kState].headersList\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 3. Let bodyWithType be null.\n    let bodyWithType = null\n\n    // 4. If body is non-null, then set bodyWithType to the result of extracting body.\n    if (body != null) {\n      const [extractedBody, type] = extractBody(body)\n      bodyWithType = { body: extractedBody, type }\n    }\n\n    // 5. Perform initialize a response given this, init, and bodyWithType.\n    initializeResponse(this, init, bodyWithType)\n  }\n\n  // Returns response\u2019s type, e.g., \"cors\".\n  get type () {\n    webidl.brandCheck(this, Response)\n\n    // The type getter steps are to return this\u2019s response\u2019s type.\n    return this[kState].type\n  }\n\n  // Returns response\u2019s URL, if it has one; otherwise the empty string.\n  get url () {\n    webidl.brandCheck(this, Response)\n\n    const urlList = this[kState].urlList\n\n    // The url getter steps are to return the empty string if this\u2019s\n    // response\u2019s URL is null; otherwise this\u2019s response\u2019s URL,\n    // serialized with exclude fragment set to true.\n    const url = urlList[urlList.length - 1] ?? null\n\n    if (url === null) {\n      return ''\n    }\n\n    return URLSerializer(url, true)\n  }\n\n  // Returns whether response was obtained through a redirect.\n  get redirected () {\n    webidl.brandCheck(this, Response)\n\n    // The redirected getter steps are to return true if this\u2019s response\u2019s URL\n    // list has more than one item; otherwise false.\n    return this[kState].urlList.length > 1\n  }\n\n  // Returns response\u2019s status.\n  get status () {\n    webidl.brandCheck(this, Response)\n\n    // The status getter steps are to return this\u2019s response\u2019s status.\n    return this[kState].status\n  }\n\n  // Returns whether response\u2019s status is an ok status.\n  get ok () {\n    webidl.brandCheck(this, Response)\n\n    // The ok getter steps are to return true if this\u2019s response\u2019s status is an\n    // ok status; otherwise false.\n    return this[kState].status >= 200 && this[kState].status <= 299\n  }\n\n  // Returns response\u2019s status message.\n  get statusText () {\n    webidl.brandCheck(this, Response)\n\n    // The statusText getter steps are to return this\u2019s response\u2019s status\n    // message.\n    return this[kState].statusText\n  }\n\n  // Returns response\u2019s headers as Headers.\n  get headers () {\n    webidl.brandCheck(this, Response)\n\n    // The headers getter steps are to return this\u2019s headers.\n    return this[kHeaders]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Response)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Response)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  // Returns a clone of response.\n  clone () {\n    webidl.brandCheck(this, Response)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || (this.body && this.body.locked)) {\n      throw webidl.errors.exception({\n        header: 'Response.clone',\n        message: 'Body has already been consumed.'\n      })\n    }\n\n    // 2. Let clonedResponse be the result of cloning this\u2019s response.\n    const clonedResponse = cloneResponse(this[kState])\n\n    // 3. Return the result of creating a Response object, given\n    // clonedResponse, this\u2019s headers\u2019s guard, and this\u2019s relevant Realm.\n    const clonedResponseObject = new Response()\n    clonedResponseObject[kState] = clonedResponse\n    clonedResponseObject[kRealm] = this[kRealm]\n    clonedResponseObject[kHeaders][kHeadersList] = clonedResponse.headersList\n    clonedResponseObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedResponseObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    return clonedResponseObject\n  }\n}\n\nmixinBody(Response)\n\nObject.defineProperties(Response.prototype, {\n  type: kEnumerableProperty,\n  url: kEnumerableProperty,\n  status: kEnumerableProperty,\n  ok: kEnumerableProperty,\n  redirected: kEnumerableProperty,\n  statusText: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Response',\n    configurable: true\n  }\n})\n\nObject.defineProperties(Response, {\n  json: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  error: kEnumerableProperty\n})\n\n// https://fetch.spec.whatwg.org/#concept-response-clone\nfunction cloneResponse (response) {\n  // To clone a response response, run these steps:\n\n  // 1. If response is a filtered response, then return a new identical\n  // filtered response whose internal response is a clone of response\u2019s\n  // internal response.\n  if (response.internalResponse) {\n    return filterResponse(\n      cloneResponse(response.internalResponse),\n      response.type\n    )\n  }\n\n  // 2. Let newResponse be a copy of response, except for its body.\n  const newResponse = makeResponse({ ...response, body: null })\n\n  // 3. If response\u2019s body is non-null, then set newResponse\u2019s body to the\n  // result of cloning response\u2019s body.\n  if (response.body != null) {\n    newResponse.body = cloneBody(response.body)\n  }\n\n  // 4. Return newResponse.\n  return newResponse\n}\n\nfunction makeResponse (init) {\n  return {\n    aborted: false,\n    rangeRequested: false,\n    timingAllowPassed: false,\n    requestIncludesCredentials: false,\n    type: 'default',\n    status: 200,\n    timingInfo: null,\n    cacheState: '',\n    statusText: '',\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList(),\n    urlList: init.urlList ? [...init.urlList] : []\n  }\n}\n\nfunction makeNetworkError (reason) {\n  const isError = isErrorLike(reason)\n  return makeResponse({\n    type: 'error',\n    status: 0,\n    error: isError\n      ? reason\n      : new Error(reason ? String(reason) : reason),\n    aborted: reason && reason.name === 'AbortError'\n  })\n}\n\nfunction makeFilteredResponse (response, state) {\n  state = {\n    internalResponse: response,\n    ...state\n  }\n\n  return new Proxy(response, {\n    get (target, p) {\n      return p in state ? state[p] : target[p]\n    },\n    set (target, p, value) {\n      assert(!(p in state))\n      target[p] = value\n      return true\n    }\n  })\n}\n\n// https://fetch.spec.whatwg.org/#concept-filtered-response\nfunction filterResponse (response, type) {\n  // Set response to the following filtered response with response as its\n  // internal response, depending on request\u2019s response tainting:\n  if (type === 'basic') {\n    // A basic filtered response is a filtered response whose type is \"basic\"\n    // and header list excludes any headers in internal response\u2019s header list\n    // whose name is a forbidden response-header name.\n\n    // Note: undici does not implement forbidden response-header names\n    return makeFilteredResponse(response, {\n      type: 'basic',\n      headersList: response.headersList\n    })\n  } else if (type === 'cors') {\n    // A CORS filtered response is a filtered response whose type is \"cors\"\n    // and header list excludes any headers in internal response\u2019s header\n    // list whose name is not a CORS-safelisted response-header name, given\n    // internal response\u2019s CORS-exposed header-name list.\n\n    // Note: undici does not implement CORS-safelisted response-header names\n    return makeFilteredResponse(response, {\n      type: 'cors',\n      headersList: response.headersList\n    })\n  } else if (type === 'opaque') {\n    // An opaque filtered response is a filtered response whose type is\n    // \"opaque\", URL list is the empty list, status is 0, status message\n    // is the empty byte sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaque',\n      urlList: Object.freeze([]),\n      status: 0,\n      statusText: '',\n      body: null\n    })\n  } else if (type === 'opaqueredirect') {\n    // An opaque-redirect filtered response is a filtered response whose type\n    // is \"opaqueredirect\", status is 0, status message is the empty byte\n    // sequence, header list is empty, and body is null.\n\n    return makeFilteredResponse(response, {\n      type: 'opaqueredirect',\n      status: 0,\n      statusText: '',\n      headersList: [],\n      body: null\n    })\n  } else {\n    assert(false)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#appropriate-network-error\nfunction makeAppropriateNetworkError (fetchParams, err = null) {\n  // 1. Assert: fetchParams is canceled.\n  assert(isCancelled(fetchParams))\n\n  // 2. Return an aborted network error if fetchParams is aborted;\n  // otherwise return a network error.\n  return isAborted(fetchParams)\n    ? makeNetworkError(Object.assign(new DOMException('The operation was aborted.', 'AbortError'), { cause: err }))\n    : makeNetworkError(Object.assign(new DOMException('Request was cancelled.'), { cause: err }))\n}\n\n// https://whatpr.org/fetch/1392.html#initialize-a-response\nfunction initializeResponse (response, init, body) {\n  // 1. If init[\"status\"] is not in the range 200 to 599, inclusive, then\n  //    throw a RangeError.\n  if (init.status !== null && (init.status < 200 || init.status > 599)) {\n    throw new RangeError('init[\"status\"] must be in the range of 200 to 599, inclusive.')\n  }\n\n  // 2. If init[\"statusText\"] does not match the reason-phrase token production,\n  //    then throw a TypeError.\n  if ('statusText' in init && init.statusText != null) {\n    // See, https://datatracker.ietf.org/doc/html/rfc7230#section-3.1.2:\n    //   reason-phrase  = *( HTAB / SP / VCHAR / obs-text )\n    if (!isValidReasonPhrase(String(init.statusText))) {\n      throw new TypeError('Invalid statusText')\n    }\n  }\n\n  // 3. Set response\u2019s response\u2019s status to init[\"status\"].\n  if ('status' in init && init.status != null) {\n    response[kState].status = init.status\n  }\n\n  // 4. Set response\u2019s response\u2019s status message to init[\"statusText\"].\n  if ('statusText' in init && init.statusText != null) {\n    response[kState].statusText = init.statusText\n  }\n\n  // 5. If init[\"headers\"] exists, then fill response\u2019s headers with init[\"headers\"].\n  if ('headers' in init && init.headers != null) {\n    fill(response[kHeaders], init.headers)\n  }\n\n  // 6. If body was given, then:\n  if (body) {\n    // 1. If response's status is a null body status, then throw a TypeError.\n    if (nullBodyStatus.includes(response.status)) {\n      throw webidl.errors.exception({\n        header: 'Response constructor',\n        message: 'Invalid response status code ' + response.status\n      })\n    }\n\n    // 2. Set response's body to body's body.\n    response[kState].body = body.body\n\n    // 3. If body's type is non-null and response's header list does not contain\n    //    `Content-Type`, then append (`Content-Type`, body's type) to response's header list.\n    if (body.type != null && !response[kState].headersList.contains('Content-Type')) {\n      response[kState].headersList.append('content-type', body.type)\n    }\n  }\n}\n\nwebidl.converters.ReadableStream = webidl.interfaceConverter(\n  ReadableStream\n)\n\nwebidl.converters.FormData = webidl.interfaceConverter(\n  FormData\n)\n\nwebidl.converters.URLSearchParams = webidl.interfaceConverter(\n  URLSearchParams\n)\n\n// https://fetch.spec.whatwg.org/#typedefdef-xmlhttprequestbodyinit\nwebidl.converters.XMLHttpRequestBodyInit = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (isBlobLike(V)) {\n    return webidl.converters.Blob(V, { strict: false })\n  }\n\n  if (types.isArrayBuffer(V) || types.isTypedArray(V) || types.isDataView(V)) {\n    return webidl.converters.BufferSource(V)\n  }\n\n  if (util.isFormDataLike(V)) {\n    return webidl.converters.FormData(V, { strict: false })\n  }\n\n  if (V instanceof URLSearchParams) {\n    return webidl.converters.URLSearchParams(V)\n  }\n\n  return webidl.converters.DOMString(V)\n}\n\n// https://fetch.spec.whatwg.org/#bodyinit\nwebidl.converters.BodyInit = function (V) {\n  if (V instanceof ReadableStream) {\n    return webidl.converters.ReadableStream(V)\n  }\n\n  // Note: the spec doesn't include async iterables,\n  // this is an undici extension.\n  if (V?.[Symbol.asyncIterator]) {\n    return V\n  }\n\n  return webidl.converters.XMLHttpRequestBodyInit(V)\n}\n\nwebidl.converters.ResponseInit = webidl.dictionaryConverter([\n  {\n    key: 'status',\n    converter: webidl.converters['unsigned short'],\n    defaultValue: 200\n  },\n  {\n    key: 'statusText',\n    converter: webidl.converters.ByteString,\n    defaultValue: ''\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  }\n])\n\nmodule.exports = {\n  makeNetworkError,\n  makeResponse,\n  makeAppropriateNetworkError,\n  filterResponse,\n  Response,\n  cloneResponse\n}\n", "/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('../compat/dispatcher-weakref')()\nconst util = require('../core/util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod,\n  makePolicyContainer,\n  normalizeMethodRecord\n} = require('./util')\nconst {\n  forbiddenMethodsSet,\n  corsSafeListedMethodsSet,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants')\nconst { kEnumerableProperty } = util\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList, kConstruct } = require('../core/symbols')\nconst assert = require('assert')\nconst { getMaxListeners, setMaxListeners, getEventListeners, defaultMaxListeners } = require('events')\n\nlet TransformStream = globalThis.TransformStream\n\nconst kAbortController = Symbol('abortController')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kConstruct) {\n      return\n    }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })\n\n    input = webidl.converters.RequestInfo(input)\n    init = webidl.converters.RequestInit(init)\n\n    // https://html.spec.whatwg.org/multipage/webappapis.html#environment-settings-object\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin(),\n        get origin () {\n          return this.baseUrl?.origin\n        },\n        policyContainer: makePolicyContainer()\n      }\n    }\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this\u2019s relevant settings object\u2019s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input\u2019s request.\n      request = input[kState]\n\n      // 9. Set signal to input\u2019s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this\u2019s relevant settings object\u2019s origin.\n    const origin = this[kRealm].settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request\u2019s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request\u2019s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if ('window' in init) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request\u2019s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request\u2019s method.\n      method: request.method,\n      // header list A copy of request\u2019s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This\u2019s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request\u2019s priority.\n      priority: request.priority,\n      // origin request\u2019s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request\u2019s referrer.\n      referrer: request.referrer,\n      // referrer policy request\u2019s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request\u2019s mode.\n      mode: request.mode,\n      // credentials mode request\u2019s credentials mode.\n      credentials: request.credentials,\n      // cache mode request\u2019s cache mode.\n      cache: request.cache,\n      // redirect mode request\u2019s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request\u2019s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request\u2019s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request\u2019s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request\u2019s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request\u2019s URL list.\n      urlList: [...request.urlList]\n    })\n\n    const initHasKey = Object.keys(init).length !== 0\n\n    // 13. If init is not empty, then:\n    if (initHasKey) {\n      // 1. If request\u2019s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request\u2019s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request\u2019s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request\u2019s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request\u2019s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request\u2019s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request\u2019s URL to request\u2019s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request\u2019s URL list to \u00AB request\u2019s URL \u00BB.\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request\u2019s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // - parsedReferrer\u2019s scheme is \"about\" and path is the string \"client\"\n        // - parsedReferrer\u2019s origin is not same origin with origin\n        // then set request\u2019s referrer to \"client\".\n        if (\n          (parsedReferrer.protocol === 'about:' && parsedReferrer.hostname === 'client') ||\n          (origin && !sameOrigin(parsedReferrer, this[kRealm].settingsObject.baseUrl))\n        ) {\n          request.referrer = 'client'\n        } else {\n          // 4. Otherwise, set request\u2019s referrer to parsedReferrer.\n          request.referrer = parsedReferrer\n        }\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request\u2019s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request\u2019s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request\u2019s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n    }\n\n    // 18. If init[\"cache\"] exists, then set request\u2019s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n    }\n\n    // 21. If request\u2019s cache mode is \"only-if-cached\" and request\u2019s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request\u2019s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request\u2019s integrity metadata to it.\n    if (init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request\u2019s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(method)) {\n        throw new TypeError(`'${method}' is not a valid HTTP method.`)\n      }\n\n      if (forbiddenMethodsSet.has(method.toUpperCase())) {\n        throw new TypeError(`'${method}' HTTP method is unsupported.`)\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethodRecord[method] ?? normalizeMethod(method)\n\n      // 4. Set request\u2019s method to method.\n      request.method = method\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this\u2019s request to request.\n    this[kState] = request\n\n    // 28. Set this\u2019s signal to a new AbortSignal object with this\u2019s relevant\n    // Realm.\n    // TODO: could this be simplified with AbortSignal.any\n    // (https://dom.spec.whatwg.org/#dom-abortsignal-any)\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n    this[kSignal][kRealm] = this[kRealm]\n\n    // 29. If signal is not null, then make this\u2019s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        // Keep a strong ref to ac while request object\n        // is alive. This is needed to prevent AbortController\n        // from being prematurely garbage collected.\n        // See, https://github.com/nodejs/undici/issues/1926.\n        this[kAbortController] = ac\n\n        const acRef = new WeakRef(ac)\n        const abort = function () {\n          const ac = acRef.deref()\n          if (ac !== undefined) {\n            ac.abort(this.reason)\n          }\n        }\n\n        // Third-party AbortControllers may not work with these.\n        // See, https://github.com/nodejs/undici/pull/1910#issuecomment-1464495619.\n        try {\n          // If the max amount of listeners is equal to the default, increase it\n          // This is only available in node >= v19.9.0\n          if (typeof getMaxListeners === 'function' && getMaxListeners(signal) === defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          } else if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n            setMaxListeners(100, signal)\n          }\n        } catch {}\n\n        util.addAbortListener(signal, abort)\n        requestFinalizer.register(ac, { signal, abort })\n      }\n    }\n\n    // 30. Set this\u2019s headers to a new Headers object with this\u2019s relevant\n    // Realm, whose header list is request\u2019s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers(kConstruct)\n    this[kHeaders][kHeadersList] = request.headersList\n    this[kHeaders][kGuard] = 'request'\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 31. If this\u2019s request\u2019s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this\u2019s request\u2019s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethodsSet.has(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this\u2019s headers\u2019s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors'\n    }\n\n    // 32. If init is not empty, then:\n    if (initHasKey) {\n      /** @type {HeadersList} */\n      const headersList = this[kHeaders][kHeadersList]\n      // 1. Let headers be a copy of this\u2019s headers and its associated header\n      // list.\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      const headers = init.headers !== undefined ? init.headers : new HeadersList(headersList)\n\n      // 3. Empty this\u2019s headers\u2019s header list.\n      headersList.clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header\u2019s name/header\u2019s value to this\u2019s headers.\n      if (headers instanceof HeadersList) {\n        for (const [key, val] of headers) {\n          headersList.append(key, val)\n        }\n        // Note: Copy the `set-cookie` meta-data.\n        headersList.cookies = headers.cookies\n      } else {\n        // 5. Otherwise, fill this\u2019s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input\u2019s request\u2019s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request\u2019s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      (init.body != null || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request\u2019s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this\u2019s headers\u2019s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this\u2019s headers.\n      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody\u2019s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.')\n      }\n\n      // 2. If this\u2019s request\u2019s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 3. Set this\u2019s request\u2019s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this\u2019s request\u2019s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  // Returns request\u2019s HTTP method, which is \"GET\" by default.\n  get method () {\n    webidl.brandCheck(this, Request)\n\n    // The method getter steps are to return this\u2019s request\u2019s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    webidl.brandCheck(this, Request)\n\n    // The url getter steps are to return this\u2019s request\u2019s URL, serialized.\n    return URLSerializer(this[kState].url)\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    webidl.brandCheck(this, Request)\n\n    // The headers getter steps are to return this\u2019s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    webidl.brandCheck(this, Request)\n\n    // The destination getter are to return this\u2019s request\u2019s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global\u2019s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this\u2019s request\u2019s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this\u2019s request\u2019s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this\u2019s request\u2019s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request\u2019s\n  // referrer.\n  get referrerPolicy () {\n    webidl.brandCheck(this, Request)\n\n    // The referrerPolicy getter steps are to return this\u2019s request\u2019s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    webidl.brandCheck(this, Request)\n\n    // The mode getter steps are to return this\u2019s request\u2019s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this\u2019s request\u2019s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser\u2019s cache when fetching.\n  get cache () {\n    webidl.brandCheck(this, Request)\n\n    // The cache getter steps are to return this\u2019s request\u2019s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    webidl.brandCheck(this, Request)\n\n    // The redirect getter steps are to return this\u2019s request\u2019s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request\u2019s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    webidl.brandCheck(this, Request)\n\n    // The integrity getter steps are to return this\u2019s request\u2019s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    webidl.brandCheck(this, Request)\n\n    // The keepalive getter steps are to return this\u2019s request\u2019s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isReloadNavigation getter steps are to return true if this\u2019s\n    // request\u2019s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isHistoryNavigation getter steps are to return true if this\u2019s request\u2019s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    webidl.brandCheck(this, Request)\n\n    // The signal getter steps are to return this\u2019s signal.\n    return this[kSignal]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Request)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Request)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  get duplex () {\n    webidl.brandCheck(this, Request)\n\n    return 'half'\n  }\n\n  // Returns a clone of request.\n  clone () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this\u2019s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this\u2019s headers\u2019s guard, and this\u2019s relevant Realm.\n    const clonedRequestObject = new Request(kConstruct)\n    clonedRequestObject[kState] = clonedRequest\n    clonedRequestObject[kRealm] = this[kRealm]\n    clonedRequestObject[kHeaders] = new Headers(kConstruct)\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    // 4. Make clonedRequestObject\u2019s signal follow this\u2019s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      util.addAbortListener(\n        this.signal,\n        () => {\n          ac.abort(this.signal.reason)\n        }\n      )\n    }\n    clonedRequestObject[kSignal] = ac.signal\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject\n  }\n}\n\nmixinBody(Request)\n\nfunction makeRequest (init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n  request.url = request.urlList[0]\n  return request\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request\u2019s body is non-null, set newRequest\u2019s body to the\n  // result of cloning request\u2019s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V)\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: referrerPolicy\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: requestMode\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: requestCredentials\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: requestCache\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: requestRedirect\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  },\n  {\n    key: 'duplex',\n    converter: webidl.converters.DOMString,\n    allowedValues: requestDuplex\n  }\n])\n\nmodule.exports = { Request, makeRequest }\n", "// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst {\n  Response,\n  makeNetworkError,\n  makeAppropriateNetworkError,\n  filterResponse,\n  makeResponse\n} = require('./response')\nconst { Headers } = require('./headers')\nconst { Request, makeRequest } = require('./request')\nconst zlib = require('zlib')\nconst {\n  bytesMatch,\n  makePolicyContainer,\n  clonePolicyContainer,\n  requestBadPort,\n  TAOCheck,\n  appendRequestOriginHeader,\n  responseLocationURL,\n  requestCurrentURL,\n  setRequestReferrerPolicyOnRedirect,\n  tryUpgradeRequestToAPotentiallyTrustworthyURL,\n  createOpaqueTimingInfo,\n  appendFetchMetadata,\n  corsCheck,\n  crossOriginResourcePolicyCheck,\n  determineRequestsReferrer,\n  coarsenedSharedCurrentTime,\n  createDeferredPromise,\n  isBlobLike,\n  sameOrigin,\n  isCancelled,\n  isAborted,\n  isErrorLike,\n  fullyReadBody,\n  readableStreamClose,\n  isomorphicEncode,\n  urlIsLocal,\n  urlIsHttpHttpsScheme,\n  urlHasHttpsScheme\n} = require('./util')\nconst { kState, kHeaders, kGuard, kRealm } = require('./symbols')\nconst assert = require('assert')\nconst { safelyExtractBody } = require('./body')\nconst {\n  redirectStatusSet,\n  nullBodyStatus,\n  safeMethodsSet,\n  requestBodyHeader,\n  subresourceSet,\n  DOMException\n} = require('./constants')\nconst { kHeadersList } = require('../core/symbols')\nconst EE = require('events')\nconst { Readable, pipeline } = require('stream')\nconst { addAbortListener, isErrored, isReadable, nodeMajor, nodeMinor } = require('../core/util')\nconst { dataURLProcessor, serializeAMimeType } = require('./dataURL')\nconst { TransformStream } = require('stream/web')\nconst { getGlobalDispatcher } = require('../global')\nconst { webidl } = require('./webidl')\nconst { STATUS_CODES } = require('http')\nconst GET_OR_HEAD = ['GET', 'HEAD']\n\n/** @type {import('buffer').resolveObjectURL} */\nlet resolveObjectURL\nlet ReadableStream = globalThis.ReadableStream\n\nclass Fetch extends EE {\n  constructor (dispatcher) {\n    super()\n\n    this.dispatcher = dispatcher\n    this.connection = null\n    this.dump = false\n    this.state = 'ongoing'\n    // 2 terminated listeners get added per request,\n    // but only 1 gets removed. If there are 20 redirects,\n    // 21 listeners will be added.\n    // See https://github.com/nodejs/undici/issues/1711\n    // TODO (fix): Find and fix root cause for leaked listener.\n    this.setMaxListeners(21)\n  }\n\n  terminate (reason) {\n    if (this.state !== 'ongoing') {\n      return\n    }\n\n    this.state = 'terminated'\n    this.connection?.destroy(reason)\n    this.emit('terminated', reason)\n  }\n\n  // https://fetch.spec.whatwg.org/#fetch-controller-abort\n  abort (error) {\n    if (this.state !== 'ongoing') {\n      return\n    }\n\n    // 1. Set controller\u2019s state to \"aborted\".\n    this.state = 'aborted'\n\n    // 2. Let fallbackError be an \"AbortError\" DOMException.\n    // 3. Set error to fallbackError if it is not given.\n    if (!error) {\n      error = new DOMException('The operation was aborted.', 'AbortError')\n    }\n\n    // 4. Let serializedError be StructuredSerialize(error).\n    //    If that threw an exception, catch it, and let\n    //    serializedError be StructuredSerialize(fallbackError).\n\n    // 5. Set controller\u2019s serialized abort reason to serializedError.\n    this.serializedAbortReason = error\n\n    this.connection?.destroy(error)\n    this.emit('terminated', error)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-method\nfunction fetch (input, init = {}) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'globalThis.fetch' })\n\n  // 1. Let p be a new promise.\n  const p = createDeferredPromise()\n\n  // 2. Let requestObject be the result of invoking the initial value of\n  // Request as constructor with input and init as arguments. If this throws\n  // an exception, reject p with it and return p.\n  let requestObject\n\n  try {\n    requestObject = new Request(input, init)\n  } catch (e) {\n    p.reject(e)\n    return p.promise\n  }\n\n  // 3. Let request be requestObject\u2019s request.\n  const request = requestObject[kState]\n\n  // 4. If requestObject\u2019s signal\u2019s aborted flag is set, then:\n  if (requestObject.signal.aborted) {\n    // 1. Abort the fetch() call with p, request, null, and\n    //    requestObject\u2019s signal\u2019s abort reason.\n    abortFetch(p, request, null, requestObject.signal.reason)\n\n    // 2. Return p.\n    return p.promise\n  }\n\n  // 5. Let globalObject be request\u2019s client\u2019s global object.\n  const globalObject = request.client.globalObject\n\n  // 6. If globalObject is a ServiceWorkerGlobalScope object, then set\n  // request\u2019s service-workers mode to \"none\".\n  if (globalObject?.constructor?.name === 'ServiceWorkerGlobalScope') {\n    request.serviceWorkers = 'none'\n  }\n\n  // 7. Let responseObject be null.\n  let responseObject = null\n\n  // 8. Let relevantRealm be this\u2019s relevant Realm.\n  const relevantRealm = null\n\n  // 9. Let locallyAborted be false.\n  let locallyAborted = false\n\n  // 10. Let controller be null.\n  let controller = null\n\n  // 11. Add the following abort steps to requestObject\u2019s signal:\n  addAbortListener(\n    requestObject.signal,\n    () => {\n      // 1. Set locallyAborted to true.\n      locallyAborted = true\n\n      // 2. Assert: controller is non-null.\n      assert(controller != null)\n\n      // 3. Abort controller with requestObject\u2019s signal\u2019s abort reason.\n      controller.abort(requestObject.signal.reason)\n\n      // 4. Abort the fetch() call with p, request, responseObject,\n      //    and requestObject\u2019s signal\u2019s abort reason.\n      abortFetch(p, request, responseObject, requestObject.signal.reason)\n    }\n  )\n\n  // 12. Let handleFetchDone given response response be to finalize and\n  // report timing with response, globalObject, and \"fetch\".\n  const handleFetchDone = (response) =>\n    finalizeAndReportTiming(response, 'fetch')\n\n  // 13. Set controller to the result of calling fetch given request,\n  // with processResponseEndOfBody set to handleFetchDone, and processResponse\n  // given response being these substeps:\n\n  const processResponse = (response) => {\n    // 1. If locallyAborted is true, terminate these substeps.\n    if (locallyAborted) {\n      return Promise.resolve()\n    }\n\n    // 2. If response\u2019s aborted flag is set, then:\n    if (response.aborted) {\n      // 1. Let deserializedError be the result of deserialize a serialized\n      //    abort reason given controller\u2019s serialized abort reason and\n      //    relevantRealm.\n\n      // 2. Abort the fetch() call with p, request, responseObject, and\n      //    deserializedError.\n\n      abortFetch(p, request, responseObject, controller.serializedAbortReason)\n      return Promise.resolve()\n    }\n\n    // 3. If response is a network error, then reject p with a TypeError\n    // and terminate these substeps.\n    if (response.type === 'error') {\n      p.reject(\n        Object.assign(new TypeError('fetch failed'), { cause: response.error })\n      )\n      return Promise.resolve()\n    }\n\n    // 4. Set responseObject to the result of creating a Response object,\n    // given response, \"immutable\", and relevantRealm.\n    responseObject = new Response()\n    responseObject[kState] = response\n    responseObject[kRealm] = relevantRealm\n    responseObject[kHeaders][kHeadersList] = response.headersList\n    responseObject[kHeaders][kGuard] = 'immutable'\n    responseObject[kHeaders][kRealm] = relevantRealm\n\n    // 5. Resolve p with responseObject.\n    p.resolve(responseObject)\n  }\n\n  controller = fetching({\n    request,\n    processResponseEndOfBody: handleFetchDone,\n    processResponse,\n    dispatcher: init.dispatcher ?? getGlobalDispatcher() // undici\n  })\n\n  // 14. Return p.\n  return p.promise\n}\n\n// https://fetch.spec.whatwg.org/#finalize-and-report-timing\nfunction finalizeAndReportTiming (response, initiatorType = 'other') {\n  // 1. If response is an aborted network error, then return.\n  if (response.type === 'error' && response.aborted) {\n    return\n  }\n\n  // 2. If response\u2019s URL list is null or empty, then return.\n  if (!response.urlList?.length) {\n    return\n  }\n\n  // 3. Let originalURL be response\u2019s URL list[0].\n  const originalURL = response.urlList[0]\n\n  // 4. Let timingInfo be response\u2019s timing info.\n  let timingInfo = response.timingInfo\n\n  // 5. Let cacheState be response\u2019s cache state.\n  let cacheState = response.cacheState\n\n  // 6. If originalURL\u2019s scheme is not an HTTP(S) scheme, then return.\n  if (!urlIsHttpHttpsScheme(originalURL)) {\n    return\n  }\n\n  // 7. If timingInfo is null, then return.\n  if (timingInfo === null) {\n    return\n  }\n\n  // 8. If response\u2019s timing allow passed flag is not set, then:\n  if (!response.timingAllowPassed) {\n    //  1. Set timingInfo to a the result of creating an opaque timing info for timingInfo.\n    timingInfo = createOpaqueTimingInfo({\n      startTime: timingInfo.startTime\n    })\n\n    //  2. Set cacheState to the empty string.\n    cacheState = ''\n  }\n\n  // 9. Set timingInfo\u2019s end time to the coarsened shared current time\n  // given global\u2019s relevant settings object\u2019s cross-origin isolated\n  // capability.\n  // TODO: given global\u2019s relevant settings object\u2019s cross-origin isolated\n  // capability?\n  timingInfo.endTime = coarsenedSharedCurrentTime()\n\n  // 10. Set response\u2019s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 11. Mark resource timing for timingInfo, originalURL, initiatorType,\n  // global, and cacheState.\n  markResourceTiming(\n    timingInfo,\n    originalURL,\n    initiatorType,\n    globalThis,\n    cacheState\n  )\n}\n\n// https://w3c.github.io/resource-timing/#dfn-mark-resource-timing\nfunction markResourceTiming (timingInfo, originalURL, initiatorType, globalThis, cacheState) {\n  if (nodeMajor > 18 || (nodeMajor === 18 && nodeMinor >= 2)) {\n    performance.markResourceTiming(timingInfo, originalURL.href, initiatorType, globalThis, cacheState)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#abort-fetch\nfunction abortFetch (p, request, responseObject, error) {\n  // Note: AbortSignal.reason was added in node v17.2.0\n  // which would give us an undefined error to reject with.\n  // Remove this once node v16 is no longer supported.\n  if (!error) {\n    error = new DOMException('The operation was aborted.', 'AbortError')\n  }\n\n  // 1. Reject promise with error.\n  p.reject(error)\n\n  // 2. If request\u2019s body is not null and is readable, then cancel request\u2019s\n  // body with error.\n  if (request.body != null && isReadable(request.body?.stream)) {\n    request.body.stream.cancel(error).catch((err) => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return\n      }\n      throw err\n    })\n  }\n\n  // 3. If responseObject is null, then return.\n  if (responseObject == null) {\n    return\n  }\n\n  // 4. Let response be responseObject\u2019s response.\n  const response = responseObject[kState]\n\n  // 5. If response\u2019s body is not null and is readable, then error response\u2019s\n  // body with error.\n  if (response.body != null && isReadable(response.body?.stream)) {\n    response.body.stream.cancel(error).catch((err) => {\n      if (err.code === 'ERR_INVALID_STATE') {\n        // Node bug?\n        return\n      }\n      throw err\n    })\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetching\nfunction fetching ({\n  request,\n  processRequestBodyChunkLength,\n  processRequestEndOfBody,\n  processResponse,\n  processResponseEndOfBody,\n  processResponseConsumeBody,\n  useParallelQueue = false,\n  dispatcher // undici\n}) {\n  // 1. Let taskDestination be null.\n  let taskDestination = null\n\n  // 2. Let crossOriginIsolatedCapability be false.\n  let crossOriginIsolatedCapability = false\n\n  // 3. If request\u2019s client is non-null, then:\n  if (request.client != null) {\n    // 1. Set taskDestination to request\u2019s client\u2019s global object.\n    taskDestination = request.client.globalObject\n\n    // 2. Set crossOriginIsolatedCapability to request\u2019s client\u2019s cross-origin\n    // isolated capability.\n    crossOriginIsolatedCapability =\n      request.client.crossOriginIsolatedCapability\n  }\n\n  // 4. If useParallelQueue is true, then set taskDestination to the result of\n  // starting a new parallel queue.\n  // TODO\n\n  // 5. Let timingInfo be a new fetch timing info whose start time and\n  // post-redirect start time are the coarsened shared current time given\n  // crossOriginIsolatedCapability.\n  const currenTime = coarsenedSharedCurrentTime(crossOriginIsolatedCapability)\n  const timingInfo = createOpaqueTimingInfo({\n    startTime: currenTime\n  })\n\n  // 6. Let fetchParams be a new fetch params whose\n  // request is request,\n  // timing info is timingInfo,\n  // process request body chunk length is processRequestBodyChunkLength,\n  // process request end-of-body is processRequestEndOfBody,\n  // process response is processResponse,\n  // process response consume body is processResponseConsumeBody,\n  // process response end-of-body is processResponseEndOfBody,\n  // task destination is taskDestination,\n  // and cross-origin isolated capability is crossOriginIsolatedCapability.\n  const fetchParams = {\n    controller: new Fetch(dispatcher),\n    request,\n    timingInfo,\n    processRequestBodyChunkLength,\n    processRequestEndOfBody,\n    processResponse,\n    processResponseConsumeBody,\n    processResponseEndOfBody,\n    taskDestination,\n    crossOriginIsolatedCapability\n  }\n\n  // 7. If request\u2019s body is a byte sequence, then set request\u2019s body to\n  //    request\u2019s body as a body.\n  // NOTE: Since fetching is only called from fetch, body should already be\n  // extracted.\n  assert(!request.body || request.body.stream)\n\n  // 8. If request\u2019s window is \"client\", then set request\u2019s window to request\u2019s\n  // client, if request\u2019s client\u2019s global object is a Window object; otherwise\n  // \"no-window\".\n  if (request.window === 'client') {\n    // TODO: What if request.client is null?\n    request.window =\n      request.client?.globalObject?.constructor?.name === 'Window'\n        ? request.client\n        : 'no-window'\n  }\n\n  // 9. If request\u2019s origin is \"client\", then set request\u2019s origin to request\u2019s\n  // client\u2019s origin.\n  if (request.origin === 'client') {\n    // TODO: What if request.client is null?\n    request.origin = request.client?.origin\n  }\n\n  // 10. If all of the following conditions are true:\n  // TODO\n\n  // 11. If request\u2019s policy container is \"client\", then:\n  if (request.policyContainer === 'client') {\n    // 1. If request\u2019s client is non-null, then set request\u2019s policy\n    // container to a clone of request\u2019s client\u2019s policy container. [HTML]\n    if (request.client != null) {\n      request.policyContainer = clonePolicyContainer(\n        request.client.policyContainer\n      )\n    } else {\n      // 2. Otherwise, set request\u2019s policy container to a new policy\n      // container.\n      request.policyContainer = makePolicyContainer()\n    }\n  }\n\n  // 12. If request\u2019s header list does not contain `Accept`, then:\n  if (!request.headersList.contains('accept')) {\n    // 1. Let value be `*/*`.\n    const value = '*/*'\n\n    // 2. A user agent should set value to the first matching statement, if\n    // any, switching on request\u2019s destination:\n    // \"document\"\n    // \"frame\"\n    // \"iframe\"\n    // `text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8`\n    // \"image\"\n    // `image/png,image/svg+xml,image/*;q=0.8,*/*;q=0.5`\n    // \"style\"\n    // `text/css,*/*;q=0.1`\n    // TODO\n\n    // 3. Append `Accept`/value to request\u2019s header list.\n    request.headersList.append('accept', value)\n  }\n\n  // 13. If request\u2019s header list does not contain `Accept-Language`, then\n  // user agents should append `Accept-Language`/an appropriate value to\n  // request\u2019s header list.\n  if (!request.headersList.contains('accept-language')) {\n    request.headersList.append('accept-language', '*')\n  }\n\n  // 14. If request\u2019s priority is null, then use request\u2019s initiator and\n  // destination appropriately in setting request\u2019s priority to a\n  // user-agent-defined object.\n  if (request.priority === null) {\n    // TODO\n  }\n\n  // 15. If request is a subresource request, then:\n  if (subresourceSet.has(request.destination)) {\n    // TODO\n  }\n\n  // 16. Run main fetch given fetchParams.\n  mainFetch(fetchParams)\n    .catch(err => {\n      fetchParams.controller.terminate(err)\n    })\n\n  // 17. Return fetchParam's controller\n  return fetchParams.controller\n}\n\n// https://fetch.spec.whatwg.org/#concept-main-fetch\nasync function mainFetch (fetchParams, recursive = false) {\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. If request\u2019s local-URLs-only flag is set and request\u2019s current URL is\n  // not local, then set response to a network error.\n  if (request.localURLsOnly && !urlIsLocal(requestCurrentURL(request))) {\n    response = makeNetworkError('local URLs only')\n  }\n\n  // 4. Run report Content Security Policy violations for request.\n  // TODO\n\n  // 5. Upgrade request to a potentially trustworthy URL, if appropriate.\n  tryUpgradeRequestToAPotentiallyTrustworthyURL(request)\n\n  // 6. If should request be blocked due to a bad port, should fetching request\n  // be blocked as mixed content, or should request be blocked by Content\n  // Security Policy returns blocked, then set response to a network error.\n  if (requestBadPort(request) === 'blocked') {\n    response = makeNetworkError('bad port')\n  }\n  // TODO: should fetching request be blocked as mixed content?\n  // TODO: should request be blocked by Content Security Policy?\n\n  // 7. If request\u2019s referrer policy is the empty string, then set request\u2019s\n  // referrer policy to request\u2019s policy container\u2019s referrer policy.\n  if (request.referrerPolicy === '') {\n    request.referrerPolicy = request.policyContainer.referrerPolicy\n  }\n\n  // 8. If request\u2019s referrer is not \"no-referrer\", then set request\u2019s\n  // referrer to the result of invoking determine request\u2019s referrer.\n  if (request.referrer !== 'no-referrer') {\n    request.referrer = determineRequestsReferrer(request)\n  }\n\n  // 9. Set request\u2019s current URL\u2019s scheme to \"https\" if all of the following\n  // conditions are true:\n  // - request\u2019s current URL\u2019s scheme is \"http\"\n  // - request\u2019s current URL\u2019s host is a domain\n  // - Matching request\u2019s current URL\u2019s host per Known HSTS Host Domain Name\n  //   Matching results in either a superdomain match with an asserted\n  //   includeSubDomains directive or a congruent match (with or without an\n  //   asserted includeSubDomains directive). [HSTS]\n  // TODO\n\n  // 10. If recursive is false, then run the remaining steps in parallel.\n  // TODO\n\n  // 11. If response is null, then set response to the result of running\n  // the steps corresponding to the first matching statement:\n  if (response === null) {\n    response = await (async () => {\n      const currentURL = requestCurrentURL(request)\n\n      if (\n        // - request\u2019s current URL\u2019s origin is same origin with request\u2019s origin,\n        //   and request\u2019s response tainting is \"basic\"\n        (sameOrigin(currentURL, request.url) && request.responseTainting === 'basic') ||\n        // request\u2019s current URL\u2019s scheme is \"data\"\n        (currentURL.protocol === 'data:') ||\n        // - request\u2019s mode is \"navigate\" or \"websocket\"\n        (request.mode === 'navigate' || request.mode === 'websocket')\n      ) {\n        // 1. Set request\u2019s response tainting to \"basic\".\n        request.responseTainting = 'basic'\n\n        // 2. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams)\n      }\n\n      // request\u2019s mode is \"same-origin\"\n      if (request.mode === 'same-origin') {\n        // 1. Return a network error.\n        return makeNetworkError('request mode cannot be \"same-origin\"')\n      }\n\n      // request\u2019s mode is \"no-cors\"\n      if (request.mode === 'no-cors') {\n        // 1. If request\u2019s redirect mode is not \"follow\", then return a network\n        // error.\n        if (request.redirect !== 'follow') {\n          return makeNetworkError(\n            'redirect mode cannot be \"follow\" for \"no-cors\" request'\n          )\n        }\n\n        // 2. Set request\u2019s response tainting to \"opaque\".\n        request.responseTainting = 'opaque'\n\n        // 3. Return the result of running scheme fetch given fetchParams.\n        return await schemeFetch(fetchParams)\n      }\n\n      // request\u2019s current URL\u2019s scheme is not an HTTP(S) scheme\n      if (!urlIsHttpHttpsScheme(requestCurrentURL(request))) {\n        // Return a network error.\n        return makeNetworkError('URL scheme must be a HTTP(S) scheme')\n      }\n\n      // - request\u2019s use-CORS-preflight flag is set\n      // - request\u2019s unsafe-request flag is set and either request\u2019s method is\n      //   not a CORS-safelisted method or CORS-unsafe request-header names with\n      //   request\u2019s header list is not empty\n      //    1. Set request\u2019s response tainting to \"cors\".\n      //    2. Let corsWithPreflightResponse be the result of running HTTP fetch\n      //    given fetchParams and true.\n      //    3. If corsWithPreflightResponse is a network error, then clear cache\n      //    entries using request.\n      //    4. Return corsWithPreflightResponse.\n      // TODO\n\n      // Otherwise\n      //    1. Set request\u2019s response tainting to \"cors\".\n      request.responseTainting = 'cors'\n\n      //    2. Return the result of running HTTP fetch given fetchParams.\n      return await httpFetch(fetchParams)\n    })()\n  }\n\n  // 12. If recursive is true, then return response.\n  if (recursive) {\n    return response\n  }\n\n  // 13. If response is not a network error and response is not a filtered\n  // response, then:\n  if (response.status !== 0 && !response.internalResponse) {\n    // If request\u2019s response tainting is \"cors\", then:\n    if (request.responseTainting === 'cors') {\n      // 1. Let headerNames be the result of extracting header list values\n      // given `Access-Control-Expose-Headers` and response\u2019s header list.\n      // TODO\n      // 2. If request\u2019s credentials mode is not \"include\" and headerNames\n      // contains `*`, then set response\u2019s CORS-exposed header-name list to\n      // all unique header names in response\u2019s header list.\n      // TODO\n      // 3. Otherwise, if headerNames is not null or failure, then set\n      // response\u2019s CORS-exposed header-name list to headerNames.\n      // TODO\n    }\n\n    // Set response to the following filtered response with response as its\n    // internal response, depending on request\u2019s response tainting:\n    if (request.responseTainting === 'basic') {\n      response = filterResponse(response, 'basic')\n    } else if (request.responseTainting === 'cors') {\n      response = filterResponse(response, 'cors')\n    } else if (request.responseTainting === 'opaque') {\n      response = filterResponse(response, 'opaque')\n    } else {\n      assert(false)\n    }\n  }\n\n  // 14. Let internalResponse be response, if response is a network error,\n  // and response\u2019s internal response otherwise.\n  let internalResponse =\n    response.status === 0 ? response : response.internalResponse\n\n  // 15. If internalResponse\u2019s URL list is empty, then set it to a clone of\n  // request\u2019s URL list.\n  if (internalResponse.urlList.length === 0) {\n    internalResponse.urlList.push(...request.urlList)\n  }\n\n  // 16. If request\u2019s timing allow failed flag is unset, then set\n  // internalResponse\u2019s timing allow passed flag.\n  if (!request.timingAllowFailed) {\n    response.timingAllowPassed = true\n  }\n\n  // 17. If response is not a network error and any of the following returns\n  // blocked\n  // - should internalResponse to request be blocked as mixed content\n  // - should internalResponse to request be blocked by Content Security Policy\n  // - should internalResponse to request be blocked due to its MIME type\n  // - should internalResponse to request be blocked due to nosniff\n  // TODO\n\n  // 18. If response\u2019s type is \"opaque\", internalResponse\u2019s status is 206,\n  // internalResponse\u2019s range-requested flag is set, and request\u2019s header\n  // list does not contain `Range`, then set response and internalResponse\n  // to a network error.\n  if (\n    response.type === 'opaque' &&\n    internalResponse.status === 206 &&\n    internalResponse.rangeRequested &&\n    !request.headers.contains('range')\n  ) {\n    response = internalResponse = makeNetworkError()\n  }\n\n  // 19. If response is not a network error and either request\u2019s method is\n  // `HEAD` or `CONNECT`, or internalResponse\u2019s status is a null body status,\n  // set internalResponse\u2019s body to null and disregard any enqueuing toward\n  // it (if any).\n  if (\n    response.status !== 0 &&\n    (request.method === 'HEAD' ||\n      request.method === 'CONNECT' ||\n      nullBodyStatus.includes(internalResponse.status))\n  ) {\n    internalResponse.body = null\n    fetchParams.controller.dump = true\n  }\n\n  // 20. If request\u2019s integrity metadata is not the empty string, then:\n  if (request.integrity) {\n    // 1. Let processBodyError be this step: run fetch finale given fetchParams\n    // and a network error.\n    const processBodyError = (reason) =>\n      fetchFinale(fetchParams, makeNetworkError(reason))\n\n    // 2. If request\u2019s response tainting is \"opaque\", or response\u2019s body is null,\n    // then run processBodyError and abort these steps.\n    if (request.responseTainting === 'opaque' || response.body == null) {\n      processBodyError(response.error)\n      return\n    }\n\n    // 3. Let processBody given bytes be these steps:\n    const processBody = (bytes) => {\n      // 1. If bytes do not match request\u2019s integrity metadata,\n      // then run processBodyError and abort these steps. [SRI]\n      if (!bytesMatch(bytes, request.integrity)) {\n        processBodyError('integrity mismatch')\n        return\n      }\n\n      // 2. Set response\u2019s body to bytes as a body.\n      response.body = safelyExtractBody(bytes)[0]\n\n      // 3. Run fetch finale given fetchParams and response.\n      fetchFinale(fetchParams, response)\n    }\n\n    // 4. Fully read response\u2019s body given processBody and processBodyError.\n    await fullyReadBody(response.body, processBody, processBodyError)\n  } else {\n    // 21. Otherwise, run fetch finale given fetchParams and response.\n    fetchFinale(fetchParams, response)\n  }\n}\n\n// https://fetch.spec.whatwg.org/#concept-scheme-fetch\n// given a fetch params fetchParams\nfunction schemeFetch (fetchParams) {\n  // Note: since the connection is destroyed on redirect, which sets fetchParams to a\n  // cancelled state, we do not want this condition to trigger *unless* there have been\n  // no redirects. See https://github.com/nodejs/undici/issues/1776\n  // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n  if (isCancelled(fetchParams) && fetchParams.request.redirectCount === 0) {\n    return Promise.resolve(makeAppropriateNetworkError(fetchParams))\n  }\n\n  // 2. Let request be fetchParams\u2019s request.\n  const { request } = fetchParams\n\n  const { protocol: scheme } = requestCurrentURL(request)\n\n  // 3. Switch on request\u2019s current URL\u2019s scheme and run the associated steps:\n  switch (scheme) {\n    case 'about:': {\n      // If request\u2019s current URL\u2019s path is the string \"blank\", then return a new response\n      // whose status message is `OK`, header list is \u00AB (`Content-Type`, `text/html;charset=utf-8`) \u00BB,\n      // and body is the empty byte sequence as a body.\n\n      // Otherwise, return a network error.\n      return Promise.resolve(makeNetworkError('about scheme is not supported'))\n    }\n    case 'blob:': {\n      if (!resolveObjectURL) {\n        resolveObjectURL = require('buffer').resolveObjectURL\n      }\n\n      // 1. Let blobURLEntry be request\u2019s current URL\u2019s blob URL entry.\n      const blobURLEntry = requestCurrentURL(request)\n\n      // https://github.com/web-platform-tests/wpt/blob/7b0ebaccc62b566a1965396e5be7bb2bc06f841f/FileAPI/url/resources/fetch-tests.js#L52-L56\n      // Buffer.resolveObjectURL does not ignore URL queries.\n      if (blobURLEntry.search.length !== 0) {\n        return Promise.resolve(makeNetworkError('NetworkError when attempting to fetch resource.'))\n      }\n\n      const blobURLEntryObject = resolveObjectURL(blobURLEntry.toString())\n\n      // 2. If request\u2019s method is not `GET`, blobURLEntry is null, or blobURLEntry\u2019s\n      //    object is not a Blob object, then return a network error.\n      if (request.method !== 'GET' || !isBlobLike(blobURLEntryObject)) {\n        return Promise.resolve(makeNetworkError('invalid method'))\n      }\n\n      // 3. Let bodyWithType be the result of safely extracting blobURLEntry\u2019s object.\n      const bodyWithType = safelyExtractBody(blobURLEntryObject)\n\n      // 4. Let body be bodyWithType\u2019s body.\n      const body = bodyWithType[0]\n\n      // 5. Let length be body\u2019s length, serialized and isomorphic encoded.\n      const length = isomorphicEncode(`${body.length}`)\n\n      // 6. Let type be bodyWithType\u2019s type if it is non-null; otherwise the empty byte sequence.\n      const type = bodyWithType[1] ?? ''\n\n      // 7. Return a new response whose status message is `OK`, header list is\n      //    \u00AB (`Content-Length`, length), (`Content-Type`, type) \u00BB, and body is body.\n      const response = makeResponse({\n        statusText: 'OK',\n        headersList: [\n          ['content-length', { name: 'Content-Length', value: length }],\n          ['content-type', { name: 'Content-Type', value: type }]\n        ]\n      })\n\n      response.body = body\n\n      return Promise.resolve(response)\n    }\n    case 'data:': {\n      // 1. Let dataURLStruct be the result of running the\n      //    data: URL processor on request\u2019s current URL.\n      const currentURL = requestCurrentURL(request)\n      const dataURLStruct = dataURLProcessor(currentURL)\n\n      // 2. If dataURLStruct is failure, then return a\n      //    network error.\n      if (dataURLStruct === 'failure') {\n        return Promise.resolve(makeNetworkError('failed to fetch the data URL'))\n      }\n\n      // 3. Let mimeType be dataURLStruct\u2019s MIME type, serialized.\n      const mimeType = serializeAMimeType(dataURLStruct.mimeType)\n\n      // 4. Return a response whose status message is `OK`,\n      //    header list is \u00AB (`Content-Type`, mimeType) \u00BB,\n      //    and body is dataURLStruct\u2019s body as a body.\n      return Promise.resolve(makeResponse({\n        statusText: 'OK',\n        headersList: [\n          ['content-type', { name: 'Content-Type', value: mimeType }]\n        ],\n        body: safelyExtractBody(dataURLStruct.body)[0]\n      }))\n    }\n    case 'file:': {\n      // For now, unfortunate as it is, file URLs are left as an exercise for the reader.\n      // When in doubt, return a network error.\n      return Promise.resolve(makeNetworkError('not implemented... yet...'))\n    }\n    case 'http:':\n    case 'https:': {\n      // Return the result of running HTTP fetch given fetchParams.\n\n      return httpFetch(fetchParams)\n        .catch((err) => makeNetworkError(err))\n    }\n    default: {\n      return Promise.resolve(makeNetworkError('unknown scheme'))\n    }\n  }\n}\n\n// https://fetch.spec.whatwg.org/#finalize-response\nfunction finalizeResponse (fetchParams, response) {\n  // 1. Set fetchParams\u2019s request\u2019s done flag.\n  fetchParams.request.done = true\n\n  // 2, If fetchParams\u2019s process response done is not null, then queue a fetch\n  // task to run fetchParams\u2019s process response done given response, with\n  // fetchParams\u2019s task destination.\n  if (fetchParams.processResponseDone != null) {\n    queueMicrotask(() => fetchParams.processResponseDone(response))\n  }\n}\n\n// https://fetch.spec.whatwg.org/#fetch-finale\nfunction fetchFinale (fetchParams, response) {\n  // 1. If response is a network error, then:\n  if (response.type === 'error') {\n    // 1. Set response\u2019s URL list to \u00AB fetchParams\u2019s request\u2019s URL list[0] \u00BB.\n    response.urlList = [fetchParams.request.urlList[0]]\n\n    // 2. Set response\u2019s timing info to the result of creating an opaque timing\n    // info for fetchParams\u2019s timing info.\n    response.timingInfo = createOpaqueTimingInfo({\n      startTime: fetchParams.timingInfo.startTime\n    })\n  }\n\n  // 2. Let processResponseEndOfBody be the following steps:\n  const processResponseEndOfBody = () => {\n    // 1. Set fetchParams\u2019s request\u2019s done flag.\n    fetchParams.request.done = true\n\n    // If fetchParams\u2019s process response end-of-body is not null,\n    // then queue a fetch task to run fetchParams\u2019s process response\n    // end-of-body given response with fetchParams\u2019s task destination.\n    if (fetchParams.processResponseEndOfBody != null) {\n      queueMicrotask(() => fetchParams.processResponseEndOfBody(response))\n    }\n  }\n\n  // 3. If fetchParams\u2019s process response is non-null, then queue a fetch task\n  // to run fetchParams\u2019s process response given response, with fetchParams\u2019s\n  // task destination.\n  if (fetchParams.processResponse != null) {\n    queueMicrotask(() => fetchParams.processResponse(response))\n  }\n\n  // 4. If response\u2019s body is null, then run processResponseEndOfBody.\n  if (response.body == null) {\n    processResponseEndOfBody()\n  } else {\n  // 5. Otherwise:\n\n    // 1. Let transformStream be a new a TransformStream.\n\n    // 2. Let identityTransformAlgorithm be an algorithm which, given chunk,\n    // enqueues chunk in transformStream.\n    const identityTransformAlgorithm = (chunk, controller) => {\n      controller.enqueue(chunk)\n    }\n\n    // 3. Set up transformStream with transformAlgorithm set to identityTransformAlgorithm\n    // and flushAlgorithm set to processResponseEndOfBody.\n    const transformStream = new TransformStream({\n      start () {},\n      transform: identityTransformAlgorithm,\n      flush: processResponseEndOfBody\n    }, {\n      size () {\n        return 1\n      }\n    }, {\n      size () {\n        return 1\n      }\n    })\n\n    // 4. Set response\u2019s body to the result of piping response\u2019s body through transformStream.\n    response.body = { stream: response.body.stream.pipeThrough(transformStream) }\n  }\n\n  // 6. If fetchParams\u2019s process response consume body is non-null, then:\n  if (fetchParams.processResponseConsumeBody != null) {\n    // 1. Let processBody given nullOrBytes be this step: run fetchParams\u2019s\n    // process response consume body given response and nullOrBytes.\n    const processBody = (nullOrBytes) => fetchParams.processResponseConsumeBody(response, nullOrBytes)\n\n    // 2. Let processBodyError be this step: run fetchParams\u2019s process\n    // response consume body given response and failure.\n    const processBodyError = (failure) => fetchParams.processResponseConsumeBody(response, failure)\n\n    // 3. If response\u2019s body is null, then queue a fetch task to run processBody\n    // given null, with fetchParams\u2019s task destination.\n    if (response.body == null) {\n      queueMicrotask(() => processBody(null))\n    } else {\n      // 4. Otherwise, fully read response\u2019s body given processBody, processBodyError,\n      // and fetchParams\u2019s task destination.\n      return fullyReadBody(response.body, processBody, processBodyError)\n    }\n    return Promise.resolve()\n  }\n}\n\n// https://fetch.spec.whatwg.org/#http-fetch\nasync function httpFetch (fetchParams) {\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let actualResponse be null.\n  let actualResponse = null\n\n  // 4. Let timingInfo be fetchParams\u2019s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 5. If request\u2019s service-workers mode is \"all\", then:\n  if (request.serviceWorkers === 'all') {\n    // TODO\n  }\n\n  // 6. If response is null, then:\n  if (response === null) {\n    // 1. If makeCORSPreflight is true and one of these conditions is true:\n    // TODO\n\n    // 2. If request\u2019s redirect mode is \"follow\", then set request\u2019s\n    // service-workers mode to \"none\".\n    if (request.redirect === 'follow') {\n      request.serviceWorkers = 'none'\n    }\n\n    // 3. Set response and actualResponse to the result of running\n    // HTTP-network-or-cache fetch given fetchParams.\n    actualResponse = response = await httpNetworkOrCacheFetch(fetchParams)\n\n    // 4. If request\u2019s response tainting is \"cors\" and a CORS check\n    // for request and response returns failure, then return a network error.\n    if (\n      request.responseTainting === 'cors' &&\n      corsCheck(request, response) === 'failure'\n    ) {\n      return makeNetworkError('cors failure')\n    }\n\n    // 5. If the TAO check for request and response returns failure, then set\n    // request\u2019s timing allow failed flag.\n    if (TAOCheck(request, response) === 'failure') {\n      request.timingAllowFailed = true\n    }\n  }\n\n  // 7. If either request\u2019s response tainting or response\u2019s type\n  // is \"opaque\", and the cross-origin resource policy check with\n  // request\u2019s origin, request\u2019s client, request\u2019s destination,\n  // and actualResponse returns blocked, then return a network error.\n  if (\n    (request.responseTainting === 'opaque' || response.type === 'opaque') &&\n    crossOriginResourcePolicyCheck(\n      request.origin,\n      request.client,\n      request.destination,\n      actualResponse\n    ) === 'blocked'\n  ) {\n    return makeNetworkError('blocked')\n  }\n\n  // 8. If actualResponse\u2019s status is a redirect status, then:\n  if (redirectStatusSet.has(actualResponse.status)) {\n    // 1. If actualResponse\u2019s status is not 303, request\u2019s body is not null,\n    // and the connection uses HTTP/2, then user agents may, and are even\n    // encouraged to, transmit an RST_STREAM frame.\n    // See, https://github.com/whatwg/fetch/issues/1288\n    if (request.redirect !== 'manual') {\n      fetchParams.controller.connection.destroy()\n    }\n\n    // 2. Switch on request\u2019s redirect mode:\n    if (request.redirect === 'error') {\n      // Set response to a network error.\n      response = makeNetworkError('unexpected redirect')\n    } else if (request.redirect === 'manual') {\n      // Set response to an opaque-redirect filtered response whose internal\n      // response is actualResponse.\n      // NOTE(spec): On the web this would return an `opaqueredirect` response,\n      // but that doesn't make sense server side.\n      // See https://github.com/nodejs/undici/issues/1193.\n      response = actualResponse\n    } else if (request.redirect === 'follow') {\n      // Set response to the result of running HTTP-redirect fetch given\n      // fetchParams and response.\n      response = await httpRedirectFetch(fetchParams, response)\n    } else {\n      assert(false)\n    }\n  }\n\n  // 9. Set response\u2019s timing info to timingInfo.\n  response.timingInfo = timingInfo\n\n  // 10. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-redirect-fetch\nfunction httpRedirectFetch (fetchParams, response) {\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let actualResponse be response, if response is not a filtered response,\n  // and response\u2019s internal response otherwise.\n  const actualResponse = response.internalResponse\n    ? response.internalResponse\n    : response\n\n  // 3. Let locationURL be actualResponse\u2019s location URL given request\u2019s current\n  // URL\u2019s fragment.\n  let locationURL\n\n  try {\n    locationURL = responseLocationURL(\n      actualResponse,\n      requestCurrentURL(request).hash\n    )\n\n    // 4. If locationURL is null, then return response.\n    if (locationURL == null) {\n      return response\n    }\n  } catch (err) {\n    // 5. If locationURL is failure, then return a network error.\n    return Promise.resolve(makeNetworkError(err))\n  }\n\n  // 6. If locationURL\u2019s scheme is not an HTTP(S) scheme, then return a network\n  // error.\n  if (!urlIsHttpHttpsScheme(locationURL)) {\n    return Promise.resolve(makeNetworkError('URL scheme must be a HTTP(S) scheme'))\n  }\n\n  // 7. If request\u2019s redirect count is 20, then return a network error.\n  if (request.redirectCount === 20) {\n    return Promise.resolve(makeNetworkError('redirect count exceeded'))\n  }\n\n  // 8. Increase request\u2019s redirect count by 1.\n  request.redirectCount += 1\n\n  // 9. If request\u2019s mode is \"cors\", locationURL includes credentials, and\n  // request\u2019s origin is not same origin with locationURL\u2019s origin, then return\n  //  a network error.\n  if (\n    request.mode === 'cors' &&\n    (locationURL.username || locationURL.password) &&\n    !sameOrigin(request, locationURL)\n  ) {\n    return Promise.resolve(makeNetworkError('cross origin not allowed for request mode \"cors\"'))\n  }\n\n  // 10. If request\u2019s response tainting is \"cors\" and locationURL includes\n  // credentials, then return a network error.\n  if (\n    request.responseTainting === 'cors' &&\n    (locationURL.username || locationURL.password)\n  ) {\n    return Promise.resolve(makeNetworkError(\n      'URL cannot contain credentials for request mode \"cors\"'\n    ))\n  }\n\n  // 11. If actualResponse\u2019s status is not 303, request\u2019s body is non-null,\n  // and request\u2019s body\u2019s source is null, then return a network error.\n  if (\n    actualResponse.status !== 303 &&\n    request.body != null &&\n    request.body.source == null\n  ) {\n    return Promise.resolve(makeNetworkError())\n  }\n\n  // 12. If one of the following is true\n  // - actualResponse\u2019s status is 301 or 302 and request\u2019s method is `POST`\n  // - actualResponse\u2019s status is 303 and request\u2019s method is not `GET` or `HEAD`\n  if (\n    ([301, 302].includes(actualResponse.status) && request.method === 'POST') ||\n    (actualResponse.status === 303 &&\n      !GET_OR_HEAD.includes(request.method))\n  ) {\n    // then:\n    // 1. Set request\u2019s method to `GET` and request\u2019s body to null.\n    request.method = 'GET'\n    request.body = null\n\n    // 2. For each headerName of request-body-header name, delete headerName from\n    // request\u2019s header list.\n    for (const headerName of requestBodyHeader) {\n      request.headersList.delete(headerName)\n    }\n  }\n\n  // 13. If request\u2019s current URL\u2019s origin is not same origin with locationURL\u2019s\n  //     origin, then for each headerName of CORS non-wildcard request-header name,\n  //     delete headerName from request\u2019s header list.\n  if (!sameOrigin(requestCurrentURL(request), locationURL)) {\n    // https://fetch.spec.whatwg.org/#cors-non-wildcard-request-header-name\n    request.headersList.delete('authorization')\n\n    // https://fetch.spec.whatwg.org/#authentication-entries\n    request.headersList.delete('proxy-authorization', true)\n\n    // \"Cookie\" and \"Host\" are forbidden request-headers, which undici doesn't implement.\n    request.headersList.delete('cookie')\n    request.headersList.delete('host')\n  }\n\n  // 14. If request\u2019s body is non-null, then set request\u2019s body to the first return\n  // value of safely extracting request\u2019s body\u2019s source.\n  if (request.body != null) {\n    assert(request.body.source != null)\n    request.body = safelyExtractBody(request.body.source)[0]\n  }\n\n  // 15. Let timingInfo be fetchParams\u2019s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 16. Set timingInfo\u2019s redirect end time and post-redirect start time to the\n  // coarsened shared current time given fetchParams\u2019s cross-origin isolated\n  // capability.\n  timingInfo.redirectEndTime = timingInfo.postRedirectStartTime =\n    coarsenedSharedCurrentTime(fetchParams.crossOriginIsolatedCapability)\n\n  // 17. If timingInfo\u2019s redirect start time is 0, then set timingInfo\u2019s\n  //  redirect start time to timingInfo\u2019s start time.\n  if (timingInfo.redirectStartTime === 0) {\n    timingInfo.redirectStartTime = timingInfo.startTime\n  }\n\n  // 18. Append locationURL to request\u2019s URL list.\n  request.urlList.push(locationURL)\n\n  // 19. Invoke set request\u2019s referrer policy on redirect on request and\n  // actualResponse.\n  setRequestReferrerPolicyOnRedirect(request, actualResponse)\n\n  // 20. Return the result of running main fetch given fetchParams and true.\n  return mainFetch(fetchParams, true)\n}\n\n// https://fetch.spec.whatwg.org/#http-network-or-cache-fetch\nasync function httpNetworkOrCacheFetch (\n  fetchParams,\n  isAuthenticationFetch = false,\n  isNewConnectionFetch = false\n) {\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let httpFetchParams be null.\n  let httpFetchParams = null\n\n  // 3. Let httpRequest be null.\n  let httpRequest = null\n\n  // 4. Let response be null.\n  let response = null\n\n  // 5. Let storedResponse be null.\n  // TODO: cache\n\n  // 6. Let httpCache be null.\n  const httpCache = null\n\n  // 7. Let the revalidatingFlag be unset.\n  const revalidatingFlag = false\n\n  // 8. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If request\u2019s window is \"no-window\" and request\u2019s redirect mode is\n  //    \"error\", then set httpFetchParams to fetchParams and httpRequest to\n  //    request.\n  if (request.window === 'no-window' && request.redirect === 'error') {\n    httpFetchParams = fetchParams\n    httpRequest = request\n  } else {\n    // Otherwise:\n\n    // 1. Set httpRequest to a clone of request.\n    httpRequest = makeRequest(request)\n\n    // 2. Set httpFetchParams to a copy of fetchParams.\n    httpFetchParams = { ...fetchParams }\n\n    // 3. Set httpFetchParams\u2019s request to httpRequest.\n    httpFetchParams.request = httpRequest\n  }\n\n  //    3. Let includeCredentials be true if one of\n  const includeCredentials =\n    request.credentials === 'include' ||\n    (request.credentials === 'same-origin' &&\n      request.responseTainting === 'basic')\n\n  //    4. Let contentLength be httpRequest\u2019s body\u2019s length, if httpRequest\u2019s\n  //    body is non-null; otherwise null.\n  const contentLength = httpRequest.body ? httpRequest.body.length : null\n\n  //    5. Let contentLengthHeaderValue be null.\n  let contentLengthHeaderValue = null\n\n  //    6. If httpRequest\u2019s body is null and httpRequest\u2019s method is `POST` or\n  //    `PUT`, then set contentLengthHeaderValue to `0`.\n  if (\n    httpRequest.body == null &&\n    ['POST', 'PUT'].includes(httpRequest.method)\n  ) {\n    contentLengthHeaderValue = '0'\n  }\n\n  //    7. If contentLength is non-null, then set contentLengthHeaderValue to\n  //    contentLength, serialized and isomorphic encoded.\n  if (contentLength != null) {\n    contentLengthHeaderValue = isomorphicEncode(`${contentLength}`)\n  }\n\n  //    8. If contentLengthHeaderValue is non-null, then append\n  //    `Content-Length`/contentLengthHeaderValue to httpRequest\u2019s header\n  //    list.\n  if (contentLengthHeaderValue != null) {\n    httpRequest.headersList.append('content-length', contentLengthHeaderValue)\n  }\n\n  //    9. If contentLengthHeaderValue is non-null, then append (`Content-Length`,\n  //    contentLengthHeaderValue) to httpRequest\u2019s header list.\n\n  //    10. If contentLength is non-null and httpRequest\u2019s keepalive is true,\n  //    then:\n  if (contentLength != null && httpRequest.keepalive) {\n    // NOTE: keepalive is a noop outside of browser context.\n  }\n\n  //    11. If httpRequest\u2019s referrer is a URL, then append\n  //    `Referer`/httpRequest\u2019s referrer, serialized and isomorphic encoded,\n  //     to httpRequest\u2019s header list.\n  if (httpRequest.referrer instanceof URL) {\n    httpRequest.headersList.append('referer', isomorphicEncode(httpRequest.referrer.href))\n  }\n\n  //    12. Append a request `Origin` header for httpRequest.\n  appendRequestOriginHeader(httpRequest)\n\n  //    13. Append the Fetch metadata headers for httpRequest. [FETCH-METADATA]\n  appendFetchMetadata(httpRequest)\n\n  //    14. If httpRequest\u2019s header list does not contain `User-Agent`, then\n  //    user agents should append `User-Agent`/default `User-Agent` value to\n  //    httpRequest\u2019s header list.\n  if (!httpRequest.headersList.contains('user-agent')) {\n    httpRequest.headersList.append('user-agent', typeof esbuildDetection === 'undefined' ? 'undici' : 'node')\n  }\n\n  //    15. If httpRequest\u2019s cache mode is \"default\" and httpRequest\u2019s header\n  //    list contains `If-Modified-Since`, `If-None-Match`,\n  //    `If-Unmodified-Since`, `If-Match`, or `If-Range`, then set\n  //    httpRequest\u2019s cache mode to \"no-store\".\n  if (\n    httpRequest.cache === 'default' &&\n    (httpRequest.headersList.contains('if-modified-since') ||\n      httpRequest.headersList.contains('if-none-match') ||\n      httpRequest.headersList.contains('if-unmodified-since') ||\n      httpRequest.headersList.contains('if-match') ||\n      httpRequest.headersList.contains('if-range'))\n  ) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    16. If httpRequest\u2019s cache mode is \"no-cache\", httpRequest\u2019s prevent\n  //    no-cache cache-control header modification flag is unset, and\n  //    httpRequest\u2019s header list does not contain `Cache-Control`, then append\n  //    `Cache-Control`/`max-age=0` to httpRequest\u2019s header list.\n  if (\n    httpRequest.cache === 'no-cache' &&\n    !httpRequest.preventNoCacheCacheControlHeaderModification &&\n    !httpRequest.headersList.contains('cache-control')\n  ) {\n    httpRequest.headersList.append('cache-control', 'max-age=0')\n  }\n\n  //    17. If httpRequest\u2019s cache mode is \"no-store\" or \"reload\", then:\n  if (httpRequest.cache === 'no-store' || httpRequest.cache === 'reload') {\n    // 1. If httpRequest\u2019s header list does not contain `Pragma`, then append\n    // `Pragma`/`no-cache` to httpRequest\u2019s header list.\n    if (!httpRequest.headersList.contains('pragma')) {\n      httpRequest.headersList.append('pragma', 'no-cache')\n    }\n\n    // 2. If httpRequest\u2019s header list does not contain `Cache-Control`,\n    // then append `Cache-Control`/`no-cache` to httpRequest\u2019s header list.\n    if (!httpRequest.headersList.contains('cache-control')) {\n      httpRequest.headersList.append('cache-control', 'no-cache')\n    }\n  }\n\n  //    18. If httpRequest\u2019s header list contains `Range`, then append\n  //    `Accept-Encoding`/`identity` to httpRequest\u2019s header list.\n  if (httpRequest.headersList.contains('range')) {\n    httpRequest.headersList.append('accept-encoding', 'identity')\n  }\n\n  //    19. Modify httpRequest\u2019s header list per HTTP. Do not append a given\n  //    header if httpRequest\u2019s header list contains that header\u2019s name.\n  //    TODO: https://github.com/whatwg/fetch/issues/1285#issuecomment-896560129\n  if (!httpRequest.headersList.contains('accept-encoding')) {\n    if (urlHasHttpsScheme(requestCurrentURL(httpRequest))) {\n      httpRequest.headersList.append('accept-encoding', 'br, gzip, deflate')\n    } else {\n      httpRequest.headersList.append('accept-encoding', 'gzip, deflate')\n    }\n  }\n\n  httpRequest.headersList.delete('host')\n\n  //    20. If includeCredentials is true, then:\n  if (includeCredentials) {\n    // 1. If the user agent is not configured to block cookies for httpRequest\n    // (see section 7 of [COOKIES]), then:\n    // TODO: credentials\n    // 2. If httpRequest\u2019s header list does not contain `Authorization`, then:\n    // TODO: credentials\n  }\n\n  //    21. If there\u2019s a proxy-authentication entry, use it as appropriate.\n  //    TODO: proxy-authentication\n\n  //    22. Set httpCache to the result of determining the HTTP cache\n  //    partition, given httpRequest.\n  //    TODO: cache\n\n  //    23. If httpCache is null, then set httpRequest\u2019s cache mode to\n  //    \"no-store\".\n  if (httpCache == null) {\n    httpRequest.cache = 'no-store'\n  }\n\n  //    24. If httpRequest\u2019s cache mode is neither \"no-store\" nor \"reload\",\n  //    then:\n  if (httpRequest.mode !== 'no-store' && httpRequest.mode !== 'reload') {\n    // TODO: cache\n  }\n\n  // 9. If aborted, then return the appropriate network error for fetchParams.\n  // TODO\n\n  // 10. If response is null, then:\n  if (response == null) {\n    // 1. If httpRequest\u2019s cache mode is \"only-if-cached\", then return a\n    // network error.\n    if (httpRequest.mode === 'only-if-cached') {\n      return makeNetworkError('only if cached')\n    }\n\n    // 2. Let forwardResponse be the result of running HTTP-network fetch\n    // given httpFetchParams, includeCredentials, and isNewConnectionFetch.\n    const forwardResponse = await httpNetworkFetch(\n      httpFetchParams,\n      includeCredentials,\n      isNewConnectionFetch\n    )\n\n    // 3. If httpRequest\u2019s method is unsafe and forwardResponse\u2019s status is\n    // in the range 200 to 399, inclusive, invalidate appropriate stored\n    // responses in httpCache, as per the \"Invalidation\" chapter of HTTP\n    // Caching, and set storedResponse to null. [HTTP-CACHING]\n    if (\n      !safeMethodsSet.has(httpRequest.method) &&\n      forwardResponse.status >= 200 &&\n      forwardResponse.status <= 399\n    ) {\n      // TODO: cache\n    }\n\n    // 4. If the revalidatingFlag is set and forwardResponse\u2019s status is 304,\n    // then:\n    if (revalidatingFlag && forwardResponse.status === 304) {\n      // TODO: cache\n    }\n\n    // 5. If response is null, then:\n    if (response == null) {\n      // 1. Set response to forwardResponse.\n      response = forwardResponse\n\n      // 2. Store httpRequest and forwardResponse in httpCache, as per the\n      // \"Storing Responses in Caches\" chapter of HTTP Caching. [HTTP-CACHING]\n      // TODO: cache\n    }\n  }\n\n  // 11. Set response\u2019s URL list to a clone of httpRequest\u2019s URL list.\n  response.urlList = [...httpRequest.urlList]\n\n  // 12. If httpRequest\u2019s header list contains `Range`, then set response\u2019s\n  // range-requested flag.\n  if (httpRequest.headersList.contains('range')) {\n    response.rangeRequested = true\n  }\n\n  // 13. Set response\u2019s request-includes-credentials to includeCredentials.\n  response.requestIncludesCredentials = includeCredentials\n\n  // 14. If response\u2019s status is 401, httpRequest\u2019s response tainting is not\n  // \"cors\", includeCredentials is true, and request\u2019s window is an environment\n  // settings object, then:\n  // TODO\n\n  // 15. If response\u2019s status is 407, then:\n  if (response.status === 407) {\n    // 1. If request\u2019s window is \"no-window\", then return a network error.\n    if (request.window === 'no-window') {\n      return makeNetworkError()\n    }\n\n    // 2. ???\n\n    // 3. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    // 4. Prompt the end user as appropriate in request\u2019s window and store\n    // the result as a proxy-authentication entry. [HTTP-AUTH]\n    // TODO: Invoke some kind of callback?\n\n    // 5. Set response to the result of running HTTP-network-or-cache fetch given\n    // fetchParams.\n    // TODO\n    return makeNetworkError('proxy authentication required')\n  }\n\n  // 16. If all of the following are true\n  if (\n    // response\u2019s status is 421\n    response.status === 421 &&\n    // isNewConnectionFetch is false\n    !isNewConnectionFetch &&\n    // request\u2019s body is null, or request\u2019s body is non-null and request\u2019s body\u2019s source is non-null\n    (request.body == null || request.body.source != null)\n  ) {\n    // then:\n\n    // 1. If fetchParams is canceled, then return the appropriate network error for fetchParams.\n    if (isCancelled(fetchParams)) {\n      return makeAppropriateNetworkError(fetchParams)\n    }\n\n    // 2. Set response to the result of running HTTP-network-or-cache\n    // fetch given fetchParams, isAuthenticationFetch, and true.\n\n    // TODO (spec): The spec doesn't specify this but we need to cancel\n    // the active response before we can start a new one.\n    // https://github.com/whatwg/fetch/issues/1293\n    fetchParams.controller.connection.destroy()\n\n    response = await httpNetworkOrCacheFetch(\n      fetchParams,\n      isAuthenticationFetch,\n      true\n    )\n  }\n\n  // 17. If isAuthenticationFetch is true, then create an authentication entry\n  if (isAuthenticationFetch) {\n    // TODO\n  }\n\n  // 18. Return response.\n  return response\n}\n\n// https://fetch.spec.whatwg.org/#http-network-fetch\nasync function httpNetworkFetch (\n  fetchParams,\n  includeCredentials = false,\n  forceNewConnection = false\n) {\n  assert(!fetchParams.controller.connection || fetchParams.controller.connection.destroyed)\n\n  fetchParams.controller.connection = {\n    abort: null,\n    destroyed: false,\n    destroy (err) {\n      if (!this.destroyed) {\n        this.destroyed = true\n        this.abort?.(err ?? new DOMException('The operation was aborted.', 'AbortError'))\n      }\n    }\n  }\n\n  // 1. Let request be fetchParams\u2019s request.\n  const request = fetchParams.request\n\n  // 2. Let response be null.\n  let response = null\n\n  // 3. Let timingInfo be fetchParams\u2019s timing info.\n  const timingInfo = fetchParams.timingInfo\n\n  // 4. Let httpCache be the result of determining the HTTP cache partition,\n  // given request.\n  // TODO: cache\n  const httpCache = null\n\n  // 5. If httpCache is null, then set request\u2019s cache mode to \"no-store\".\n  if (httpCache == null) {\n    request.cache = 'no-store'\n  }\n\n  // 6. Let networkPartitionKey be the result of determining the network\n  // partition key given request.\n  // TODO\n\n  // 7. Let newConnection be \"yes\" if forceNewConnection is true; otherwise\n  // \"no\".\n  const newConnection = forceNewConnection ? 'yes' : 'no' // eslint-disable-line no-unused-vars\n\n  // 8. Switch on request\u2019s mode:\n  if (request.mode === 'websocket') {\n    // Let connection be the result of obtaining a WebSocket connection,\n    // given request\u2019s current URL.\n    // TODO\n  } else {\n    // Let connection be the result of obtaining a connection, given\n    // networkPartitionKey, request\u2019s current URL\u2019s origin,\n    // includeCredentials, and forceNewConnection.\n    // TODO\n  }\n\n  // 9. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. If connection is failure, then return a network error.\n\n  //    2. Set timingInfo\u2019s final connection timing info to the result of\n  //    calling clamp and coarsen connection timing info with connection\u2019s\n  //    timing info, timingInfo\u2019s post-redirect start time, and fetchParams\u2019s\n  //    cross-origin isolated capability.\n\n  //    3. If connection is not an HTTP/2 connection, request\u2019s body is non-null,\n  //    and request\u2019s body\u2019s source is null, then append (`Transfer-Encoding`,\n  //    `chunked`) to request\u2019s header list.\n\n  //    4. Set timingInfo\u2019s final network-request start time to the coarsened\n  //    shared current time given fetchParams\u2019s cross-origin isolated\n  //    capability.\n\n  //    5. Set response to the result of making an HTTP request over connection\n  //    using request with the following caveats:\n\n  //        - Follow the relevant requirements from HTTP. [HTTP] [HTTP-SEMANTICS]\n  //        [HTTP-COND] [HTTP-CACHING] [HTTP-AUTH]\n\n  //        - If request\u2019s body is non-null, and request\u2019s body\u2019s source is null,\n  //        then the user agent may have a buffer of up to 64 kibibytes and store\n  //        a part of request\u2019s body in that buffer. If the user agent reads from\n  //        request\u2019s body beyond that buffer\u2019s size and the user agent needs to\n  //        resend request, then instead return a network error.\n\n  //        - Set timingInfo\u2019s final network-response start time to the coarsened\n  //        shared current time given fetchParams\u2019s cross-origin isolated capability,\n  //        immediately after the user agent\u2019s HTTP parser receives the first byte\n  //        of the response (e.g., frame header bytes for HTTP/2 or response status\n  //        line for HTTP/1.x).\n\n  //        - Wait until all the headers are transmitted.\n\n  //        - Any responses whose status is in the range 100 to 199, inclusive,\n  //        and is not 101, are to be ignored, except for the purposes of setting\n  //        timingInfo\u2019s final network-response start time above.\n\n  //    - If request\u2019s header list contains `Transfer-Encoding`/`chunked` and\n  //    response is transferred via HTTP/1.0 or older, then return a network\n  //    error.\n\n  //    - If the HTTP request results in a TLS client certificate dialog, then:\n\n  //        1. If request\u2019s window is an environment settings object, make the\n  //        dialog available in request\u2019s window.\n\n  //        2. Otherwise, return a network error.\n\n  // To transmit request\u2019s body body, run these steps:\n  let requestBody = null\n  // 1. If body is null and fetchParams\u2019s process request end-of-body is\n  // non-null, then queue a fetch task given fetchParams\u2019s process request\n  // end-of-body and fetchParams\u2019s task destination.\n  if (request.body == null && fetchParams.processRequestEndOfBody) {\n    queueMicrotask(() => fetchParams.processRequestEndOfBody())\n  } else if (request.body != null) {\n    // 2. Otherwise, if body is non-null:\n\n    //    1. Let processBodyChunk given bytes be these steps:\n    const processBodyChunk = async function * (bytes) {\n      // 1. If the ongoing fetch is terminated, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. Run this step in parallel: transmit bytes.\n      yield bytes\n\n      // 3. If fetchParams\u2019s process request body is non-null, then run\n      // fetchParams\u2019s process request body given bytes\u2019s length.\n      fetchParams.processRequestBodyChunkLength?.(bytes.byteLength)\n    }\n\n    // 2. Let processEndOfBody be these steps:\n    const processEndOfBody = () => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. If fetchParams\u2019s process request end-of-body is non-null,\n      // then run fetchParams\u2019s process request end-of-body.\n      if (fetchParams.processRequestEndOfBody) {\n        fetchParams.processRequestEndOfBody()\n      }\n    }\n\n    // 3. Let processBodyError given e be these steps:\n    const processBodyError = (e) => {\n      // 1. If fetchParams is canceled, then abort these steps.\n      if (isCancelled(fetchParams)) {\n        return\n      }\n\n      // 2. If e is an \"AbortError\" DOMException, then abort fetchParams\u2019s controller.\n      if (e.name === 'AbortError') {\n        fetchParams.controller.abort()\n      } else {\n        fetchParams.controller.terminate(e)\n      }\n    }\n\n    // 4. Incrementally read request\u2019s body given processBodyChunk, processEndOfBody,\n    // processBodyError, and fetchParams\u2019s task destination.\n    requestBody = (async function * () {\n      try {\n        for await (const bytes of request.body.stream) {\n          yield * processBodyChunk(bytes)\n        }\n        processEndOfBody()\n      } catch (err) {\n        processBodyError(err)\n      }\n    })()\n  }\n\n  try {\n    // socket is only provided for websockets\n    const { body, status, statusText, headersList, socket } = await dispatch({ body: requestBody })\n\n    if (socket) {\n      response = makeResponse({ status, statusText, headersList, socket })\n    } else {\n      const iterator = body[Symbol.asyncIterator]()\n      fetchParams.controller.next = () => iterator.next()\n\n      response = makeResponse({ status, statusText, headersList })\n    }\n  } catch (err) {\n    // 10. If aborted, then:\n    if (err.name === 'AbortError') {\n      // 1. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n      fetchParams.controller.connection.destroy()\n\n      // 2. Return the appropriate network error for fetchParams.\n      return makeAppropriateNetworkError(fetchParams, err)\n    }\n\n    return makeNetworkError(err)\n  }\n\n  // 11. Let pullAlgorithm be an action that resumes the ongoing fetch\n  // if it is suspended.\n  const pullAlgorithm = () => {\n    fetchParams.controller.resume()\n  }\n\n  // 12. Let cancelAlgorithm be an algorithm that aborts fetchParams\u2019s\n  // controller with reason, given reason.\n  const cancelAlgorithm = (reason) => {\n    fetchParams.controller.abort(reason)\n  }\n\n  // 13. Let highWaterMark be a non-negative, non-NaN number, chosen by\n  // the user agent.\n  // TODO\n\n  // 14. Let sizeAlgorithm be an algorithm that accepts a chunk object\n  // and returns a non-negative, non-NaN, non-infinite number, chosen by the user agent.\n  // TODO\n\n  // 15. Let stream be a new ReadableStream.\n  // 16. Set up stream with pullAlgorithm set to pullAlgorithm,\n  // cancelAlgorithm set to cancelAlgorithm, highWaterMark set to\n  // highWaterMark, and sizeAlgorithm set to sizeAlgorithm.\n  if (!ReadableStream) {\n    ReadableStream = require('stream/web').ReadableStream\n  }\n\n  const stream = new ReadableStream(\n    {\n      async start (controller) {\n        fetchParams.controller.controller = controller\n      },\n      async pull (controller) {\n        await pullAlgorithm(controller)\n      },\n      async cancel (reason) {\n        await cancelAlgorithm(reason)\n      }\n    },\n    {\n      highWaterMark: 0,\n      size () {\n        return 1\n      }\n    }\n  )\n\n  // 17. Run these steps, but abort when the ongoing fetch is terminated:\n\n  //    1. Set response\u2019s body to a new body whose stream is stream.\n  response.body = { stream }\n\n  //    2. If response is not a network error and request\u2019s cache mode is\n  //    not \"no-store\", then update response in httpCache for request.\n  //    TODO\n\n  //    3. If includeCredentials is true and the user agent is not configured\n  //    to block cookies for request (see section 7 of [COOKIES]), then run the\n  //    \"set-cookie-string\" parsing algorithm (see section 5.2 of [COOKIES]) on\n  //    the value of each header whose name is a byte-case-insensitive match for\n  //    `Set-Cookie` in response\u2019s header list, if any, and request\u2019s current URL.\n  //    TODO\n\n  // 18. If aborted, then:\n  // TODO\n\n  // 19. Run these steps in parallel:\n\n  //    1. Run these steps, but abort when fetchParams is canceled:\n  fetchParams.controller.on('terminated', onAborted)\n  fetchParams.controller.resume = async () => {\n    // 1. While true\n    while (true) {\n      // 1-3. See onData...\n\n      // 4. Set bytes to the result of handling content codings given\n      // codings and bytes.\n      let bytes\n      let isFailure\n      try {\n        const { done, value } = await fetchParams.controller.next()\n\n        if (isAborted(fetchParams)) {\n          break\n        }\n\n        bytes = done ? undefined : value\n      } catch (err) {\n        if (fetchParams.controller.ended && !timingInfo.encodedBodySize) {\n          // zlib doesn't like empty streams.\n          bytes = undefined\n        } else {\n          bytes = err\n\n          // err may be propagated from the result of calling readablestream.cancel,\n          // which might not be an error. https://github.com/nodejs/undici/issues/2009\n          isFailure = true\n        }\n      }\n\n      if (bytes === undefined) {\n        // 2. Otherwise, if the bytes transmission for response\u2019s message\n        // body is done normally and stream is readable, then close\n        // stream, finalize response for fetchParams and response, and\n        // abort these in-parallel steps.\n        readableStreamClose(fetchParams.controller.controller)\n\n        finalizeResponse(fetchParams, response)\n\n        return\n      }\n\n      // 5. Increase timingInfo\u2019s decoded body size by bytes\u2019s length.\n      timingInfo.decodedBodySize += bytes?.byteLength ?? 0\n\n      // 6. If bytes is failure, then terminate fetchParams\u2019s controller.\n      if (isFailure) {\n        fetchParams.controller.terminate(bytes)\n        return\n      }\n\n      // 7. Enqueue a Uint8Array wrapping an ArrayBuffer containing bytes\n      // into stream.\n      fetchParams.controller.controller.enqueue(new Uint8Array(bytes))\n\n      // 8. If stream is errored, then terminate the ongoing fetch.\n      if (isErrored(stream)) {\n        fetchParams.controller.terminate()\n        return\n      }\n\n      // 9. If stream doesn\u2019t need more data ask the user agent to suspend\n      // the ongoing fetch.\n      if (!fetchParams.controller.controller.desiredSize) {\n        return\n      }\n    }\n  }\n\n  //    2. If aborted, then:\n  function onAborted (reason) {\n    // 2. If fetchParams is aborted, then:\n    if (isAborted(fetchParams)) {\n      // 1. Set response\u2019s aborted flag.\n      response.aborted = true\n\n      // 2. If stream is readable, then error stream with the result of\n      //    deserialize a serialized abort reason given fetchParams\u2019s\n      //    controller\u2019s serialized abort reason and an\n      //    implementation-defined realm.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(\n          fetchParams.controller.serializedAbortReason\n        )\n      }\n    } else {\n      // 3. Otherwise, if stream is readable, error stream with a TypeError.\n      if (isReadable(stream)) {\n        fetchParams.controller.controller.error(new TypeError('terminated', {\n          cause: isErrorLike(reason) ? reason : undefined\n        }))\n      }\n    }\n\n    // 4. If connection uses HTTP/2, then transmit an RST_STREAM frame.\n    // 5. Otherwise, the user agent should close connection unless it would be bad for performance to do so.\n    fetchParams.controller.connection.destroy()\n  }\n\n  // 20. Return response.\n  return response\n\n  async function dispatch ({ body }) {\n    const url = requestCurrentURL(request)\n    /** @type {import('../..').Agent} */\n    const agent = fetchParams.controller.dispatcher\n\n    return new Promise((resolve, reject) => agent.dispatch(\n      {\n        path: url.pathname + url.search,\n        origin: url.origin,\n        method: request.method,\n        body: fetchParams.controller.dispatcher.isMockActive ? request.body && (request.body.source || request.body.stream) : body,\n        headers: request.headersList.entries,\n        maxRedirections: 0,\n        upgrade: request.mode === 'websocket' ? 'websocket' : undefined\n      },\n      {\n        body: null,\n        abort: null,\n\n        onConnect (abort) {\n          // TODO (fix): Do we need connection here?\n          const { connection } = fetchParams.controller\n\n          if (connection.destroyed) {\n            abort(new DOMException('The operation was aborted.', 'AbortError'))\n          } else {\n            fetchParams.controller.on('terminated', abort)\n            this.abort = connection.abort = abort\n          }\n        },\n\n        onHeaders (status, headersList, resume, statusText) {\n          if (status < 200) {\n            return\n          }\n\n          let codings = []\n          let location = ''\n\n          const headers = new Headers()\n\n          // For H2, the headers are a plain JS object\n          // We distinguish between them and iterate accordingly\n          if (Array.isArray(headersList)) {\n            for (let n = 0; n < headersList.length; n += 2) {\n              const key = headersList[n + 0].toString('latin1')\n              const val = headersList[n + 1].toString('latin1')\n              if (key.toLowerCase() === 'content-encoding') {\n                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                // \"All content-coding values are case-insensitive...\"\n                codings = val.toLowerCase().split(',').map((x) => x.trim())\n              } else if (key.toLowerCase() === 'location') {\n                location = val\n              }\n\n              headers[kHeadersList].append(key, val)\n            }\n          } else {\n            const keys = Object.keys(headersList)\n            for (const key of keys) {\n              const val = headersList[key]\n              if (key.toLowerCase() === 'content-encoding') {\n                // https://www.rfc-editor.org/rfc/rfc7231#section-3.1.2.1\n                // \"All content-coding values are case-insensitive...\"\n                codings = val.toLowerCase().split(',').map((x) => x.trim()).reverse()\n              } else if (key.toLowerCase() === 'location') {\n                location = val\n              }\n\n              headers[kHeadersList].append(key, val)\n            }\n          }\n\n          this.body = new Readable({ read: resume })\n\n          const decoders = []\n\n          const willFollow = request.redirect === 'follow' &&\n            location &&\n            redirectStatusSet.has(status)\n\n          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Encoding\n          if (request.method !== 'HEAD' && request.method !== 'CONNECT' && !nullBodyStatus.includes(status) && !willFollow) {\n            for (const coding of codings) {\n              // https://www.rfc-editor.org/rfc/rfc9112.html#section-7.2\n              if (coding === 'x-gzip' || coding === 'gzip') {\n                decoders.push(zlib.createGunzip({\n                  // Be less strict when decoding compressed responses, since sometimes\n                  // servers send slightly invalid responses that are still accepted\n                  // by common browsers.\n                  // Always using Z_SYNC_FLUSH is what cURL does.\n                  flush: zlib.constants.Z_SYNC_FLUSH,\n                  finishFlush: zlib.constants.Z_SYNC_FLUSH\n                }))\n              } else if (coding === 'deflate') {\n                decoders.push(zlib.createInflate())\n              } else if (coding === 'br') {\n                decoders.push(zlib.createBrotliDecompress())\n              } else {\n                decoders.length = 0\n                break\n              }\n            }\n          }\n\n          resolve({\n            status,\n            statusText,\n            headersList: headers[kHeadersList],\n            body: decoders.length\n              ? pipeline(this.body, ...decoders, () => { })\n              : this.body.on('error', () => {})\n          })\n\n          return true\n        },\n\n        onData (chunk) {\n          if (fetchParams.controller.dump) {\n            return\n          }\n\n          // 1. If one or more bytes have been transmitted from response\u2019s\n          // message body, then:\n\n          //  1. Let bytes be the transmitted bytes.\n          const bytes = chunk\n\n          //  2. Let codings be the result of extracting header list values\n          //  given `Content-Encoding` and response\u2019s header list.\n          //  See pullAlgorithm.\n\n          //  3. Increase timingInfo\u2019s encoded body size by bytes\u2019s length.\n          timingInfo.encodedBodySize += bytes.byteLength\n\n          //  4. See pullAlgorithm...\n\n          return this.body.push(bytes)\n        },\n\n        onComplete () {\n          if (this.abort) {\n            fetchParams.controller.off('terminated', this.abort)\n          }\n\n          fetchParams.controller.ended = true\n\n          this.body.push(null)\n        },\n\n        onError (error) {\n          if (this.abort) {\n            fetchParams.controller.off('terminated', this.abort)\n          }\n\n          this.body?.destroy(error)\n\n          fetchParams.controller.terminate(error)\n\n          reject(error)\n        },\n\n        onUpgrade (status, headersList, socket) {\n          if (status !== 101) {\n            return\n          }\n\n          const headers = new Headers()\n\n          for (let n = 0; n < headersList.length; n += 2) {\n            const key = headersList[n + 0].toString('latin1')\n            const val = headersList[n + 1].toString('latin1')\n\n            headers[kHeadersList].append(key, val)\n          }\n\n          resolve({\n            status,\n            statusText: STATUS_CODES[status],\n            headersList: headers[kHeadersList],\n            socket\n          })\n\n          return true\n        }\n      }\n    ))\n  }\n}\n\nmodule.exports = {\n  fetch,\n  Fetch,\n  fetching,\n  finalizeAndReportTiming\n}\n", "'use strict'\n\nmodule.exports = {\n  kState: Symbol('FileReader state'),\n  kResult: Symbol('FileReader result'),\n  kError: Symbol('FileReader error'),\n  kLastProgressEventFired: Symbol('FileReader last progress event fired timestamp'),\n  kEvents: Symbol('FileReader events'),\n  kAborted: Symbol('FileReader aborted')\n}\n", "'use strict'\n\nconst { webidl } = require('../fetch/webidl')\n\nconst kState = Symbol('ProgressEvent state')\n\n/**\n * @see https://xhr.spec.whatwg.org/#progressevent\n */\nclass ProgressEvent extends Event {\n  constructor (type, eventInitDict = {}) {\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.ProgressEventInit(eventInitDict ?? {})\n\n    super(type, eventInitDict)\n\n    this[kState] = {\n      lengthComputable: eventInitDict.lengthComputable,\n      loaded: eventInitDict.loaded,\n      total: eventInitDict.total\n    }\n  }\n\n  get lengthComputable () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].lengthComputable\n  }\n\n  get loaded () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].loaded\n  }\n\n  get total () {\n    webidl.brandCheck(this, ProgressEvent)\n\n    return this[kState].total\n  }\n}\n\nwebidl.converters.ProgressEventInit = webidl.dictionaryConverter([\n  {\n    key: 'lengthComputable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'loaded',\n    converter: webidl.converters['unsigned long long'],\n    defaultValue: 0\n  },\n  {\n    key: 'total',\n    converter: webidl.converters['unsigned long long'],\n    defaultValue: 0\n  },\n  {\n    key: 'bubbles',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'cancelable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'composed',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n])\n\nmodule.exports = {\n  ProgressEvent\n}\n", "'use strict'\n\n/**\n * @see https://encoding.spec.whatwg.org/#concept-encoding-get\n * @param {string|undefined} label\n */\nfunction getEncoding (label) {\n  if (!label) {\n    return 'failure'\n  }\n\n  // 1. Remove any leading and trailing ASCII whitespace from label.\n  // 2. If label is an ASCII case-insensitive match for any of the\n  //    labels listed in the table below, then return the\n  //    corresponding encoding; otherwise return failure.\n  switch (label.trim().toLowerCase()) {\n    case 'unicode-1-1-utf-8':\n    case 'unicode11utf8':\n    case 'unicode20utf8':\n    case 'utf-8':\n    case 'utf8':\n    case 'x-unicode20utf8':\n      return 'UTF-8'\n    case '866':\n    case 'cp866':\n    case 'csibm866':\n    case 'ibm866':\n      return 'IBM866'\n    case 'csisolatin2':\n    case 'iso-8859-2':\n    case 'iso-ir-101':\n    case 'iso8859-2':\n    case 'iso88592':\n    case 'iso_8859-2':\n    case 'iso_8859-2:1987':\n    case 'l2':\n    case 'latin2':\n      return 'ISO-8859-2'\n    case 'csisolatin3':\n    case 'iso-8859-3':\n    case 'iso-ir-109':\n    case 'iso8859-3':\n    case 'iso88593':\n    case 'iso_8859-3':\n    case 'iso_8859-3:1988':\n    case 'l3':\n    case 'latin3':\n      return 'ISO-8859-3'\n    case 'csisolatin4':\n    case 'iso-8859-4':\n    case 'iso-ir-110':\n    case 'iso8859-4':\n    case 'iso88594':\n    case 'iso_8859-4':\n    case 'iso_8859-4:1988':\n    case 'l4':\n    case 'latin4':\n      return 'ISO-8859-4'\n    case 'csisolatincyrillic':\n    case 'cyrillic':\n    case 'iso-8859-5':\n    case 'iso-ir-144':\n    case 'iso8859-5':\n    case 'iso88595':\n    case 'iso_8859-5':\n    case 'iso_8859-5:1988':\n      return 'ISO-8859-5'\n    case 'arabic':\n    case 'asmo-708':\n    case 'csiso88596e':\n    case 'csiso88596i':\n    case 'csisolatinarabic':\n    case 'ecma-114':\n    case 'iso-8859-6':\n    case 'iso-8859-6-e':\n    case 'iso-8859-6-i':\n    case 'iso-ir-127':\n    case 'iso8859-6':\n    case 'iso88596':\n    case 'iso_8859-6':\n    case 'iso_8859-6:1987':\n      return 'ISO-8859-6'\n    case 'csisolatingreek':\n    case 'ecma-118':\n    case 'elot_928':\n    case 'greek':\n    case 'greek8':\n    case 'iso-8859-7':\n    case 'iso-ir-126':\n    case 'iso8859-7':\n    case 'iso88597':\n    case 'iso_8859-7':\n    case 'iso_8859-7:1987':\n    case 'sun_eu_greek':\n      return 'ISO-8859-7'\n    case 'csiso88598e':\n    case 'csisolatinhebrew':\n    case 'hebrew':\n    case 'iso-8859-8':\n    case 'iso-8859-8-e':\n    case 'iso-ir-138':\n    case 'iso8859-8':\n    case 'iso88598':\n    case 'iso_8859-8':\n    case 'iso_8859-8:1988':\n    case 'visual':\n      return 'ISO-8859-8'\n    case 'csiso88598i':\n    case 'iso-8859-8-i':\n    case 'logical':\n      return 'ISO-8859-8-I'\n    case 'csisolatin6':\n    case 'iso-8859-10':\n    case 'iso-ir-157':\n    case 'iso8859-10':\n    case 'iso885910':\n    case 'l6':\n    case 'latin6':\n      return 'ISO-8859-10'\n    case 'iso-8859-13':\n    case 'iso8859-13':\n    case 'iso885913':\n      return 'ISO-8859-13'\n    case 'iso-8859-14':\n    case 'iso8859-14':\n    case 'iso885914':\n      return 'ISO-8859-14'\n    case 'csisolatin9':\n    case 'iso-8859-15':\n    case 'iso8859-15':\n    case 'iso885915':\n    case 'iso_8859-15':\n    case 'l9':\n      return 'ISO-8859-15'\n    case 'iso-8859-16':\n      return 'ISO-8859-16'\n    case 'cskoi8r':\n    case 'koi':\n    case 'koi8':\n    case 'koi8-r':\n    case 'koi8_r':\n      return 'KOI8-R'\n    case 'koi8-ru':\n    case 'koi8-u':\n      return 'KOI8-U'\n    case 'csmacintosh':\n    case 'mac':\n    case 'macintosh':\n    case 'x-mac-roman':\n      return 'macintosh'\n    case 'iso-8859-11':\n    case 'iso8859-11':\n    case 'iso885911':\n    case 'tis-620':\n    case 'windows-874':\n      return 'windows-874'\n    case 'cp1250':\n    case 'windows-1250':\n    case 'x-cp1250':\n      return 'windows-1250'\n    case 'cp1251':\n    case 'windows-1251':\n    case 'x-cp1251':\n      return 'windows-1251'\n    case 'ansi_x3.4-1968':\n    case 'ascii':\n    case 'cp1252':\n    case 'cp819':\n    case 'csisolatin1':\n    case 'ibm819':\n    case 'iso-8859-1':\n    case 'iso-ir-100':\n    case 'iso8859-1':\n    case 'iso88591':\n    case 'iso_8859-1':\n    case 'iso_8859-1:1987':\n    case 'l1':\n    case 'latin1':\n    case 'us-ascii':\n    case 'windows-1252':\n    case 'x-cp1252':\n      return 'windows-1252'\n    case 'cp1253':\n    case 'windows-1253':\n    case 'x-cp1253':\n      return 'windows-1253'\n    case 'cp1254':\n    case 'csisolatin5':\n    case 'iso-8859-9':\n    case 'iso-ir-148':\n    case 'iso8859-9':\n    case 'iso88599':\n    case 'iso_8859-9':\n    case 'iso_8859-9:1989':\n    case 'l5':\n    case 'latin5':\n    case 'windows-1254':\n    case 'x-cp1254':\n      return 'windows-1254'\n    case 'cp1255':\n    case 'windows-1255':\n    case 'x-cp1255':\n      return 'windows-1255'\n    case 'cp1256':\n    case 'windows-1256':\n    case 'x-cp1256':\n      return 'windows-1256'\n    case 'cp1257':\n    case 'windows-1257':\n    case 'x-cp1257':\n      return 'windows-1257'\n    case 'cp1258':\n    case 'windows-1258':\n    case 'x-cp1258':\n      return 'windows-1258'\n    case 'x-mac-cyrillic':\n    case 'x-mac-ukrainian':\n      return 'x-mac-cyrillic'\n    case 'chinese':\n    case 'csgb2312':\n    case 'csiso58gb231280':\n    case 'gb2312':\n    case 'gb_2312':\n    case 'gb_2312-80':\n    case 'gbk':\n    case 'iso-ir-58':\n    case 'x-gbk':\n      return 'GBK'\n    case 'gb18030':\n      return 'gb18030'\n    case 'big5':\n    case 'big5-hkscs':\n    case 'cn-big5':\n    case 'csbig5':\n    case 'x-x-big5':\n      return 'Big5'\n    case 'cseucpkdfmtjapanese':\n    case 'euc-jp':\n    case 'x-euc-jp':\n      return 'EUC-JP'\n    case 'csiso2022jp':\n    case 'iso-2022-jp':\n      return 'ISO-2022-JP'\n    case 'csshiftjis':\n    case 'ms932':\n    case 'ms_kanji':\n    case 'shift-jis':\n    case 'shift_jis':\n    case 'sjis':\n    case 'windows-31j':\n    case 'x-sjis':\n      return 'Shift_JIS'\n    case 'cseuckr':\n    case 'csksc56011987':\n    case 'euc-kr':\n    case 'iso-ir-149':\n    case 'korean':\n    case 'ks_c_5601-1987':\n    case 'ks_c_5601-1989':\n    case 'ksc5601':\n    case 'ksc_5601':\n    case 'windows-949':\n      return 'EUC-KR'\n    case 'csiso2022kr':\n    case 'hz-gb-2312':\n    case 'iso-2022-cn':\n    case 'iso-2022-cn-ext':\n    case 'iso-2022-kr':\n    case 'replacement':\n      return 'replacement'\n    case 'unicodefffe':\n    case 'utf-16be':\n      return 'UTF-16BE'\n    case 'csunicode':\n    case 'iso-10646-ucs-2':\n    case 'ucs-2':\n    case 'unicode':\n    case 'unicodefeff':\n    case 'utf-16':\n    case 'utf-16le':\n      return 'UTF-16LE'\n    case 'x-user-defined':\n      return 'x-user-defined'\n    default: return 'failure'\n  }\n}\n\nmodule.exports = {\n  getEncoding\n}\n", "'use strict'\n\nconst {\n  kState,\n  kError,\n  kResult,\n  kAborted,\n  kLastProgressEventFired\n} = require('./symbols')\nconst { ProgressEvent } = require('./progressevent')\nconst { getEncoding } = require('./encoding')\nconst { DOMException } = require('../fetch/constants')\nconst { serializeAMimeType, parseMIMEType } = require('../fetch/dataURL')\nconst { types } = require('util')\nconst { StringDecoder } = require('string_decoder')\nconst { btoa } = require('buffer')\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#readOperation\n * @param {import('./filereader').FileReader} fr\n * @param {import('buffer').Blob} blob\n * @param {string} type\n * @param {string?} encodingName\n */\nfunction readOperation (fr, blob, type, encodingName) {\n  // 1. If fr\u2019s state is \"loading\", throw an InvalidStateError\n  //    DOMException.\n  if (fr[kState] === 'loading') {\n    throw new DOMException('Invalid state', 'InvalidStateError')\n  }\n\n  // 2. Set fr\u2019s state to \"loading\".\n  fr[kState] = 'loading'\n\n  // 3. Set fr\u2019s result to null.\n  fr[kResult] = null\n\n  // 4. Set fr\u2019s error to null.\n  fr[kError] = null\n\n  // 5. Let stream be the result of calling get stream on blob.\n  /** @type {import('stream/web').ReadableStream} */\n  const stream = blob.stream()\n\n  // 6. Let reader be the result of getting a reader from stream.\n  const reader = stream.getReader()\n\n  // 7. Let bytes be an empty byte sequence.\n  /** @type {Uint8Array[]} */\n  const bytes = []\n\n  // 8. Let chunkPromise be the result of reading a chunk from\n  //    stream with reader.\n  let chunkPromise = reader.read()\n\n  // 9. Let isFirstChunk be true.\n  let isFirstChunk = true\n\n  // 10. In parallel, while true:\n  // Note: \"In parallel\" just means non-blocking\n  // Note 2: readOperation itself cannot be async as double\n  // reading the body would then reject the promise, instead\n  // of throwing an error.\n  ;(async () => {\n    while (!fr[kAborted]) {\n      // 1. Wait for chunkPromise to be fulfilled or rejected.\n      try {\n        const { done, value } = await chunkPromise\n\n        // 2. If chunkPromise is fulfilled, and isFirstChunk is\n        //    true, queue a task to fire a progress event called\n        //    loadstart at fr.\n        if (isFirstChunk && !fr[kAborted]) {\n          queueMicrotask(() => {\n            fireAProgressEvent('loadstart', fr)\n          })\n        }\n\n        // 3. Set isFirstChunk to false.\n        isFirstChunk = false\n\n        // 4. If chunkPromise is fulfilled with an object whose\n        //    done property is false and whose value property is\n        //    a Uint8Array object, run these steps:\n        if (!done && types.isUint8Array(value)) {\n          // 1. Let bs be the byte sequence represented by the\n          //    Uint8Array object.\n\n          // 2. Append bs to bytes.\n          bytes.push(value)\n\n          // 3. If roughly 50ms have passed since these steps\n          //    were last invoked, queue a task to fire a\n          //    progress event called progress at fr.\n          if (\n            (\n              fr[kLastProgressEventFired] === undefined ||\n              Date.now() - fr[kLastProgressEventFired] >= 50\n            ) &&\n            !fr[kAborted]\n          ) {\n            fr[kLastProgressEventFired] = Date.now()\n            queueMicrotask(() => {\n              fireAProgressEvent('progress', fr)\n            })\n          }\n\n          // 4. Set chunkPromise to the result of reading a\n          //    chunk from stream with reader.\n          chunkPromise = reader.read()\n        } else if (done) {\n          // 5. Otherwise, if chunkPromise is fulfilled with an\n          //    object whose done property is true, queue a task\n          //    to run the following steps and abort this algorithm:\n          queueMicrotask(() => {\n            // 1. Set fr\u2019s state to \"done\".\n            fr[kState] = 'done'\n\n            // 2. Let result be the result of package data given\n            //    bytes, type, blob\u2019s type, and encodingName.\n            try {\n              const result = packageData(bytes, type, blob.type, encodingName)\n\n              // 4. Else:\n\n              if (fr[kAborted]) {\n                return\n              }\n\n              // 1. Set fr\u2019s result to result.\n              fr[kResult] = result\n\n              // 2. Fire a progress event called load at the fr.\n              fireAProgressEvent('load', fr)\n            } catch (error) {\n              // 3. If package data threw an exception error:\n\n              // 1. Set fr\u2019s error to error.\n              fr[kError] = error\n\n              // 2. Fire a progress event called error at fr.\n              fireAProgressEvent('error', fr)\n            }\n\n            // 5. If fr\u2019s state is not \"loading\", fire a progress\n            //    event called loadend at the fr.\n            if (fr[kState] !== 'loading') {\n              fireAProgressEvent('loadend', fr)\n            }\n          })\n\n          break\n        }\n      } catch (error) {\n        if (fr[kAborted]) {\n          return\n        }\n\n        // 6. Otherwise, if chunkPromise is rejected with an\n        //    error error, queue a task to run the following\n        //    steps and abort this algorithm:\n        queueMicrotask(() => {\n          // 1. Set fr\u2019s state to \"done\".\n          fr[kState] = 'done'\n\n          // 2. Set fr\u2019s error to error.\n          fr[kError] = error\n\n          // 3. Fire a progress event called error at fr.\n          fireAProgressEvent('error', fr)\n\n          // 4. If fr\u2019s state is not \"loading\", fire a progress\n          //    event called loadend at fr.\n          if (fr[kState] !== 'loading') {\n            fireAProgressEvent('loadend', fr)\n          }\n        })\n\n        break\n      }\n    }\n  })()\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#fire-a-progress-event\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e The name of the event\n * @param {import('./filereader').FileReader} reader\n */\nfunction fireAProgressEvent (e, reader) {\n  // The progress event e does not bubble. e.bubbles must be false\n  // The progress event e is NOT cancelable. e.cancelable must be false\n  const event = new ProgressEvent(e, {\n    bubbles: false,\n    cancelable: false\n  })\n\n  reader.dispatchEvent(event)\n}\n\n/**\n * @see https://w3c.github.io/FileAPI/#blob-package-data\n * @param {Uint8Array[]} bytes\n * @param {string} type\n * @param {string?} mimeType\n * @param {string?} encodingName\n */\nfunction packageData (bytes, type, mimeType, encodingName) {\n  // 1. A Blob has an associated package data algorithm, given\n  //    bytes, a type, a optional mimeType, and a optional\n  //    encodingName, which switches on type and runs the\n  //    associated steps:\n\n  switch (type) {\n    case 'DataURL': {\n      // 1. Return bytes as a DataURL [RFC2397] subject to\n      //    the considerations below:\n      //  * Use mimeType as part of the Data URL if it is\n      //    available in keeping with the Data URL\n      //    specification [RFC2397].\n      //  * If mimeType is not available return a Data URL\n      //    without a media-type. [RFC2397].\n\n      // https://datatracker.ietf.org/doc/html/rfc2397#section-3\n      // dataurl    := \"data:\" [ mediatype ] [ \";base64\" ] \",\" data\n      // mediatype  := [ type \"/\" subtype ] *( \";\" parameter )\n      // data       := *urlchar\n      // parameter  := attribute \"=\" value\n      let dataURL = 'data:'\n\n      const parsed = parseMIMEType(mimeType || 'application/octet-stream')\n\n      if (parsed !== 'failure') {\n        dataURL += serializeAMimeType(parsed)\n      }\n\n      dataURL += ';base64,'\n\n      const decoder = new StringDecoder('latin1')\n\n      for (const chunk of bytes) {\n        dataURL += btoa(decoder.write(chunk))\n      }\n\n      dataURL += btoa(decoder.end())\n\n      return dataURL\n    }\n    case 'Text': {\n      // 1. Let encoding be failure\n      let encoding = 'failure'\n\n      // 2. If the encodingName is present, set encoding to the\n      //    result of getting an encoding from encodingName.\n      if (encodingName) {\n        encoding = getEncoding(encodingName)\n      }\n\n      // 3. If encoding is failure, and mimeType is present:\n      if (encoding === 'failure' && mimeType) {\n        // 1. Let type be the result of parse a MIME type\n        //    given mimeType.\n        const type = parseMIMEType(mimeType)\n\n        // 2. If type is not failure, set encoding to the result\n        //    of getting an encoding from type\u2019s parameters[\"charset\"].\n        if (type !== 'failure') {\n          encoding = getEncoding(type.parameters.get('charset'))\n        }\n      }\n\n      // 4. If encoding is failure, then set encoding to UTF-8.\n      if (encoding === 'failure') {\n        encoding = 'UTF-8'\n      }\n\n      // 5. Decode bytes using fallback encoding encoding, and\n      //    return the result.\n      return decode(bytes, encoding)\n    }\n    case 'ArrayBuffer': {\n      // Return a new ArrayBuffer whose contents are bytes.\n      const sequence = combineByteSequences(bytes)\n\n      return sequence.buffer\n    }\n    case 'BinaryString': {\n      // Return bytes as a binary string, in which every byte\n      //  is represented by a code unit of equal value [0..255].\n      let binaryString = ''\n\n      const decoder = new StringDecoder('latin1')\n\n      for (const chunk of bytes) {\n        binaryString += decoder.write(chunk)\n      }\n\n      binaryString += decoder.end()\n\n      return binaryString\n    }\n  }\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#decode\n * @param {Uint8Array[]} ioQueue\n * @param {string} encoding\n */\nfunction decode (ioQueue, encoding) {\n  const bytes = combineByteSequences(ioQueue)\n\n  // 1. Let BOMEncoding be the result of BOM sniffing ioQueue.\n  const BOMEncoding = BOMSniffing(bytes)\n\n  let slice = 0\n\n  // 2. If BOMEncoding is non-null:\n  if (BOMEncoding !== null) {\n    // 1. Set encoding to BOMEncoding.\n    encoding = BOMEncoding\n\n    // 2. Read three bytes from ioQueue, if BOMEncoding is\n    //    UTF-8; otherwise read two bytes.\n    //    (Do nothing with those bytes.)\n    slice = BOMEncoding === 'UTF-8' ? 3 : 2\n  }\n\n  // 3. Process a queue with an instance of encoding\u2019s\n  //    decoder, ioQueue, output, and \"replacement\".\n\n  // 4. Return output.\n\n  const sliced = bytes.slice(slice)\n  return new TextDecoder(encoding).decode(sliced)\n}\n\n/**\n * @see https://encoding.spec.whatwg.org/#bom-sniff\n * @param {Uint8Array} ioQueue\n */\nfunction BOMSniffing (ioQueue) {\n  // 1. Let BOM be the result of peeking 3 bytes from ioQueue,\n  //    converted to a byte sequence.\n  const [a, b, c] = ioQueue\n\n  // 2. For each of the rows in the table below, starting with\n  //    the first one and going down, if BOM starts with the\n  //    bytes given in the first column, then return the\n  //    encoding given in the cell in the second column of that\n  //    row. Otherwise, return null.\n  if (a === 0xEF && b === 0xBB && c === 0xBF) {\n    return 'UTF-8'\n  } else if (a === 0xFE && b === 0xFF) {\n    return 'UTF-16BE'\n  } else if (a === 0xFF && b === 0xFE) {\n    return 'UTF-16LE'\n  }\n\n  return null\n}\n\n/**\n * @param {Uint8Array[]} sequences\n */\nfunction combineByteSequences (sequences) {\n  const size = sequences.reduce((a, b) => {\n    return a + b.byteLength\n  }, 0)\n\n  let offset = 0\n\n  return sequences.reduce((a, b) => {\n    a.set(b, offset)\n    offset += b.byteLength\n    return a\n  }, new Uint8Array(size))\n}\n\nmodule.exports = {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n}\n", "'use strict'\n\nconst {\n  staticPropertyDescriptors,\n  readOperation,\n  fireAProgressEvent\n} = require('./util')\nconst {\n  kState,\n  kError,\n  kResult,\n  kEvents,\n  kAborted\n} = require('./symbols')\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\n\nclass FileReader extends EventTarget {\n  constructor () {\n    super()\n\n    this[kState] = 'empty'\n    this[kResult] = null\n    this[kError] = null\n    this[kEvents] = {\n      loadend: null,\n      error: null,\n      abort: null,\n      load: null,\n      progress: null,\n      loadstart: null\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsArrayBuffer\n   * @param {import('buffer').Blob} blob\n   */\n  readAsArrayBuffer (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsArrayBuffer' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsArrayBuffer(blob) method, when invoked,\n    // must initiate a read operation for blob with ArrayBuffer.\n    readOperation(this, blob, 'ArrayBuffer')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#readAsBinaryString\n   * @param {import('buffer').Blob} blob\n   */\n  readAsBinaryString (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsBinaryString' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsBinaryString(blob) method, when invoked,\n    // must initiate a read operation for blob with BinaryString.\n    readOperation(this, blob, 'BinaryString')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#readAsDataText\n   * @param {import('buffer').Blob} blob\n   * @param {string?} encoding\n   */\n  readAsText (blob, encoding = undefined) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsText' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    if (encoding !== undefined) {\n      encoding = webidl.converters.DOMString(encoding)\n    }\n\n    // The readAsText(blob, encoding) method, when invoked,\n    // must initiate a read operation for blob with Text and encoding.\n    readOperation(this, blob, 'Text', encoding)\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-readAsDataURL\n   * @param {import('buffer').Blob} blob\n   */\n  readAsDataURL (blob) {\n    webidl.brandCheck(this, FileReader)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'FileReader.readAsDataURL' })\n\n    blob = webidl.converters.Blob(blob, { strict: false })\n\n    // The readAsDataURL(blob) method, when invoked, must\n    // initiate a read operation for blob with DataURL.\n    readOperation(this, blob, 'DataURL')\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dfn-abort\n   */\n  abort () {\n    // 1. If this's state is \"empty\" or if this's state is\n    //    \"done\" set this's result to null and terminate\n    //    this algorithm.\n    if (this[kState] === 'empty' || this[kState] === 'done') {\n      this[kResult] = null\n      return\n    }\n\n    // 2. If this's state is \"loading\" set this's state to\n    //    \"done\" and set this's result to null.\n    if (this[kState] === 'loading') {\n      this[kState] = 'done'\n      this[kResult] = null\n    }\n\n    // 3. If there are any tasks from this on the file reading\n    //    task source in an affiliated task queue, then remove\n    //    those tasks from that task queue.\n    this[kAborted] = true\n\n    // 4. Terminate the algorithm for the read method being processed.\n    // TODO\n\n    // 5. Fire a progress event called abort at this.\n    fireAProgressEvent('abort', this)\n\n    // 6. If this's state is not \"loading\", fire a progress\n    //    event called loadend at this.\n    if (this[kState] !== 'loading') {\n      fireAProgressEvent('loadend', this)\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-readystate\n   */\n  get readyState () {\n    webidl.brandCheck(this, FileReader)\n\n    switch (this[kState]) {\n      case 'empty': return this.EMPTY\n      case 'loading': return this.LOADING\n      case 'done': return this.DONE\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-result\n   */\n  get result () {\n    webidl.brandCheck(this, FileReader)\n\n    // The result attribute\u2019s getter, when invoked, must return\n    // this's result.\n    return this[kResult]\n  }\n\n  /**\n   * @see https://w3c.github.io/FileAPI/#dom-filereader-error\n   */\n  get error () {\n    webidl.brandCheck(this, FileReader)\n\n    // The error attribute\u2019s getter, when invoked, must return\n    // this's error.\n    return this[kError]\n  }\n\n  get onloadend () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].loadend\n  }\n\n  set onloadend (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].loadend) {\n      this.removeEventListener('loadend', this[kEvents].loadend)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].loadend = fn\n      this.addEventListener('loadend', fn)\n    } else {\n      this[kEvents].loadend = null\n    }\n  }\n\n  get onerror () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].error\n  }\n\n  set onerror (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].error) {\n      this.removeEventListener('error', this[kEvents].error)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].error = fn\n      this.addEventListener('error', fn)\n    } else {\n      this[kEvents].error = null\n    }\n  }\n\n  get onloadstart () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].loadstart\n  }\n\n  set onloadstart (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].loadstart) {\n      this.removeEventListener('loadstart', this[kEvents].loadstart)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].loadstart = fn\n      this.addEventListener('loadstart', fn)\n    } else {\n      this[kEvents].loadstart = null\n    }\n  }\n\n  get onprogress () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].progress\n  }\n\n  set onprogress (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].progress) {\n      this.removeEventListener('progress', this[kEvents].progress)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].progress = fn\n      this.addEventListener('progress', fn)\n    } else {\n      this[kEvents].progress = null\n    }\n  }\n\n  get onload () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].load\n  }\n\n  set onload (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].load) {\n      this.removeEventListener('load', this[kEvents].load)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].load = fn\n      this.addEventListener('load', fn)\n    } else {\n      this[kEvents].load = null\n    }\n  }\n\n  get onabort () {\n    webidl.brandCheck(this, FileReader)\n\n    return this[kEvents].abort\n  }\n\n  set onabort (fn) {\n    webidl.brandCheck(this, FileReader)\n\n    if (this[kEvents].abort) {\n      this.removeEventListener('abort', this[kEvents].abort)\n    }\n\n    if (typeof fn === 'function') {\n      this[kEvents].abort = fn\n      this.addEventListener('abort', fn)\n    } else {\n      this[kEvents].abort = null\n    }\n  }\n}\n\n// https://w3c.github.io/FileAPI/#dom-filereader-empty\nFileReader.EMPTY = FileReader.prototype.EMPTY = 0\n// https://w3c.github.io/FileAPI/#dom-filereader-loading\nFileReader.LOADING = FileReader.prototype.LOADING = 1\n// https://w3c.github.io/FileAPI/#dom-filereader-done\nFileReader.DONE = FileReader.prototype.DONE = 2\n\nObject.defineProperties(FileReader.prototype, {\n  EMPTY: staticPropertyDescriptors,\n  LOADING: staticPropertyDescriptors,\n  DONE: staticPropertyDescriptors,\n  readAsArrayBuffer: kEnumerableProperty,\n  readAsBinaryString: kEnumerableProperty,\n  readAsText: kEnumerableProperty,\n  readAsDataURL: kEnumerableProperty,\n  abort: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  result: kEnumerableProperty,\n  error: kEnumerableProperty,\n  onloadstart: kEnumerableProperty,\n  onprogress: kEnumerableProperty,\n  onload: kEnumerableProperty,\n  onabort: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onloadend: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'FileReader',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n})\n\nObject.defineProperties(FileReader, {\n  EMPTY: staticPropertyDescriptors,\n  LOADING: staticPropertyDescriptors,\n  DONE: staticPropertyDescriptors\n})\n\nmodule.exports = {\n  FileReader\n}\n", "'use strict'\n\nmodule.exports = {\n  kConstruct: require('../core/symbols').kConstruct\n}\n", "'use strict'\n\nconst assert = require('assert')\nconst { URLSerializer } = require('../fetch/dataURL')\nconst { isValidHeaderName } = require('../fetch/util')\n\n/**\n * @see https://url.spec.whatwg.org/#concept-url-equals\n * @param {URL} A\n * @param {URL} B\n * @param {boolean | undefined} excludeFragment\n * @returns {boolean}\n */\nfunction urlEquals (A, B, excludeFragment = false) {\n  const serializedA = URLSerializer(A, excludeFragment)\n\n  const serializedB = URLSerializer(B, excludeFragment)\n\n  return serializedA === serializedB\n}\n\n/**\n * @see https://github.com/chromium/chromium/blob/694d20d134cb553d8d89e5500b9148012b1ba299/content/browser/cache_storage/cache_storage_cache.cc#L260-L262\n * @param {string} header\n */\nfunction fieldValues (header) {\n  assert(header !== null)\n\n  const values = []\n\n  for (let value of header.split(',')) {\n    value = value.trim()\n\n    if (!value.length) {\n      continue\n    } else if (!isValidHeaderName(value)) {\n      continue\n    }\n\n    values.push(value)\n  }\n\n  return values\n}\n\nmodule.exports = {\n  urlEquals,\n  fieldValues\n}\n", "'use strict'\n\nconst { kConstruct } = require('./symbols')\nconst { urlEquals, fieldValues: getFieldValues } = require('./util')\nconst { kEnumerableProperty, isDisturbed } = require('../core/util')\nconst { kHeadersList } = require('../core/symbols')\nconst { webidl } = require('../fetch/webidl')\nconst { Response, cloneResponse } = require('../fetch/response')\nconst { Request } = require('../fetch/request')\nconst { kState, kHeaders, kGuard, kRealm } = require('../fetch/symbols')\nconst { fetching } = require('../fetch/index')\nconst { urlIsHttpHttpsScheme, createDeferredPromise, readAllBytes } = require('../fetch/util')\nconst assert = require('assert')\nconst { getGlobalDispatcher } = require('../global')\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-cache-batch-operation\n * @typedef {Object} CacheBatchOperation\n * @property {'delete' | 'put'} type\n * @property {any} request\n * @property {any} response\n * @property {import('../../types/cache').CacheQueryOptions} options\n */\n\n/**\n * @see https://w3c.github.io/ServiceWorker/#dfn-request-response-list\n * @typedef {[any, any][]} requestResponseList\n */\n\nclass Cache {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-request-response-list\n   * @type {requestResponseList}\n   */\n  #relevantRequestResponseList\n\n  constructor () {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor()\n    }\n\n    this.#relevantRequestResponseList = arguments[1]\n  }\n\n  async match (request, options = {}) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.match' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    const p = await this.matchAll(request, options)\n\n    if (p.length === 0) {\n      return\n    }\n\n    return p[0]\n  }\n\n  async matchAll (request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    if (request !== undefined) request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    // 1.\n    let r = null\n\n    // 2.\n    if (request !== undefined) {\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState]\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return []\n        }\n      } else if (typeof request === 'string') {\n        // 2.2.1\n        r = new Request(request)[kState]\n      }\n    }\n\n    // 5.\n    // 5.1\n    const responses = []\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        responses.push(requestResponse[1])\n      }\n    } else { // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options)\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        responses.push(requestResponse[1])\n      }\n    }\n\n    // 5.4\n    // We don't implement CORs so we don't need to loop over the responses, yay!\n\n    // 5.5.1\n    const responseList = []\n\n    // 5.5.2\n    for (const response of responses) {\n      // 5.5.2.1\n      const responseObject = new Response(response.body?.source ?? null)\n      const body = responseObject[kState].body\n      responseObject[kState] = response\n      responseObject[kState].body = body\n      responseObject[kHeaders][kHeadersList] = response.headersList\n      responseObject[kHeaders][kGuard] = 'immutable'\n\n      responseList.push(responseObject)\n    }\n\n    // 6.\n    return Object.freeze(responseList)\n  }\n\n  async add (request) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.add' })\n\n    request = webidl.converters.RequestInfo(request)\n\n    // 1.\n    const requests = [request]\n\n    // 2.\n    const responseArrayPromise = this.addAll(requests)\n\n    // 3.\n    return await responseArrayPromise\n  }\n\n  async addAll (requests) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.addAll' })\n\n    requests = webidl.converters['sequence<RequestInfo>'](requests)\n\n    // 1.\n    const responsePromises = []\n\n    // 2.\n    const requestList = []\n\n    // 3.\n    for (const request of requests) {\n      if (typeof request === 'string') {\n        continue\n      }\n\n      // 3.1\n      const r = request[kState]\n\n      // 3.2\n      if (!urlIsHttpHttpsScheme(r.url) || r.method !== 'GET') {\n        throw webidl.errors.exception({\n          header: 'Cache.addAll',\n          message: 'Expected http/s scheme when method is not GET.'\n        })\n      }\n    }\n\n    // 4.\n    /** @type {ReturnType<typeof fetching>[]} */\n    const fetchControllers = []\n\n    // 5.\n    for (const request of requests) {\n      // 5.1\n      const r = new Request(request)[kState]\n\n      // 5.2\n      if (!urlIsHttpHttpsScheme(r.url)) {\n        throw webidl.errors.exception({\n          header: 'Cache.addAll',\n          message: 'Expected http/s scheme.'\n        })\n      }\n\n      // 5.4\n      r.initiator = 'fetch'\n      r.destination = 'subresource'\n\n      // 5.5\n      requestList.push(r)\n\n      // 5.6\n      const responsePromise = createDeferredPromise()\n\n      // 5.7\n      fetchControllers.push(fetching({\n        request: r,\n        dispatcher: getGlobalDispatcher(),\n        processResponse (response) {\n          // 1.\n          if (response.type === 'error' || response.status === 206 || response.status < 200 || response.status > 299) {\n            responsePromise.reject(webidl.errors.exception({\n              header: 'Cache.addAll',\n              message: 'Received an invalid status code or the request failed.'\n            }))\n          } else if (response.headersList.contains('vary')) { // 2.\n            // 2.1\n            const fieldValues = getFieldValues(response.headersList.get('vary'))\n\n            // 2.2\n            for (const fieldValue of fieldValues) {\n              // 2.2.1\n              if (fieldValue === '*') {\n                responsePromise.reject(webidl.errors.exception({\n                  header: 'Cache.addAll',\n                  message: 'invalid vary field value'\n                }))\n\n                for (const controller of fetchControllers) {\n                  controller.abort()\n                }\n\n                return\n              }\n            }\n          }\n        },\n        processResponseEndOfBody (response) {\n          // 1.\n          if (response.aborted) {\n            responsePromise.reject(new DOMException('aborted', 'AbortError'))\n            return\n          }\n\n          // 2.\n          responsePromise.resolve(response)\n        }\n      }))\n\n      // 5.8\n      responsePromises.push(responsePromise.promise)\n    }\n\n    // 6.\n    const p = Promise.all(responsePromises)\n\n    // 7.\n    const responses = await p\n\n    // 7.1\n    const operations = []\n\n    // 7.2\n    let index = 0\n\n    // 7.3\n    for (const response of responses) {\n      // 7.3.1\n      /** @type {CacheBatchOperation} */\n      const operation = {\n        type: 'put', // 7.3.2\n        request: requestList[index], // 7.3.3\n        response // 7.3.4\n      }\n\n      operations.push(operation) // 7.3.5\n\n      index++ // 7.3.6\n    }\n\n    // 7.5\n    const cacheJobPromise = createDeferredPromise()\n\n    // 7.6.1\n    let errorData = null\n\n    // 7.6.2\n    try {\n      this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    // 7.6.3\n    queueMicrotask(() => {\n      // 7.6.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve(undefined)\n      } else {\n        // 7.6.3.2\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    // 7.7\n    return cacheJobPromise.promise\n  }\n\n  async put (request, response) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Cache.put' })\n\n    request = webidl.converters.RequestInfo(request)\n    response = webidl.converters.Response(response)\n\n    // 1.\n    let innerRequest = null\n\n    // 2.\n    if (request instanceof Request) {\n      innerRequest = request[kState]\n    } else { // 3.\n      innerRequest = new Request(request)[kState]\n    }\n\n    // 4.\n    if (!urlIsHttpHttpsScheme(innerRequest.url) || innerRequest.method !== 'GET') {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Expected an http/s scheme when method is not GET'\n      })\n    }\n\n    // 5.\n    const innerResponse = response[kState]\n\n    // 6.\n    if (innerResponse.status === 206) {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Got 206 status'\n      })\n    }\n\n    // 7.\n    if (innerResponse.headersList.contains('vary')) {\n      // 7.1.\n      const fieldValues = getFieldValues(innerResponse.headersList.get('vary'))\n\n      // 7.2.\n      for (const fieldValue of fieldValues) {\n        // 7.2.1\n        if (fieldValue === '*') {\n          throw webidl.errors.exception({\n            header: 'Cache.put',\n            message: 'Got * vary field value'\n          })\n        }\n      }\n    }\n\n    // 8.\n    if (innerResponse.body && (isDisturbed(innerResponse.body.stream) || innerResponse.body.stream.locked)) {\n      throw webidl.errors.exception({\n        header: 'Cache.put',\n        message: 'Response body is locked or disturbed'\n      })\n    }\n\n    // 9.\n    const clonedResponse = cloneResponse(innerResponse)\n\n    // 10.\n    const bodyReadPromise = createDeferredPromise()\n\n    // 11.\n    if (innerResponse.body != null) {\n      // 11.1\n      const stream = innerResponse.body.stream\n\n      // 11.2\n      const reader = stream.getReader()\n\n      // 11.3\n      readAllBytes(reader).then(bodyReadPromise.resolve, bodyReadPromise.reject)\n    } else {\n      bodyReadPromise.resolve(undefined)\n    }\n\n    // 12.\n    /** @type {CacheBatchOperation[]} */\n    const operations = []\n\n    // 13.\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'put', // 14.\n      request: innerRequest, // 15.\n      response: clonedResponse // 16.\n    }\n\n    // 17.\n    operations.push(operation)\n\n    // 19.\n    const bytes = await bodyReadPromise.promise\n\n    if (clonedResponse.body != null) {\n      clonedResponse.body.source = bytes\n    }\n\n    // 19.1\n    const cacheJobPromise = createDeferredPromise()\n\n    // 19.2.1\n    let errorData = null\n\n    // 19.2.2\n    try {\n      this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    // 19.2.3\n    queueMicrotask(() => {\n      // 19.2.3.1\n      if (errorData === null) {\n        cacheJobPromise.resolve()\n      } else { // 19.2.3.2\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    return cacheJobPromise.promise\n  }\n\n  async delete (request, options = {}) {\n    webidl.brandCheck(this, Cache)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Cache.delete' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    /**\n     * @type {Request}\n     */\n    let r = null\n\n    if (request instanceof Request) {\n      r = request[kState]\n\n      if (r.method !== 'GET' && !options.ignoreMethod) {\n        return false\n      }\n    } else {\n      assert(typeof request === 'string')\n\n      r = new Request(request)[kState]\n    }\n\n    /** @type {CacheBatchOperation[]} */\n    const operations = []\n\n    /** @type {CacheBatchOperation} */\n    const operation = {\n      type: 'delete',\n      request: r,\n      options\n    }\n\n    operations.push(operation)\n\n    const cacheJobPromise = createDeferredPromise()\n\n    let errorData = null\n    let requestResponses\n\n    try {\n      requestResponses = this.#batchCacheOperations(operations)\n    } catch (e) {\n      errorData = e\n    }\n\n    queueMicrotask(() => {\n      if (errorData === null) {\n        cacheJobPromise.resolve(!!requestResponses?.length)\n      } else {\n        cacheJobPromise.reject(errorData)\n      }\n    })\n\n    return cacheJobPromise.promise\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cache-keys\n   * @param {any} request\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @returns {readonly Request[]}\n   */\n  async keys (request = undefined, options = {}) {\n    webidl.brandCheck(this, Cache)\n\n    if (request !== undefined) request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.CacheQueryOptions(options)\n\n    // 1.\n    let r = null\n\n    // 2.\n    if (request !== undefined) {\n      // 2.1\n      if (request instanceof Request) {\n        // 2.1.1\n        r = request[kState]\n\n        // 2.1.2\n        if (r.method !== 'GET' && !options.ignoreMethod) {\n          return []\n        }\n      } else if (typeof request === 'string') { // 2.2\n        r = new Request(request)[kState]\n      }\n    }\n\n    // 4.\n    const promise = createDeferredPromise()\n\n    // 5.\n    // 5.1\n    const requests = []\n\n    // 5.2\n    if (request === undefined) {\n      // 5.2.1\n      for (const requestResponse of this.#relevantRequestResponseList) {\n        // 5.2.1.1\n        requests.push(requestResponse[0])\n      }\n    } else { // 5.3\n      // 5.3.1\n      const requestResponses = this.#queryCache(r, options)\n\n      // 5.3.2\n      for (const requestResponse of requestResponses) {\n        // 5.3.2.1\n        requests.push(requestResponse[0])\n      }\n    }\n\n    // 5.4\n    queueMicrotask(() => {\n      // 5.4.1\n      const requestList = []\n\n      // 5.4.2\n      for (const request of requests) {\n        const requestObject = new Request('https://a')\n        requestObject[kState] = request\n        requestObject[kHeaders][kHeadersList] = request.headersList\n        requestObject[kHeaders][kGuard] = 'immutable'\n        requestObject[kRealm] = request.client\n\n        // 5.4.2.1\n        requestList.push(requestObject)\n      }\n\n      // 5.4.3\n      promise.resolve(Object.freeze(requestList))\n    })\n\n    return promise.promise\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#batch-cache-operations-algorithm\n   * @param {CacheBatchOperation[]} operations\n   * @returns {requestResponseList}\n   */\n  #batchCacheOperations (operations) {\n    // 1.\n    const cache = this.#relevantRequestResponseList\n\n    // 2.\n    const backupCache = [...cache]\n\n    // 3.\n    const addedItems = []\n\n    // 4.1\n    const resultList = []\n\n    try {\n      // 4.2\n      for (const operation of operations) {\n        // 4.2.1\n        if (operation.type !== 'delete' && operation.type !== 'put') {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'operation type does not match \"delete\" or \"put\"'\n          })\n        }\n\n        // 4.2.2\n        if (operation.type === 'delete' && operation.response != null) {\n          throw webidl.errors.exception({\n            header: 'Cache.#batchCacheOperations',\n            message: 'delete operation should not have an associated response'\n          })\n        }\n\n        // 4.2.3\n        if (this.#queryCache(operation.request, operation.options, addedItems).length) {\n          throw new DOMException('???', 'InvalidStateError')\n        }\n\n        // 4.2.4\n        let requestResponses\n\n        // 4.2.5\n        if (operation.type === 'delete') {\n          // 4.2.5.1\n          requestResponses = this.#queryCache(operation.request, operation.options)\n\n          // TODO: the spec is wrong, this is needed to pass WPTs\n          if (requestResponses.length === 0) {\n            return []\n          }\n\n          // 4.2.5.2\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse)\n            assert(idx !== -1)\n\n            // 4.2.5.2.1\n            cache.splice(idx, 1)\n          }\n        } else if (operation.type === 'put') { // 4.2.6\n          // 4.2.6.1\n          if (operation.response == null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'put operation should have an associated response'\n            })\n          }\n\n          // 4.2.6.2\n          const r = operation.request\n\n          // 4.2.6.3\n          if (!urlIsHttpHttpsScheme(r.url)) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'expected http or https scheme'\n            })\n          }\n\n          // 4.2.6.4\n          if (r.method !== 'GET') {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'not get method'\n            })\n          }\n\n          // 4.2.6.5\n          if (operation.options != null) {\n            throw webidl.errors.exception({\n              header: 'Cache.#batchCacheOperations',\n              message: 'options must not be defined'\n            })\n          }\n\n          // 4.2.6.6\n          requestResponses = this.#queryCache(operation.request)\n\n          // 4.2.6.7\n          for (const requestResponse of requestResponses) {\n            const idx = cache.indexOf(requestResponse)\n            assert(idx !== -1)\n\n            // 4.2.6.7.1\n            cache.splice(idx, 1)\n          }\n\n          // 4.2.6.8\n          cache.push([operation.request, operation.response])\n\n          // 4.2.6.10\n          addedItems.push([operation.request, operation.response])\n        }\n\n        // 4.2.7\n        resultList.push([operation.request, operation.response])\n      }\n\n      // 4.3\n      return resultList\n    } catch (e) { // 5.\n      // 5.1\n      this.#relevantRequestResponseList.length = 0\n\n      // 5.2\n      this.#relevantRequestResponseList = backupCache\n\n      // 5.3\n      throw e\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#query-cache\n   * @param {any} requestQuery\n   * @param {import('../../types/cache').CacheQueryOptions} options\n   * @param {requestResponseList} targetStorage\n   * @returns {requestResponseList}\n   */\n  #queryCache (requestQuery, options, targetStorage) {\n    /** @type {requestResponseList} */\n    const resultList = []\n\n    const storage = targetStorage ?? this.#relevantRequestResponseList\n\n    for (const requestResponse of storage) {\n      const [cachedRequest, cachedResponse] = requestResponse\n      if (this.#requestMatchesCachedItem(requestQuery, cachedRequest, cachedResponse, options)) {\n        resultList.push(requestResponse)\n      }\n    }\n\n    return resultList\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#request-matches-cached-item-algorithm\n   * @param {any} requestQuery\n   * @param {any} request\n   * @param {any | null} response\n   * @param {import('../../types/cache').CacheQueryOptions | undefined} options\n   * @returns {boolean}\n   */\n  #requestMatchesCachedItem (requestQuery, request, response = null, options) {\n    // if (options?.ignoreMethod === false && request.method === 'GET') {\n    //   return false\n    // }\n\n    const queryURL = new URL(requestQuery.url)\n\n    const cachedURL = new URL(request.url)\n\n    if (options?.ignoreSearch) {\n      cachedURL.search = ''\n\n      queryURL.search = ''\n    }\n\n    if (!urlEquals(queryURL, cachedURL, true)) {\n      return false\n    }\n\n    if (\n      response == null ||\n      options?.ignoreVary ||\n      !response.headersList.contains('vary')\n    ) {\n      return true\n    }\n\n    const fieldValues = getFieldValues(response.headersList.get('vary'))\n\n    for (const fieldValue of fieldValues) {\n      if (fieldValue === '*') {\n        return false\n      }\n\n      const requestValue = request.headersList.get(fieldValue)\n      const queryValue = requestQuery.headersList.get(fieldValue)\n\n      // If one has the header and the other doesn't, or one has\n      // a different value than the other, return false\n      if (requestValue !== queryValue) {\n        return false\n      }\n    }\n\n    return true\n  }\n}\n\nObject.defineProperties(Cache.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'Cache',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  matchAll: kEnumerableProperty,\n  add: kEnumerableProperty,\n  addAll: kEnumerableProperty,\n  put: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n})\n\nconst cacheQueryOptionConverters = [\n  {\n    key: 'ignoreSearch',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'ignoreMethod',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'ignoreVary',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n]\n\nwebidl.converters.CacheQueryOptions = webidl.dictionaryConverter(cacheQueryOptionConverters)\n\nwebidl.converters.MultiCacheQueryOptions = webidl.dictionaryConverter([\n  ...cacheQueryOptionConverters,\n  {\n    key: 'cacheName',\n    converter: webidl.converters.DOMString\n  }\n])\n\nwebidl.converters.Response = webidl.interfaceConverter(Response)\n\nwebidl.converters['sequence<RequestInfo>'] = webidl.sequenceConverter(\n  webidl.converters.RequestInfo\n)\n\nmodule.exports = {\n  Cache\n}\n", "'use strict'\n\nconst { kConstruct } = require('./symbols')\nconst { Cache } = require('./cache')\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\n\nclass CacheStorage {\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dfn-relevant-name-to-cache-map\n   * @type {Map<string, import('./cache').requestResponseList}\n   */\n  #caches = new Map()\n\n  constructor () {\n    if (arguments[0] !== kConstruct) {\n      webidl.illegalConstructor()\n    }\n  }\n\n  async match (request, options = {}) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.match' })\n\n    request = webidl.converters.RequestInfo(request)\n    options = webidl.converters.MultiCacheQueryOptions(options)\n\n    // 1.\n    if (options.cacheName != null) {\n      // 1.1.1.1\n      if (this.#caches.has(options.cacheName)) {\n        // 1.1.1.1.1\n        const cacheList = this.#caches.get(options.cacheName)\n        const cache = new Cache(kConstruct, cacheList)\n\n        return await cache.match(request, options)\n      }\n    } else { // 2.\n      // 2.2\n      for (const cacheList of this.#caches.values()) {\n        const cache = new Cache(kConstruct, cacheList)\n\n        // 2.2.1.2\n        const response = await cache.match(request, options)\n\n        if (response !== undefined) {\n          return response\n        }\n      }\n    }\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-has\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async has (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.has' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    // 2.1.1\n    // 2.2\n    return this.#caches.has(cacheName)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#dom-cachestorage-open\n   * @param {string} cacheName\n   * @returns {Promise<Cache>}\n   */\n  async open (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.open' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    // 2.1\n    if (this.#caches.has(cacheName)) {\n      // await caches.open('v1') !== await caches.open('v1')\n\n      // 2.1.1\n      const cache = this.#caches.get(cacheName)\n\n      // 2.1.1.1\n      return new Cache(kConstruct, cache)\n    }\n\n    // 2.2\n    const cache = []\n\n    // 2.3\n    this.#caches.set(cacheName, cache)\n\n    // 2.4\n    return new Cache(kConstruct, cache)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-delete\n   * @param {string} cacheName\n   * @returns {Promise<boolean>}\n   */\n  async delete (cacheName) {\n    webidl.brandCheck(this, CacheStorage)\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CacheStorage.delete' })\n\n    cacheName = webidl.converters.DOMString(cacheName)\n\n    return this.#caches.delete(cacheName)\n  }\n\n  /**\n   * @see https://w3c.github.io/ServiceWorker/#cache-storage-keys\n   * @returns {string[]}\n   */\n  async keys () {\n    webidl.brandCheck(this, CacheStorage)\n\n    // 2.1\n    const keys = this.#caches.keys()\n\n    // 2.2\n    return [...keys]\n  }\n}\n\nObject.defineProperties(CacheStorage.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CacheStorage',\n    configurable: true\n  },\n  match: kEnumerableProperty,\n  has: kEnumerableProperty,\n  open: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  keys: kEnumerableProperty\n})\n\nmodule.exports = {\n  CacheStorage\n}\n", "'use strict'\n\n// https://wicg.github.io/cookie-store/#cookie-maximum-attribute-value-size\nconst maxAttributeValueSize = 1024\n\n// https://wicg.github.io/cookie-store/#cookie-maximum-name-value-pair-size\nconst maxNameValuePairSize = 4096\n\nmodule.exports = {\n  maxAttributeValueSize,\n  maxNameValuePairSize\n}\n", "'use strict'\n\nconst assert = require('assert')\nconst { kHeadersList } = require('../core/symbols')\n\nfunction isCTLExcludingHtab (value) {\n  if (value.length === 0) {\n    return false\n  }\n\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code >= 0x00 || code <= 0x08) ||\n      (code >= 0x0A || code <= 0x1F) ||\n      code === 0x7F\n    ) {\n      return false\n    }\n  }\n}\n\n/**\n CHAR           = <any US-ASCII character (octets 0 - 127)>\n token          = 1*<any CHAR except CTLs or separators>\n separators     = \"(\" | \")\" | \"<\" | \">\" | \"@\"\n                | \",\" | \";\" | \":\" | \"\\\" | <\">\n                | \"/\" | \"[\" | \"]\" | \"?\" | \"=\"\n                | \"{\" | \"}\" | SP | HT\n * @param {string} name\n */\nfunction validateCookieName (name) {\n  for (const char of name) {\n    const code = char.charCodeAt(0)\n\n    if (\n      (code <= 0x20 || code > 0x7F) ||\n      char === '(' ||\n      char === ')' ||\n      char === '>' ||\n      char === '<' ||\n      char === '@' ||\n      char === ',' ||\n      char === ';' ||\n      char === ':' ||\n      char === '\\\\' ||\n      char === '\"' ||\n      char === '/' ||\n      char === '[' ||\n      char === ']' ||\n      char === '?' ||\n      char === '=' ||\n      char === '{' ||\n      char === '}'\n    ) {\n      throw new Error('Invalid cookie name')\n    }\n  }\n}\n\n/**\n cookie-value      = *cookie-octet / ( DQUOTE *cookie-octet DQUOTE )\n cookie-octet      = %x21 / %x23-2B / %x2D-3A / %x3C-5B / %x5D-7E\n                       ; US-ASCII characters excluding CTLs,\n                       ; whitespace DQUOTE, comma, semicolon,\n                       ; and backslash\n * @param {string} value\n */\nfunction validateCookieValue (value) {\n  for (const char of value) {\n    const code = char.charCodeAt(0)\n\n    if (\n      code < 0x21 || // exclude CTLs (0-31)\n      code === 0x22 ||\n      code === 0x2C ||\n      code === 0x3B ||\n      code === 0x5C ||\n      code > 0x7E // non-ascii\n    ) {\n      throw new Error('Invalid header value')\n    }\n  }\n}\n\n/**\n * path-value        = <any CHAR except CTLs or \";\">\n * @param {string} path\n */\nfunction validateCookiePath (path) {\n  for (const char of path) {\n    const code = char.charCodeAt(0)\n\n    if (code < 0x21 || char === ';') {\n      throw new Error('Invalid cookie path')\n    }\n  }\n}\n\n/**\n * I have no idea why these values aren't allowed to be honest,\n * but Deno tests these. - Khafra\n * @param {string} domain\n */\nfunction validateCookieDomain (domain) {\n  if (\n    domain.startsWith('-') ||\n    domain.endsWith('.') ||\n    domain.endsWith('-')\n  ) {\n    throw new Error('Invalid cookie domain')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc7231#section-7.1.1.1\n * @param {number|Date} date\n  IMF-fixdate  = day-name \",\" SP date1 SP time-of-day SP GMT\n  ; fixed length/zone/capitalization subset of the format\n  ; see Section 3.3 of [RFC5322]\n\n  day-name     = %x4D.6F.6E ; \"Mon\", case-sensitive\n              / %x54.75.65 ; \"Tue\", case-sensitive\n              / %x57.65.64 ; \"Wed\", case-sensitive\n              / %x54.68.75 ; \"Thu\", case-sensitive\n              / %x46.72.69 ; \"Fri\", case-sensitive\n              / %x53.61.74 ; \"Sat\", case-sensitive\n              / %x53.75.6E ; \"Sun\", case-sensitive\n  date1        = day SP month SP year\n                  ; e.g., 02 Jun 1982\n\n  day          = 2DIGIT\n  month        = %x4A.61.6E ; \"Jan\", case-sensitive\n              / %x46.65.62 ; \"Feb\", case-sensitive\n              / %x4D.61.72 ; \"Mar\", case-sensitive\n              / %x41.70.72 ; \"Apr\", case-sensitive\n              / %x4D.61.79 ; \"May\", case-sensitive\n              / %x4A.75.6E ; \"Jun\", case-sensitive\n              / %x4A.75.6C ; \"Jul\", case-sensitive\n              / %x41.75.67 ; \"Aug\", case-sensitive\n              / %x53.65.70 ; \"Sep\", case-sensitive\n              / %x4F.63.74 ; \"Oct\", case-sensitive\n              / %x4E.6F.76 ; \"Nov\", case-sensitive\n              / %x44.65.63 ; \"Dec\", case-sensitive\n  year         = 4DIGIT\n\n  GMT          = %x47.4D.54 ; \"GMT\", case-sensitive\n\n  time-of-day  = hour \":\" minute \":\" second\n              ; 00:00:00 - 23:59:60 (leap second)\n\n  hour         = 2DIGIT\n  minute       = 2DIGIT\n  second       = 2DIGIT\n */\nfunction toIMFDate (date) {\n  if (typeof date === 'number') {\n    date = new Date(date)\n  }\n\n  const days = [\n    'Sun', 'Mon', 'Tue', 'Wed',\n    'Thu', 'Fri', 'Sat'\n  ]\n\n  const months = [\n    'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\n    'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\n  ]\n\n  const dayName = days[date.getUTCDay()]\n  const day = date.getUTCDate().toString().padStart(2, '0')\n  const month = months[date.getUTCMonth()]\n  const year = date.getUTCFullYear()\n  const hour = date.getUTCHours().toString().padStart(2, '0')\n  const minute = date.getUTCMinutes().toString().padStart(2, '0')\n  const second = date.getUTCSeconds().toString().padStart(2, '0')\n\n  return `${dayName}, ${day} ${month} ${year} ${hour}:${minute}:${second} GMT`\n}\n\n/**\n max-age-av        = \"Max-Age=\" non-zero-digit *DIGIT\n                       ; In practice, both expires-av and max-age-av\n                       ; are limited to dates representable by the\n                       ; user agent.\n * @param {number} maxAge\n */\nfunction validateCookieMaxAge (maxAge) {\n  if (maxAge < 0) {\n    throw new Error('Invalid cookie max-age')\n  }\n}\n\n/**\n * @see https://www.rfc-editor.org/rfc/rfc6265#section-4.1.1\n * @param {import('./index').Cookie} cookie\n */\nfunction stringify (cookie) {\n  if (cookie.name.length === 0) {\n    return null\n  }\n\n  validateCookieName(cookie.name)\n  validateCookieValue(cookie.value)\n\n  const out = [`${cookie.name}=${cookie.value}`]\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.1\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-cookie-prefixes-00#section-3.2\n  if (cookie.name.startsWith('__Secure-')) {\n    cookie.secure = true\n  }\n\n  if (cookie.name.startsWith('__Host-')) {\n    cookie.secure = true\n    cookie.domain = null\n    cookie.path = '/'\n  }\n\n  if (cookie.secure) {\n    out.push('Secure')\n  }\n\n  if (cookie.httpOnly) {\n    out.push('HttpOnly')\n  }\n\n  if (typeof cookie.maxAge === 'number') {\n    validateCookieMaxAge(cookie.maxAge)\n    out.push(`Max-Age=${cookie.maxAge}`)\n  }\n\n  if (cookie.domain) {\n    validateCookieDomain(cookie.domain)\n    out.push(`Domain=${cookie.domain}`)\n  }\n\n  if (cookie.path) {\n    validateCookiePath(cookie.path)\n    out.push(`Path=${cookie.path}`)\n  }\n\n  if (cookie.expires && cookie.expires.toString() !== 'Invalid Date') {\n    out.push(`Expires=${toIMFDate(cookie.expires)}`)\n  }\n\n  if (cookie.sameSite) {\n    out.push(`SameSite=${cookie.sameSite}`)\n  }\n\n  for (const part of cookie.unparsed) {\n    if (!part.includes('=')) {\n      throw new Error('Invalid unparsed')\n    }\n\n    const [key, ...value] = part.split('=')\n\n    out.push(`${key.trim()}=${value.join('=')}`)\n  }\n\n  return out.join('; ')\n}\n\nlet kHeadersListNode\n\nfunction getHeadersList (headers) {\n  if (headers[kHeadersList]) {\n    return headers[kHeadersList]\n  }\n\n  if (!kHeadersListNode) {\n    kHeadersListNode = Object.getOwnPropertySymbols(headers).find(\n      (symbol) => symbol.description === 'headers list'\n    )\n\n    assert(kHeadersListNode, 'Headers cannot be parsed')\n  }\n\n  const headersList = headers[kHeadersListNode]\n  assert(headersList)\n\n  return headersList\n}\n\nmodule.exports = {\n  isCTLExcludingHtab,\n  stringify,\n  getHeadersList\n}\n", "'use strict'\n\nconst { maxNameValuePairSize, maxAttributeValueSize } = require('./constants')\nconst { isCTLExcludingHtab } = require('./util')\nconst { collectASequenceOfCodePointsFast } = require('../fetch/dataURL')\nconst assert = require('assert')\n\n/**\n * @description Parses the field-value attributes of a set-cookie header string.\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} header\n * @returns if the header is invalid, null will be returned\n */\nfunction parseSetCookie (header) {\n  // 1. If the set-cookie-string contains a %x00-08 / %x0A-1F / %x7F\n  //    character (CTL characters excluding HTAB): Abort these steps and\n  //    ignore the set-cookie-string entirely.\n  if (isCTLExcludingHtab(header)) {\n    return null\n  }\n\n  let nameValuePair = ''\n  let unparsedAttributes = ''\n  let name = ''\n  let value = ''\n\n  // 2. If the set-cookie-string contains a %x3B (\";\") character:\n  if (header.includes(';')) {\n    // 1. The name-value-pair string consists of the characters up to,\n    //    but not including, the first %x3B (\";\"), and the unparsed-\n    //    attributes consist of the remainder of the set-cookie-string\n    //    (including the %x3B (\";\") in question).\n    const position = { position: 0 }\n\n    nameValuePair = collectASequenceOfCodePointsFast(';', header, position)\n    unparsedAttributes = header.slice(position.position)\n  } else {\n    // Otherwise:\n\n    // 1. The name-value-pair string consists of all the characters\n    //    contained in the set-cookie-string, and the unparsed-\n    //    attributes is the empty string.\n    nameValuePair = header\n  }\n\n  // 3. If the name-value-pair string lacks a %x3D (\"=\") character, then\n  //    the name string is empty, and the value string is the value of\n  //    name-value-pair.\n  if (!nameValuePair.includes('=')) {\n    value = nameValuePair\n  } else {\n    //    Otherwise, the name string consists of the characters up to, but\n    //    not including, the first %x3D (\"=\") character, and the (possibly\n    //    empty) value string consists of the characters after the first\n    //    %x3D (\"=\") character.\n    const position = { position: 0 }\n    name = collectASequenceOfCodePointsFast(\n      '=',\n      nameValuePair,\n      position\n    )\n    value = nameValuePair.slice(position.position + 1)\n  }\n\n  // 4. Remove any leading or trailing WSP characters from the name\n  //    string and the value string.\n  name = name.trim()\n  value = value.trim()\n\n  // 5. If the sum of the lengths of the name string and the value string\n  //    is more than 4096 octets, abort these steps and ignore the set-\n  //    cookie-string entirely.\n  if (name.length + value.length > maxNameValuePairSize) {\n    return null\n  }\n\n  // 6. The cookie-name is the name string, and the cookie-value is the\n  //    value string.\n  return {\n    name, value, ...parseUnparsedAttributes(unparsedAttributes)\n  }\n}\n\n/**\n * Parses the remaining attributes of a set-cookie header\n * @see https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4\n * @param {string} unparsedAttributes\n * @param {[Object.<string, unknown>]={}} cookieAttributeList\n */\nfunction parseUnparsedAttributes (unparsedAttributes, cookieAttributeList = {}) {\n  // 1. If the unparsed-attributes string is empty, skip the rest of\n  //    these steps.\n  if (unparsedAttributes.length === 0) {\n    return cookieAttributeList\n  }\n\n  // 2. Discard the first character of the unparsed-attributes (which\n  //    will be a %x3B (\";\") character).\n  assert(unparsedAttributes[0] === ';')\n  unparsedAttributes = unparsedAttributes.slice(1)\n\n  let cookieAv = ''\n\n  // 3. If the remaining unparsed-attributes contains a %x3B (\";\")\n  //    character:\n  if (unparsedAttributes.includes(';')) {\n    // 1. Consume the characters of the unparsed-attributes up to, but\n    //    not including, the first %x3B (\";\") character.\n    cookieAv = collectASequenceOfCodePointsFast(\n      ';',\n      unparsedAttributes,\n      { position: 0 }\n    )\n    unparsedAttributes = unparsedAttributes.slice(cookieAv.length)\n  } else {\n    // Otherwise:\n\n    // 1. Consume the remainder of the unparsed-attributes.\n    cookieAv = unparsedAttributes\n    unparsedAttributes = ''\n  }\n\n  // Let the cookie-av string be the characters consumed in this step.\n\n  let attributeName = ''\n  let attributeValue = ''\n\n  // 4. If the cookie-av string contains a %x3D (\"=\") character:\n  if (cookieAv.includes('=')) {\n    // 1. The (possibly empty) attribute-name string consists of the\n    //    characters up to, but not including, the first %x3D (\"=\")\n    //    character, and the (possibly empty) attribute-value string\n    //    consists of the characters after the first %x3D (\"=\")\n    //    character.\n    const position = { position: 0 }\n\n    attributeName = collectASequenceOfCodePointsFast(\n      '=',\n      cookieAv,\n      position\n    )\n    attributeValue = cookieAv.slice(position.position + 1)\n  } else {\n    // Otherwise:\n\n    // 1. The attribute-name string consists of the entire cookie-av\n    //    string, and the attribute-value string is empty.\n    attributeName = cookieAv\n  }\n\n  // 5. Remove any leading or trailing WSP characters from the attribute-\n  //    name string and the attribute-value string.\n  attributeName = attributeName.trim()\n  attributeValue = attributeValue.trim()\n\n  // 6. If the attribute-value is longer than 1024 octets, ignore the\n  //    cookie-av string and return to Step 1 of this algorithm.\n  if (attributeValue.length > maxAttributeValueSize) {\n    return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n  }\n\n  // 7. Process the attribute-name and attribute-value according to the\n  //    requirements in the following subsections.  (Notice that\n  //    attributes with unrecognized attribute-names are ignored.)\n  const attributeNameLowercase = attributeName.toLowerCase()\n\n  // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.1\n  // If the attribute-name case-insensitively matches the string\n  // \"Expires\", the user agent MUST process the cookie-av as follows.\n  if (attributeNameLowercase === 'expires') {\n    // 1. Let the expiry-time be the result of parsing the attribute-value\n    //    as cookie-date (see Section 5.1.1).\n    const expiryTime = new Date(attributeValue)\n\n    // 2. If the attribute-value failed to parse as a cookie date, ignore\n    //    the cookie-av.\n\n    cookieAttributeList.expires = expiryTime\n  } else if (attributeNameLowercase === 'max-age') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.2\n    // If the attribute-name case-insensitively matches the string \"Max-\n    // Age\", the user agent MUST process the cookie-av as follows.\n\n    // 1. If the first character of the attribute-value is not a DIGIT or a\n    //    \"-\" character, ignore the cookie-av.\n    const charCode = attributeValue.charCodeAt(0)\n\n    if ((charCode < 48 || charCode > 57) && attributeValue[0] !== '-') {\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n    }\n\n    // 2. If the remainder of attribute-value contains a non-DIGIT\n    //    character, ignore the cookie-av.\n    if (!/^\\d+$/.test(attributeValue)) {\n      return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n    }\n\n    // 3. Let delta-seconds be the attribute-value converted to an integer.\n    const deltaSeconds = Number(attributeValue)\n\n    // 4. Let cookie-age-limit be the maximum age of the cookie (which\n    //    SHOULD be 400 days or less, see Section 4.1.2.2).\n\n    // 5. Set delta-seconds to the smaller of its present value and cookie-\n    //    age-limit.\n    // deltaSeconds = Math.min(deltaSeconds * 1000, maxExpiresMs)\n\n    // 6. If delta-seconds is less than or equal to zero (0), let expiry-\n    //    time be the earliest representable date and time.  Otherwise, let\n    //    the expiry-time be the current date and time plus delta-seconds\n    //    seconds.\n    // const expiryTime = deltaSeconds <= 0 ? Date.now() : Date.now() + deltaSeconds\n\n    // 7. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Max-Age and an attribute-value of expiry-time.\n    cookieAttributeList.maxAge = deltaSeconds\n  } else if (attributeNameLowercase === 'domain') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.3\n    // If the attribute-name case-insensitively matches the string \"Domain\",\n    // the user agent MUST process the cookie-av as follows.\n\n    // 1. Let cookie-domain be the attribute-value.\n    let cookieDomain = attributeValue\n\n    // 2. If cookie-domain starts with %x2E (\".\"), let cookie-domain be\n    //    cookie-domain without its leading %x2E (\".\").\n    if (cookieDomain[0] === '.') {\n      cookieDomain = cookieDomain.slice(1)\n    }\n\n    // 3. Convert the cookie-domain to lower case.\n    cookieDomain = cookieDomain.toLowerCase()\n\n    // 4. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Domain and an attribute-value of cookie-domain.\n    cookieAttributeList.domain = cookieDomain\n  } else if (attributeNameLowercase === 'path') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.4\n    // If the attribute-name case-insensitively matches the string \"Path\",\n    // the user agent MUST process the cookie-av as follows.\n\n    // 1. If the attribute-value is empty or if the first character of the\n    //    attribute-value is not %x2F (\"/\"):\n    let cookiePath = ''\n    if (attributeValue.length === 0 || attributeValue[0] !== '/') {\n      // 1. Let cookie-path be the default-path.\n      cookiePath = '/'\n    } else {\n      // Otherwise:\n\n      // 1. Let cookie-path be the attribute-value.\n      cookiePath = attributeValue\n    }\n\n    // 2. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of Path and an attribute-value of cookie-path.\n    cookieAttributeList.path = cookiePath\n  } else if (attributeNameLowercase === 'secure') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.5\n    // If the attribute-name case-insensitively matches the string \"Secure\",\n    // the user agent MUST append an attribute to the cookie-attribute-list\n    // with an attribute-name of Secure and an empty attribute-value.\n\n    cookieAttributeList.secure = true\n  } else if (attributeNameLowercase === 'httponly') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.6\n    // If the attribute-name case-insensitively matches the string\n    // \"HttpOnly\", the user agent MUST append an attribute to the cookie-\n    // attribute-list with an attribute-name of HttpOnly and an empty\n    // attribute-value.\n\n    cookieAttributeList.httpOnly = true\n  } else if (attributeNameLowercase === 'samesite') {\n    // https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-rfc6265bis#section-5.4.7\n    // If the attribute-name case-insensitively matches the string\n    // \"SameSite\", the user agent MUST process the cookie-av as follows:\n\n    // 1. Let enforcement be \"Default\".\n    let enforcement = 'Default'\n\n    const attributeValueLowercase = attributeValue.toLowerCase()\n    // 2. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"None\", set enforcement to \"None\".\n    if (attributeValueLowercase.includes('none')) {\n      enforcement = 'None'\n    }\n\n    // 3. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"Strict\", set enforcement to \"Strict\".\n    if (attributeValueLowercase.includes('strict')) {\n      enforcement = 'Strict'\n    }\n\n    // 4. If cookie-av's attribute-value is a case-insensitive match for\n    //    \"Lax\", set enforcement to \"Lax\".\n    if (attributeValueLowercase.includes('lax')) {\n      enforcement = 'Lax'\n    }\n\n    // 5. Append an attribute to the cookie-attribute-list with an\n    //    attribute-name of \"SameSite\" and an attribute-value of\n    //    enforcement.\n    cookieAttributeList.sameSite = enforcement\n  } else {\n    cookieAttributeList.unparsed ??= []\n\n    cookieAttributeList.unparsed.push(`${attributeName}=${attributeValue}`)\n  }\n\n  // 8. Return to Step 1 of this algorithm.\n  return parseUnparsedAttributes(unparsedAttributes, cookieAttributeList)\n}\n\nmodule.exports = {\n  parseSetCookie,\n  parseUnparsedAttributes\n}\n", "'use strict'\n\nconst { parseSetCookie } = require('./parse')\nconst { stringify, getHeadersList } = require('./util')\nconst { webidl } = require('../fetch/webidl')\nconst { Headers } = require('../fetch/headers')\n\n/**\n * @typedef {Object} Cookie\n * @property {string} name\n * @property {string} value\n * @property {Date|number|undefined} expires\n * @property {number|undefined} maxAge\n * @property {string|undefined} domain\n * @property {string|undefined} path\n * @property {boolean|undefined} secure\n * @property {boolean|undefined} httpOnly\n * @property {'Strict'|'Lax'|'None'} sameSite\n * @property {string[]} unparsed\n */\n\n/**\n * @param {Headers} headers\n * @returns {Record<string, string>}\n */\nfunction getCookies (headers) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'getCookies' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  const cookie = headers.get('cookie')\n  const out = {}\n\n  if (!cookie) {\n    return out\n  }\n\n  for (const piece of cookie.split(';')) {\n    const [name, ...value] = piece.split('=')\n\n    out[name.trim()] = value.join('=')\n  }\n\n  return out\n}\n\n/**\n * @param {Headers} headers\n * @param {string} name\n * @param {{ path?: string, domain?: string }|undefined} attributes\n * @returns {void}\n */\nfunction deleteCookie (headers, name, attributes) {\n  webidl.argumentLengthCheck(arguments, 2, { header: 'deleteCookie' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  name = webidl.converters.DOMString(name)\n  attributes = webidl.converters.DeleteCookieAttributes(attributes)\n\n  // Matches behavior of\n  // https://github.com/denoland/deno_std/blob/63827b16330b82489a04614027c33b7904e08be5/http/cookie.ts#L278\n  setCookie(headers, {\n    name,\n    value: '',\n    expires: new Date(0),\n    ...attributes\n  })\n}\n\n/**\n * @param {Headers} headers\n * @returns {Cookie[]}\n */\nfunction getSetCookies (headers) {\n  webidl.argumentLengthCheck(arguments, 1, { header: 'getSetCookies' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  const cookies = getHeadersList(headers).cookies\n\n  if (!cookies) {\n    return []\n  }\n\n  // In older versions of undici, cookies is a list of name:value.\n  return cookies.map((pair) => parseSetCookie(Array.isArray(pair) ? pair[1] : pair))\n}\n\n/**\n * @param {Headers} headers\n * @param {Cookie} cookie\n * @returns {void}\n */\nfunction setCookie (headers, cookie) {\n  webidl.argumentLengthCheck(arguments, 2, { header: 'setCookie' })\n\n  webidl.brandCheck(headers, Headers, { strict: false })\n\n  cookie = webidl.converters.Cookie(cookie)\n\n  const str = stringify(cookie)\n\n  if (str) {\n    headers.append('Set-Cookie', stringify(cookie))\n  }\n}\n\nwebidl.converters.DeleteCookieAttributes = webidl.dictionaryConverter([\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'path',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'domain',\n    defaultValue: null\n  }\n])\n\nwebidl.converters.Cookie = webidl.dictionaryConverter([\n  {\n    converter: webidl.converters.DOMString,\n    key: 'name'\n  },\n  {\n    converter: webidl.converters.DOMString,\n    key: 'value'\n  },\n  {\n    converter: webidl.nullableConverter((value) => {\n      if (typeof value === 'number') {\n        return webidl.converters['unsigned long long'](value)\n      }\n\n      return new Date(value)\n    }),\n    key: 'expires',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters['long long']),\n    key: 'maxAge',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'domain',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.DOMString),\n    key: 'path',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.boolean),\n    key: 'secure',\n    defaultValue: null\n  },\n  {\n    converter: webidl.nullableConverter(webidl.converters.boolean),\n    key: 'httpOnly',\n    defaultValue: null\n  },\n  {\n    converter: webidl.converters.USVString,\n    key: 'sameSite',\n    allowedValues: ['Strict', 'Lax', 'None']\n  },\n  {\n    converter: webidl.sequenceConverter(webidl.converters.DOMString),\n    key: 'unparsed',\n    defaultValue: []\n  }\n])\n\nmodule.exports = {\n  getCookies,\n  deleteCookie,\n  getSetCookies,\n  setCookie\n}\n", "'use strict'\n\n// This is a Globally Unique Identifier unique used\n// to validate that the endpoint accepts websocket\n// connections.\n// See https://www.rfc-editor.org/rfc/rfc6455.html#section-1.3\nconst uid = '258EAFA5-E914-47DA-95CA-C5AB0DC85B11'\n\n/** @type {PropertyDescriptor} */\nconst staticPropertyDescriptors = {\n  enumerable: true,\n  writable: false,\n  configurable: false\n}\n\nconst states = {\n  CONNECTING: 0,\n  OPEN: 1,\n  CLOSING: 2,\n  CLOSED: 3\n}\n\nconst opcodes = {\n  CONTINUATION: 0x0,\n  TEXT: 0x1,\n  BINARY: 0x2,\n  CLOSE: 0x8,\n  PING: 0x9,\n  PONG: 0xA\n}\n\nconst maxUnsigned16Bit = 2 ** 16 - 1 // 65535\n\nconst parserStates = {\n  INFO: 0,\n  PAYLOADLENGTH_16: 2,\n  PAYLOADLENGTH_64: 3,\n  READ_DATA: 4\n}\n\nconst emptyBuffer = Buffer.allocUnsafe(0)\n\nmodule.exports = {\n  uid,\n  staticPropertyDescriptors,\n  states,\n  opcodes,\n  maxUnsigned16Bit,\n  parserStates,\n  emptyBuffer\n}\n", "'use strict'\n\nmodule.exports = {\n  kWebSocketURL: Symbol('url'),\n  kReadyState: Symbol('ready state'),\n  kController: Symbol('controller'),\n  kResponse: Symbol('response'),\n  kBinaryType: Symbol('binary type'),\n  kSentClose: Symbol('sent close'),\n  kReceivedClose: Symbol('received close'),\n  kByteParser: Symbol('byte parser')\n}\n", "'use strict'\n\nconst { webidl } = require('../fetch/webidl')\nconst { kEnumerableProperty } = require('../core/util')\nconst { MessagePort } = require('worker_threads')\n\n/**\n * @see https://html.spec.whatwg.org/multipage/comms.html#messageevent\n */\nclass MessageEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent constructor' })\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.MessageEventInit(eventInitDict)\n\n    super(type, eventInitDict)\n\n    this.#eventInit = eventInitDict\n  }\n\n  get data () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.data\n  }\n\n  get origin () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.origin\n  }\n\n  get lastEventId () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.lastEventId\n  }\n\n  get source () {\n    webidl.brandCheck(this, MessageEvent)\n\n    return this.#eventInit.source\n  }\n\n  get ports () {\n    webidl.brandCheck(this, MessageEvent)\n\n    if (!Object.isFrozen(this.#eventInit.ports)) {\n      Object.freeze(this.#eventInit.ports)\n    }\n\n    return this.#eventInit.ports\n  }\n\n  initMessageEvent (\n    type,\n    bubbles = false,\n    cancelable = false,\n    data = null,\n    origin = '',\n    lastEventId = '',\n    source = null,\n    ports = []\n  ) {\n    webidl.brandCheck(this, MessageEvent)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'MessageEvent.initMessageEvent' })\n\n    return new MessageEvent(type, {\n      bubbles, cancelable, data, origin, lastEventId, source, ports\n    })\n  }\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#the-closeevent-interface\n */\nclass CloseEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict = {}) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'CloseEvent constructor' })\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.CloseEventInit(eventInitDict)\n\n    super(type, eventInitDict)\n\n    this.#eventInit = eventInitDict\n  }\n\n  get wasClean () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.wasClean\n  }\n\n  get code () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.code\n  }\n\n  get reason () {\n    webidl.brandCheck(this, CloseEvent)\n\n    return this.#eventInit.reason\n  }\n}\n\n// https://html.spec.whatwg.org/multipage/webappapis.html#the-errorevent-interface\nclass ErrorEvent extends Event {\n  #eventInit\n\n  constructor (type, eventInitDict) {\n    webidl.argumentLengthCheck(arguments, 1, { header: 'ErrorEvent constructor' })\n\n    super(type, eventInitDict)\n\n    type = webidl.converters.DOMString(type)\n    eventInitDict = webidl.converters.ErrorEventInit(eventInitDict ?? {})\n\n    this.#eventInit = eventInitDict\n  }\n\n  get message () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.message\n  }\n\n  get filename () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.filename\n  }\n\n  get lineno () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.lineno\n  }\n\n  get colno () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.colno\n  }\n\n  get error () {\n    webidl.brandCheck(this, ErrorEvent)\n\n    return this.#eventInit.error\n  }\n}\n\nObject.defineProperties(MessageEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'MessageEvent',\n    configurable: true\n  },\n  data: kEnumerableProperty,\n  origin: kEnumerableProperty,\n  lastEventId: kEnumerableProperty,\n  source: kEnumerableProperty,\n  ports: kEnumerableProperty,\n  initMessageEvent: kEnumerableProperty\n})\n\nObject.defineProperties(CloseEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'CloseEvent',\n    configurable: true\n  },\n  reason: kEnumerableProperty,\n  code: kEnumerableProperty,\n  wasClean: kEnumerableProperty\n})\n\nObject.defineProperties(ErrorEvent.prototype, {\n  [Symbol.toStringTag]: {\n    value: 'ErrorEvent',\n    configurable: true\n  },\n  message: kEnumerableProperty,\n  filename: kEnumerableProperty,\n  lineno: kEnumerableProperty,\n  colno: kEnumerableProperty,\n  error: kEnumerableProperty\n})\n\nwebidl.converters.MessagePort = webidl.interfaceConverter(MessagePort)\n\nwebidl.converters['sequence<MessagePort>'] = webidl.sequenceConverter(\n  webidl.converters.MessagePort\n)\n\nconst eventInit = [\n  {\n    key: 'bubbles',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'cancelable',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'composed',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  }\n]\n\nwebidl.converters.MessageEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'data',\n    converter: webidl.converters.any,\n    defaultValue: null\n  },\n  {\n    key: 'origin',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  },\n  {\n    key: 'lastEventId',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'source',\n    // Node doesn't implement WindowProxy or ServiceWorker, so the only\n    // valid value for source is a MessagePort.\n    converter: webidl.nullableConverter(webidl.converters.MessagePort),\n    defaultValue: null\n  },\n  {\n    key: 'ports',\n    converter: webidl.converters['sequence<MessagePort>'],\n    get defaultValue () {\n      return []\n    }\n  }\n])\n\nwebidl.converters.CloseEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'wasClean',\n    converter: webidl.converters.boolean,\n    defaultValue: false\n  },\n  {\n    key: 'code',\n    converter: webidl.converters['unsigned short'],\n    defaultValue: 0\n  },\n  {\n    key: 'reason',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  }\n])\n\nwebidl.converters.ErrorEventInit = webidl.dictionaryConverter([\n  ...eventInit,\n  {\n    key: 'message',\n    converter: webidl.converters.DOMString,\n    defaultValue: ''\n  },\n  {\n    key: 'filename',\n    converter: webidl.converters.USVString,\n    defaultValue: ''\n  },\n  {\n    key: 'lineno',\n    converter: webidl.converters['unsigned long'],\n    defaultValue: 0\n  },\n  {\n    key: 'colno',\n    converter: webidl.converters['unsigned long'],\n    defaultValue: 0\n  },\n  {\n    key: 'error',\n    converter: webidl.converters.any\n  }\n])\n\nmodule.exports = {\n  MessageEvent,\n  CloseEvent,\n  ErrorEvent\n}\n", "'use strict'\n\nconst { kReadyState, kController, kResponse, kBinaryType, kWebSocketURL } = require('./symbols')\nconst { states, opcodes } = require('./constants')\nconst { MessageEvent, ErrorEvent } = require('./events')\n\n/* globals Blob */\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isEstablished (ws) {\n  // If the server's response is validated as provided for above, it is\n  // said that _The WebSocket Connection is Established_ and that the\n  // WebSocket Connection is in the OPEN state.\n  return ws[kReadyState] === states.OPEN\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isClosing (ws) {\n  // Upon either sending or receiving a Close control frame, it is said\n  // that _The WebSocket Closing Handshake is Started_ and that the\n  // WebSocket connection is in the CLOSING state.\n  return ws[kReadyState] === states.CLOSING\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n */\nfunction isClosed (ws) {\n  return ws[kReadyState] === states.CLOSED\n}\n\n/**\n * @see https://dom.spec.whatwg.org/#concept-event-fire\n * @param {string} e\n * @param {EventTarget} target\n * @param {EventInit | undefined} eventInitDict\n */\nfunction fireEvent (e, target, eventConstructor = Event, eventInitDict) {\n  // 1. If eventConstructor is not given, then let eventConstructor be Event.\n\n  // 2. Let event be the result of creating an event given eventConstructor,\n  //    in the relevant realm of target.\n  // 3. Initialize event\u2019s type attribute to e.\n  const event = new eventConstructor(e, eventInitDict) // eslint-disable-line new-cap\n\n  // 4. Initialize any other IDL attributes of event as described in the\n  //    invocation of this algorithm.\n\n  // 5. Return the result of dispatching event at target, with legacy target\n  //    override flag set if set.\n  target.dispatchEvent(event)\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @param {import('./websocket').WebSocket} ws\n * @param {number} type Opcode\n * @param {Buffer} data application data\n */\nfunction websocketMessageReceived (ws, type, data) {\n  // 1. If ready state is not OPEN (1), then return.\n  if (ws[kReadyState] !== states.OPEN) {\n    return\n  }\n\n  // 2. Let dataForEvent be determined by switching on type and binary type:\n  let dataForEvent\n\n  if (type === opcodes.TEXT) {\n    // -> type indicates that the data is Text\n    //      a new DOMString containing data\n    try {\n      dataForEvent = new TextDecoder('utf-8', { fatal: true }).decode(data)\n    } catch {\n      failWebsocketConnection(ws, 'Received invalid UTF-8 in text frame.')\n      return\n    }\n  } else if (type === opcodes.BINARY) {\n    if (ws[kBinaryType] === 'blob') {\n      // -> type indicates that the data is Binary and binary type is \"blob\"\n      //      a new Blob object, created in the relevant Realm of the WebSocket\n      //      object, that represents data as its raw data\n      dataForEvent = new Blob([data])\n    } else {\n      // -> type indicates that the data is Binary and binary type is \"arraybuffer\"\n      //      a new ArrayBuffer object, created in the relevant Realm of the\n      //      WebSocket object, whose contents are data\n      dataForEvent = new Uint8Array(data).buffer\n    }\n  }\n\n  // 3. Fire an event named message at the WebSocket object, using MessageEvent,\n  //    with the origin attribute initialized to the serialization of the WebSocket\n  //    object\u2019s url's origin, and the data attribute initialized to dataForEvent.\n  fireEvent('message', ws, MessageEvent, {\n    origin: ws[kWebSocketURL].origin,\n    data: dataForEvent\n  })\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455\n * @see https://datatracker.ietf.org/doc/html/rfc2616\n * @see https://bugs.chromium.org/p/chromium/issues/detail?id=398407\n * @param {string} protocol\n */\nfunction isValidSubprotocol (protocol) {\n  // If present, this value indicates one\n  // or more comma-separated subprotocol the client wishes to speak,\n  // ordered by preference.  The elements that comprise this value\n  // MUST be non-empty strings with characters in the range U+0021 to\n  // U+007E not including separator characters as defined in\n  // [RFC2616] and MUST all be unique strings.\n  if (protocol.length === 0) {\n    return false\n  }\n\n  for (const char of protocol) {\n    const code = char.charCodeAt(0)\n\n    if (\n      code < 0x21 ||\n      code > 0x7E ||\n      char === '(' ||\n      char === ')' ||\n      char === '<' ||\n      char === '>' ||\n      char === '@' ||\n      char === ',' ||\n      char === ';' ||\n      char === ':' ||\n      char === '\\\\' ||\n      char === '\"' ||\n      char === '/' ||\n      char === '[' ||\n      char === ']' ||\n      char === '?' ||\n      char === '=' ||\n      char === '{' ||\n      char === '}' ||\n      code === 32 || // SP\n      code === 9 // HT\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/**\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7-4\n * @param {number} code\n */\nfunction isValidStatusCode (code) {\n  if (code >= 1000 && code < 1015) {\n    return (\n      code !== 1004 && // reserved\n      code !== 1005 && // \"MUST NOT be set as a status code\"\n      code !== 1006 // \"MUST NOT be set as a status code\"\n    )\n  }\n\n  return code >= 3000 && code <= 4999\n}\n\n/**\n * @param {import('./websocket').WebSocket} ws\n * @param {string|undefined} reason\n */\nfunction failWebsocketConnection (ws, reason) {\n  const { [kController]: controller, [kResponse]: response } = ws\n\n  controller.abort()\n\n  if (response?.socket && !response.socket.destroyed) {\n    response.socket.destroy()\n  }\n\n  if (reason) {\n    fireEvent('error', ws, ErrorEvent, {\n      error: new Error(reason)\n    })\n  }\n}\n\nmodule.exports = {\n  isEstablished,\n  isClosing,\n  isClosed,\n  fireEvent,\n  isValidSubprotocol,\n  isValidStatusCode,\n  failWebsocketConnection,\n  websocketMessageReceived\n}\n", "'use strict'\n\nconst diagnosticsChannel = require('diagnostics_channel')\nconst { uid, states } = require('./constants')\nconst {\n  kReadyState,\n  kSentClose,\n  kByteParser,\n  kReceivedClose\n} = require('./symbols')\nconst { fireEvent, failWebsocketConnection } = require('./util')\nconst { CloseEvent } = require('./events')\nconst { makeRequest } = require('../fetch/request')\nconst { fetching } = require('../fetch/index')\nconst { Headers } = require('../fetch/headers')\nconst { getGlobalDispatcher } = require('../global')\nconst { kHeadersList } = require('../core/symbols')\n\nconst channels = {}\nchannels.open = diagnosticsChannel.channel('undici:websocket:open')\nchannels.close = diagnosticsChannel.channel('undici:websocket:close')\nchannels.socketError = diagnosticsChannel.channel('undici:websocket:socket_error')\n\n/** @type {import('crypto')} */\nlet crypto\ntry {\n  crypto = require('crypto')\n} catch {\n\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#concept-websocket-establish\n * @param {URL} url\n * @param {string|string[]} protocols\n * @param {import('./websocket').WebSocket} ws\n * @param {(response: any) => void} onEstablish\n * @param {Partial<import('../../types/websocket').WebSocketInit>} options\n */\nfunction establishWebSocketConnection (url, protocols, ws, onEstablish, options) {\n  // 1. Let requestURL be a copy of url, with its scheme set to \"http\", if url\u2019s\n  //    scheme is \"ws\", and to \"https\" otherwise.\n  const requestURL = url\n\n  requestURL.protocol = url.protocol === 'ws:' ? 'http:' : 'https:'\n\n  // 2. Let request be a new request, whose URL is requestURL, client is client,\n  //    service-workers mode is \"none\", referrer is \"no-referrer\", mode is\n  //    \"websocket\", credentials mode is \"include\", cache mode is \"no-store\" ,\n  //    and redirect mode is \"error\".\n  const request = makeRequest({\n    urlList: [requestURL],\n    serviceWorkers: 'none',\n    referrer: 'no-referrer',\n    mode: 'websocket',\n    credentials: 'include',\n    cache: 'no-store',\n    redirect: 'error'\n  })\n\n  // Note: undici extension, allow setting custom headers.\n  if (options.headers) {\n    const headersList = new Headers(options.headers)[kHeadersList]\n\n    request.headersList = headersList\n  }\n\n  // 3. Append (`Upgrade`, `websocket`) to request\u2019s header list.\n  // 4. Append (`Connection`, `Upgrade`) to request\u2019s header list.\n  // Note: both of these are handled by undici currently.\n  // https://github.com/nodejs/undici/blob/68c269c4144c446f3f1220951338daef4a6b5ec4/lib/client.js#L1397\n\n  // 5. Let keyValue be a nonce consisting of a randomly selected\n  //    16-byte value that has been forgiving-base64-encoded and\n  //    isomorphic encoded.\n  const keyValue = crypto.randomBytes(16).toString('base64')\n\n  // 6. Append (`Sec-WebSocket-Key`, keyValue) to request\u2019s\n  //    header list.\n  request.headersList.append('sec-websocket-key', keyValue)\n\n  // 7. Append (`Sec-WebSocket-Version`, `13`) to request\u2019s\n  //    header list.\n  request.headersList.append('sec-websocket-version', '13')\n\n  // 8. For each protocol in protocols, combine\n  //    (`Sec-WebSocket-Protocol`, protocol) in request\u2019s header\n  //    list.\n  for (const protocol of protocols) {\n    request.headersList.append('sec-websocket-protocol', protocol)\n  }\n\n  // 9. Let permessageDeflate be a user-agent defined\n  //    \"permessage-deflate\" extension header value.\n  // https://github.com/mozilla/gecko-dev/blob/ce78234f5e653a5d3916813ff990f053510227bc/netwerk/protocol/websocket/WebSocketChannel.cpp#L2673\n  // TODO: enable once permessage-deflate is supported\n  const permessageDeflate = '' // 'permessage-deflate; 15'\n\n  // 10. Append (`Sec-WebSocket-Extensions`, permessageDeflate) to\n  //     request\u2019s header list.\n  // request.headersList.append('sec-websocket-extensions', permessageDeflate)\n\n  // 11. Fetch request with useParallelQueue set to true, and\n  //     processResponse given response being these steps:\n  const controller = fetching({\n    request,\n    useParallelQueue: true,\n    dispatcher: options.dispatcher ?? getGlobalDispatcher(),\n    processResponse (response) {\n      // 1. If response is a network error or its status is not 101,\n      //    fail the WebSocket connection.\n      if (response.type === 'error' || response.status !== 101) {\n        failWebsocketConnection(ws, 'Received network error or non-101 status code.')\n        return\n      }\n\n      // 2. If protocols is not the empty list and extracting header\n      //    list values given `Sec-WebSocket-Protocol` and response\u2019s\n      //    header list results in null, failure, or the empty byte\n      //    sequence, then fail the WebSocket connection.\n      if (protocols.length !== 0 && !response.headersList.get('Sec-WebSocket-Protocol')) {\n        failWebsocketConnection(ws, 'Server did not respond with sent protocols.')\n        return\n      }\n\n      // 3. Follow the requirements stated step 2 to step 6, inclusive,\n      //    of the last set of steps in section 4.1 of The WebSocket\n      //    Protocol to validate response. This either results in fail\n      //    the WebSocket connection or the WebSocket connection is\n      //    established.\n\n      // 2. If the response lacks an |Upgrade| header field or the |Upgrade|\n      //    header field contains a value that is not an ASCII case-\n      //    insensitive match for the value \"websocket\", the client MUST\n      //    _Fail the WebSocket Connection_.\n      if (response.headersList.get('Upgrade')?.toLowerCase() !== 'websocket') {\n        failWebsocketConnection(ws, 'Server did not set Upgrade header to \"websocket\".')\n        return\n      }\n\n      // 3. If the response lacks a |Connection| header field or the\n      //    |Connection| header field doesn't contain a token that is an\n      //    ASCII case-insensitive match for the value \"Upgrade\", the client\n      //    MUST _Fail the WebSocket Connection_.\n      if (response.headersList.get('Connection')?.toLowerCase() !== 'upgrade') {\n        failWebsocketConnection(ws, 'Server did not set Connection header to \"upgrade\".')\n        return\n      }\n\n      // 4. If the response lacks a |Sec-WebSocket-Accept| header field or\n      //    the |Sec-WebSocket-Accept| contains a value other than the\n      //    base64-encoded SHA-1 of the concatenation of the |Sec-WebSocket-\n      //    Key| (as a string, not base64-decoded) with the string \"258EAFA5-\n      //    E914-47DA-95CA-C5AB0DC85B11\" but ignoring any leading and\n      //    trailing whitespace, the client MUST _Fail the WebSocket\n      //    Connection_.\n      const secWSAccept = response.headersList.get('Sec-WebSocket-Accept')\n      const digest = crypto.createHash('sha1').update(keyValue + uid).digest('base64')\n      if (secWSAccept !== digest) {\n        failWebsocketConnection(ws, 'Incorrect hash received in Sec-WebSocket-Accept header.')\n        return\n      }\n\n      // 5. If the response includes a |Sec-WebSocket-Extensions| header\n      //    field and this header field indicates the use of an extension\n      //    that was not present in the client's handshake (the server has\n      //    indicated an extension not requested by the client), the client\n      //    MUST _Fail the WebSocket Connection_.  (The parsing of this\n      //    header field to determine which extensions are requested is\n      //    discussed in Section 9.1.)\n      const secExtension = response.headersList.get('Sec-WebSocket-Extensions')\n\n      if (secExtension !== null && secExtension !== permessageDeflate) {\n        failWebsocketConnection(ws, 'Received different permessage-deflate than the one set.')\n        return\n      }\n\n      // 6. If the response includes a |Sec-WebSocket-Protocol| header field\n      //    and this header field indicates the use of a subprotocol that was\n      //    not present in the client's handshake (the server has indicated a\n      //    subprotocol not requested by the client), the client MUST _Fail\n      //    the WebSocket Connection_.\n      const secProtocol = response.headersList.get('Sec-WebSocket-Protocol')\n\n      if (secProtocol !== null && secProtocol !== request.headersList.get('Sec-WebSocket-Protocol')) {\n        failWebsocketConnection(ws, 'Protocol was not set in the opening handshake.')\n        return\n      }\n\n      response.socket.on('data', onSocketData)\n      response.socket.on('close', onSocketClose)\n      response.socket.on('error', onSocketError)\n\n      if (channels.open.hasSubscribers) {\n        channels.open.publish({\n          address: response.socket.address(),\n          protocol: secProtocol,\n          extensions: secExtension\n        })\n      }\n\n      onEstablish(response)\n    }\n  })\n\n  return controller\n}\n\n/**\n * @param {Buffer} chunk\n */\nfunction onSocketData (chunk) {\n  if (!this.ws[kByteParser].write(chunk)) {\n    this.pause()\n  }\n}\n\n/**\n * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n * @see https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.4\n */\nfunction onSocketClose () {\n  const { ws } = this\n\n  // If the TCP connection was closed after the\n  // WebSocket closing handshake was completed, the WebSocket connection\n  // is said to have been closed _cleanly_.\n  const wasClean = ws[kSentClose] && ws[kReceivedClose]\n\n  let code = 1005\n  let reason = ''\n\n  const result = ws[kByteParser].closingInfo\n\n  if (result) {\n    code = result.code ?? 1005\n    reason = result.reason\n  } else if (!ws[kSentClose]) {\n    // If _The WebSocket\n    // Connection is Closed_ and no Close control frame was received by the\n    // endpoint (such as could occur if the underlying transport connection\n    // is lost), _The WebSocket Connection Close Code_ is considered to be\n    // 1006.\n    code = 1006\n  }\n\n  // 1. Change the ready state to CLOSED (3).\n  ws[kReadyState] = states.CLOSED\n\n  // 2. If the user agent was required to fail the WebSocket\n  //    connection, or if the WebSocket connection was closed\n  //    after being flagged as full, fire an event named error\n  //    at the WebSocket object.\n  // TODO\n\n  // 3. Fire an event named close at the WebSocket object,\n  //    using CloseEvent, with the wasClean attribute\n  //    initialized to true if the connection closed cleanly\n  //    and false otherwise, the code attribute initialized to\n  //    the WebSocket connection close code, and the reason\n  //    attribute initialized to the result of applying UTF-8\n  //    decode without BOM to the WebSocket connection close\n  //    reason.\n  fireEvent('close', ws, CloseEvent, {\n    wasClean, code, reason\n  })\n\n  if (channels.close.hasSubscribers) {\n    channels.close.publish({\n      websocket: ws,\n      code,\n      reason\n    })\n  }\n}\n\nfunction onSocketError (error) {\n  const { ws } = this\n\n  ws[kReadyState] = states.CLOSING\n\n  if (channels.socketError.hasSubscribers) {\n    channels.socketError.publish(error)\n  }\n\n  this.destroy()\n}\n\nmodule.exports = {\n  establishWebSocketConnection\n}\n", "'use strict'\n\nconst { maxUnsigned16Bit } = require('./constants')\n\n/** @type {import('crypto')} */\nlet crypto\ntry {\n  crypto = require('crypto')\n} catch {\n\n}\n\nclass WebsocketFrameSend {\n  /**\n   * @param {Buffer|undefined} data\n   */\n  constructor (data) {\n    this.frameData = data\n    this.maskKey = crypto.randomBytes(4)\n  }\n\n  createFrame (opcode) {\n    const bodyLength = this.frameData?.byteLength ?? 0\n\n    /** @type {number} */\n    let payloadLength = bodyLength // 0-125\n    let offset = 6\n\n    if (bodyLength > maxUnsigned16Bit) {\n      offset += 8 // payload length is next 8 bytes\n      payloadLength = 127\n    } else if (bodyLength > 125) {\n      offset += 2 // payload length is next 2 bytes\n      payloadLength = 126\n    }\n\n    const buffer = Buffer.allocUnsafe(bodyLength + offset)\n\n    // Clear first 2 bytes, everything else is overwritten\n    buffer[0] = buffer[1] = 0\n    buffer[0] |= 0x80 // FIN\n    buffer[0] = (buffer[0] & 0xF0) + opcode // opcode\n\n    /*! ws. MIT License. Einar Otto Stangvik <einaros@gmail.com> */\n    buffer[offset - 4] = this.maskKey[0]\n    buffer[offset - 3] = this.maskKey[1]\n    buffer[offset - 2] = this.maskKey[2]\n    buffer[offset - 1] = this.maskKey[3]\n\n    buffer[1] = payloadLength\n\n    if (payloadLength === 126) {\n      buffer.writeUInt16BE(bodyLength, 2)\n    } else if (payloadLength === 127) {\n      // Clear extended payload length\n      buffer[2] = buffer[3] = 0\n      buffer.writeUIntBE(bodyLength, 4, 6)\n    }\n\n    buffer[1] |= 0x80 // MASK\n\n    // mask body\n    for (let i = 0; i < bodyLength; i++) {\n      buffer[offset + i] = this.frameData[i] ^ this.maskKey[i % 4]\n    }\n\n    return buffer\n  }\n}\n\nmodule.exports = {\n  WebsocketFrameSend\n}\n", "'use strict'\n\nconst { Writable } = require('stream')\nconst diagnosticsChannel = require('diagnostics_channel')\nconst { parserStates, opcodes, states, emptyBuffer } = require('./constants')\nconst { kReadyState, kSentClose, kResponse, kReceivedClose } = require('./symbols')\nconst { isValidStatusCode, failWebsocketConnection, websocketMessageReceived } = require('./util')\nconst { WebsocketFrameSend } = require('./frame')\n\n// This code was influenced by ws released under the MIT license.\n// Copyright (c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n// Copyright (c) 2013 Arnout Kazemier and contributors\n// Copyright (c) 2016 Luigi Pinca and contributors\n\nconst channels = {}\nchannels.ping = diagnosticsChannel.channel('undici:websocket:ping')\nchannels.pong = diagnosticsChannel.channel('undici:websocket:pong')\n\nclass ByteParser extends Writable {\n  #buffers = []\n  #byteOffset = 0\n\n  #state = parserStates.INFO\n\n  #info = {}\n  #fragments = []\n\n  constructor (ws) {\n    super()\n\n    this.ws = ws\n  }\n\n  /**\n   * @param {Buffer} chunk\n   * @param {() => void} callback\n   */\n  _write (chunk, _, callback) {\n    this.#buffers.push(chunk)\n    this.#byteOffset += chunk.length\n\n    this.run(callback)\n  }\n\n  /**\n   * Runs whenever a new chunk is received.\n   * Callback is called whenever there are no more chunks buffering,\n   * or not enough bytes are buffered to parse.\n   */\n  run (callback) {\n    while (true) {\n      if (this.#state === parserStates.INFO) {\n        // If there aren't enough bytes to parse the payload length, etc.\n        if (this.#byteOffset < 2) {\n          return callback()\n        }\n\n        const buffer = this.consume(2)\n\n        this.#info.fin = (buffer[0] & 0x80) !== 0\n        this.#info.opcode = buffer[0] & 0x0F\n\n        // If we receive a fragmented message, we use the type of the first\n        // frame to parse the full message as binary/text, when it's terminated\n        this.#info.originalOpcode ??= this.#info.opcode\n\n        this.#info.fragmented = !this.#info.fin && this.#info.opcode !== opcodes.CONTINUATION\n\n        if (this.#info.fragmented && this.#info.opcode !== opcodes.BINARY && this.#info.opcode !== opcodes.TEXT) {\n          // Only text and binary frames can be fragmented\n          failWebsocketConnection(this.ws, 'Invalid frame type was fragmented.')\n          return\n        }\n\n        const payloadLength = buffer[1] & 0x7F\n\n        if (payloadLength <= 125) {\n          this.#info.payloadLength = payloadLength\n          this.#state = parserStates.READ_DATA\n        } else if (payloadLength === 126) {\n          this.#state = parserStates.PAYLOADLENGTH_16\n        } else if (payloadLength === 127) {\n          this.#state = parserStates.PAYLOADLENGTH_64\n        }\n\n        if (this.#info.fragmented && payloadLength > 125) {\n          // A fragmented frame can't be fragmented itself\n          failWebsocketConnection(this.ws, 'Fragmented frame exceeded 125 bytes.')\n          return\n        } else if (\n          (this.#info.opcode === opcodes.PING ||\n            this.#info.opcode === opcodes.PONG ||\n            this.#info.opcode === opcodes.CLOSE) &&\n          payloadLength > 125\n        ) {\n          // Control frames can have a payload length of 125 bytes MAX\n          failWebsocketConnection(this.ws, 'Payload length for control frame exceeded 125 bytes.')\n          return\n        } else if (this.#info.opcode === opcodes.CLOSE) {\n          if (payloadLength === 1) {\n            failWebsocketConnection(this.ws, 'Received close frame with a 1-byte body.')\n            return\n          }\n\n          const body = this.consume(payloadLength)\n\n          this.#info.closeInfo = this.parseCloseBody(false, body)\n\n          if (!this.ws[kSentClose]) {\n            // If an endpoint receives a Close frame and did not previously send a\n            // Close frame, the endpoint MUST send a Close frame in response.  (When\n            // sending a Close frame in response, the endpoint typically echos the\n            // status code it received.)\n            const body = Buffer.allocUnsafe(2)\n            body.writeUInt16BE(this.#info.closeInfo.code, 0)\n            const closeFrame = new WebsocketFrameSend(body)\n\n            this.ws[kResponse].socket.write(\n              closeFrame.createFrame(opcodes.CLOSE),\n              (err) => {\n                if (!err) {\n                  this.ws[kSentClose] = true\n                }\n              }\n            )\n          }\n\n          // Upon either sending or receiving a Close control frame, it is said\n          // that _The WebSocket Closing Handshake is Started_ and that the\n          // WebSocket connection is in the CLOSING state.\n          this.ws[kReadyState] = states.CLOSING\n          this.ws[kReceivedClose] = true\n\n          this.end()\n\n          return\n        } else if (this.#info.opcode === opcodes.PING) {\n          // Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in\n          // response, unless it already received a Close frame.\n          // A Pong frame sent in response to a Ping frame must have identical\n          // \"Application data\"\n\n          const body = this.consume(payloadLength)\n\n          if (!this.ws[kReceivedClose]) {\n            const frame = new WebsocketFrameSend(body)\n\n            this.ws[kResponse].socket.write(frame.createFrame(opcodes.PONG))\n\n            if (channels.ping.hasSubscribers) {\n              channels.ping.publish({\n                payload: body\n              })\n            }\n          }\n\n          this.#state = parserStates.INFO\n\n          if (this.#byteOffset > 0) {\n            continue\n          } else {\n            callback()\n            return\n          }\n        } else if (this.#info.opcode === opcodes.PONG) {\n          // A Pong frame MAY be sent unsolicited.  This serves as a\n          // unidirectional heartbeat.  A response to an unsolicited Pong frame is\n          // not expected.\n\n          const body = this.consume(payloadLength)\n\n          if (channels.pong.hasSubscribers) {\n            channels.pong.publish({\n              payload: body\n            })\n          }\n\n          if (this.#byteOffset > 0) {\n            continue\n          } else {\n            callback()\n            return\n          }\n        }\n      } else if (this.#state === parserStates.PAYLOADLENGTH_16) {\n        if (this.#byteOffset < 2) {\n          return callback()\n        }\n\n        const buffer = this.consume(2)\n\n        this.#info.payloadLength = buffer.readUInt16BE(0)\n        this.#state = parserStates.READ_DATA\n      } else if (this.#state === parserStates.PAYLOADLENGTH_64) {\n        if (this.#byteOffset < 8) {\n          return callback()\n        }\n\n        const buffer = this.consume(8)\n        const upper = buffer.readUInt32BE(0)\n\n        // 2^31 is the maxinimum bytes an arraybuffer can contain\n        // on 32-bit systems. Although, on 64-bit systems, this is\n        // 2^53-1 bytes.\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Errors/Invalid_array_length\n        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/common/globals.h;drc=1946212ac0100668f14eb9e2843bdd846e510a1e;bpv=1;bpt=1;l=1275\n        // https://source.chromium.org/chromium/chromium/src/+/main:v8/src/objects/js-array-buffer.h;l=34;drc=1946212ac0100668f14eb9e2843bdd846e510a1e\n        if (upper > 2 ** 31 - 1) {\n          failWebsocketConnection(this.ws, 'Received payload length > 2^31 bytes.')\n          return\n        }\n\n        const lower = buffer.readUInt32BE(4)\n\n        this.#info.payloadLength = (upper << 8) + lower\n        this.#state = parserStates.READ_DATA\n      } else if (this.#state === parserStates.READ_DATA) {\n        if (this.#byteOffset < this.#info.payloadLength) {\n          // If there is still more data in this chunk that needs to be read\n          return callback()\n        } else if (this.#byteOffset >= this.#info.payloadLength) {\n          // If the server sent multiple frames in a single chunk\n\n          const body = this.consume(this.#info.payloadLength)\n\n          this.#fragments.push(body)\n\n          // If the frame is unfragmented, or a fragmented frame was terminated,\n          // a message was received\n          if (!this.#info.fragmented || (this.#info.fin && this.#info.opcode === opcodes.CONTINUATION)) {\n            const fullMessage = Buffer.concat(this.#fragments)\n\n            websocketMessageReceived(this.ws, this.#info.originalOpcode, fullMessage)\n\n            this.#info = {}\n            this.#fragments.length = 0\n          }\n\n          this.#state = parserStates.INFO\n        }\n      }\n\n      if (this.#byteOffset > 0) {\n        continue\n      } else {\n        callback()\n        break\n      }\n    }\n  }\n\n  /**\n   * Take n bytes from the buffered Buffers\n   * @param {number} n\n   * @returns {Buffer|null}\n   */\n  consume (n) {\n    if (n > this.#byteOffset) {\n      return null\n    } else if (n === 0) {\n      return emptyBuffer\n    }\n\n    if (this.#buffers[0].length === n) {\n      this.#byteOffset -= this.#buffers[0].length\n      return this.#buffers.shift()\n    }\n\n    const buffer = Buffer.allocUnsafe(n)\n    let offset = 0\n\n    while (offset !== n) {\n      const next = this.#buffers[0]\n      const { length } = next\n\n      if (length + offset === n) {\n        buffer.set(this.#buffers.shift(), offset)\n        break\n      } else if (length + offset > n) {\n        buffer.set(next.subarray(0, n - offset), offset)\n        this.#buffers[0] = next.subarray(n - offset)\n        break\n      } else {\n        buffer.set(this.#buffers.shift(), offset)\n        offset += next.length\n      }\n    }\n\n    this.#byteOffset -= n\n\n    return buffer\n  }\n\n  parseCloseBody (onlyCode, data) {\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.5\n    /** @type {number|undefined} */\n    let code\n\n    if (data.length >= 2) {\n      // _The WebSocket Connection Close Code_ is\n      // defined as the status code (Section 7.4) contained in the first Close\n      // control frame received by the application\n      code = data.readUInt16BE(0)\n    }\n\n    if (onlyCode) {\n      if (!isValidStatusCode(code)) {\n        return null\n      }\n\n      return { code }\n    }\n\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-7.1.6\n    /** @type {Buffer} */\n    let reason = data.subarray(2)\n\n    // Remove BOM\n    if (reason[0] === 0xEF && reason[1] === 0xBB && reason[2] === 0xBF) {\n      reason = reason.subarray(3)\n    }\n\n    if (code !== undefined && !isValidStatusCode(code)) {\n      return null\n    }\n\n    try {\n      // TODO: optimize this\n      reason = new TextDecoder('utf-8', { fatal: true }).decode(reason)\n    } catch {\n      return null\n    }\n\n    return { code, reason }\n  }\n\n  get closingInfo () {\n    return this.#info.closeInfo\n  }\n}\n\nmodule.exports = {\n  ByteParser\n}\n", "'use strict'\n\nconst { webidl } = require('../fetch/webidl')\nconst { DOMException } = require('../fetch/constants')\nconst { URLSerializer } = require('../fetch/dataURL')\nconst { getGlobalOrigin } = require('../fetch/global')\nconst { staticPropertyDescriptors, states, opcodes, emptyBuffer } = require('./constants')\nconst {\n  kWebSocketURL,\n  kReadyState,\n  kController,\n  kBinaryType,\n  kResponse,\n  kSentClose,\n  kByteParser\n} = require('./symbols')\nconst { isEstablished, isClosing, isValidSubprotocol, failWebsocketConnection, fireEvent } = require('./util')\nconst { establishWebSocketConnection } = require('./connection')\nconst { WebsocketFrameSend } = require('./frame')\nconst { ByteParser } = require('./receiver')\nconst { kEnumerableProperty, isBlobLike } = require('../core/util')\nconst { getGlobalDispatcher } = require('../global')\nconst { types } = require('util')\n\nlet experimentalWarned = false\n\n// https://websockets.spec.whatwg.org/#interface-definition\nclass WebSocket extends EventTarget {\n  #events = {\n    open: null,\n    error: null,\n    close: null,\n    message: null\n  }\n\n  #bufferedAmount = 0\n  #protocol = ''\n  #extensions = ''\n\n  /**\n   * @param {string} url\n   * @param {string|string[]} protocols\n   */\n  constructor (url, protocols = []) {\n    super()\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket constructor' })\n\n    if (!experimentalWarned) {\n      experimentalWarned = true\n      process.emitWarning('WebSockets are experimental, expect them to change at any time.', {\n        code: 'UNDICI-WS'\n      })\n    }\n\n    const options = webidl.converters['DOMString or sequence<DOMString> or WebSocketInit'](protocols)\n\n    url = webidl.converters.USVString(url)\n    protocols = options.protocols\n\n    // 1. Let baseURL be this's relevant settings object's API base URL.\n    const baseURL = getGlobalOrigin()\n\n    // 1. Let urlRecord be the result of applying the URL parser to url with baseURL.\n    let urlRecord\n\n    try {\n      urlRecord = new URL(url, baseURL)\n    } catch (e) {\n      // 3. If urlRecord is failure, then throw a \"SyntaxError\" DOMException.\n      throw new DOMException(e, 'SyntaxError')\n    }\n\n    // 4. If urlRecord\u2019s scheme is \"http\", then set urlRecord\u2019s scheme to \"ws\".\n    if (urlRecord.protocol === 'http:') {\n      urlRecord.protocol = 'ws:'\n    } else if (urlRecord.protocol === 'https:') {\n      // 5. Otherwise, if urlRecord\u2019s scheme is \"https\", set urlRecord\u2019s scheme to \"wss\".\n      urlRecord.protocol = 'wss:'\n    }\n\n    // 6. If urlRecord\u2019s scheme is not \"ws\" or \"wss\", then throw a \"SyntaxError\" DOMException.\n    if (urlRecord.protocol !== 'ws:' && urlRecord.protocol !== 'wss:') {\n      throw new DOMException(\n        `Expected a ws: or wss: protocol, got ${urlRecord.protocol}`,\n        'SyntaxError'\n      )\n    }\n\n    // 7. If urlRecord\u2019s fragment is non-null, then throw a \"SyntaxError\"\n    //    DOMException.\n    if (urlRecord.hash || urlRecord.href.endsWith('#')) {\n      throw new DOMException('Got fragment', 'SyntaxError')\n    }\n\n    // 8. If protocols is a string, set protocols to a sequence consisting\n    //    of just that string.\n    if (typeof protocols === 'string') {\n      protocols = [protocols]\n    }\n\n    // 9. If any of the values in protocols occur more than once or otherwise\n    //    fail to match the requirements for elements that comprise the value\n    //    of `Sec-WebSocket-Protocol` fields as defined by The WebSocket\n    //    protocol, then throw a \"SyntaxError\" DOMException.\n    if (protocols.length !== new Set(protocols.map(p => p.toLowerCase())).size) {\n      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')\n    }\n\n    if (protocols.length > 0 && !protocols.every(p => isValidSubprotocol(p))) {\n      throw new DOMException('Invalid Sec-WebSocket-Protocol value', 'SyntaxError')\n    }\n\n    // 10. Set this's url to urlRecord.\n    this[kWebSocketURL] = new URL(urlRecord.href)\n\n    // 11. Let client be this's relevant settings object.\n\n    // 12. Run this step in parallel:\n\n    //    1. Establish a WebSocket connection given urlRecord, protocols,\n    //       and client.\n    this[kController] = establishWebSocketConnection(\n      urlRecord,\n      protocols,\n      this,\n      (response) => this.#onConnectionEstablished(response),\n      options\n    )\n\n    // Each WebSocket object has an associated ready state, which is a\n    // number representing the state of the connection. Initially it must\n    // be CONNECTING (0).\n    this[kReadyState] = WebSocket.CONNECTING\n\n    // The extensions attribute must initially return the empty string.\n\n    // The protocol attribute must initially return the empty string.\n\n    // Each WebSocket object has an associated binary type, which is a\n    // BinaryType. Initially it must be \"blob\".\n    this[kBinaryType] = 'blob'\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-close\n   * @param {number|undefined} code\n   * @param {string|undefined} reason\n   */\n  close (code = undefined, reason = undefined) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (code !== undefined) {\n      code = webidl.converters['unsigned short'](code, { clamp: true })\n    }\n\n    if (reason !== undefined) {\n      reason = webidl.converters.USVString(reason)\n    }\n\n    // 1. If code is present, but is neither an integer equal to 1000 nor an\n    //    integer in the range 3000 to 4999, inclusive, throw an\n    //    \"InvalidAccessError\" DOMException.\n    if (code !== undefined) {\n      if (code !== 1000 && (code < 3000 || code > 4999)) {\n        throw new DOMException('invalid code', 'InvalidAccessError')\n      }\n    }\n\n    let reasonByteLength = 0\n\n    // 2. If reason is present, then run these substeps:\n    if (reason !== undefined) {\n      // 1. Let reasonBytes be the result of encoding reason.\n      // 2. If reasonBytes is longer than 123 bytes, then throw a\n      //    \"SyntaxError\" DOMException.\n      reasonByteLength = Buffer.byteLength(reason)\n\n      if (reasonByteLength > 123) {\n        throw new DOMException(\n          `Reason must be less than 123 bytes; received ${reasonByteLength}`,\n          'SyntaxError'\n        )\n      }\n    }\n\n    // 3. Run the first matching steps from the following list:\n    if (this[kReadyState] === WebSocket.CLOSING || this[kReadyState] === WebSocket.CLOSED) {\n      // If this's ready state is CLOSING (2) or CLOSED (3)\n      // Do nothing.\n    } else if (!isEstablished(this)) {\n      // If the WebSocket connection is not yet established\n      // Fail the WebSocket connection and set this's ready state\n      // to CLOSING (2).\n      failWebsocketConnection(this, 'Connection was closed before it was established.')\n      this[kReadyState] = WebSocket.CLOSING\n    } else if (!isClosing(this)) {\n      // If the WebSocket closing handshake has not yet been started\n      // Start the WebSocket closing handshake and set this's ready\n      // state to CLOSING (2).\n      // - If neither code nor reason is present, the WebSocket Close\n      //   message must not have a body.\n      // - If code is present, then the status code to use in the\n      //   WebSocket Close message must be the integer given by code.\n      // - If reason is also present, then reasonBytes must be\n      //   provided in the Close message after the status code.\n\n      const frame = new WebsocketFrameSend()\n\n      // If neither code nor reason is present, the WebSocket Close\n      // message must not have a body.\n\n      // If code is present, then the status code to use in the\n      // WebSocket Close message must be the integer given by code.\n      if (code !== undefined && reason === undefined) {\n        frame.frameData = Buffer.allocUnsafe(2)\n        frame.frameData.writeUInt16BE(code, 0)\n      } else if (code !== undefined && reason !== undefined) {\n        // If reason is also present, then reasonBytes must be\n        // provided in the Close message after the status code.\n        frame.frameData = Buffer.allocUnsafe(2 + reasonByteLength)\n        frame.frameData.writeUInt16BE(code, 0)\n        // the body MAY contain UTF-8-encoded data with value /reason/\n        frame.frameData.write(reason, 2, 'utf-8')\n      } else {\n        frame.frameData = emptyBuffer\n      }\n\n      /** @type {import('stream').Duplex} */\n      const socket = this[kResponse].socket\n\n      socket.write(frame.createFrame(opcodes.CLOSE), (err) => {\n        if (!err) {\n          this[kSentClose] = true\n        }\n      })\n\n      // Upon either sending or receiving a Close control frame, it is said\n      // that _The WebSocket Closing Handshake is Started_ and that the\n      // WebSocket connection is in the CLOSING state.\n      this[kReadyState] = states.CLOSING\n    } else {\n      // Otherwise\n      // Set this's ready state to CLOSING (2).\n      this[kReadyState] = WebSocket.CLOSING\n    }\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#dom-websocket-send\n   * @param {NodeJS.TypedArray|ArrayBuffer|Blob|string} data\n   */\n  send (data) {\n    webidl.brandCheck(this, WebSocket)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'WebSocket.send' })\n\n    data = webidl.converters.WebSocketSendData(data)\n\n    // 1. If this's ready state is CONNECTING, then throw an\n    //    \"InvalidStateError\" DOMException.\n    if (this[kReadyState] === WebSocket.CONNECTING) {\n      throw new DOMException('Sent before connected.', 'InvalidStateError')\n    }\n\n    // 2. Run the appropriate set of steps from the following list:\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-6.1\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\n\n    if (!isEstablished(this) || isClosing(this)) {\n      return\n    }\n\n    /** @type {import('stream').Duplex} */\n    const socket = this[kResponse].socket\n\n    // If data is a string\n    if (typeof data === 'string') {\n      // If the WebSocket connection is established and the WebSocket\n      // closing handshake has not yet started, then the user agent\n      // must send a WebSocket Message comprised of the data argument\n      // using a text frame opcode; if the data cannot be sent, e.g.\n      // because it would need to be buffered but the buffer is full,\n      // the user agent must flag the WebSocket as full and then close\n      // the WebSocket connection. Any invocation of this method with a\n      // string argument that does not throw an exception must increase\n      // the bufferedAmount attribute by the number of bytes needed to\n      // express the argument as UTF-8.\n\n      const value = Buffer.from(data)\n      const frame = new WebsocketFrameSend(value)\n      const buffer = frame.createFrame(opcodes.TEXT)\n\n      this.#bufferedAmount += value.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= value.byteLength\n      })\n    } else if (types.isArrayBuffer(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need\n      // to be buffered but the buffer is full, the user agent must flag\n      // the WebSocket as full and then close the WebSocket connection.\n      // The data to be sent is the data stored in the buffer described\n      // by the ArrayBuffer object. Any invocation of this method with an\n      // ArrayBuffer argument that does not throw an exception must\n      // increase the bufferedAmount attribute by the length of the\n      // ArrayBuffer in bytes.\n\n      const value = Buffer.from(data)\n      const frame = new WebsocketFrameSend(value)\n      const buffer = frame.createFrame(opcodes.BINARY)\n\n      this.#bufferedAmount += value.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= value.byteLength\n      })\n    } else if (ArrayBuffer.isView(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need to\n      // be buffered but the buffer is full, the user agent must flag the\n      // WebSocket as full and then close the WebSocket connection. The\n      // data to be sent is the data stored in the section of the buffer\n      // described by the ArrayBuffer object that data references. Any\n      // invocation of this method with this kind of argument that does\n      // not throw an exception must increase the bufferedAmount attribute\n      // by the length of data\u2019s buffer in bytes.\n\n      const ab = Buffer.from(data, data.byteOffset, data.byteLength)\n\n      const frame = new WebsocketFrameSend(ab)\n      const buffer = frame.createFrame(opcodes.BINARY)\n\n      this.#bufferedAmount += ab.byteLength\n      socket.write(buffer, () => {\n        this.#bufferedAmount -= ab.byteLength\n      })\n    } else if (isBlobLike(data)) {\n      // If the WebSocket connection is established, and the WebSocket\n      // closing handshake has not yet started, then the user agent must\n      // send a WebSocket Message comprised of data using a binary frame\n      // opcode; if the data cannot be sent, e.g. because it would need to\n      // be buffered but the buffer is full, the user agent must flag the\n      // WebSocket as full and then close the WebSocket connection. The data\n      // to be sent is the raw data represented by the Blob object. Any\n      // invocation of this method with a Blob argument that does not throw\n      // an exception must increase the bufferedAmount attribute by the size\n      // of the Blob object\u2019s raw data, in bytes.\n\n      const frame = new WebsocketFrameSend()\n\n      data.arrayBuffer().then((ab) => {\n        const value = Buffer.from(ab)\n        frame.frameData = value\n        const buffer = frame.createFrame(opcodes.BINARY)\n\n        this.#bufferedAmount += value.byteLength\n        socket.write(buffer, () => {\n          this.#bufferedAmount -= value.byteLength\n        })\n      })\n    }\n  }\n\n  get readyState () {\n    webidl.brandCheck(this, WebSocket)\n\n    // The readyState getter steps are to return this's ready state.\n    return this[kReadyState]\n  }\n\n  get bufferedAmount () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#bufferedAmount\n  }\n\n  get url () {\n    webidl.brandCheck(this, WebSocket)\n\n    // The url getter steps are to return this's url, serialized.\n    return URLSerializer(this[kWebSocketURL])\n  }\n\n  get extensions () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#extensions\n  }\n\n  get protocol () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#protocol\n  }\n\n  get onopen () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.open\n  }\n\n  set onopen (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.open) {\n      this.removeEventListener('open', this.#events.open)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.open = fn\n      this.addEventListener('open', fn)\n    } else {\n      this.#events.open = null\n    }\n  }\n\n  get onerror () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.error\n  }\n\n  set onerror (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.error) {\n      this.removeEventListener('error', this.#events.error)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.error = fn\n      this.addEventListener('error', fn)\n    } else {\n      this.#events.error = null\n    }\n  }\n\n  get onclose () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.close\n  }\n\n  set onclose (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.close) {\n      this.removeEventListener('close', this.#events.close)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.close = fn\n      this.addEventListener('close', fn)\n    } else {\n      this.#events.close = null\n    }\n  }\n\n  get onmessage () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this.#events.message\n  }\n\n  set onmessage (fn) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (this.#events.message) {\n      this.removeEventListener('message', this.#events.message)\n    }\n\n    if (typeof fn === 'function') {\n      this.#events.message = fn\n      this.addEventListener('message', fn)\n    } else {\n      this.#events.message = null\n    }\n  }\n\n  get binaryType () {\n    webidl.brandCheck(this, WebSocket)\n\n    return this[kBinaryType]\n  }\n\n  set binaryType (type) {\n    webidl.brandCheck(this, WebSocket)\n\n    if (type !== 'blob' && type !== 'arraybuffer') {\n      this[kBinaryType] = 'blob'\n    } else {\n      this[kBinaryType] = type\n    }\n  }\n\n  /**\n   * @see https://websockets.spec.whatwg.org/#feedback-from-the-protocol\n   */\n  #onConnectionEstablished (response) {\n    // processResponse is called when the \"response\u2019s header list has been received and initialized.\"\n    // once this happens, the connection is open\n    this[kResponse] = response\n\n    const parser = new ByteParser(this)\n    parser.on('drain', function onParserDrain () {\n      this.ws[kResponse].socket.resume()\n    })\n\n    response.socket.ws = this\n    this[kByteParser] = parser\n\n    // 1. Change the ready state to OPEN (1).\n    this[kReadyState] = states.OPEN\n\n    // 2. Change the extensions attribute\u2019s value to the extensions in use, if\n    //    it is not the null value.\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-9.1\n    const extensions = response.headersList.get('sec-websocket-extensions')\n\n    if (extensions !== null) {\n      this.#extensions = extensions\n    }\n\n    // 3. Change the protocol attribute\u2019s value to the subprotocol in use, if\n    //    it is not the null value.\n    // https://datatracker.ietf.org/doc/html/rfc6455#section-1.9\n    const protocol = response.headersList.get('sec-websocket-protocol')\n\n    if (protocol !== null) {\n      this.#protocol = protocol\n    }\n\n    // 4. Fire an event named open at the WebSocket object.\n    fireEvent('open', this)\n  }\n}\n\n// https://websockets.spec.whatwg.org/#dom-websocket-connecting\nWebSocket.CONNECTING = WebSocket.prototype.CONNECTING = states.CONNECTING\n// https://websockets.spec.whatwg.org/#dom-websocket-open\nWebSocket.OPEN = WebSocket.prototype.OPEN = states.OPEN\n// https://websockets.spec.whatwg.org/#dom-websocket-closing\nWebSocket.CLOSING = WebSocket.prototype.CLOSING = states.CLOSING\n// https://websockets.spec.whatwg.org/#dom-websocket-closed\nWebSocket.CLOSED = WebSocket.prototype.CLOSED = states.CLOSED\n\nObject.defineProperties(WebSocket.prototype, {\n  CONNECTING: staticPropertyDescriptors,\n  OPEN: staticPropertyDescriptors,\n  CLOSING: staticPropertyDescriptors,\n  CLOSED: staticPropertyDescriptors,\n  url: kEnumerableProperty,\n  readyState: kEnumerableProperty,\n  bufferedAmount: kEnumerableProperty,\n  onopen: kEnumerableProperty,\n  onerror: kEnumerableProperty,\n  onclose: kEnumerableProperty,\n  close: kEnumerableProperty,\n  onmessage: kEnumerableProperty,\n  binaryType: kEnumerableProperty,\n  send: kEnumerableProperty,\n  extensions: kEnumerableProperty,\n  protocol: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'WebSocket',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  }\n})\n\nObject.defineProperties(WebSocket, {\n  CONNECTING: staticPropertyDescriptors,\n  OPEN: staticPropertyDescriptors,\n  CLOSING: staticPropertyDescriptors,\n  CLOSED: staticPropertyDescriptors\n})\n\nwebidl.converters['sequence<DOMString>'] = webidl.sequenceConverter(\n  webidl.converters.DOMString\n)\n\nwebidl.converters['DOMString or sequence<DOMString>'] = function (V) {\n  if (webidl.util.Type(V) === 'Object' && Symbol.iterator in V) {\n    return webidl.converters['sequence<DOMString>'](V)\n  }\n\n  return webidl.converters.DOMString(V)\n}\n\n// This implements the propsal made in https://github.com/whatwg/websockets/issues/42\nwebidl.converters.WebSocketInit = webidl.dictionaryConverter([\n  {\n    key: 'protocols',\n    converter: webidl.converters['DOMString or sequence<DOMString>'],\n    get defaultValue () {\n      return []\n    }\n  },\n  {\n    key: 'dispatcher',\n    converter: (V) => V,\n    get defaultValue () {\n      return getGlobalDispatcher()\n    }\n  },\n  {\n    key: 'headers',\n    converter: webidl.nullableConverter(webidl.converters.HeadersInit)\n  }\n])\n\nwebidl.converters['DOMString or sequence<DOMString> or WebSocketInit'] = function (V) {\n  if (webidl.util.Type(V) === 'Object' && !(Symbol.iterator in V)) {\n    return webidl.converters.WebSocketInit(V)\n  }\n\n  return { protocols: webidl.converters['DOMString or sequence<DOMString>'](V) }\n}\n\nwebidl.converters.WebSocketSendData = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (isBlobLike(V)) {\n      return webidl.converters.Blob(V, { strict: false })\n    }\n\n    if (ArrayBuffer.isView(V) || types.isAnyArrayBuffer(V)) {\n      return webidl.converters.BufferSource(V)\n    }\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nmodule.exports = {\n  WebSocket\n}\n", "'use strict'\n\nconst Client = require('./lib/client')\nconst Dispatcher = require('./lib/dispatcher')\nconst errors = require('./lib/core/errors')\nconst Pool = require('./lib/pool')\nconst BalancedPool = require('./lib/balanced-pool')\nconst Agent = require('./lib/agent')\nconst util = require('./lib/core/util')\nconst { InvalidArgumentError } = errors\nconst api = require('./lib/api')\nconst buildConnector = require('./lib/core/connect')\nconst MockClient = require('./lib/mock/mock-client')\nconst MockAgent = require('./lib/mock/mock-agent')\nconst MockPool = require('./lib/mock/mock-pool')\nconst mockErrors = require('./lib/mock/mock-errors')\nconst ProxyAgent = require('./lib/proxy-agent')\nconst RetryHandler = require('./lib/handler/RetryHandler')\nconst { getGlobalDispatcher, setGlobalDispatcher } = require('./lib/global')\nconst DecoratorHandler = require('./lib/handler/DecoratorHandler')\nconst RedirectHandler = require('./lib/handler/RedirectHandler')\nconst createRedirectInterceptor = require('./lib/interceptor/redirectInterceptor')\n\nlet hasCrypto\ntry {\n  require('crypto')\n  hasCrypto = true\n} catch {\n  hasCrypto = false\n}\n\nObject.assign(Dispatcher.prototype, api)\n\nmodule.exports.Dispatcher = Dispatcher\nmodule.exports.Client = Client\nmodule.exports.Pool = Pool\nmodule.exports.BalancedPool = BalancedPool\nmodule.exports.Agent = Agent\nmodule.exports.ProxyAgent = ProxyAgent\nmodule.exports.RetryHandler = RetryHandler\n\nmodule.exports.DecoratorHandler = DecoratorHandler\nmodule.exports.RedirectHandler = RedirectHandler\nmodule.exports.createRedirectInterceptor = createRedirectInterceptor\n\nmodule.exports.buildConnector = buildConnector\nmodule.exports.errors = errors\n\nfunction makeDispatcher (fn) {\n  return (url, opts, handler) => {\n    if (typeof opts === 'function') {\n      handler = opts\n      opts = null\n    }\n\n    if (!url || (typeof url !== 'string' && typeof url !== 'object' && !(url instanceof URL))) {\n      throw new InvalidArgumentError('invalid url')\n    }\n\n    if (opts != null && typeof opts !== 'object') {\n      throw new InvalidArgumentError('invalid opts')\n    }\n\n    if (opts && opts.path != null) {\n      if (typeof opts.path !== 'string') {\n        throw new InvalidArgumentError('invalid opts.path')\n      }\n\n      let path = opts.path\n      if (!opts.path.startsWith('/')) {\n        path = `/${path}`\n      }\n\n      url = new URL(util.parseOrigin(url).origin + path)\n    } else {\n      if (!opts) {\n        opts = typeof url === 'object' ? url : {}\n      }\n\n      url = util.parseURL(url)\n    }\n\n    const { agent, dispatcher = getGlobalDispatcher() } = opts\n\n    if (agent) {\n      throw new InvalidArgumentError('unsupported opts.agent. Did you mean opts.client?')\n    }\n\n    return fn.call(dispatcher, {\n      ...opts,\n      origin: url.origin,\n      path: url.search ? `${url.pathname}${url.search}` : url.pathname,\n      method: opts.method || (opts.body ? 'PUT' : 'GET')\n    }, handler)\n  }\n}\n\nmodule.exports.setGlobalDispatcher = setGlobalDispatcher\nmodule.exports.getGlobalDispatcher = getGlobalDispatcher\n\nif (util.nodeMajor > 16 || (util.nodeMajor === 16 && util.nodeMinor >= 8)) {\n  let fetchImpl = null\n  module.exports.fetch = async function fetch (resource) {\n    if (!fetchImpl) {\n      fetchImpl = require('./lib/fetch').fetch\n    }\n\n    try {\n      return await fetchImpl(...arguments)\n    } catch (err) {\n      if (typeof err === 'object') {\n        Error.captureStackTrace(err, this)\n      }\n\n      throw err\n    }\n  }\n  module.exports.Headers = require('./lib/fetch/headers').Headers\n  module.exports.Response = require('./lib/fetch/response').Response\n  module.exports.Request = require('./lib/fetch/request').Request\n  module.exports.FormData = require('./lib/fetch/formdata').FormData\n  module.exports.File = require('./lib/fetch/file').File\n  module.exports.FileReader = require('./lib/fileapi/filereader').FileReader\n\n  const { setGlobalOrigin, getGlobalOrigin } = require('./lib/fetch/global')\n\n  module.exports.setGlobalOrigin = setGlobalOrigin\n  module.exports.getGlobalOrigin = getGlobalOrigin\n\n  const { CacheStorage } = require('./lib/cache/cachestorage')\n  const { kConstruct } = require('./lib/cache/symbols')\n\n  // Cache & CacheStorage are tightly coupled with fetch. Even if it may run\n  // in an older version of Node, it doesn't have any use without fetch.\n  module.exports.caches = new CacheStorage(kConstruct)\n}\n\nif (util.nodeMajor >= 16) {\n  const { deleteCookie, getCookies, getSetCookies, setCookie } = require('./lib/cookies')\n\n  module.exports.deleteCookie = deleteCookie\n  module.exports.getCookies = getCookies\n  module.exports.getSetCookies = getSetCookies\n  module.exports.setCookie = setCookie\n\n  const { parseMIMEType, serializeAMimeType } = require('./lib/fetch/dataURL')\n\n  module.exports.parseMIMEType = parseMIMEType\n  module.exports.serializeAMimeType = serializeAMimeType\n}\n\nif (util.nodeMajor >= 18 && hasCrypto) {\n  const { WebSocket } = require('./lib/websocket/websocket')\n\n  module.exports.WebSocket = WebSocket\n}\n\nmodule.exports.request = makeDispatcher(api.request)\nmodule.exports.stream = makeDispatcher(api.stream)\nmodule.exports.pipeline = makeDispatcher(api.pipeline)\nmodule.exports.connect = makeDispatcher(api.connect)\nmodule.exports.upgrade = makeDispatcher(api.upgrade)\n\nmodule.exports.MockClient = MockClient\nmodule.exports.MockPool = MockPool\nmodule.exports.MockAgent = MockAgent\nmodule.exports.mockErrors = mockErrors\n", null, null, null, null, null, null, null, null, null, null, null, "import {setFailed} from '@actions/core'\n\nimport {run} from './main.js'\n\ntry {\n  void run()\n} catch (error) {\n  if (error instanceof Error) setFailed(error.message)\n}\n", "import {debug, info, setFailed, summary} from '@actions/core'\n\nimport {batchDelete} from '@/common/batch-delete.js'\nimport {getGitHubDeployments} from '@/common/github/deployment/get.js'\n\nimport {useInputs} from './inputs.js'\n\nconst PREFIX = `delete -`\n\nexport async function run() {\n  let deployments = await getGitHubDeployments()\n\n  const {keepLatest} = useInputs()\n  if (deployments.length > 0 && keepLatest) {\n    info(`${PREFIX} Keeping latest ${keepLatest} deployments`)\n    deployments = deployments.slice(keepLatest)\n  }\n  if (deployments.length === 0) {\n    info(`${PREFIX} No deployments to delete`)\n\n    await summary\n      .addHeading('andykenward/github-actions-cloudflare-pages')\n      .addBreak()\n      .addTable([['No deployments to delete']])\n      .write()\n    return\n  }\n\n  try {\n    const values = await Promise.all(\n      deployments.map(deployment => batchDelete(deployment))\n    )\n    debug(`${PREFIX} Deleted deployments: ${JSON.stringify(values)}`)\n\n    if (values.length > 0) {\n      await summary\n        .addHeading('andykenward/github-actions-cloudflare-pages')\n        .addBreak()\n        .addHeading('Deleted Deployments')\n        .addBreak()\n        .addTable([\n          [\n            {data: 'GitHub Deployment Id', header: true},\n            {data: 'Success', header: true},\n            {data: 'Environment', header: true},\n            {data: 'Environment Url', header: true},\n            {data: 'Comment Id', header: true},\n            {data: 'Error', header: true}\n          ],\n          ...values.map(value => [\n            value.deploymentId,\n            value.success ? '\u2705' : '\u274C',\n            value.environment,\n            value.environmentUrl\n              ? `<a href='${value.environmentUrl}'><code>${value.environmentUrl}</code></a>`\n              : '',\n            value.commentId || '',\n            value.error || ''\n          ])\n        ])\n        .write()\n    }\n  } catch (error) {\n    const message =\n      error instanceof Error ? error.message : JSON.stringify(error)\n\n    setFailed(`${PREFIX} Error deleting deployments: ${message}`)\n  }\n}\n", "import {info, warning} from '@actions/core'\n\nimport {DeploymentStatusState} from '@/gql/graphql.js'\n\nimport type {getGitHubDeployments} from './github/deployment/get.js'\n\nimport {getCloudflareLogEndpoint} from './cloudflare/api/endpoints.js'\nimport {deleteCloudflareDeployment} from './cloudflare/deployment/delete.js'\nimport {request} from './github/api/client.js'\nimport {\n  MutationDeleteGitHubDeployment,\n  MutationDeleteGitHubDeploymentAndComment\n} from './github/deployment/delete.js'\nimport {getPayload} from './github/deployment/payload.js'\nimport {MutationCreateGitHubDeploymentStatus} from './github/deployment/status.js'\n\nconst PREFIX = `delete -`\n\ntype BatchDeleteItem = {\n  deploymentId: string\n  success: boolean\n  environment: string\n  environmentUrl?: string\n  commentId?: string\n  error?: string\n}\n\nexport const batchDelete = async (\n  deployment: Awaited<ReturnType<typeof getGitHubDeployments>>[number]\n): Promise<BatchDeleteItem> => {\n  const payload = deployment.payload\n\n  try {\n    const {commentId, url, cloudflare} = getPayload(payload)\n\n    /**\n     * Delete Cloudflare deployment\n     */\n    const deletedCloudflareDeployment =\n      await deleteCloudflareDeployment(cloudflare)\n\n    if (!deletedCloudflareDeployment)\n      return {\n        success: false,\n        error: 'Deleting Cloudflare deployment failed',\n        environment: deployment.environment,\n        environmentUrl: url,\n        deploymentId: deployment.node_id,\n        commentId\n      }\n    /**\n     * On success of Cloudflare deployment delete GitHub deployment & comment.\n     */\n\n    const updateStatusGitHubDeployment = await request({\n      query: MutationCreateGitHubDeploymentStatus,\n      variables: {\n        environment: deployment.environment,\n        deploymentId: deployment.node_id,\n        environmentUrl: url,\n        logUrl: getCloudflareLogEndpoint(cloudflare),\n        state: DeploymentStatusState.Inactive\n      },\n      options: {\n        errorThrows: false\n      }\n    })\n\n    if (updateStatusGitHubDeployment.errors) {\n      warning(\n        `${PREFIX} Error updating GitHub deployment status: ${JSON.stringify(\n          updateStatusGitHubDeployment.errors\n        )}`\n      )\n      return {\n        success: false,\n        error: 'Updating GitHub deployment status failed',\n        environment: deployment.environment,\n        environmentUrl: url,\n        deploymentId: deployment.node_id,\n        commentId\n      }\n    }\n\n    const deletedGitHubDeployment = commentId\n      ? await request({\n          query: MutationDeleteGitHubDeploymentAndComment,\n          variables: {\n            deploymentId: deployment.node_id,\n            commentId: commentId\n          },\n          options: {\n            errorThrows: false\n          }\n        })\n      : await request({\n          query: MutationDeleteGitHubDeployment,\n          variables: {\n            deploymentId: deployment.node_id\n          },\n          options: {\n            errorThrows: false\n          }\n        })\n\n    if (deletedGitHubDeployment.errors) {\n      warning(\n        `${PREFIX} Error deleting GitHub deployment: ${JSON.stringify(\n          deletedGitHubDeployment.errors\n        )}`\n      )\n    }\n    info(`${PREFIX} GitHub Deployment Deleted: ${deployment.node_id}`)\n\n    return {\n      success: true,\n      environment: deployment.environment,\n      environmentUrl: url,\n      deploymentId: deployment.node_id,\n      commentId\n    }\n  } catch (error) {\n    const message = error instanceof Error ? error.message : 'unknown error'\n    info(`${PREFIX} Deployment payload is not valid : ${message}`)\n\n    return {\n      success: false,\n      error: message,\n      environment: deployment.environment,\n      deploymentId: deployment.node_id\n    }\n  }\n}\n", "/* eslint-disable */\nimport type { DocumentTypeDecoration } from '@graphql-typed-document-node/core';\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\nexport type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };\nexport type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: { input: string; output: string; }\n  String: { input: string; output: string; }\n  Boolean: { input: boolean; output: boolean; }\n  Int: { input: number; output: number; }\n  Float: { input: number; output: number; }\n  /** A (potentially binary) string encoded using base64. */\n  Base64String: { input: any; output: any; }\n  /**\n   * Represents non-fractional signed whole numeric values. Since the value may\n   * exceed the size of a 32-bit integer, it's encoded as a string.\n   */\n  BigInt: { input: any; output: any; }\n  /** An ISO-8601 encoded date string. */\n  Date: { input: any; output: any; }\n  /** An ISO-8601 encoded UTC date string. */\n  DateTime: { input: any; output: any; }\n  /** A Git object ID. */\n  GitObjectID: { input: any; output: any; }\n  /** A fully qualified reference name (e.g. `refs/heads/master`). */\n  GitRefname: { input: any; output: any; }\n  /** Git SSH string */\n  GitSSHRemote: { input: any; output: any; }\n  /** An ISO-8601 encoded date string. Unlike the DateTime type, GitTimestamp is not converted in UTC. */\n  GitTimestamp: { input: any; output: any; }\n  /** A string containing HTML code. */\n  HTML: { input: any; output: any; }\n  /** An ISO-8601 encoded UTC date string with millisecond precision. */\n  PreciseDateTime: { input: any; output: any; }\n  /** An RFC 3986, RFC 3987, and RFC 6570 (level 4) compliant URI string. */\n  URI: { input: any; output: any; }\n  /** A valid x509 certificate string */\n  X509Certificate: { input: any; output: any; }\n};\n\n/** Autogenerated input type of AbortQueuedMigrations */\nexport type AbortQueuedMigrationsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the organization that is running the migrations. */\n  ownerId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AbortQueuedMigrations. */\nexport type AbortQueuedMigrationsPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Autogenerated input type of AbortRepositoryMigration */\nexport type AbortRepositoryMigrationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the migration to be aborted. */\n  migrationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AbortRepositoryMigration. */\nexport type AbortRepositoryMigrationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Autogenerated input type of AcceptEnterpriseAdministratorInvitation */\nexport type AcceptEnterpriseAdministratorInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the invitation being accepted */\n  invitationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AcceptEnterpriseAdministratorInvitation. */\nexport type AcceptEnterpriseAdministratorInvitationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The invitation that was accepted. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** A message confirming the result of accepting an administrator invitation. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of AcceptEnterpriseMemberInvitation */\nexport type AcceptEnterpriseMemberInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the invitation being accepted */\n  invitationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AcceptEnterpriseMemberInvitation. */\nexport type AcceptEnterpriseMemberInvitationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The invitation that was accepted. */\n  invitation?: Maybe<EnterpriseMemberInvitation>;\n  /** A message confirming the result of accepting an unaffiliated member invitation. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of AcceptTopicSuggestion */\nexport type AcceptTopicSuggestionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The name of the suggested topic.\n   *\n   * **Upcoming Change on 2024-04-01 UTC**\n   * **Description:** `name` will be removed.\n   * **Reason:** Suggested topics are no longer supported\n   */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The Node ID of the repository.\n   *\n   * **Upcoming Change on 2024-04-01 UTC**\n   * **Description:** `repositoryId` will be removed.\n   * **Reason:** Suggested topics are no longer supported\n   */\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of AcceptTopicSuggestion. */\nexport type AcceptTopicSuggestionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /**\n   * The accepted topic.\n   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC.\n   */\n  topic?: Maybe<Topic>;\n};\n\n/** Represents an object which can take actions on GitHub. Typically a User or Bot. */\nexport type Actor = {\n  /** A URL pointing to the actor's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** The username of the actor. */\n  login: Scalars['String']['output'];\n  /** The HTTP path for this actor. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this actor. */\n  url: Scalars['URI']['output'];\n};\n\n\n/** Represents an object which can take actions on GitHub. Typically a User or Bot. */\nexport type ActorAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Location information for an actor */\nexport type ActorLocation = {\n  /** City */\n  city?: Maybe<Scalars['String']['output']>;\n  /** Country name */\n  country?: Maybe<Scalars['String']['output']>;\n  /** Country code */\n  countryCode?: Maybe<Scalars['String']['output']>;\n  /** Region name */\n  region?: Maybe<Scalars['String']['output']>;\n  /** Region or state code */\n  regionCode?: Maybe<Scalars['String']['output']>;\n};\n\n/** The actor's type. */\nexport enum ActorType {\n  /** Indicates a team actor. */\n  Team = 'TEAM',\n  /** Indicates a user actor. */\n  User = 'USER'\n}\n\n/** Autogenerated input type of AddAssigneesToAssignable */\nexport type AddAssigneesToAssignableInput = {\n  /** The id of the assignable object to add assignees to. */\n  assignableId: Scalars['ID']['input'];\n  /** The id of users to add as assignees. */\n  assigneeIds: Array<Scalars['ID']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of AddAssigneesToAssignable. */\nexport type AddAssigneesToAssignablePayload = {\n  /** The item that was assigned. */\n  assignable?: Maybe<Assignable>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of AddComment */\nexport type AddCommentInput = {\n  /** The contents of the comment. */\n  body: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddComment. */\nexport type AddCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The edge from the subject's comment connection. */\n  commentEdge?: Maybe<IssueCommentEdge>;\n  /** The subject */\n  subject?: Maybe<Node>;\n  /** The edge from the subject's timeline connection. */\n  timelineEdge?: Maybe<IssueTimelineItemEdge>;\n};\n\n/** Autogenerated input type of AddDiscussionComment */\nexport type AddDiscussionCommentInput = {\n  /** The contents of the comment. */\n  body: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion to comment on. */\n  discussionId: Scalars['ID']['input'];\n  /** The Node ID of the discussion comment within this discussion to reply to. */\n  replyToId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of AddDiscussionComment. */\nexport type AddDiscussionCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The newly created discussion comment. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of AddDiscussionPollVote */\nexport type AddDiscussionPollVoteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion poll option to vote for. */\n  pollOptionId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddDiscussionPollVote. */\nexport type AddDiscussionPollVotePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The poll option that a vote was added to. */\n  pollOption?: Maybe<DiscussionPollOption>;\n};\n\n/** Autogenerated input type of AddEnterpriseOrganizationMember */\nexport type AddEnterpriseOrganizationMemberInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise which owns the organization. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The ID of the organization the users will be added to. */\n  organizationId: Scalars['ID']['input'];\n  /** The role to assign the users in the organization */\n  role?: InputMaybe<OrganizationMemberRole>;\n  /** The IDs of the enterprise members to add. */\n  userIds: Array<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of AddEnterpriseOrganizationMember. */\nexport type AddEnterpriseOrganizationMemberPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The users who were added to the organization. */\n  users?: Maybe<Array<User>>;\n};\n\n/** Autogenerated input type of AddEnterpriseSupportEntitlement */\nexport type AddEnterpriseSupportEntitlementInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of a member who will receive the support entitlement. */\n  login: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of AddEnterpriseSupportEntitlement. */\nexport type AddEnterpriseSupportEntitlementPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** A message confirming the result of adding the support entitlement. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of AddLabelsToLabelable */\nexport type AddLabelsToLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ids of the labels to add. */\n  labelIds: Array<Scalars['ID']['input']>;\n  /** The id of the labelable object to add labels to. */\n  labelableId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddLabelsToLabelable. */\nexport type AddLabelsToLabelablePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The item that was labeled. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of AddProjectCard */\nexport type AddProjectCardInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The content of the card. Must be a member of the ProjectCardItem union */\n  contentId?: InputMaybe<Scalars['ID']['input']>;\n  /** The note on the card. */\n  note?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the ProjectColumn. */\n  projectColumnId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddProjectCard. */\nexport type AddProjectCardPayload = {\n  /** The edge from the ProjectColumn's card connection. */\n  cardEdge?: Maybe<ProjectCardEdge>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ProjectColumn */\n  projectColumn?: Maybe<ProjectColumn>;\n};\n\n/** Autogenerated input type of AddProjectColumn */\nexport type AddProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the column. */\n  name: Scalars['String']['input'];\n  /** The Node ID of the project. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddProjectColumn. */\nexport type AddProjectColumnPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The edge from the project's column connection. */\n  columnEdge?: Maybe<ProjectColumnEdge>;\n  /** The project */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of AddProjectV2DraftIssue */\nexport type AddProjectV2DraftIssueInput = {\n  /** The IDs of the assignees of the draft issue. */\n  assigneeIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The body of the draft issue. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Project to add the draft issue to. */\n  projectId: Scalars['ID']['input'];\n  /**\n   * The title of the draft issue. A project item can also be created by providing\n   * the URL of an Issue or Pull Request if you have access.\n   */\n  title: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of AddProjectV2DraftIssue. */\nexport type AddProjectV2DraftIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The draft issue added to the project. */\n  projectItem?: Maybe<ProjectV2Item>;\n};\n\n/** Autogenerated input type of AddProjectV2ItemById */\nexport type AddProjectV2ItemByIdInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the Issue or Pull Request to add. */\n  contentId: Scalars['ID']['input'];\n  /** The ID of the Project to add the item to. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddProjectV2ItemById. */\nexport type AddProjectV2ItemByIdPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The item added to the project. */\n  item?: Maybe<ProjectV2Item>;\n};\n\n/** Autogenerated input type of AddPullRequestReviewComment */\nexport type AddPullRequestReviewCommentInput = {\n  /**\n   * The text of the comment. This field is required\n   *\n   * **Upcoming Change on 2023-10-01 UTC**\n   * **Description:** `body` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n   * **Reason:** We are deprecating the addPullRequestReviewComment mutation\n   */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The SHA of the commit to comment on.\n   *\n   * **Upcoming Change on 2023-10-01 UTC**\n   * **Description:** `commitOID` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n   * **Reason:** We are deprecating the addPullRequestReviewComment mutation\n   */\n  commitOID?: InputMaybe<Scalars['GitObjectID']['input']>;\n  /**\n   * The comment id to reply to.\n   *\n   * **Upcoming Change on 2023-10-01 UTC**\n   * **Description:** `inReplyTo` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n   * **Reason:** We are deprecating the addPullRequestReviewComment mutation\n   */\n  inReplyTo?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * The relative path of the file to comment on.\n   *\n   * **Upcoming Change on 2023-10-01 UTC**\n   * **Description:** `path` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n   * **Reason:** We are deprecating the addPullRequestReviewComment mutation\n   */\n  path?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The line index in the diff to comment on.\n   *\n   * **Upcoming Change on 2023-10-01 UTC**\n   * **Description:** `position` will be removed. use addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n   * **Reason:** We are deprecating the addPullRequestReviewComment mutation\n   */\n  position?: InputMaybe<Scalars['Int']['input']>;\n  /**\n   * The node ID of the pull request reviewing\n   *\n   * **Upcoming Change on 2023-10-01 UTC**\n   * **Description:** `pullRequestId` will be removed. use\n   * addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n   * **Reason:** We are deprecating the addPullRequestReviewComment mutation\n   */\n  pullRequestId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * The Node ID of the review to modify.\n   *\n   * **Upcoming Change on 2023-10-01 UTC**\n   * **Description:** `pullRequestReviewId` will be removed. use\n   * addPullRequestReviewThread or addPullRequestReviewThreadReply instead\n   * **Reason:** We are deprecating the addPullRequestReviewComment mutation\n   */\n  pullRequestReviewId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of AddPullRequestReviewComment. */\nexport type AddPullRequestReviewCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The newly created comment. */\n  comment?: Maybe<PullRequestReviewComment>;\n  /** The edge from the review's comment connection. */\n  commentEdge?: Maybe<PullRequestReviewCommentEdge>;\n};\n\n/** Autogenerated input type of AddPullRequestReview */\nexport type AddPullRequestReviewInput = {\n  /** The contents of the review body comment. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The review line comments.\n   *\n   * **Upcoming Change on 2023-10-01 UTC**\n   * **Description:** `comments` will be removed. use the `threads` argument instead\n   * **Reason:** We are deprecating comment fields that use diff-relative positioning\n   */\n  comments?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewComment>>>;\n  /** The commit OID the review pertains to. */\n  commitOID?: InputMaybe<Scalars['GitObjectID']['input']>;\n  /** The event to perform on the pull request review. */\n  event?: InputMaybe<PullRequestReviewEvent>;\n  /** The Node ID of the pull request to modify. */\n  pullRequestId: Scalars['ID']['input'];\n  /** The review line comment threads. */\n  threads?: InputMaybe<Array<InputMaybe<DraftPullRequestReviewThread>>>;\n};\n\n/** Autogenerated return type of AddPullRequestReview. */\nexport type AddPullRequestReviewPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The newly created pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n  /** The edge from the pull request's review connection. */\n  reviewEdge?: Maybe<PullRequestReviewEdge>;\n};\n\n/** Autogenerated input type of AddPullRequestReviewThread */\nexport type AddPullRequestReviewThreadInput = {\n  /** Body of the thread's first comment. */\n  body: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The line of the blob to which the thread refers, required for line-level\n   * threads. The end of the line range for multi-line comments.\n   */\n  line?: InputMaybe<Scalars['Int']['input']>;\n  /** Path to the file being commented on. */\n  path: Scalars['String']['input'];\n  /** The node ID of the pull request reviewing */\n  pullRequestId?: InputMaybe<Scalars['ID']['input']>;\n  /** The Node ID of the review to modify. */\n  pullRequestReviewId?: InputMaybe<Scalars['ID']['input']>;\n  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */\n  side?: InputMaybe<DiffSide>;\n  /** The first line of the range to which the comment refers. */\n  startLine?: InputMaybe<Scalars['Int']['input']>;\n  /** The side of the diff on which the start line resides. */\n  startSide?: InputMaybe<DiffSide>;\n  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */\n  subjectType?: InputMaybe<PullRequestReviewThreadSubjectType>;\n};\n\n/** Autogenerated return type of AddPullRequestReviewThread. */\nexport type AddPullRequestReviewThreadPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The newly created thread. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Autogenerated input type of AddPullRequestReviewThreadReply */\nexport type AddPullRequestReviewThreadReplyInput = {\n  /** The text of the reply. */\n  body: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the pending review to which the reply will belong. */\n  pullRequestReviewId?: InputMaybe<Scalars['ID']['input']>;\n  /** The Node ID of the thread to which this reply is being written. */\n  pullRequestReviewThreadId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddPullRequestReviewThreadReply. */\nexport type AddPullRequestReviewThreadReplyPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The newly created reply. */\n  comment?: Maybe<PullRequestReviewComment>;\n};\n\n/** Autogenerated input type of AddReaction */\nexport type AddReactionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the emoji to react with. */\n  content: ReactionContent;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddReaction. */\nexport type AddReactionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The reaction object. */\n  reaction?: Maybe<Reaction>;\n  /** The reaction groups for the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** The reactable subject. */\n  subject?: Maybe<Reactable>;\n};\n\n/** Autogenerated input type of AddStar */\nexport type AddStarInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Starrable ID to star. */\n  starrableId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddStar. */\nexport type AddStarPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The starrable. */\n  starrable?: Maybe<Starrable>;\n};\n\n/** Autogenerated input type of AddUpvote */\nexport type AddUpvoteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion or comment to upvote. */\n  subjectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddUpvote. */\nexport type AddUpvotePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The votable subject. */\n  subject?: Maybe<Votable>;\n};\n\n/** Autogenerated input type of AddVerifiableDomain */\nexport type AddVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The URL of the domain */\n  domain: Scalars['URI']['input'];\n  /** The ID of the owner to add the domain to */\n  ownerId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of AddVerifiableDomain. */\nexport type AddVerifiableDomainPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The verifiable domain that was added. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** Represents an 'added_to_merge_queue' event on a given pull request. */\nexport type AddedToMergeQueueEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The user who added this Pull Request to the merge queue */\n  enqueuer?: Maybe<User>;\n  /** The Node ID of the AddedToMergeQueueEvent object */\n  id: Scalars['ID']['output'];\n  /** The merge queue where this pull request was added to. */\n  mergeQueue?: Maybe<MergeQueue>;\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'added_to_project' event on a given issue or pull request. */\nexport type AddedToProjectEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the AddedToProjectEvent object */\n  id: Scalars['ID']['output'];\n  /** Project referenced by event. */\n  project?: Maybe<Project>;\n  /** Project card referenced by this project event. */\n  projectCard?: Maybe<ProjectCard>;\n  /** Column name referenced by this project event. */\n  projectColumnName: Scalars['String']['output'];\n};\n\n/** Represents an announcement banner. */\nexport type AnnouncementBanner = {\n  /** The text of the announcement */\n  announcement?: Maybe<Scalars['String']['output']>;\n  /** The date the announcement was created */\n  announcementCreatedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The expiration date of the announcement, if any */\n  announcementExpiresAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Whether the announcement can be dismissed by the user */\n  announcementUserDismissible?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** A GitHub App. */\nexport type App = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The description of the app. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the App object */\n  id: Scalars['ID']['output'];\n  /** The IP addresses of the app. */\n  ipAllowListEntries: IpAllowListEntryConnection;\n  /** The hex color code, without the leading '#', for the logo background. */\n  logoBackgroundColor: Scalars['String']['output'];\n  /** A URL pointing to the app's logo. */\n  logoUrl: Scalars['URI']['output'];\n  /** The name of the app. */\n  name: Scalars['String']['output'];\n  /** A slug based on the name of the app for use in URLs. */\n  slug: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The URL to the app's homepage. */\n  url: Scalars['URI']['output'];\n};\n\n\n/** A GitHub App. */\nexport type AppIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n\n/** A GitHub App. */\nexport type AppLogoUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Autogenerated input type of ApproveDeployments */\nexport type ApproveDeploymentsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Optional comment for approving deployments */\n  comment?: InputMaybe<Scalars['String']['input']>;\n  /** The ids of environments to reject deployments */\n  environmentIds: Array<Scalars['ID']['input']>;\n  /** The node ID of the workflow run containing the pending deployments. */\n  workflowRunId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ApproveDeployments. */\nexport type ApproveDeploymentsPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The affected deployments. */\n  deployments?: Maybe<Array<Deployment>>;\n};\n\n/** Autogenerated input type of ApproveVerifiableDomain */\nexport type ApproveVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the verifiable domain to approve. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ApproveVerifiableDomain. */\nexport type ApproveVerifiableDomainPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The verifiable domain that was approved. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** Autogenerated input type of ArchiveProjectV2Item */\nexport type ArchiveProjectV2ItemInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the ProjectV2Item to archive. */\n  itemId: Scalars['ID']['input'];\n  /** The ID of the Project to archive the item from. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ArchiveProjectV2Item. */\nexport type ArchiveProjectV2ItemPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The item archived from the project. */\n  item?: Maybe<ProjectV2Item>;\n};\n\n/** Autogenerated input type of ArchiveRepository */\nexport type ArchiveRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the repository to mark as archived. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ArchiveRepository. */\nexport type ArchiveRepositoryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The repository that was marked as archived. */\n  repository?: Maybe<Repository>;\n};\n\n/** An object that can have users assigned to it. */\nexport type Assignable = {\n  /** A list of Users assigned to this object. */\n  assignees: UserConnection;\n};\n\n\n/** An object that can have users assigned to it. */\nexport type AssignableAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Represents an 'assigned' event on any assignable object. */\nexport type AssignedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the assignable associated with the event. */\n  assignable: Assignable;\n  /** Identifies the user or mannequin that was assigned. */\n  assignee?: Maybe<Assignee>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the AssignedEvent object */\n  id: Scalars['ID']['output'];\n  /**\n   * Identifies the user who was assigned.\n   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.\n   */\n  user?: Maybe<User>;\n};\n\n/** Types that can be assigned to issues. */\nexport type Assignee = Bot | Mannequin | Organization | User;\n\n/** An entry in the audit log. */\nexport type AuditEntry = {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Types that can initiate an audit log event. */\nexport type AuditEntryActor = Bot | Organization | User;\n\n/** Ordering options for Audit Log connections. */\nexport type AuditLogOrder = {\n  /** The ordering direction. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field to order Audit Logs by. */\n  field?: InputMaybe<AuditLogOrderField>;\n};\n\n/** Properties by which Audit Log connections can be ordered. */\nexport enum AuditLogOrderField {\n  /** Order audit log entries by timestamp */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Represents a 'auto_merge_disabled' event on a given pull request. */\nexport type AutoMergeDisabledEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The user who disabled auto-merge for this Pull Request */\n  disabler?: Maybe<User>;\n  /** The Node ID of the AutoMergeDisabledEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event */\n  pullRequest?: Maybe<PullRequest>;\n  /** The reason auto-merge was disabled */\n  reason?: Maybe<Scalars['String']['output']>;\n  /** The reason_code relating to why auto-merge was disabled */\n  reasonCode?: Maybe<Scalars['String']['output']>;\n};\n\n/** Represents a 'auto_merge_enabled' event on a given pull request. */\nexport type AutoMergeEnabledEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The user who enabled auto-merge for this Pull Request */\n  enabler?: Maybe<User>;\n  /** The Node ID of the AutoMergeEnabledEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents an auto-merge request for a pull request */\nexport type AutoMergeRequest = {\n  /** The email address of the author of this auto-merge request. */\n  authorEmail?: Maybe<Scalars['String']['output']>;\n  /**\n   * The commit message of the auto-merge request. If a merge queue is required by\n   * the base branch, this value will be set by the merge queue when merging.\n   */\n  commitBody?: Maybe<Scalars['String']['output']>;\n  /**\n   * The commit title of the auto-merge request. If a merge queue is required by\n   * the base branch, this value will be set by the merge queue when merging\n   */\n  commitHeadline?: Maybe<Scalars['String']['output']>;\n  /** When was this auto-merge request was enabled. */\n  enabledAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The actor who created the auto-merge request. */\n  enabledBy?: Maybe<Actor>;\n  /**\n   * The merge method of the auto-merge request. If a merge queue is required by\n   * the base branch, this value will be set by the merge queue when merging.\n   */\n  mergeMethod: PullRequestMergeMethod;\n  /** The pull request that this auto-merge request is set against. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'auto_rebase_enabled' event on a given pull request. */\nexport type AutoRebaseEnabledEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The user who enabled auto-merge (rebase) for this Pull Request */\n  enabler?: Maybe<User>;\n  /** The Node ID of the AutoRebaseEnabledEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'auto_squash_enabled' event on a given pull request. */\nexport type AutoSquashEnabledEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The user who enabled auto-merge (squash) for this Pull Request */\n  enabler?: Maybe<User>;\n  /** The Node ID of the AutoSquashEnabledEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'automatic_base_change_failed' event on a given pull request. */\nexport type AutomaticBaseChangeFailedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the AutomaticBaseChangeFailedEvent object */\n  id: Scalars['ID']['output'];\n  /** The new base for this PR */\n  newBase: Scalars['String']['output'];\n  /** The old base for this PR */\n  oldBase: Scalars['String']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'automatic_base_change_succeeded' event on a given pull request. */\nexport type AutomaticBaseChangeSucceededEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the AutomaticBaseChangeSucceededEvent object */\n  id: Scalars['ID']['output'];\n  /** The new base for this PR */\n  newBase: Scalars['String']['output'];\n  /** The old base for this PR */\n  oldBase: Scalars['String']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'base_ref_changed' event on a given issue or pull request. */\nexport type BaseRefChangedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the name of the base ref for the pull request after it was changed. */\n  currentRefName: Scalars['String']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the BaseRefChangedEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the name of the base ref for the pull request before it was changed. */\n  previousRefName: Scalars['String']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'base_ref_deleted' event on a given pull request. */\nexport type BaseRefDeletedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the name of the Ref associated with the `base_ref_deleted` event. */\n  baseRefName?: Maybe<Scalars['String']['output']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the BaseRefDeletedEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'base_ref_force_pushed' event on a given pull request. */\nexport type BaseRefForcePushedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the after commit SHA for the 'base_ref_force_pushed' event. */\n  afterCommit?: Maybe<Commit>;\n  /** Identifies the before commit SHA for the 'base_ref_force_pushed' event. */\n  beforeCommit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the BaseRefForcePushedEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the fully qualified ref name for the 'base_ref_force_pushed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents a Git blame. */\nexport type Blame = {\n  /** The list of ranges from a Git blame. */\n  ranges: Array<BlameRange>;\n};\n\n/** Represents a range of information from a Git blame. */\nexport type BlameRange = {\n  /**\n   * Identifies the recency of the change, from 1 (new) to 10 (old). This is\n   * calculated as a 2-quantile and determines the length of distance between the\n   * median age of all the changes in the file and the recency of the current\n   * range's change.\n   */\n  age: Scalars['Int']['output'];\n  /** Identifies the line author */\n  commit: Commit;\n  /** The ending line for the range */\n  endingLine: Scalars['Int']['output'];\n  /** The starting line for the range */\n  startingLine: Scalars['Int']['output'];\n};\n\n/** Represents a Git blob. */\nexport type Blob = GitObject & Node & {\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String']['output'];\n  /** Byte size of Blob object */\n  byteSize: Scalars['Int']['output'];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI']['output'];\n  /** The Node ID of the Blob object */\n  id: Scalars['ID']['output'];\n  /** Indicates whether the Blob is binary or text. Returns null if unable to determine the encoding. */\n  isBinary?: Maybe<Scalars['Boolean']['output']>;\n  /** Indicates whether the contents is truncated */\n  isTruncated: Scalars['Boolean']['output'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID']['output'];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n  /** UTF8 text data or null if the Blob is binary */\n  text?: Maybe<Scalars['String']['output']>;\n};\n\n/** A special type of user which takes actions on behalf of GitHub Apps. */\nexport type Bot = Actor & Node & UniformResourceLocatable & {\n  /** A URL pointing to the GitHub App's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the Bot object */\n  id: Scalars['ID']['output'];\n  /** The username of the actor. */\n  login: Scalars['String']['output'];\n  /** The HTTP path for this bot */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this bot */\n  url: Scalars['URI']['output'];\n};\n\n\n/** A special type of user which takes actions on behalf of GitHub Apps. */\nexport type BotAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Types which can be actors for `BranchActorAllowance` objects. */\nexport type BranchActorAllowanceActor = App | Team | User;\n\n/** Parameters to be used for the branch_name_pattern rule */\nexport type BranchNamePatternParameters = {\n  /** How this rule will appear to users. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate: Scalars['Boolean']['output'];\n  /** The operator to use for matching. */\n  operator: Scalars['String']['output'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['output'];\n};\n\n/** Parameters to be used for the branch_name_pattern rule */\nexport type BranchNamePatternParametersInput = {\n  /** How this rule will appear to users. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The operator to use for matching. */\n  operator: Scalars['String']['input'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['input'];\n};\n\n/** A branch protection rule. */\nexport type BranchProtectionRule = Node & {\n  /** Can this branch be deleted. */\n  allowsDeletions: Scalars['Boolean']['output'];\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes: Scalars['Boolean']['output'];\n  /** Is branch creation a protected operation. */\n  blocksCreations: Scalars['Boolean']['output'];\n  /** A list of conflicts matching branches protection rule and other branch protection rules */\n  branchProtectionRuleConflicts: BranchProtectionRuleConflictConnection;\n  /** A list of actors able to force push for this branch protection rule. */\n  bypassForcePushAllowances: BypassForcePushAllowanceConnection;\n  /** A list of actors able to bypass PRs for this branch protection rule. */\n  bypassPullRequestAllowances: BypassPullRequestAllowanceConnection;\n  /** The actor who created this branch protection rule. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews: Scalars['Boolean']['output'];\n  /** The Node ID of the BranchProtectionRule object */\n  id: Scalars['ID']['output'];\n  /** Can admins override branch protection. */\n  isAdminEnforced: Scalars['Boolean']['output'];\n  /**\n   * Whether users can pull changes from upstream when the branch is locked. Set to\n   * `true` to allow fork syncing. Set to `false` to prevent fork syncing.\n   */\n  lockAllowsFetchAndMerge: Scalars['Boolean']['output'];\n  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */\n  lockBranch: Scalars['Boolean']['output'];\n  /** Repository refs that are protected by this rule */\n  matchingRefs: RefConnection;\n  /** Identifies the protection rule pattern. */\n  pattern: Scalars['String']['output'];\n  /** A list push allowances for this branch protection rule. */\n  pushAllowances: PushAllowanceConnection;\n  /** The repository associated with this branch protection rule. */\n  repository?: Maybe<Repository>;\n  /** Whether the most recent push must be approved by someone other than the person who pushed it */\n  requireLastPushApproval: Scalars['Boolean']['output'];\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: Maybe<Scalars['Int']['output']>;\n  /** List of required deployment environments that must be deployed successfully to update matching branches */\n  requiredDeploymentEnvironments?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** List of required status checks that must pass for commits to be accepted to matching branches. */\n  requiredStatusChecks?: Maybe<Array<RequiredStatusCheckDescription>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews: Scalars['Boolean']['output'];\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews: Scalars['Boolean']['output'];\n  /** Are commits required to be signed. */\n  requiresCommitSignatures: Scalars['Boolean']['output'];\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution: Scalars['Boolean']['output'];\n  /** Does this branch require deployment to specific environments before merging */\n  requiresDeployments: Scalars['Boolean']['output'];\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory: Scalars['Boolean']['output'];\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks: Scalars['Boolean']['output'];\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks: Scalars['Boolean']['output'];\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes: Scalars['Boolean']['output'];\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals: Scalars['Boolean']['output'];\n  /** A list review dismissal allowances for this branch protection rule. */\n  reviewDismissalAllowances: ReviewDismissalAllowanceConnection;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBranchProtectionRuleConflictsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBypassForcePushAllowancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleBypassPullRequestAllowancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleMatchingRefsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRulePushAllowancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A branch protection rule. */\nexport type BranchProtectionRuleReviewDismissalAllowancesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A conflict between two branch protection rules. */\nexport type BranchProtectionRuleConflict = {\n  /** Identifies the branch protection rule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** Identifies the conflicting branch protection rule. */\n  conflictingBranchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** Identifies the branch ref that has conflicting rules */\n  ref?: Maybe<Ref>;\n};\n\n/** The connection type for BranchProtectionRuleConflict. */\nexport type BranchProtectionRuleConflictConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BranchProtectionRuleConflictEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BranchProtectionRuleConflict>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type BranchProtectionRuleConflictEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<BranchProtectionRuleConflict>;\n};\n\n/** The connection type for BranchProtectionRule. */\nexport type BranchProtectionRuleConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BranchProtectionRuleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BranchProtectionRule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type BranchProtectionRuleEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<BranchProtectionRule>;\n};\n\n/**\n * Information about a sponsorship to make for a user or organization with a GitHub\n * Sponsors profile, as part of sponsoring many users or organizations at once.\n */\nexport type BulkSponsorship = {\n  /** The amount to pay to the sponsorable in US dollars. Valid values: 1-12000. */\n  amount: Scalars['Int']['input'];\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars['ID']['input']>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Types that can represent a repository ruleset bypass actor. */\nexport type BypassActor = App | Team;\n\n/** A user, team, or app who has the ability to bypass a force push requirement on a protected branch. */\nexport type BypassForcePushAllowance = Node & {\n  /** The actor that can force push. */\n  actor?: Maybe<BranchActorAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user, team, or app. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** The Node ID of the BypassForcePushAllowance object */\n  id: Scalars['ID']['output'];\n};\n\n/** The connection type for BypassForcePushAllowance. */\nexport type BypassForcePushAllowanceConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BypassForcePushAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BypassForcePushAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type BypassForcePushAllowanceEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<BypassForcePushAllowance>;\n};\n\n/** A user, team, or app who has the ability to bypass a pull request requirement on a protected branch. */\nexport type BypassPullRequestAllowance = Node & {\n  /** The actor that can bypass. */\n  actor?: Maybe<BranchActorAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user, team, or app. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** The Node ID of the BypassPullRequestAllowance object */\n  id: Scalars['ID']['output'];\n};\n\n/** The connection type for BypassPullRequestAllowance. */\nexport type BypassPullRequestAllowanceConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BypassPullRequestAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<BypassPullRequestAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type BypassPullRequestAllowanceEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<BypassPullRequestAllowance>;\n};\n\n/** The Common Vulnerability Scoring System */\nexport type Cvss = {\n  /** The CVSS score associated with this advisory */\n  score: Scalars['Float']['output'];\n  /** The CVSS vector string associated with this advisory */\n  vectorString?: Maybe<Scalars['String']['output']>;\n};\n\n/** A common weakness enumeration */\nexport type Cwe = Node & {\n  /** The id of the CWE */\n  cweId: Scalars['String']['output'];\n  /** A detailed description of this CWE */\n  description: Scalars['String']['output'];\n  /** The Node ID of the CWE object */\n  id: Scalars['ID']['output'];\n  /** The name of this CWE */\n  name: Scalars['String']['output'];\n};\n\n/** The connection type for CWE. */\nexport type CweConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CweEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Cwe>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CweEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Cwe>;\n};\n\n/** Autogenerated input type of CancelEnterpriseAdminInvitation */\nexport type CancelEnterpriseAdminInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the pending enterprise administrator invitation. */\n  invitationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CancelEnterpriseAdminInvitation. */\nexport type CancelEnterpriseAdminInvitationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The invitation that was canceled. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** A message confirming the result of canceling an administrator invitation. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of CancelEnterpriseMemberInvitation */\nexport type CancelEnterpriseMemberInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the pending enterprise member invitation. */\n  invitationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CancelEnterpriseMemberInvitation. */\nexport type CancelEnterpriseMemberInvitationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The invitation that was canceled. */\n  invitation?: Maybe<EnterpriseMemberInvitation>;\n  /** A message confirming the result of canceling an member invitation. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of CancelSponsorship */\nexport type CancelSponsorshipInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The ID of the user or organization who is acting as the sponsor, paying for\n   * the sponsorship. Required if sponsorLogin is not given.\n   */\n  sponsorId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * The username of the user or organization who is acting as the sponsor, paying\n   * for the sponsorship. Required if sponsorId is not given.\n   */\n  sponsorLogin?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars['ID']['input']>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of CancelSponsorship. */\nexport type CancelSponsorshipPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The tier that was being used at the time of cancellation. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n};\n\n/** Autogenerated input type of ChangeUserStatus */\nexport type ChangeUserStatusInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The emoji to represent your status. Can either be a native Unicode emoji or an emoji name with colons, e.g., :grinning:. */\n  emoji?: InputMaybe<Scalars['String']['input']>;\n  /** If set, the user status will not be shown after this date. */\n  expiresAt?: InputMaybe<Scalars['DateTime']['input']>;\n  /** Whether this status should indicate you are not fully available on GitHub, e.g., you are away. */\n  limitedAvailability?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A short description of your current status. */\n  message?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The ID of the organization whose members will be allowed to see the status. If\n   * omitted, the status will be publicly visible.\n   */\n  organizationId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of ChangeUserStatus. */\nexport type ChangeUserStatusPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Your updated status. */\n  status?: Maybe<UserStatus>;\n};\n\n/** A single check annotation. */\nexport type CheckAnnotation = {\n  /** The annotation's severity level. */\n  annotationLevel?: Maybe<CheckAnnotationLevel>;\n  /** The path to the file that this annotation was made on. */\n  blobUrl: Scalars['URI']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The position of this annotation. */\n  location: CheckAnnotationSpan;\n  /** The annotation's message. */\n  message: Scalars['String']['output'];\n  /** The path that this annotation was made on. */\n  path: Scalars['String']['output'];\n  /** Additional information about the annotation. */\n  rawDetails?: Maybe<Scalars['String']['output']>;\n  /** The annotation's title */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n/** The connection type for CheckAnnotation. */\nexport type CheckAnnotationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckAnnotationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckAnnotation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Information from a check run analysis to specific lines of code. */\nexport type CheckAnnotationData = {\n  /** Represents an annotation's information level */\n  annotationLevel: CheckAnnotationLevel;\n  /** The location of the annotation */\n  location: CheckAnnotationRange;\n  /** A short description of the feedback for these lines of code. */\n  message: Scalars['String']['input'];\n  /** The path of the file to add an annotation to. */\n  path: Scalars['String']['input'];\n  /** Details about this annotation. */\n  rawDetails?: InputMaybe<Scalars['String']['input']>;\n  /** The title that represents the annotation. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** An edge in a connection. */\nexport type CheckAnnotationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckAnnotation>;\n};\n\n/** Represents an annotation's information level. */\nexport enum CheckAnnotationLevel {\n  /** An annotation indicating an inescapable error. */\n  Failure = 'FAILURE',\n  /** An annotation indicating some information. */\n  Notice = 'NOTICE',\n  /** An annotation indicating an ignorable error. */\n  Warning = 'WARNING'\n}\n\n/** A character position in a check annotation. */\nexport type CheckAnnotationPosition = {\n  /** Column number (1 indexed). */\n  column?: Maybe<Scalars['Int']['output']>;\n  /** Line number (1 indexed). */\n  line: Scalars['Int']['output'];\n};\n\n/** Information from a check run analysis to specific lines of code. */\nexport type CheckAnnotationRange = {\n  /** The ending column of the range. */\n  endColumn?: InputMaybe<Scalars['Int']['input']>;\n  /** The ending line of the range. */\n  endLine: Scalars['Int']['input'];\n  /** The starting column of the range. */\n  startColumn?: InputMaybe<Scalars['Int']['input']>;\n  /** The starting line of the range. */\n  startLine: Scalars['Int']['input'];\n};\n\n/** An inclusive pair of positions for a check annotation. */\nexport type CheckAnnotationSpan = {\n  /** End position (inclusive). */\n  end: CheckAnnotationPosition;\n  /** Start position (inclusive). */\n  start: CheckAnnotationPosition;\n};\n\n/** The possible states for a check suite or run conclusion. */\nexport enum CheckConclusionState {\n  /** The check suite or run requires action. */\n  ActionRequired = 'ACTION_REQUIRED',\n  /** The check suite or run has been cancelled. */\n  Cancelled = 'CANCELLED',\n  /** The check suite or run has failed. */\n  Failure = 'FAILURE',\n  /** The check suite or run was neutral. */\n  Neutral = 'NEUTRAL',\n  /** The check suite or run was skipped. */\n  Skipped = 'SKIPPED',\n  /** The check suite or run was marked stale by GitHub. Only GitHub can use this conclusion. */\n  Stale = 'STALE',\n  /** The check suite or run has failed at startup. */\n  StartupFailure = 'STARTUP_FAILURE',\n  /** The check suite or run has succeeded. */\n  Success = 'SUCCESS',\n  /** The check suite or run has timed out. */\n  TimedOut = 'TIMED_OUT'\n}\n\n/** A check run. */\nexport type CheckRun = Node & RequirableByPullRequest & UniformResourceLocatable & {\n  /** The check run's annotations */\n  annotations?: Maybe<CheckAnnotationConnection>;\n  /** The check suite that this run is a part of. */\n  checkSuite: CheckSuite;\n  /** Identifies the date and time when the check run was completed. */\n  completedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The conclusion of the check run. */\n  conclusion?: Maybe<CheckConclusionState>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The corresponding deployment for this job, if any */\n  deployment?: Maybe<Deployment>;\n  /** The URL from which to find full details of the check run on the integrator's site. */\n  detailsUrl?: Maybe<Scalars['URI']['output']>;\n  /** A reference for the check run on the integrator's system. */\n  externalId?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the CheckRun object */\n  id: Scalars['ID']['output'];\n  /** Whether this is required to pass before merging for a specific pull request. */\n  isRequired: Scalars['Boolean']['output'];\n  /** The name of the check for this check run. */\n  name: Scalars['String']['output'];\n  /** Information about a pending deployment, if any, in this check run */\n  pendingDeploymentRequest?: Maybe<DeploymentRequest>;\n  /** The permalink to the check run summary. */\n  permalink: Scalars['URI']['output'];\n  /** The repository associated with this check run. */\n  repository: Repository;\n  /** The HTTP path for this check run. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the check run was started. */\n  startedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The current status of the check run. */\n  status: CheckStatusState;\n  /** The check run's steps */\n  steps?: Maybe<CheckStepConnection>;\n  /** A string representing the check run's summary */\n  summary?: Maybe<Scalars['String']['output']>;\n  /** A string representing the check run's text */\n  text?: Maybe<Scalars['String']['output']>;\n  /** A string representing the check run */\n  title?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this check run. */\n  url: Scalars['URI']['output'];\n};\n\n\n/** A check run. */\nexport type CheckRunAnnotationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A check run. */\nexport type CheckRunIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars['ID']['input']>;\n  pullRequestNumber?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A check run. */\nexport type CheckRunStepsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  number?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Possible further actions the integrator can perform. */\nexport type CheckRunAction = {\n  /** A short explanation of what this action would do. */\n  description: Scalars['String']['input'];\n  /** A reference for the action on the integrator's system.  */\n  identifier: Scalars['String']['input'];\n  /** The text to be displayed on a button in the web UI. */\n  label: Scalars['String']['input'];\n};\n\n/** The connection type for CheckRun. */\nexport type CheckRunConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckRunEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckRun>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CheckRunEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckRun>;\n};\n\n/** The filters that are available when fetching check runs. */\nexport type CheckRunFilter = {\n  /** Filters the check runs created by this application ID. */\n  appId?: InputMaybe<Scalars['Int']['input']>;\n  /** Filters the check runs by this name. */\n  checkName?: InputMaybe<Scalars['String']['input']>;\n  /** Filters the check runs by this type. */\n  checkType?: InputMaybe<CheckRunType>;\n  /** Filters the check runs by these conclusions. */\n  conclusions?: InputMaybe<Array<CheckConclusionState>>;\n  /** Filters the check runs by this status. Superceded by statuses. */\n  status?: InputMaybe<CheckStatusState>;\n  /** Filters the check runs by this status. Overrides status. */\n  statuses?: InputMaybe<Array<CheckStatusState>>;\n};\n\n/** Descriptive details about the check run. */\nexport type CheckRunOutput = {\n  /** The annotations that are made as part of the check run. */\n  annotations?: InputMaybe<Array<CheckAnnotationData>>;\n  /** Images attached to the check run output displayed in the GitHub pull request UI. */\n  images?: InputMaybe<Array<CheckRunOutputImage>>;\n  /** The summary of the check run (supports Commonmark). */\n  summary: Scalars['String']['input'];\n  /** The details of the check run (supports Commonmark). */\n  text?: InputMaybe<Scalars['String']['input']>;\n  /** A title to provide for this check run. */\n  title: Scalars['String']['input'];\n};\n\n/** Images attached to the check run output displayed in the GitHub pull request UI. */\nexport type CheckRunOutputImage = {\n  /** The alternative text for the image. */\n  alt: Scalars['String']['input'];\n  /** A short image description. */\n  caption?: InputMaybe<Scalars['String']['input']>;\n  /** The full URL of the image. */\n  imageUrl: Scalars['URI']['input'];\n};\n\n/** The possible states of a check run in a status rollup. */\nexport enum CheckRunState {\n  /** The check run requires action. */\n  ActionRequired = 'ACTION_REQUIRED',\n  /** The check run has been cancelled. */\n  Cancelled = 'CANCELLED',\n  /** The check run has been completed. */\n  Completed = 'COMPLETED',\n  /** The check run has failed. */\n  Failure = 'FAILURE',\n  /** The check run is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The check run was neutral. */\n  Neutral = 'NEUTRAL',\n  /** The check run is in pending state. */\n  Pending = 'PENDING',\n  /** The check run has been queued. */\n  Queued = 'QUEUED',\n  /** The check run was skipped. */\n  Skipped = 'SKIPPED',\n  /** The check run was marked stale by GitHub. Only GitHub can use this conclusion. */\n  Stale = 'STALE',\n  /** The check run has failed at startup. */\n  StartupFailure = 'STARTUP_FAILURE',\n  /** The check run has succeeded. */\n  Success = 'SUCCESS',\n  /** The check run has timed out. */\n  TimedOut = 'TIMED_OUT',\n  /** The check run is in waiting state. */\n  Waiting = 'WAITING'\n}\n\n/** Represents a count of the state of a check run. */\nexport type CheckRunStateCount = {\n  /** The number of check runs with this state. */\n  count: Scalars['Int']['output'];\n  /** The state of a check run. */\n  state: CheckRunState;\n};\n\n/** The possible types of check runs. */\nexport enum CheckRunType {\n  /** Every check run available. */\n  All = 'ALL',\n  /** The latest check run. */\n  Latest = 'LATEST'\n}\n\n/** The possible states for a check suite or run status. */\nexport enum CheckStatusState {\n  /** The check suite or run has been completed. */\n  Completed = 'COMPLETED',\n  /** The check suite or run is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The check suite or run is in pending state. */\n  Pending = 'PENDING',\n  /** The check suite or run has been queued. */\n  Queued = 'QUEUED',\n  /** The check suite or run has been requested. */\n  Requested = 'REQUESTED',\n  /** The check suite or run is in waiting state. */\n  Waiting = 'WAITING'\n}\n\n/** A single check step. */\nexport type CheckStep = {\n  /** Identifies the date and time when the check step was completed. */\n  completedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The conclusion of the check step. */\n  conclusion?: Maybe<CheckConclusionState>;\n  /** A reference for the check step on the integrator's system. */\n  externalId?: Maybe<Scalars['String']['output']>;\n  /** The step's name. */\n  name: Scalars['String']['output'];\n  /** The index of the step in the list of steps of the parent check run. */\n  number: Scalars['Int']['output'];\n  /** Number of seconds to completion. */\n  secondsToCompletion?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the date and time when the check step was started. */\n  startedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The current status of the check step. */\n  status: CheckStatusState;\n};\n\n/** The connection type for CheckStep. */\nexport type CheckStepConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckStepEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckStep>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CheckStepEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckStep>;\n};\n\n/** A check suite. */\nexport type CheckSuite = Node & {\n  /** The GitHub App which created this check suite. */\n  app?: Maybe<App>;\n  /** The name of the branch for this check suite. */\n  branch?: Maybe<Ref>;\n  /** The check runs associated with a check suite. */\n  checkRuns?: Maybe<CheckRunConnection>;\n  /** The commit for this check suite */\n  commit: Commit;\n  /** The conclusion of this check suite. */\n  conclusion?: Maybe<CheckConclusionState>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The user who triggered the check suite. */\n  creator?: Maybe<User>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the CheckSuite object */\n  id: Scalars['ID']['output'];\n  /** A list of open pull requests matching the check suite. */\n  matchingPullRequests?: Maybe<PullRequestConnection>;\n  /** The push that triggered this check suite. */\n  push?: Maybe<Push>;\n  /** The repository associated with this check suite. */\n  repository: Repository;\n  /** The HTTP path for this check suite */\n  resourcePath: Scalars['URI']['output'];\n  /** The status of this check suite. */\n  status: CheckStatusState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this check suite */\n  url: Scalars['URI']['output'];\n  /** The workflow run associated with this check suite. */\n  workflowRun?: Maybe<WorkflowRun>;\n};\n\n\n/** A check suite. */\nexport type CheckSuiteCheckRunsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filterBy?: InputMaybe<CheckRunFilter>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A check suite. */\nexport type CheckSuiteMatchingPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  baseRefName?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  headRefName?: InputMaybe<Scalars['String']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The auto-trigger preferences that are available for check suites. */\nexport type CheckSuiteAutoTriggerPreference = {\n  /** The node ID of the application that owns the check suite. */\n  appId: Scalars['ID']['input'];\n  /** Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository. */\n  setting: Scalars['Boolean']['input'];\n};\n\n/** The connection type for CheckSuite. */\nexport type CheckSuiteConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CheckSuiteEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CheckSuite>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CheckSuiteEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CheckSuite>;\n};\n\n/** The filters that are available when fetching check suites. */\nexport type CheckSuiteFilter = {\n  /** Filters the check suites created by this application ID. */\n  appId?: InputMaybe<Scalars['Int']['input']>;\n  /** Filters the check suites by this name. */\n  checkName?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** An object which can have its data claimed or claim data from another. */\nexport type Claimable = Mannequin | User;\n\n/** Autogenerated input type of ClearLabelsFromLabelable */\nexport type ClearLabelsFromLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the labelable object to clear the labels from. */\n  labelableId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ClearLabelsFromLabelable. */\nexport type ClearLabelsFromLabelablePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The item that was unlabeled. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of ClearProjectV2ItemFieldValue */\nexport type ClearProjectV2ItemFieldValueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the field to be cleared. */\n  fieldId: Scalars['ID']['input'];\n  /** The ID of the item to be cleared. */\n  itemId: Scalars['ID']['input'];\n  /** The ID of the Project. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ClearProjectV2ItemFieldValue. */\nexport type ClearProjectV2ItemFieldValuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated item. */\n  projectV2Item?: Maybe<ProjectV2Item>;\n};\n\n/** Autogenerated input type of CloneProject */\nexport type CloneProjectInput = {\n  /** The description of the project. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether or not to clone the source project's workflows. */\n  includeWorkflows: Scalars['Boolean']['input'];\n  /** The name of the project. */\n  name: Scalars['String']['input'];\n  /** The visibility of the project, defaults to false (private). */\n  public?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The source project to clone. */\n  sourceId: Scalars['ID']['input'];\n  /** The owner ID to create the project under. */\n  targetOwnerId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CloneProject. */\nexport type CloneProjectPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The id of the JobStatus for populating cloned fields. */\n  jobStatusId?: Maybe<Scalars['String']['output']>;\n  /** The new cloned project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of CloneTemplateRepository */\nexport type CloneTemplateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A short description of the new repository. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * Whether to copy all branches from the template to the new repository. Defaults\n   * to copying only the default branch of the template.\n   */\n  includeAllBranches?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The name of the new repository. */\n  name: Scalars['String']['input'];\n  /** The ID of the owner for the new repository. */\n  ownerId: Scalars['ID']['input'];\n  /** The Node ID of the template repository. */\n  repositoryId: Scalars['ID']['input'];\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n/** Autogenerated return type of CloneTemplateRepository. */\nexport type CloneTemplateRepositoryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** An object that can be closed */\nexport type Closable = {\n  /** Indicates if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Indicates if the object can be closed by the viewer. */\n  viewerCanClose: Scalars['Boolean']['output'];\n  /** Indicates if the object can be reopened by the viewer. */\n  viewerCanReopen: Scalars['Boolean']['output'];\n};\n\n/** Autogenerated input type of CloseDiscussion */\nexport type CloseDiscussionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the discussion to be closed. */\n  discussionId: Scalars['ID']['input'];\n  /** The reason why the discussion is being closed. */\n  reason?: InputMaybe<DiscussionCloseReason>;\n};\n\n/** Autogenerated return type of CloseDiscussion. */\nexport type CloseDiscussionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The discussion that was closed. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of CloseIssue */\nexport type CloseIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the issue to be closed. */\n  issueId: Scalars['ID']['input'];\n  /** The reason the issue is to be closed. */\n  stateReason?: InputMaybe<IssueClosedStateReason>;\n};\n\n/** Autogenerated return type of CloseIssue. */\nexport type CloseIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The issue that was closed. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of ClosePullRequest */\nexport type ClosePullRequestInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the pull request to be closed. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ClosePullRequest. */\nexport type ClosePullRequestPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request that was closed. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'closed' event on any `Closable`. */\nexport type ClosedEvent = Node & UniformResourceLocatable & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Object that was closed. */\n  closable: Closable;\n  /** Object which triggered the creation of this event. */\n  closer?: Maybe<Closer>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the ClosedEvent object */\n  id: Scalars['ID']['output'];\n  /** The HTTP path for this closed event. */\n  resourcePath: Scalars['URI']['output'];\n  /** The reason the issue state was changed to closed. */\n  stateReason?: Maybe<IssueStateReason>;\n  /** The HTTP URL for this closed event. */\n  url: Scalars['URI']['output'];\n};\n\n/** The object which triggered a `ClosedEvent`. */\nexport type Closer = Commit | ProjectV2 | PullRequest;\n\n/** The Code of Conduct for a repository */\nexport type CodeOfConduct = Node & {\n  /** The body of the Code of Conduct */\n  body?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the CodeOfConduct object */\n  id: Scalars['ID']['output'];\n  /** The key for the Code of Conduct */\n  key: Scalars['String']['output'];\n  /** The formal name of the Code of Conduct */\n  name: Scalars['String']['output'];\n  /** The HTTP path for this Code of Conduct */\n  resourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for this Code of Conduct */\n  url?: Maybe<Scalars['URI']['output']>;\n};\n\n/**\n * Choose which tools must provide code scanning results before the reference is\n * updated. When configured, code scanning must be enabled and have results for\n * both the commit and the reference being updated.\n */\nexport type CodeScanningParameters = {\n  /** Tools that must provide code scanning results for this rule to pass. */\n  codeScanningTools: Array<CodeScanningTool>;\n};\n\n/**\n * Choose which tools must provide code scanning results before the reference is\n * updated. When configured, code scanning must be enabled and have results for\n * both the commit and the reference being updated.\n */\nexport type CodeScanningParametersInput = {\n  /** Tools that must provide code scanning results for this rule to pass. */\n  codeScanningTools: Array<CodeScanningToolInput>;\n};\n\n/** A tool that must provide code scanning results for this rule to pass. */\nexport type CodeScanningTool = {\n  /**\n   * The severity level at which code scanning results that raise alerts block a\n   * reference update. For more information on alert severity levels, see \"[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"\n   */\n  alertsThreshold: Scalars['String']['output'];\n  /**\n   * The severity level at which code scanning results that raise security alerts\n   * block a reference update. For more information on security severity levels,\n   * see \"[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"\n   */\n  securityAlertsThreshold: Scalars['String']['output'];\n  /** The name of a code scanning tool */\n  tool: Scalars['String']['output'];\n};\n\n/** A tool that must provide code scanning results for this rule to pass. */\nexport type CodeScanningToolInput = {\n  /**\n   * The severity level at which code scanning results that raise alerts block a\n   * reference update. For more information on alert severity levels, see \"[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"\n   */\n  alertsThreshold: Scalars['String']['input'];\n  /**\n   * The severity level at which code scanning results that raise security alerts\n   * block a reference update. For more information on security severity levels,\n   * see \"[About code scanning alerts](${externalDocsUrl}/code-security/code-scanning/managing-code-scanning-alerts/about-code-scanning-alerts#about-alert-severity-and-security-severity-levels).\"\n   */\n  securityAlertsThreshold: Scalars['String']['input'];\n  /** The name of a code scanning tool */\n  tool: Scalars['String']['input'];\n};\n\n/** Collaborators affiliation level with a subject. */\nexport enum CollaboratorAffiliation {\n  /** All collaborators the authenticated user can see. */\n  All = 'ALL',\n  /** All collaborators with permissions to an organization-owned subject, regardless of organization membership status. */\n  Direct = 'DIRECT',\n  /** All outside collaborators of an organization-owned subject. */\n  Outside = 'OUTSIDE'\n}\n\n/** Represents a comment. */\nexport type Comment = {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The Node ID of the Comment object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n};\n\n\n/** Represents a comment. */\nexport type CommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A comment author association with repository. */\nexport enum CommentAuthorAssociation {\n  /** Author has been invited to collaborate on the repository. */\n  Collaborator = 'COLLABORATOR',\n  /** Author has previously committed to the repository. */\n  Contributor = 'CONTRIBUTOR',\n  /** Author has not previously committed to GitHub. */\n  FirstTimer = 'FIRST_TIMER',\n  /** Author has not previously committed to the repository. */\n  FirstTimeContributor = 'FIRST_TIME_CONTRIBUTOR',\n  /** Author is a placeholder for an unclaimed user. */\n  Mannequin = 'MANNEQUIN',\n  /** Author is a member of the organization that owns the repository. */\n  Member = 'MEMBER',\n  /** Author has no association with the repository. */\n  None = 'NONE',\n  /** Author is the owner of the repository. */\n  Owner = 'OWNER'\n}\n\n/** The possible errors that will prevent a user from updating a comment. */\nexport enum CommentCannotUpdateReason {\n  /** Unable to create comment because repository is archived. */\n  Archived = 'ARCHIVED',\n  /** You cannot update this comment */\n  Denied = 'DENIED',\n  /** You must be the author or have write access to this repository to update this comment. */\n  InsufficientAccess = 'INSUFFICIENT_ACCESS',\n  /** Unable to create comment because issue is locked. */\n  Locked = 'LOCKED',\n  /** You must be logged in to update this comment. */\n  LoginRequired = 'LOGIN_REQUIRED',\n  /** Repository is under maintenance. */\n  Maintenance = 'MAINTENANCE',\n  /** At least one email address must be verified to update this comment. */\n  VerifiedEmailRequired = 'VERIFIED_EMAIL_REQUIRED'\n}\n\n/** Represents a 'comment_deleted' event on a given issue or pull request. */\nexport type CommentDeletedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The user who authored the deleted comment. */\n  deletedCommentAuthor?: Maybe<Actor>;\n  /** The Node ID of the CommentDeletedEvent object */\n  id: Scalars['ID']['output'];\n};\n\n/** Represents a Git commit. */\nexport type Commit = GitObject & Node & Subscribable & UniformResourceLocatable & {\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String']['output'];\n  /** The number of additions in this commit. */\n  additions: Scalars['Int']['output'];\n  /**\n   * The merged Pull Request that introduced the commit to the repository. If the\n   * commit is not present in the default branch, additionally returns open Pull\n   * Requests associated with the commit\n   */\n  associatedPullRequests?: Maybe<PullRequestConnection>;\n  /** Authorship details of the commit. */\n  author?: Maybe<GitActor>;\n  /** Check if the committer and the author match. */\n  authoredByCommitter: Scalars['Boolean']['output'];\n  /** The datetime when this commit was authored. */\n  authoredDate: Scalars['DateTime']['output'];\n  /**\n   * The list of authors for this commit based on the git author and the Co-authored-by\n   * message trailer. The git author will always be first.\n   */\n  authors: GitActorConnection;\n  /** Fetches `git blame` information. */\n  blame: Blame;\n  /**\n   * We recommend using the `changedFilesIfAvailable` field instead of\n   * `changedFiles`, as `changedFiles` will cause your request to return an error\n   * if GitHub is unable to calculate the number of changed files.\n   * @deprecated `changedFiles` will be removed. Use `changedFilesIfAvailable` instead. Removal on 2023-01-01 UTC.\n   */\n  changedFiles: Scalars['Int']['output'];\n  /**\n   * The number of changed files in this commit. If GitHub is unable to calculate\n   * the number of changed files (for example due to a timeout), this will return\n   * `null`. We recommend using this field instead of `changedFiles`.\n   */\n  changedFilesIfAvailable?: Maybe<Scalars['Int']['output']>;\n  /** The check suites associated with a commit. */\n  checkSuites?: Maybe<CheckSuiteConnection>;\n  /** Comments made on the commit. */\n  comments: CommitCommentConnection;\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI']['output'];\n  /** The datetime when this commit was committed. */\n  committedDate: Scalars['DateTime']['output'];\n  /** Check if committed via GitHub web UI. */\n  committedViaWeb: Scalars['Boolean']['output'];\n  /** Committer details of the commit. */\n  committer?: Maybe<GitActor>;\n  /** The number of deletions in this commit. */\n  deletions: Scalars['Int']['output'];\n  /** The deployments associated with a commit. */\n  deployments?: Maybe<DeploymentConnection>;\n  /** The tree entry representing the file located at the given path. */\n  file?: Maybe<TreeEntry>;\n  /** The linear commit history starting from (and including) this commit, in the same order as `git log`. */\n  history: CommitHistoryConnection;\n  /** The Node ID of the Commit object */\n  id: Scalars['ID']['output'];\n  /** The Git commit message */\n  message: Scalars['String']['output'];\n  /** The Git commit message body */\n  messageBody: Scalars['String']['output'];\n  /** The commit message body rendered to HTML. */\n  messageBodyHTML: Scalars['HTML']['output'];\n  /** The Git commit message headline */\n  messageHeadline: Scalars['String']['output'];\n  /** The commit message headline rendered to HTML. */\n  messageHeadlineHTML: Scalars['HTML']['output'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID']['output'];\n  /** The organization this commit was made on behalf of. */\n  onBehalfOf?: Maybe<Organization>;\n  /** The parents of a commit. */\n  parents: CommitConnection;\n  /**\n   * The datetime when this commit was pushed.\n   * @deprecated `pushedDate` is no longer supported. Removal on 2023-07-01 UTC.\n   */\n  pushedDate?: Maybe<Scalars['DateTime']['output']>;\n  /** The Repository this commit belongs to */\n  repository: Repository;\n  /** The HTTP path for this commit */\n  resourcePath: Scalars['URI']['output'];\n  /** Commit signing information, if present. */\n  signature?: Maybe<GitSignature>;\n  /** Status information for this commit */\n  status?: Maybe<Status>;\n  /** Check and Status rollup information for this commit. */\n  statusCheckRollup?: Maybe<StatusCheckRollup>;\n  /** Returns a list of all submodules in this repository as of this Commit parsed from the .gitmodules file. */\n  submodules: SubmoduleConnection;\n  /**\n   * Returns a URL to download a tarball archive for a repository.\n   * Note: For private repositories, these links are temporary and expire after five minutes.\n   */\n  tarballUrl: Scalars['URI']['output'];\n  /** Commit's root Tree */\n  tree: Tree;\n  /** The HTTP path for the tree of this commit */\n  treeResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for the tree of this commit */\n  treeUrl: Scalars['URI']['output'];\n  /** The HTTP URL for this commit */\n  url: Scalars['URI']['output'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean']['output'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n  /**\n   * Returns a URL to download a zipball archive for a repository.\n   * Note: For private repositories, these links are temporary and expire after five minutes.\n   */\n  zipballUrl: Scalars['URI']['output'];\n};\n\n\n/** Represents a Git commit. */\nexport type CommitAssociatedPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<PullRequestOrder>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitAuthorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitBlameArgs = {\n  path: Scalars['String']['input'];\n};\n\n\n/** Represents a Git commit. */\nexport type CommitCheckSuitesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filterBy?: InputMaybe<CheckSuiteFilter>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitDeploymentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  environments?: InputMaybe<Array<Scalars['String']['input']>>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<DeploymentOrder>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitFileArgs = {\n  path: Scalars['String']['input'];\n};\n\n\n/** Represents a Git commit. */\nexport type CommitHistoryArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  author?: InputMaybe<CommitAuthor>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  path?: InputMaybe<Scalars['String']['input']>;\n  since?: InputMaybe<Scalars['GitTimestamp']['input']>;\n  until?: InputMaybe<Scalars['GitTimestamp']['input']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitParentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Represents a Git commit. */\nexport type CommitSubmodulesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Specifies an author for filtering Git commits. */\nexport type CommitAuthor = {\n  /** Email addresses to filter by. Commits authored by any of the specified email addresses will be returned. */\n  emails?: InputMaybe<Array<Scalars['String']['input']>>;\n  /**\n   * ID of a User to filter by. If non-null, only commits authored by this user\n   * will be returned. This field takes precedence over emails.\n   */\n  id?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Parameters to be used for the commit_author_email_pattern rule */\nexport type CommitAuthorEmailPatternParameters = {\n  /** How this rule will appear to users. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate: Scalars['Boolean']['output'];\n  /** The operator to use for matching. */\n  operator: Scalars['String']['output'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['output'];\n};\n\n/** Parameters to be used for the commit_author_email_pattern rule */\nexport type CommitAuthorEmailPatternParametersInput = {\n  /** How this rule will appear to users. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The operator to use for matching. */\n  operator: Scalars['String']['input'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['input'];\n};\n\n/** Represents a comment on a given Commit. */\nexport type CommitComment = Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment & {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Identifies the comment body. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** Identifies the commit associated with the comment, if the commit exists. */\n  commit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The Node ID of the CommitComment object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean']['output'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Returns why the comment was minimized. One of `abuse`, `off-topic`,\n   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n   * formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n   */\n  minimizedReason?: Maybe<Scalars['String']['output']>;\n  /** Identifies the file path associated with the comment. */\n  path?: Maybe<Scalars['String']['output']>;\n  /** Identifies the line position associated with the comment. */\n  position?: Maybe<Scalars['Int']['output']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path permalink for this commit comment. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL permalink for this commit comment. */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n};\n\n\n/** Represents a comment on a given Commit. */\nexport type CommitCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** Represents a comment on a given Commit. */\nexport type CommitCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for CommitComment. */\nexport type CommitCommentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CommitComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CommitCommentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CommitComment>;\n};\n\n/** A thread of comments on a commit. */\nexport type CommitCommentThread = Node & RepositoryNode & {\n  /** The comments that exist in this thread. */\n  comments: CommitCommentConnection;\n  /** The commit the comments were made on. */\n  commit?: Maybe<Commit>;\n  /** The Node ID of the CommitCommentThread object */\n  id: Scalars['ID']['output'];\n  /** The file the comments were made on. */\n  path?: Maybe<Scalars['String']['output']>;\n  /** The position in the diff for the commit that the comment was made on. */\n  position?: Maybe<Scalars['Int']['output']>;\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n\n/** A thread of comments on a commit. */\nexport type CommitCommentThreadCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for Commit. */\nexport type CommitConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Commit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Ordering options for commit contribution connections. */\nexport type CommitContributionOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field by which to order commit contributions. */\n  field: CommitContributionOrderField;\n};\n\n/** Properties by which commit contribution connections can be ordered. */\nexport enum CommitContributionOrderField {\n  /** Order commit contributions by how many commits they represent. */\n  CommitCount = 'COMMIT_COUNT',\n  /** Order commit contributions by when they were made. */\n  OccurredAt = 'OCCURRED_AT'\n}\n\n/** This aggregates commits made by a user within one repository. */\nexport type CommitContributionsByRepository = {\n  /** The commit contributions, each representing a day. */\n  contributions: CreatedCommitContributionConnection;\n  /** The repository in which the commits were made. */\n  repository: Repository;\n  /** The HTTP path for the user's commits to the repository in this time range. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for the user's commits to the repository in this time range. */\n  url: Scalars['URI']['output'];\n};\n\n\n/** This aggregates commits made by a user within one repository. */\nexport type CommitContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<CommitContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type CommitEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Commit>;\n};\n\n/** The connection type for Commit. */\nexport type CommitHistoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Commit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** A message to include with a new commit */\nexport type CommitMessage = {\n  /** The body of the message. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** The headline of the message. */\n  headline: Scalars['String']['input'];\n};\n\n/** Parameters to be used for the commit_message_pattern rule */\nexport type CommitMessagePatternParameters = {\n  /** How this rule will appear to users. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate: Scalars['Boolean']['output'];\n  /** The operator to use for matching. */\n  operator: Scalars['String']['output'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['output'];\n};\n\n/** Parameters to be used for the commit_message_pattern rule */\nexport type CommitMessagePatternParametersInput = {\n  /** How this rule will appear to users. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The operator to use for matching. */\n  operator: Scalars['String']['input'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['input'];\n};\n\n/**\n * A git ref for a commit to be appended to.\n *\n * The ref must be a branch, i.e. its fully qualified name must start\n * with `refs/heads/` (although the input is not required to be fully\n * qualified).\n *\n * The Ref may be specified by its global node ID or by the\n * `repositoryNameWithOwner` and `branchName`.\n *\n * ### Examples\n *\n * Specify a branch using a global node ID:\n *\n *     { \"id\": \"MDM6UmVmMTpyZWZzL2hlYWRzL21haW4=\" }\n *\n * Specify a branch using `repositoryNameWithOwner` and `branchName`:\n *\n *     {\n *       \"repositoryNameWithOwner\": \"github/graphql-client\",\n *       \"branchName\": \"main\"\n *     }\n */\nexport type CommittableBranch = {\n  /** The unqualified name of the branch to append the commit to. */\n  branchName?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the Ref to be updated. */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The nameWithOwner of the repository to commit to. */\n  repositoryNameWithOwner?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Parameters to be used for the committer_email_pattern rule */\nexport type CommitterEmailPatternParameters = {\n  /** How this rule will appear to users. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate: Scalars['Boolean']['output'];\n  /** The operator to use for matching. */\n  operator: Scalars['String']['output'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['output'];\n};\n\n/** Parameters to be used for the committer_email_pattern rule */\nexport type CommitterEmailPatternParametersInput = {\n  /** How this rule will appear to users. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The operator to use for matching. */\n  operator: Scalars['String']['input'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['input'];\n};\n\n/** Represents a comparison between two commit revisions. */\nexport type Comparison = Node & {\n  /** The number of commits ahead of the base branch. */\n  aheadBy: Scalars['Int']['output'];\n  /** The base revision of this comparison. */\n  baseTarget: GitObject;\n  /** The number of commits behind the base branch. */\n  behindBy: Scalars['Int']['output'];\n  /** The commits which compose this comparison. */\n  commits: ComparisonCommitConnection;\n  /** The head revision of this comparison. */\n  headTarget: GitObject;\n  /** The Node ID of the Comparison object */\n  id: Scalars['ID']['output'];\n  /** The status of this comparison. */\n  status: ComparisonStatus;\n};\n\n\n/** Represents a comparison between two commit revisions. */\nexport type ComparisonCommitsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for Commit. */\nexport type ComparisonCommitConnection = {\n  /** The total count of authors and co-authors across all commits. */\n  authorCount: Scalars['Int']['output'];\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Commit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** The status of a git comparison between two refs. */\nexport enum ComparisonStatus {\n  /** The head ref is ahead of the base ref. */\n  Ahead = 'AHEAD',\n  /** The head ref is behind the base ref. */\n  Behind = 'BEHIND',\n  /** The head ref is both ahead and behind of the base ref, indicating git history has diverged. */\n  Diverged = 'DIVERGED',\n  /** The head ref and base ref are identical. */\n  Identical = 'IDENTICAL'\n}\n\n/** Represents a 'connected' event on a given issue or pull request. */\nexport type ConnectedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the ConnectedEvent object */\n  id: Scalars['ID']['output'];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars['Boolean']['output'];\n  /** Issue or pull request that made the reference. */\n  source: ReferencedSubject;\n  /** Issue or pull request which was connected. */\n  subject: ReferencedSubject;\n};\n\n/** The Contributing Guidelines for a repository. */\nexport type ContributingGuidelines = {\n  /** The body of the Contributing Guidelines. */\n  body?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the Contributing Guidelines. */\n  resourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the Contributing Guidelines. */\n  url?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Represents a contribution a user made on GitHub, such as opening an issue. */\nexport type Contribution = {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars['Boolean']['output'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime']['output'];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI']['output'];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** A calendar of contributions made on GitHub by a user. */\nexport type ContributionCalendar = {\n  /** A list of hex color codes used in this calendar. The darker the color, the more contributions it represents. */\n  colors: Array<Scalars['String']['output']>;\n  /** Determine if the color set was chosen because it's currently Halloween. */\n  isHalloween: Scalars['Boolean']['output'];\n  /** A list of the months of contributions in this calendar. */\n  months: Array<ContributionCalendarMonth>;\n  /** The count of total contributions in the calendar. */\n  totalContributions: Scalars['Int']['output'];\n  /** A list of the weeks of contributions in this calendar. */\n  weeks: Array<ContributionCalendarWeek>;\n};\n\n/** Represents a single day of contributions on GitHub by a user. */\nexport type ContributionCalendarDay = {\n  /** The hex color code that represents how many contributions were made on this day compared to others in the calendar. */\n  color: Scalars['String']['output'];\n  /** How many contributions were made by the user on this day. */\n  contributionCount: Scalars['Int']['output'];\n  /**\n   * Indication of contributions, relative to other days. Can be used to indicate\n   * which color to represent this day on a calendar.\n   */\n  contributionLevel: ContributionLevel;\n  /** The day this square represents. */\n  date: Scalars['Date']['output'];\n  /** A number representing which day of the week this square represents, e.g., 1 is Monday. */\n  weekday: Scalars['Int']['output'];\n};\n\n/** A month of contributions in a user's contribution graph. */\nexport type ContributionCalendarMonth = {\n  /** The date of the first day of this month. */\n  firstDay: Scalars['Date']['output'];\n  /** The name of the month. */\n  name: Scalars['String']['output'];\n  /** How many weeks started in this month. */\n  totalWeeks: Scalars['Int']['output'];\n  /** The year the month occurred in. */\n  year: Scalars['Int']['output'];\n};\n\n/** A week of contributions in a user's contribution graph. */\nexport type ContributionCalendarWeek = {\n  /** The days of contributions in this week. */\n  contributionDays: Array<ContributionCalendarDay>;\n  /** The date of the earliest square in this week. */\n  firstDay: Scalars['Date']['output'];\n};\n\n/** Varying levels of contributions from none to many. */\nexport enum ContributionLevel {\n  /** Lowest 25% of days of contributions. */\n  FirstQuartile = 'FIRST_QUARTILE',\n  /** Highest 25% of days of contributions. More contributions than the third quartile. */\n  FourthQuartile = 'FOURTH_QUARTILE',\n  /** No contributions occurred. */\n  None = 'NONE',\n  /** Second lowest 25% of days of contributions. More contributions than the first quartile. */\n  SecondQuartile = 'SECOND_QUARTILE',\n  /** Second highest 25% of days of contributions. More contributions than second quartile, less than the fourth quartile. */\n  ThirdQuartile = 'THIRD_QUARTILE'\n}\n\n/** Ordering options for contribution connections. */\nexport type ContributionOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n};\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollection = {\n  /** Commit contributions made by the user, grouped by repository. */\n  commitContributionsByRepository: Array<CommitContributionsByRepository>;\n  /** A calendar of this user's contributions on GitHub. */\n  contributionCalendar: ContributionCalendar;\n  /** The years the user has been making contributions with the most recent year first. */\n  contributionYears: Array<Scalars['Int']['output']>;\n  /** Determine if this collection's time span ends in the current month. */\n  doesEndInCurrentMonth: Scalars['Boolean']['output'];\n  /**\n   * The date of the first restricted contribution the user made in this time\n   * period. Can only be non-null when the user has enabled private contribution counts.\n   */\n  earliestRestrictedContributionDate?: Maybe<Scalars['Date']['output']>;\n  /** The ending date and time of this collection. */\n  endedAt: Scalars['DateTime']['output'];\n  /**\n   * The first issue the user opened on GitHub. This will be null if that issue was\n   * opened outside the collection's time range and ignoreTimeRange is false. If\n   * the issue is not visible but the user has opted to show private contributions,\n   * a RestrictedContribution will be returned.\n   */\n  firstIssueContribution?: Maybe<CreatedIssueOrRestrictedContribution>;\n  /**\n   * The first pull request the user opened on GitHub. This will be null if that\n   * pull request was opened outside the collection's time range and\n   * ignoreTimeRange is not true. If the pull request is not visible but the user\n   * has opted to show private contributions, a RestrictedContribution will be returned.\n   */\n  firstPullRequestContribution?: Maybe<CreatedPullRequestOrRestrictedContribution>;\n  /**\n   * The first repository the user created on GitHub. This will be null if that\n   * first repository was created outside the collection's time range and\n   * ignoreTimeRange is false. If the repository is not visible, then a\n   * RestrictedContribution is returned.\n   */\n  firstRepositoryContribution?: Maybe<CreatedRepositoryOrRestrictedContribution>;\n  /** Does the user have any more activity in the timeline that occurred prior to the collection's time range? */\n  hasActivityInThePast: Scalars['Boolean']['output'];\n  /** Determine if there are any contributions in this collection. */\n  hasAnyContributions: Scalars['Boolean']['output'];\n  /**\n   * Determine if the user made any contributions in this time frame whose details\n   * are not visible because they were made in a private repository. Can only be\n   * true if the user enabled private contribution counts.\n   */\n  hasAnyRestrictedContributions: Scalars['Boolean']['output'];\n  /** Whether or not the collector's time span is all within the same day. */\n  isSingleDay: Scalars['Boolean']['output'];\n  /** A list of issues the user opened. */\n  issueContributions: CreatedIssueContributionConnection;\n  /** Issue contributions made by the user, grouped by repository. */\n  issueContributionsByRepository: Array<IssueContributionsByRepository>;\n  /**\n   * When the user signed up for GitHub. This will be null if that sign up date\n   * falls outside the collection's time range and ignoreTimeRange is false.\n   */\n  joinedGitHubContribution?: Maybe<JoinedGitHubContribution>;\n  /**\n   * The date of the most recent restricted contribution the user made in this time\n   * period. Can only be non-null when the user has enabled private contribution counts.\n   */\n  latestRestrictedContributionDate?: Maybe<Scalars['Date']['output']>;\n  /**\n   * When this collection's time range does not include any activity from the user, use this\n   * to get a different collection from an earlier time range that does have activity.\n   */\n  mostRecentCollectionWithActivity?: Maybe<ContributionsCollection>;\n  /**\n   * Returns a different contributions collection from an earlier time range than this one\n   * that does not have any contributions.\n   */\n  mostRecentCollectionWithoutActivity?: Maybe<ContributionsCollection>;\n  /**\n   * The issue the user opened on GitHub that received the most comments in the specified\n   * time frame.\n   */\n  popularIssueContribution?: Maybe<CreatedIssueContribution>;\n  /**\n   * The pull request the user opened on GitHub that received the most comments in the\n   * specified time frame.\n   */\n  popularPullRequestContribution?: Maybe<CreatedPullRequestContribution>;\n  /** Pull request contributions made by the user. */\n  pullRequestContributions: CreatedPullRequestContributionConnection;\n  /** Pull request contributions made by the user, grouped by repository. */\n  pullRequestContributionsByRepository: Array<PullRequestContributionsByRepository>;\n  /**\n   * Pull request review contributions made by the user. Returns the most recently\n   * submitted review for each PR reviewed by the user.\n   */\n  pullRequestReviewContributions: CreatedPullRequestReviewContributionConnection;\n  /** Pull request review contributions made by the user, grouped by repository. */\n  pullRequestReviewContributionsByRepository: Array<PullRequestReviewContributionsByRepository>;\n  /** A list of repositories owned by the user that the user created in this time range. */\n  repositoryContributions: CreatedRepositoryContributionConnection;\n  /**\n   * A count of contributions made by the user that the viewer cannot access. Only\n   * non-zero when the user has chosen to share their private contribution counts.\n   */\n  restrictedContributionsCount: Scalars['Int']['output'];\n  /** The beginning date and time of this collection. */\n  startedAt: Scalars['DateTime']['output'];\n  /** How many commits were made by the user in this time span. */\n  totalCommitContributions: Scalars['Int']['output'];\n  /** How many issues the user opened. */\n  totalIssueContributions: Scalars['Int']['output'];\n  /** How many pull requests the user opened. */\n  totalPullRequestContributions: Scalars['Int']['output'];\n  /** How many pull request reviews the user left. */\n  totalPullRequestReviewContributions: Scalars['Int']['output'];\n  /** How many different repositories the user committed to. */\n  totalRepositoriesWithContributedCommits: Scalars['Int']['output'];\n  /** How many different repositories the user opened issues in. */\n  totalRepositoriesWithContributedIssues: Scalars['Int']['output'];\n  /** How many different repositories the user left pull request reviews in. */\n  totalRepositoriesWithContributedPullRequestReviews: Scalars['Int']['output'];\n  /** How many different repositories the user opened pull requests in. */\n  totalRepositoriesWithContributedPullRequests: Scalars['Int']['output'];\n  /** How many repositories the user created. */\n  totalRepositoryContributions: Scalars['Int']['output'];\n  /** The user who made the contributions in this collection. */\n  user: User;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionCommitContributionsByRepositoryArgs = {\n  maxRepositories?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionIssueContributionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionIssueContributionsByRepositoryArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']['input']>;\n  maxRepositories?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestContributionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestContributionsByRepositoryArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']['input']>;\n  maxRepositories?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestReviewContributionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionPullRequestReviewContributionsByRepositoryArgs = {\n  maxRepositories?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalIssueContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalPullRequestContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoriesWithContributedIssuesArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoriesWithContributedPullRequestsArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n  excludePopular?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A contributions collection aggregates contributions such as opened issues and commits created by a user. */\nexport type ContributionsCollectionTotalRepositoryContributionsArgs = {\n  excludeFirst?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Autogenerated input type of ConvertProjectCardNoteToIssue */\nexport type ConvertProjectCardNoteToIssueInput = {\n  /** The body of the newly created issue. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ProjectCard ID to convert. */\n  projectCardId: Scalars['ID']['input'];\n  /** The ID of the repository to create the issue in. */\n  repositoryId: Scalars['ID']['input'];\n  /** The title of the newly created issue. Defaults to the card's note text. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of ConvertProjectCardNoteToIssue. */\nexport type ConvertProjectCardNoteToIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated ProjectCard. */\n  projectCard?: Maybe<ProjectCard>;\n};\n\n/** Autogenerated input type of ConvertProjectV2DraftIssueItemToIssue */\nexport type ConvertProjectV2DraftIssueItemToIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the draft issue ProjectV2Item to convert. */\n  itemId: Scalars['ID']['input'];\n  /** The ID of the repository to create the issue in. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ConvertProjectV2DraftIssueItemToIssue. */\nexport type ConvertProjectV2DraftIssueItemToIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated project item. */\n  item?: Maybe<ProjectV2Item>;\n};\n\n/** Autogenerated input type of ConvertPullRequestToDraft */\nexport type ConvertPullRequestToDraftInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the pull request to convert to draft */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ConvertPullRequestToDraft. */\nexport type ConvertPullRequestToDraftPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request that is now a draft. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'convert_to_draft' event on a given pull request. */\nexport type ConvertToDraftEvent = Node & UniformResourceLocatable & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the ConvertToDraftEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this convert to draft event. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this convert to draft event. */\n  url: Scalars['URI']['output'];\n};\n\n/** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\nexport type ConvertedNoteToIssueEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ConvertedNoteToIssueEvent object */\n  id: Scalars['ID']['output'];\n  /** Project referenced by event. */\n  project?: Maybe<Project>;\n  /** Project card referenced by this project event. */\n  projectCard?: Maybe<ProjectCard>;\n  /** Column name referenced by this project event. */\n  projectColumnName: Scalars['String']['output'];\n};\n\n/** Represents a 'converted_to_discussion' event on a given issue. */\nexport type ConvertedToDiscussionEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The discussion that the issue was converted into. */\n  discussion?: Maybe<Discussion>;\n  /** The Node ID of the ConvertedToDiscussionEvent object */\n  id: Scalars['ID']['output'];\n};\n\n/** Copilot endpoint information */\nexport type CopilotEndpoints = {\n  /** Copilot API endpoint */\n  api: Scalars['String']['output'];\n  /** Copilot origin tracker endpoint */\n  originTracker: Scalars['String']['output'];\n  /** Copilot proxy endpoint */\n  proxy: Scalars['String']['output'];\n  /** Copilot telemetry endpoint */\n  telemetry: Scalars['String']['output'];\n};\n\n/** Autogenerated input type of CopyProjectV2 */\nexport type CopyProjectV2Input = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Include draft issues in the new project */\n  includeDraftIssues?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The owner ID of the new project. */\n  ownerId: Scalars['ID']['input'];\n  /** The ID of the source Project to copy. */\n  projectId: Scalars['ID']['input'];\n  /** The title of the project. */\n  title: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of CopyProjectV2. */\nexport type CopyProjectV2Payload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The copied project. */\n  projectV2?: Maybe<ProjectV2>;\n};\n\n/** Autogenerated input type of CreateAttributionInvitation */\nexport type CreateAttributionInvitationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the owner scoping the reattributable data. */\n  ownerId: Scalars['ID']['input'];\n  /** The Node ID of the account owning the data to reattribute. */\n  sourceId: Scalars['ID']['input'];\n  /** The Node ID of the account which may claim the data. */\n  targetId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CreateAttributionInvitation. */\nexport type CreateAttributionInvitationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The owner scoping the reattributable data. */\n  owner?: Maybe<Organization>;\n  /** The account owning the data to reattribute. */\n  source?: Maybe<Claimable>;\n  /** The account which may claim the data. */\n  target?: Maybe<Claimable>;\n};\n\n/** Autogenerated input type of CreateBranchProtectionRule */\nexport type CreateBranchProtectionRuleInput = {\n  /** Can this branch be deleted. */\n  allowsDeletions?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Is branch creation a protected operation. */\n  blocksCreations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */\n  bypassForcePushActorIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */\n  bypassPullRequestActorIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Can admins override branch protection. */\n  isAdminEnforced?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * Whether users can pull changes from upstream when the branch is locked. Set to\n   * `true` to allow fork syncing. Set to `false` to prevent fork syncing.\n   */\n  lockAllowsFetchAndMerge?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */\n  lockBranch?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The glob-like pattern used to determine matching branches. */\n  pattern: Scalars['String']['input'];\n  /** A list of User, Team, or App IDs allowed to push to matching branches. */\n  pushActorIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The global relay id of the repository in which a new branch protection rule should be created in. */\n  repositoryId: Scalars['ID']['input'];\n  /** Whether the most recent push must be approved by someone other than the person who pushed it */\n  requireLastPushApproval?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: InputMaybe<Scalars['Int']['input']>;\n  /** The list of required deployment environments */\n  requiredDeploymentEnvironments?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** The list of required status checks */\n  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are commits required to be signed. */\n  requiresCommitSignatures?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are successful deployments required before merging. */\n  requiresDeployments?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */\n  reviewDismissalActorIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n};\n\n/** Autogenerated return type of CreateBranchProtectionRule. */\nexport type CreateBranchProtectionRulePayload = {\n  /** The newly created BranchProtectionRule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of CreateCheckRun */\nexport type CreateCheckRunInput = {\n  /** Possible further actions the integrator can perform, which a user may trigger. */\n  actions?: InputMaybe<Array<CheckRunAction>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The time that the check run finished. */\n  completedAt?: InputMaybe<Scalars['DateTime']['input']>;\n  /** The final conclusion of the check. */\n  conclusion?: InputMaybe<CheckConclusionState>;\n  /** The URL of the integrator's site that has the full details of the check. */\n  detailsUrl?: InputMaybe<Scalars['URI']['input']>;\n  /** A reference for the run on the integrator's system. */\n  externalId?: InputMaybe<Scalars['String']['input']>;\n  /** The SHA of the head commit. */\n  headSha: Scalars['GitObjectID']['input'];\n  /** The name of the check. */\n  name: Scalars['String']['input'];\n  /** Descriptive details about the run. */\n  output?: InputMaybe<CheckRunOutput>;\n  /** The node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n  /** The time that the check run began. */\n  startedAt?: InputMaybe<Scalars['DateTime']['input']>;\n  /** The current status. */\n  status?: InputMaybe<RequestableCheckStatusState>;\n};\n\n/** Autogenerated return type of CreateCheckRun. */\nexport type CreateCheckRunPayload = {\n  /** The newly created check run. */\n  checkRun?: Maybe<CheckRun>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of CreateCheckSuite */\nexport type CreateCheckSuiteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The SHA of the head commit. */\n  headSha: Scalars['GitObjectID']['input'];\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CreateCheckSuite. */\nexport type CreateCheckSuitePayload = {\n  /** The newly created check suite. */\n  checkSuite?: Maybe<CheckSuite>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of CreateCommitOnBranch */\nexport type CreateCommitOnBranchInput = {\n  /** The Ref to be updated.  Must be a branch. */\n  branch: CommittableBranch;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The git commit oid expected at the head of the branch prior to the commit */\n  expectedHeadOid: Scalars['GitObjectID']['input'];\n  /** A description of changes to files in this commit. */\n  fileChanges?: InputMaybe<FileChanges>;\n  /** The commit message the be included with the commit. */\n  message: CommitMessage;\n};\n\n/** Autogenerated return type of CreateCommitOnBranch. */\nexport type CreateCommitOnBranchPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new commit. */\n  commit?: Maybe<Commit>;\n  /** The ref which has been updated to point to the new commit. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of CreateDeployment */\nexport type CreateDeploymentInput = {\n  /** Attempt to automatically merge the default branch into the requested ref, defaults to true. */\n  autoMerge?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Short description of the deployment. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Name for the target deployment environment. */\n  environment?: InputMaybe<Scalars['String']['input']>;\n  /** JSON payload with extra information about the deployment. */\n  payload?: InputMaybe<Scalars['String']['input']>;\n  /** The node ID of the ref to be deployed. */\n  refId: Scalars['ID']['input'];\n  /** The node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n  /** The status contexts to verify against commit status checks. To bypass required contexts, pass an empty array. Defaults to all unique contexts. */\n  requiredContexts?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** Specifies a task to execute. */\n  task?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of CreateDeployment. */\nexport type CreateDeploymentPayload = {\n  /** True if the default branch has been auto-merged into the deployment ref. */\n  autoMerged?: Maybe<Scalars['Boolean']['output']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new deployment. */\n  deployment?: Maybe<Deployment>;\n};\n\n/** Autogenerated input type of CreateDeploymentStatus */\nexport type CreateDeploymentStatusInput = {\n  /** Adds a new inactive status to all non-transient, non-production environment deployments with the same repository and environment name as the created status's deployment. */\n  autoInactive?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The node ID of the deployment. */\n  deploymentId: Scalars['ID']['input'];\n  /** A short description of the status. Maximum length of 140 characters. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** If provided, updates the environment of the deploy. Otherwise, does not modify the environment. */\n  environment?: InputMaybe<Scalars['String']['input']>;\n  /** Sets the URL for accessing your environment. */\n  environmentUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The log URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. */\n  logUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The state of the status. */\n  state: DeploymentStatusState;\n};\n\n/** Autogenerated return type of CreateDeploymentStatus. */\nexport type CreateDeploymentStatusPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new deployment status. */\n  deploymentStatus?: Maybe<DeploymentStatus>;\n};\n\n/** Autogenerated input type of CreateDiscussion */\nexport type CreateDiscussionInput = {\n  /** The body of the discussion. */\n  body: Scalars['String']['input'];\n  /** The id of the discussion category to associate with this discussion. */\n  categoryId: Scalars['ID']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the repository on which to create the discussion. */\n  repositoryId: Scalars['ID']['input'];\n  /** The title of the discussion. */\n  title: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of CreateDiscussion. */\nexport type CreateDiscussionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The discussion that was just created. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of CreateEnterpriseOrganization */\nexport type CreateEnterpriseOrganizationInput = {\n  /** The logins for the administrators of the new organization. */\n  adminLogins: Array<Scalars['String']['input']>;\n  /** The email used for sending billing receipts. */\n  billingEmail: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise owning the new organization. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of the new organization. */\n  login: Scalars['String']['input'];\n  /** The profile name of the new organization. */\n  profileName: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of CreateEnterpriseOrganization. */\nexport type CreateEnterpriseOrganizationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise that owns the created organization. */\n  enterprise?: Maybe<Enterprise>;\n  /** The organization that was created. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of CreateEnvironment */\nexport type CreateEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the environment. */\n  name: Scalars['String']['input'];\n  /** The node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CreateEnvironment. */\nexport type CreateEnvironmentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new or existing environment. */\n  environment?: Maybe<Environment>;\n};\n\n/** Autogenerated input type of CreateIpAllowListEntry */\nexport type CreateIpAllowListEntryInput = {\n  /** An IP address or range of addresses in CIDR notation. */\n  allowListValue: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the IP allow list entry is active when an IP allow list is enabled. */\n  isActive: Scalars['Boolean']['input'];\n  /** An optional name for the IP allow list entry. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the owner for which to create the new IP allow list entry. */\n  ownerId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CreateIpAllowListEntry. */\nexport type CreateIpAllowListEntryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The IP allow list entry that was created. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of CreateIssue */\nexport type CreateIssueInput = {\n  /** The Node ID for the user assignee for this issue. */\n  assigneeIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The body for the issue description. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of an issue template in the repository, assigns labels and assignees from the template to the issue */\n  issueTemplate?: InputMaybe<Scalars['String']['input']>;\n  /** An array of Node IDs of labels for this issue. */\n  labelIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The Node ID of the milestone for this issue. */\n  milestoneId?: InputMaybe<Scalars['ID']['input']>;\n  /** An array of Node IDs for projects associated with this issue. */\n  projectIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n  /** The title for the issue. */\n  title: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of CreateIssue. */\nexport type CreateIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new issue. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of CreateLabel */\nexport type CreateLabelInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A 6 character hex code, without the leading #, identifying the color of the label. */\n  color: Scalars['String']['input'];\n  /** A brief description of the label, such as its purpose. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the label. */\n  name: Scalars['String']['input'];\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CreateLabel. */\nexport type CreateLabelPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new label. */\n  label?: Maybe<Label>;\n};\n\n/** Autogenerated input type of CreateLinkedBranch */\nexport type CreateLinkedBranchInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the issue to link to. */\n  issueId: Scalars['ID']['input'];\n  /** The name of the new branch. Defaults to issue number and title. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The commit SHA to base the new branch on. */\n  oid: Scalars['GitObjectID']['input'];\n  /** ID of the repository to create the branch in. Defaults to the issue repository. */\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of CreateLinkedBranch. */\nexport type CreateLinkedBranchPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The issue that was linked to. */\n  issue?: Maybe<Issue>;\n  /** The new branch issue reference. */\n  linkedBranch?: Maybe<LinkedBranch>;\n};\n\n/** Autogenerated input type of CreateMigrationSource */\nexport type CreateMigrationSourceInput = {\n  /** The migration source access token. */\n  accessToken?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The GitHub personal access token of the user importing to the target repository. */\n  githubPat?: InputMaybe<Scalars['String']['input']>;\n  /** The migration source name. */\n  name: Scalars['String']['input'];\n  /** The ID of the organization that will own the migration source. */\n  ownerId: Scalars['ID']['input'];\n  /** The migration source type. */\n  type: MigrationSourceType;\n  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */\n  url?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of CreateMigrationSource. */\nexport type CreateMigrationSourcePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created migration source. */\n  migrationSource?: Maybe<MigrationSource>;\n};\n\n/** Autogenerated input type of CreateProject */\nexport type CreateProjectInput = {\n  /** The description of project. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of project. */\n  name: Scalars['String']['input'];\n  /** The owner ID to create the project under. */\n  ownerId: Scalars['ID']['input'];\n  /** A list of repository IDs to create as linked repositories for the project */\n  repositoryIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The name of the GitHub-provided template. */\n  template?: InputMaybe<ProjectTemplate>;\n};\n\n/** Autogenerated return type of CreateProject. */\nexport type CreateProjectPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of CreateProjectV2Field */\nexport type CreateProjectV2FieldInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The data type of the field. */\n  dataType: ProjectV2CustomFieldType;\n  /** The name of the field. */\n  name: Scalars['String']['input'];\n  /** The ID of the Project to create the field in. */\n  projectId: Scalars['ID']['input'];\n  /** Options for a single select field. At least one value is required if data_type is SINGLE_SELECT */\n  singleSelectOptions?: InputMaybe<Array<ProjectV2SingleSelectFieldOptionInput>>;\n};\n\n/** Autogenerated return type of CreateProjectV2Field. */\nexport type CreateProjectV2FieldPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new field. */\n  projectV2Field?: Maybe<ProjectV2FieldConfiguration>;\n};\n\n/** Autogenerated input type of CreateProjectV2 */\nexport type CreateProjectV2Input = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The owner ID to create the project under. */\n  ownerId: Scalars['ID']['input'];\n  /** The repository to link the project to. */\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n  /** The team to link the project to. The team will be granted read permissions. */\n  teamId?: InputMaybe<Scalars['ID']['input']>;\n  /** The title of the project. */\n  title: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of CreateProjectV2. */\nexport type CreateProjectV2Payload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new project. */\n  projectV2?: Maybe<ProjectV2>;\n};\n\n/** Autogenerated input type of CreateProjectV2StatusUpdate */\nexport type CreateProjectV2StatusUpdateInput = {\n  /** The body of the status update. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Project to create the status update in. */\n  projectId: Scalars['ID']['input'];\n  /** The start date of the status update. */\n  startDate?: InputMaybe<Scalars['Date']['input']>;\n  /** The status of the status update. */\n  status?: InputMaybe<ProjectV2StatusUpdateStatus>;\n  /** The target date of the status update. */\n  targetDate?: InputMaybe<Scalars['Date']['input']>;\n};\n\n/** Autogenerated return type of CreateProjectV2StatusUpdate. */\nexport type CreateProjectV2StatusUpdatePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The status update updated in the project. */\n  statusUpdate?: Maybe<ProjectV2StatusUpdate>;\n};\n\n/** Autogenerated input type of CreatePullRequest */\nexport type CreatePullRequestInput = {\n  /**\n   * The name of the branch you want your changes pulled into. This should be an existing branch\n   * on the current repository. You cannot update the base branch on a pull request to point\n   * to another repository.\n   */\n  baseRefName: Scalars['String']['input'];\n  /** The contents of the pull request. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Indicates whether this pull request should be a draft. */\n  draft?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * The name of the branch where your changes are implemented. For cross-repository pull requests\n   * in the same network, namespace `head_ref_name` with a user like this: `username:branch`.\n   */\n  headRefName: Scalars['String']['input'];\n  /** The Node ID of the head repository. */\n  headRepositoryId?: InputMaybe<Scalars['ID']['input']>;\n  /** Indicates whether maintainers can modify the pull request. */\n  maintainerCanModify?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n  /** The title of the pull request. */\n  title: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of CreatePullRequest. */\nexport type CreatePullRequestPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of CreateRef */\nexport type CreateRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The fully qualified name of the new Ref (ie: `refs/heads/my_new_branch`). */\n  name: Scalars['String']['input'];\n  /** The GitObjectID that the new Ref shall target. Must point to a commit. */\n  oid: Scalars['GitObjectID']['input'];\n  /** The Node ID of the Repository to create the Ref in. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of CreateRef. */\nexport type CreateRefPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The newly created ref. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of CreateRepository */\nexport type CreateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A short description of the new repository. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Indicates if the repository should have the issues feature enabled. */\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Indicates if the repository should have the wiki feature enabled. */\n  hasWikiEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The URL for a web page about this repository. */\n  homepageUrl?: InputMaybe<Scalars['URI']['input']>;\n  /** The name of the new repository. */\n  name: Scalars['String']['input'];\n  /** The ID of the owner for the new repository. */\n  ownerId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * When an organization is specified as the owner, this ID identifies the team\n   * that should be granted access to the new repository.\n   */\n  teamId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * Whether this repository should be marked as a template such that anyone who\n   * can access it can create new repositories with the same files and directory structure.\n   */\n  template?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n/** Autogenerated return type of CreateRepository. */\nexport type CreateRepositoryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of CreateRepositoryRuleset */\nexport type CreateRepositoryRulesetInput = {\n  /** A list of actors that are allowed to bypass rules in this ruleset. */\n  bypassActors?: InputMaybe<Array<RepositoryRulesetBypassActorInput>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The set of conditions for this ruleset */\n  conditions: RepositoryRuleConditionsInput;\n  /** The enforcement level for this ruleset */\n  enforcement: RuleEnforcement;\n  /** The name of the ruleset. */\n  name: Scalars['String']['input'];\n  /** The list of rules for this ruleset */\n  rules?: InputMaybe<Array<RepositoryRuleInput>>;\n  /** The global relay id of the source in which a new ruleset should be created in. */\n  sourceId: Scalars['ID']['input'];\n  /** The target of the ruleset. */\n  target?: InputMaybe<RepositoryRulesetTarget>;\n};\n\n/** Autogenerated return type of CreateRepositoryRuleset. */\nexport type CreateRepositoryRulesetPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The newly created Ruleset. */\n  ruleset?: Maybe<RepositoryRuleset>;\n};\n\n/** Autogenerated input type of CreateSponsorsListing */\nexport type CreateSponsorsListingInput = {\n  /**\n   * The country or region where the sponsorable's bank account is located.\n   * Required if fiscalHostLogin is not specified, ignored when fiscalHostLogin is specified.\n   */\n  billingCountryOrRegionCode?: InputMaybe<SponsorsCountryOrRegionCode>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The email address we should use to contact you about the GitHub Sponsors\n   * profile being created. This will not be shared publicly. Must be a verified\n   * email address already on your GitHub account. Only relevant when the\n   * sponsorable is yourself. Defaults to your primary email address on file if omitted.\n   */\n  contactEmail?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The username of the supported fiscal host's GitHub organization, if you want\n   * to receive sponsorship payouts through a fiscal host rather than directly to a\n   * bank account. For example, 'Open-Source-Collective' for Open Source Collective\n   * or 'numfocus' for numFOCUS. Case insensitive. See https://docs.github.com/sponsors/receiving-sponsorships-through-github-sponsors/using-a-fiscal-host-to-receive-github-sponsors-payouts\n   * for more information.\n   */\n  fiscalHostLogin?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The URL for your profile page on the fiscal host's website, e.g.,\n   * https://opencollective.com/babel or https://numfocus.org/project/bokeh.\n   * Required if fiscalHostLogin is specified.\n   */\n  fiscallyHostedProjectProfileUrl?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * Provide an introduction to serve as the main focus that appears on your GitHub\n   * Sponsors profile. It's a great opportunity to help potential sponsors learn\n   * more about you, your work, and why their sponsorship is important to you.\n   * GitHub-flavored Markdown is supported.\n   */\n  fullDescription?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The country or region where the sponsorable resides. This is for tax purposes.\n   * Required if the sponsorable is yourself, ignored when sponsorableLogin\n   * specifies an organization.\n   */\n  residenceCountryOrRegionCode?: InputMaybe<SponsorsCountryOrRegionCode>;\n  /**\n   * The username of the organization to create a GitHub Sponsors profile for, if\n   * desired. Defaults to creating a GitHub Sponsors profile for the authenticated\n   * user if omitted.\n   */\n  sponsorableLogin?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of CreateSponsorsListing. */\nexport type CreateSponsorsListingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new GitHub Sponsors profile. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n};\n\n/** Autogenerated input type of CreateSponsorsTier */\nexport type CreateSponsorsTierInput = {\n  /** The value of the new tier in US dollars. Valid values: 1-12000. */\n  amount: Scalars['Int']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A description of what this tier is, what perks sponsors might receive, what a sponsorship at this tier means for you, etc. */\n  description: Scalars['String']['input'];\n  /** Whether sponsorships using this tier should happen monthly/yearly or just once. */\n  isRecurring?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * Whether to make the tier available immediately for sponsors to choose.\n   * Defaults to creating a draft tier that will not be publicly visible.\n   */\n  publish?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * Optional ID of the private repository that sponsors at this tier should gain\n   * read-only access to. Must be owned by an organization.\n   */\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * Optional name of the private repository that sponsors at this tier should gain\n   * read-only access to. Must be owned by an organization. Necessary if\n   * repositoryOwnerLogin is given. Will be ignored if repositoryId is given.\n   */\n  repositoryName?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * Optional login of the organization owner of the private repository that\n   * sponsors at this tier should gain read-only access to. Necessary if\n   * repositoryName is given. Will be ignored if repositoryId is given.\n   */\n  repositoryOwnerLogin?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The ID of the user or organization who owns the GitHub Sponsors profile.\n   * Defaults to the current user if omitted and sponsorableLogin is not given.\n   */\n  sponsorableId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * The username of the user or organization who owns the GitHub Sponsors profile.\n   * Defaults to the current user if omitted and sponsorableId is not given.\n   */\n  sponsorableLogin?: InputMaybe<Scalars['String']['input']>;\n  /** Optional message new sponsors at this tier will receive. */\n  welcomeMessage?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of CreateSponsorsTier. */\nexport type CreateSponsorsTierPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new tier. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n};\n\n/** Autogenerated input type of CreateSponsorship */\nexport type CreateSponsorshipInput = {\n  /** The amount to pay to the sponsorable in US dollars. Required if a tierId is not specified. Valid values: 1-12000. */\n  amount?: InputMaybe<Scalars['Int']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether the sponsorship should happen monthly/yearly or just this one time. Required if a tierId is not specified. */\n  isRecurring?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * Specify whether others should be able to see that the sponsor is sponsoring\n   * the sponsorable. Public visibility still does not reveal which tier is used.\n   */\n  privacyLevel?: InputMaybe<SponsorshipPrivacy>;\n  /** Whether the sponsor should receive email updates from the sponsorable. */\n  receiveEmails?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * The ID of the user or organization who is acting as the sponsor, paying for\n   * the sponsorship. Required if sponsorLogin is not given.\n   */\n  sponsorId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * The username of the user or organization who is acting as the sponsor, paying\n   * for the sponsorship. Required if sponsorId is not given.\n   */\n  sponsorLogin?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars['ID']['input']>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of one of sponsorable's existing tiers to sponsor at. Required if amount is not specified. */\n  tierId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of CreateSponsorship. */\nexport type CreateSponsorshipPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The sponsorship that was started. */\n  sponsorship?: Maybe<Sponsorship>;\n};\n\n/** Autogenerated input type of CreateSponsorships */\nexport type CreateSponsorshipsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * Specify whether others should be able to see that the sponsor is sponsoring\n   * the sponsorables. Public visibility still does not reveal the dollar value of\n   * the sponsorship.\n   */\n  privacyLevel?: InputMaybe<SponsorshipPrivacy>;\n  /** Whether the sponsor should receive email updates from the sponsorables. */\n  receiveEmails?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * Whether the sponsorships created should continue each billing cycle for the\n   * sponsor (monthly or annually), versus lasting only a single month. Defaults to\n   * one-time sponsorships.\n   */\n  recurring?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The username of the user or organization who is acting as the sponsor, paying for the sponsorships. */\n  sponsorLogin: Scalars['String']['input'];\n  /** The list of maintainers to sponsor and for how much apiece. */\n  sponsorships: Array<BulkSponsorship>;\n};\n\n/** Autogenerated return type of CreateSponsorships. */\nexport type CreateSponsorshipsPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The users and organizations who received a sponsorship. */\n  sponsorables?: Maybe<Array<Sponsorable>>;\n};\n\n/** Autogenerated input type of CreateTeamDiscussionComment */\nexport type CreateTeamDiscussionCommentInput = {\n  /**\n   * The content of the comment. This field is required.\n   *\n   * **Upcoming Change on 2024-07-01 UTC**\n   * **Description:** `body` will be removed. Follow the guide at\n   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\n   * find a suitable replacement.\n   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.\n   */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The ID of the discussion to which the comment belongs. This field is required.\n   *\n   * **Upcoming Change on 2024-07-01 UTC**\n   * **Description:** `discussionId` will be removed. Follow the guide at\n   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\n   * find a suitable replacement.\n   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.\n   */\n  discussionId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of CreateTeamDiscussionComment. */\nexport type CreateTeamDiscussionCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /**\n   * The new comment.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  teamDiscussionComment?: Maybe<TeamDiscussionComment>;\n};\n\n/** Autogenerated input type of CreateTeamDiscussion */\nexport type CreateTeamDiscussionInput = {\n  /**\n   * The content of the discussion. This field is required.\n   *\n   * **Upcoming Change on 2024-07-01 UTC**\n   * **Description:** `body` will be removed. Follow the guide at\n   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\n   * find a suitable replacement.\n   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.\n   */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * If true, restricts the visibility of this discussion to team members and\n   * organization owners. If false or not specified, allows any organization member\n   * to view this discussion.\n   *\n   * **Upcoming Change on 2024-07-01 UTC**\n   * **Description:** `private` will be removed. Follow the guide at\n   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\n   * find a suitable replacement.\n   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.\n   */\n  private?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * The ID of the team to which the discussion belongs. This field is required.\n   *\n   * **Upcoming Change on 2024-07-01 UTC**\n   * **Description:** `teamId` will be removed. Follow the guide at\n   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\n   * find a suitable replacement.\n   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.\n   */\n  teamId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * The title of the discussion. This field is required.\n   *\n   * **Upcoming Change on 2024-07-01 UTC**\n   * **Description:** `title` will be removed. Follow the guide at\n   * https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to\n   * find a suitable replacement.\n   * **Reason:** The Team Discussions feature is deprecated in favor of Organization Discussions.\n   */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of CreateTeamDiscussion. */\nexport type CreateTeamDiscussionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /**\n   * The new discussion.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  teamDiscussion?: Maybe<TeamDiscussion>;\n};\n\n/** Autogenerated input type of CreateUserList */\nexport type CreateUserListInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A description of the list */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Whether or not the list is private */\n  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The name of the new list */\n  name: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of CreateUserList. */\nexport type CreateUserListPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The list that was just created */\n  list?: Maybe<UserList>;\n  /** The user who created the list */\n  viewer?: Maybe<User>;\n};\n\n/** Represents the contribution a user made by committing to a repository. */\nexport type CreatedCommitContribution = Contribution & {\n  /** How many commits were made on this day to this repository by the user. */\n  commitCount: Scalars['Int']['output'];\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars['Boolean']['output'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime']['output'];\n  /** The repository the user made a commit in. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI']['output'];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedCommitContribution. */\nexport type CreatedCommitContributionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedCommitContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedCommitContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of commits across days and repositories in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CreatedCommitContributionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedCommitContribution>;\n};\n\n/** Represents the contribution a user made on GitHub by opening an issue. */\nexport type CreatedIssueContribution = Contribution & {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars['Boolean']['output'];\n  /** The issue that was opened. */\n  issue: Issue;\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime']['output'];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI']['output'];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedIssueContribution. */\nexport type CreatedIssueContributionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedIssueContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedIssueContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CreatedIssueContributionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedIssueContribution>;\n};\n\n/** Represents either a issue the viewer can access or a restricted contribution. */\nexport type CreatedIssueOrRestrictedContribution = CreatedIssueContribution | RestrictedContribution;\n\n/** Represents the contribution a user made on GitHub by opening a pull request. */\nexport type CreatedPullRequestContribution = Contribution & {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars['Boolean']['output'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime']['output'];\n  /** The pull request that was opened. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI']['output'];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedPullRequestContribution. */\nexport type CreatedPullRequestContributionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedPullRequestContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedPullRequestContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CreatedPullRequestContributionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedPullRequestContribution>;\n};\n\n/** Represents either a pull request the viewer can access or a restricted contribution. */\nexport type CreatedPullRequestOrRestrictedContribution = CreatedPullRequestContribution | RestrictedContribution;\n\n/** Represents the contribution a user made by leaving a review on a pull request. */\nexport type CreatedPullRequestReviewContribution = Contribution & {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars['Boolean']['output'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime']['output'];\n  /** The pull request the user reviewed. */\n  pullRequest: PullRequest;\n  /** The review the user left on the pull request. */\n  pullRequestReview: PullRequestReview;\n  /** The repository containing the pull request that the user reviewed. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI']['output'];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedPullRequestReviewContribution. */\nexport type CreatedPullRequestReviewContributionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedPullRequestReviewContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedPullRequestReviewContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CreatedPullRequestReviewContributionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedPullRequestReviewContribution>;\n};\n\n/** Represents the contribution a user made on GitHub by creating a repository. */\nexport type CreatedRepositoryContribution = Contribution & {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars['Boolean']['output'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime']['output'];\n  /** The repository that was created. */\n  repository: Repository;\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI']['output'];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** The connection type for CreatedRepositoryContribution. */\nexport type CreatedRepositoryContributionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CreatedRepositoryContributionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<CreatedRepositoryContribution>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type CreatedRepositoryContributionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<CreatedRepositoryContribution>;\n};\n\n/** Represents either a repository the viewer can access or a restricted contribution. */\nexport type CreatedRepositoryOrRestrictedContribution = CreatedRepositoryContribution | RestrictedContribution;\n\n/** Represents a mention made by one issue or pull request to another. */\nexport type CrossReferencedEvent = Node & UniformResourceLocatable & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the CrossReferencedEvent object */\n  id: Scalars['ID']['output'];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars['Boolean']['output'];\n  /** Identifies when the reference was made. */\n  referencedAt: Scalars['DateTime']['output'];\n  /** The HTTP path for this pull request. */\n  resourcePath: Scalars['URI']['output'];\n  /** Issue or pull request that made the reference. */\n  source: ReferencedSubject;\n  /** Issue or pull request to which the reference was made. */\n  target: ReferencedSubject;\n  /** The HTTP URL for this pull request. */\n  url: Scalars['URI']['output'];\n  /** Checks if the target will be closed when the source is merged. */\n  willCloseTarget: Scalars['Boolean']['output'];\n};\n\n/** Autogenerated input type of DeclineTopicSuggestion */\nexport type DeclineTopicSuggestionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The name of the suggested topic.\n   *\n   * **Upcoming Change on 2024-04-01 UTC**\n   * **Description:** `name` will be removed.\n   * **Reason:** Suggested topics are no longer supported\n   */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The reason why the suggested topic is declined.\n   *\n   * **Upcoming Change on 2024-04-01 UTC**\n   * **Description:** `reason` will be removed.\n   * **Reason:** Suggested topics are no longer supported\n   */\n  reason?: InputMaybe<TopicSuggestionDeclineReason>;\n  /**\n   * The Node ID of the repository.\n   *\n   * **Upcoming Change on 2024-04-01 UTC**\n   * **Description:** `repositoryId` will be removed.\n   * **Reason:** Suggested topics are no longer supported\n   */\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of DeclineTopicSuggestion. */\nexport type DeclineTopicSuggestionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /**\n   * The declined topic.\n   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC.\n   */\n  topic?: Maybe<Topic>;\n};\n\n/** The possible base permissions for repositories. */\nexport enum DefaultRepositoryPermissionField {\n  /** Can read, write, and administrate repos by default */\n  Admin = 'ADMIN',\n  /** No access */\n  None = 'NONE',\n  /** Can read repos by default */\n  Read = 'READ',\n  /** Can read and write repos by default */\n  Write = 'WRITE'\n}\n\n/** Entities that can be deleted. */\nexport type Deletable = {\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n};\n\n/** Autogenerated input type of DeleteBranchProtectionRule */\nexport type DeleteBranchProtectionRuleInput = {\n  /** The global relay id of the branch protection rule to be deleted. */\n  branchProtectionRuleId: Scalars['ID']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of DeleteBranchProtectionRule. */\nexport type DeleteBranchProtectionRulePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteDeployment */\nexport type DeleteDeploymentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the deployment to be deleted. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteDeployment. */\nexport type DeleteDeploymentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteDiscussionComment */\nexport type DeleteDiscussionCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node id of the discussion comment to delete. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteDiscussionComment. */\nexport type DeleteDiscussionCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The discussion comment that was just deleted. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of DeleteDiscussion */\nexport type DeleteDiscussionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the discussion to delete. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteDiscussion. */\nexport type DeleteDiscussionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The discussion that was just deleted. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of DeleteEnvironment */\nexport type DeleteEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the environment to be deleted. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteEnvironment. */\nexport type DeleteEnvironmentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteIpAllowListEntry */\nexport type DeleteIpAllowListEntryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the IP allow list entry to delete. */\n  ipAllowListEntryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteIpAllowListEntry. */\nexport type DeleteIpAllowListEntryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The IP allow list entry that was deleted. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of DeleteIssueComment */\nexport type DeleteIssueCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment to delete. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteIssueComment. */\nexport type DeleteIssueCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteIssue */\nexport type DeleteIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the issue to delete. */\n  issueId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteIssue. */\nexport type DeleteIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The repository the issue belonged to */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of DeleteLabel */\nexport type DeleteLabelInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the label to be deleted. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteLabel. */\nexport type DeleteLabelPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteLinkedBranch */\nexport type DeleteLinkedBranchInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the linked branch */\n  linkedBranchId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteLinkedBranch. */\nexport type DeleteLinkedBranchPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The issue the linked branch was unlinked from. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of DeletePackageVersion */\nexport type DeletePackageVersionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the package version to be deleted. */\n  packageVersionId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeletePackageVersion. */\nexport type DeletePackageVersionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Whether or not the operation succeeded. */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Autogenerated input type of DeleteProjectCard */\nexport type DeleteProjectCardInput = {\n  /** The id of the card to delete. */\n  cardId: Scalars['ID']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of DeleteProjectCard. */\nexport type DeleteProjectCardPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The column the deleted card was in. */\n  column?: Maybe<ProjectColumn>;\n  /** The deleted card ID. */\n  deletedCardId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** Autogenerated input type of DeleteProjectColumn */\nexport type DeleteProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the column to delete. */\n  columnId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteProjectColumn. */\nexport type DeleteProjectColumnPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The deleted column ID. */\n  deletedColumnId?: Maybe<Scalars['ID']['output']>;\n  /** The project the deleted column was in. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of DeleteProject */\nexport type DeleteProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Project ID to update. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteProject. */\nexport type DeleteProjectPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The repository or organization the project was removed from. */\n  owner?: Maybe<ProjectOwner>;\n};\n\n/** Autogenerated input type of DeleteProjectV2Field */\nexport type DeleteProjectV2FieldInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the field to delete. */\n  fieldId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteProjectV2Field. */\nexport type DeleteProjectV2FieldPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The deleted field. */\n  projectV2Field?: Maybe<ProjectV2FieldConfiguration>;\n};\n\n/** Autogenerated input type of DeleteProjectV2 */\nexport type DeleteProjectV2Input = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Project to delete. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated input type of DeleteProjectV2Item */\nexport type DeleteProjectV2ItemInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the item to be removed. */\n  itemId: Scalars['ID']['input'];\n  /** The ID of the Project from which the item should be removed. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteProjectV2Item. */\nexport type DeleteProjectV2ItemPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted item. */\n  deletedItemId?: Maybe<Scalars['ID']['output']>;\n};\n\n/** Autogenerated return type of DeleteProjectV2. */\nexport type DeleteProjectV2Payload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The deleted Project. */\n  projectV2?: Maybe<ProjectV2>;\n};\n\n/** Autogenerated input type of DeleteProjectV2StatusUpdate */\nexport type DeleteProjectV2StatusUpdateInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the status update to be removed. */\n  statusUpdateId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteProjectV2StatusUpdate. */\nexport type DeleteProjectV2StatusUpdatePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted status update. */\n  deletedStatusUpdateId?: Maybe<Scalars['ID']['output']>;\n  /** The project the deleted status update was in. */\n  projectV2?: Maybe<ProjectV2>;\n};\n\n/** Autogenerated input type of DeleteProjectV2Workflow */\nexport type DeleteProjectV2WorkflowInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the workflow to be removed. */\n  workflowId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteProjectV2Workflow. */\nexport type DeleteProjectV2WorkflowPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The ID of the deleted workflow. */\n  deletedWorkflowId?: Maybe<Scalars['ID']['output']>;\n  /** The project the deleted workflow was in. */\n  projectV2?: Maybe<ProjectV2>;\n};\n\n/** Autogenerated input type of DeletePullRequestReviewComment */\nexport type DeletePullRequestReviewCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment to delete. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeletePullRequestReviewComment. */\nexport type DeletePullRequestReviewCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request review the deleted comment belonged to. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n  /** The deleted pull request review comment. */\n  pullRequestReviewComment?: Maybe<PullRequestReviewComment>;\n};\n\n/** Autogenerated input type of DeletePullRequestReview */\nexport type DeletePullRequestReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the pull request review to delete. */\n  pullRequestReviewId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeletePullRequestReview. */\nexport type DeletePullRequestReviewPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The deleted pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** Autogenerated input type of DeleteRef */\nexport type DeleteRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the Ref to be deleted. */\n  refId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteRef. */\nexport type DeleteRefPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteRepositoryRuleset */\nexport type DeleteRepositoryRulesetInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The global relay id of the repository ruleset to be deleted. */\n  repositoryRulesetId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteRepositoryRuleset. */\nexport type DeleteRepositoryRulesetPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteTeamDiscussionComment */\nexport type DeleteTeamDiscussionCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment to delete. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteTeamDiscussionComment. */\nexport type DeleteTeamDiscussionCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteTeamDiscussion */\nexport type DeleteTeamDiscussionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The discussion ID to delete. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteTeamDiscussion. */\nexport type DeleteTeamDiscussionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of DeleteUserList */\nexport type DeleteUserListInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the list to delete. */\n  listId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteUserList. */\nexport type DeleteUserListPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The owner of the list that will be deleted */\n  user?: Maybe<User>;\n};\n\n/** Autogenerated input type of DeleteVerifiableDomain */\nexport type DeleteVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the verifiable domain to delete. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DeleteVerifiableDomain. */\nexport type DeleteVerifiableDomainPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The owning account from which the domain was deleted. */\n  owner?: Maybe<VerifiableDomainOwner>;\n};\n\n/** Represents a 'demilestoned' event on a given issue or pull request. */\nexport type DemilestonedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the DemilestonedEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the milestone title associated with the 'demilestoned' event. */\n  milestoneTitle: Scalars['String']['output'];\n  /** Object referenced by event. */\n  subject: MilestoneItem;\n};\n\n/** A Dependabot Update for a dependency in a repository */\nexport type DependabotUpdate = RepositoryNode & {\n  /** The error from a dependency update */\n  error?: Maybe<DependabotUpdateError>;\n  /** The associated pull request */\n  pullRequest?: Maybe<PullRequest>;\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n/** An error produced from a Dependabot Update */\nexport type DependabotUpdateError = {\n  /** The body of the error */\n  body: Scalars['String']['output'];\n  /** The error code */\n  errorType: Scalars['String']['output'];\n  /** The title of the error */\n  title: Scalars['String']['output'];\n};\n\n/** A dependency manifest entry */\nexport type DependencyGraphDependency = {\n  /** Does the dependency itself have dependencies? */\n  hasDependencies: Scalars['Boolean']['output'];\n  /**\n   * The original name of the package, as it appears in the manifest.\n   * @deprecated `packageLabel` will be removed. Use normalized `packageName` field instead. Removal on 2022-10-01 UTC.\n   */\n  packageLabel: Scalars['String']['output'];\n  /** The dependency package manager */\n  packageManager?: Maybe<Scalars['String']['output']>;\n  /** The name of the package in the canonical form used by the package manager. */\n  packageName: Scalars['String']['output'];\n  /** The repository containing the package */\n  repository?: Maybe<Repository>;\n  /** The dependency version requirements */\n  requirements: Scalars['String']['output'];\n};\n\n/** The connection type for DependencyGraphDependency. */\nexport type DependencyGraphDependencyConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DependencyGraphDependencyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DependencyGraphDependency>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DependencyGraphDependencyEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DependencyGraphDependency>;\n};\n\n/** The possible ecosystems of a dependency graph package. */\nexport enum DependencyGraphEcosystem {\n  /** GitHub Actions */\n  Actions = 'ACTIONS',\n  /** PHP packages hosted at packagist.org */\n  Composer = 'COMPOSER',\n  /** Go modules */\n  Go = 'GO',\n  /** Java artifacts hosted at the Maven central repository */\n  Maven = 'MAVEN',\n  /** JavaScript packages hosted at npmjs.com */\n  Npm = 'NPM',\n  /** .NET packages hosted at the NuGet Gallery */\n  Nuget = 'NUGET',\n  /** Python packages hosted at PyPI.org */\n  Pip = 'PIP',\n  /** Dart packages hosted at pub.dev */\n  Pub = 'PUB',\n  /** Ruby gems hosted at RubyGems.org */\n  Rubygems = 'RUBYGEMS',\n  /** Rust crates */\n  Rust = 'RUST',\n  /** Swift packages */\n  Swift = 'SWIFT'\n}\n\n/** Dependency manifest for a repository */\nexport type DependencyGraphManifest = Node & {\n  /** Path to view the manifest file blob */\n  blobPath: Scalars['String']['output'];\n  /** A list of manifest dependencies */\n  dependencies?: Maybe<DependencyGraphDependencyConnection>;\n  /** The number of dependencies listed in the manifest */\n  dependenciesCount?: Maybe<Scalars['Int']['output']>;\n  /** Is the manifest too big to parse? */\n  exceedsMaxSize: Scalars['Boolean']['output'];\n  /** Fully qualified manifest filename */\n  filename: Scalars['String']['output'];\n  /** The Node ID of the DependencyGraphManifest object */\n  id: Scalars['ID']['output'];\n  /** Were we able to parse the manifest? */\n  parseable: Scalars['Boolean']['output'];\n  /** The repository containing the manifest */\n  repository: Repository;\n};\n\n\n/** Dependency manifest for a repository */\nexport type DependencyGraphManifestDependenciesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for DependencyGraphManifest. */\nexport type DependencyGraphManifestConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DependencyGraphManifestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DependencyGraphManifest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DependencyGraphManifestEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DependencyGraphManifest>;\n};\n\n/** A repository deploy key. */\nexport type DeployKey = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the DeployKey object */\n  id: Scalars['ID']['output'];\n  /** The deploy key. */\n  key: Scalars['String']['output'];\n  /** Whether or not the deploy key is read only. */\n  readOnly: Scalars['Boolean']['output'];\n  /** The deploy key title. */\n  title: Scalars['String']['output'];\n  /** Whether or not the deploy key has been verified. */\n  verified: Scalars['Boolean']['output'];\n};\n\n/** The connection type for DeployKey. */\nexport type DeployKeyConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeployKeyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeployKey>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DeployKeyEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeployKey>;\n};\n\n/** Represents a 'deployed' event on a given pull request. */\nexport type DeployedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The deployment associated with the 'deployed' event. */\n  deployment: Deployment;\n  /** The Node ID of the DeployedEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The ref associated with the 'deployed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents triggered deployment instance. */\nexport type Deployment = Node & {\n  /** Identifies the commit sha of the deployment. */\n  commit?: Maybe<Commit>;\n  /** Identifies the oid of the deployment commit, even if the commit has been deleted. */\n  commitOid: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the actor who triggered the deployment. */\n  creator: Actor;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The deployment description. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The latest environment to which this deployment was made. */\n  environment?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the Deployment object */\n  id: Scalars['ID']['output'];\n  /** The latest environment to which this deployment was made. */\n  latestEnvironment?: Maybe<Scalars['String']['output']>;\n  /** The latest status of this deployment. */\n  latestStatus?: Maybe<DeploymentStatus>;\n  /** The original environment to which this deployment was made. */\n  originalEnvironment?: Maybe<Scalars['String']['output']>;\n  /** Extra information that a deployment system might need. */\n  payload?: Maybe<Scalars['String']['output']>;\n  /** Identifies the Ref of the deployment, if the deployment was created by ref. */\n  ref?: Maybe<Ref>;\n  /** Identifies the repository associated with the deployment. */\n  repository: Repository;\n  /** The current state of the deployment. */\n  state?: Maybe<DeploymentState>;\n  /** A list of statuses associated with the deployment. */\n  statuses?: Maybe<DeploymentStatusConnection>;\n  /** The deployment task. */\n  task?: Maybe<Scalars['String']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n\n/** Represents triggered deployment instance. */\nexport type DeploymentStatusesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for Deployment. */\nexport type DeploymentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Deployment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Deployment>;\n};\n\n/** Represents a 'deployment_environment_changed' event on a given pull request. */\nexport type DeploymentEnvironmentChangedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The deployment status that updated the deployment environment. */\n  deploymentStatus: DeploymentStatus;\n  /** The Node ID of the DeploymentEnvironmentChangedEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Ordering options for deployment connections */\nexport type DeploymentOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order deployments by. */\n  field: DeploymentOrderField;\n};\n\n/** Properties by which deployment connections can be ordered. */\nexport enum DeploymentOrderField {\n  /** Order collection by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** A protection rule. */\nexport type DeploymentProtectionRule = {\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether deployments to this environment can be approved by the user who created the deployment. */\n  preventSelfReview?: Maybe<Scalars['Boolean']['output']>;\n  /** The teams or users that can review the deployment */\n  reviewers: DeploymentReviewerConnection;\n  /** The timeout in minutes for this protection rule. */\n  timeout: Scalars['Int']['output'];\n  /** The type of protection rule. */\n  type: DeploymentProtectionRuleType;\n};\n\n\n/** A protection rule. */\nexport type DeploymentProtectionRuleReviewersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for DeploymentProtectionRule. */\nexport type DeploymentProtectionRuleConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentProtectionRuleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentProtectionRule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentProtectionRuleEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentProtectionRule>;\n};\n\n/** The possible protection rule types. */\nexport enum DeploymentProtectionRuleType {\n  /** Branch policy */\n  BranchPolicy = 'BRANCH_POLICY',\n  /** Required reviewers */\n  RequiredReviewers = 'REQUIRED_REVIEWERS',\n  /** Wait timer */\n  WaitTimer = 'WAIT_TIMER'\n}\n\n/** A request to deploy a workflow run to an environment. */\nexport type DeploymentRequest = {\n  /** Whether or not the current user can approve the deployment */\n  currentUserCanApprove: Scalars['Boolean']['output'];\n  /** The target environment of the deployment */\n  environment: Environment;\n  /** The teams or users that can review the deployment */\n  reviewers: DeploymentReviewerConnection;\n  /** The wait timer in minutes configured in the environment */\n  waitTimer: Scalars['Int']['output'];\n  /** The wait timer in minutes configured in the environment */\n  waitTimerStartedAt?: Maybe<Scalars['DateTime']['output']>;\n};\n\n\n/** A request to deploy a workflow run to an environment. */\nexport type DeploymentRequestReviewersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for DeploymentRequest. */\nexport type DeploymentRequestConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentRequestEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentRequest>;\n};\n\n/** A deployment review. */\nexport type DeploymentReview = Node & {\n  /** The comment the user left. */\n  comment: Scalars['String']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The environments approved or rejected */\n  environments: EnvironmentConnection;\n  /** The Node ID of the DeploymentReview object */\n  id: Scalars['ID']['output'];\n  /** The decision of the user. */\n  state: DeploymentReviewState;\n  /** The user that reviewed the deployment. */\n  user: User;\n};\n\n\n/** A deployment review. */\nexport type DeploymentReviewEnvironmentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for DeploymentReview. */\nexport type DeploymentReviewConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentReviewEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentReview>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentReviewEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentReview>;\n};\n\n/** The possible states for a deployment review. */\nexport enum DeploymentReviewState {\n  /** The deployment was approved. */\n  Approved = 'APPROVED',\n  /** The deployment was rejected. */\n  Rejected = 'REJECTED'\n}\n\n/** Users and teams. */\nexport type DeploymentReviewer = Team | User;\n\n/** The connection type for DeploymentReviewer. */\nexport type DeploymentReviewerConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentReviewerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentReviewer>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentReviewerEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentReviewer>;\n};\n\n/** The possible states in which a deployment can be. */\nexport enum DeploymentState {\n  /** The pending deployment was not updated after 30 minutes. */\n  Abandoned = 'ABANDONED',\n  /** The deployment is currently active. */\n  Active = 'ACTIVE',\n  /** An inactive transient deployment. */\n  Destroyed = 'DESTROYED',\n  /** The deployment experienced an error. */\n  Error = 'ERROR',\n  /** The deployment has failed. */\n  Failure = 'FAILURE',\n  /** The deployment is inactive. */\n  Inactive = 'INACTIVE',\n  /** The deployment is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The deployment is pending. */\n  Pending = 'PENDING',\n  /** The deployment has queued */\n  Queued = 'QUEUED',\n  /** The deployment was successful. */\n  Success = 'SUCCESS',\n  /** The deployment is waiting. */\n  Waiting = 'WAITING'\n}\n\n/** Describes the status of a given deployment attempt. */\nexport type DeploymentStatus = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the actor who triggered the deployment. */\n  creator: Actor;\n  /** Identifies the deployment associated with status. */\n  deployment: Deployment;\n  /** Identifies the description of the deployment. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Identifies the environment of the deployment at the time of this deployment status */\n  environment?: Maybe<Scalars['String']['output']>;\n  /** Identifies the environment URL of the deployment. */\n  environmentUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the DeploymentStatus object */\n  id: Scalars['ID']['output'];\n  /** Identifies the log URL of the deployment. */\n  logUrl?: Maybe<Scalars['URI']['output']>;\n  /** Identifies the current state of the deployment. */\n  state: DeploymentStatusState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for DeploymentStatus. */\nexport type DeploymentStatusConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DeploymentStatusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DeploymentStatus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DeploymentStatusEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DeploymentStatus>;\n};\n\n/** The possible states for a deployment status. */\nexport enum DeploymentStatusState {\n  /** The deployment experienced an error. */\n  Error = 'ERROR',\n  /** The deployment has failed. */\n  Failure = 'FAILURE',\n  /** The deployment is inactive. */\n  Inactive = 'INACTIVE',\n  /** The deployment is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The deployment is pending. */\n  Pending = 'PENDING',\n  /** The deployment is queued */\n  Queued = 'QUEUED',\n  /** The deployment was successful. */\n  Success = 'SUCCESS',\n  /** The deployment is waiting. */\n  Waiting = 'WAITING'\n}\n\n/** Autogenerated input type of DequeuePullRequest */\nexport type DequeuePullRequestInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the pull request to be dequeued. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DequeuePullRequest. */\nexport type DequeuePullRequestPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The merge queue entry of the dequeued pull request. */\n  mergeQueueEntry?: Maybe<MergeQueueEntry>;\n};\n\n/** The possible sides of a diff. */\nexport enum DiffSide {\n  /** The left side of the diff. */\n  Left = 'LEFT',\n  /** The right side of the diff. */\n  Right = 'RIGHT'\n}\n\n/** Autogenerated input type of DisablePullRequestAutoMerge */\nexport type DisablePullRequestAutoMergeInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the pull request to disable auto merge on. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DisablePullRequestAutoMerge. */\nexport type DisablePullRequestAutoMergePayload = {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request auto merge was disabled on. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'disconnected' event on a given issue or pull request. */\nexport type DisconnectedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the DisconnectedEvent object */\n  id: Scalars['ID']['output'];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars['Boolean']['output'];\n  /** Issue or pull request from which the issue was disconnected. */\n  source: ReferencedSubject;\n  /** Issue or pull request which was disconnected. */\n  subject: ReferencedSubject;\n};\n\n/** A discussion in a repository. */\nexport type Discussion = Closable & Comment & Deletable & Labelable & Lockable & Node & Reactable & RepositoryNode & Subscribable & Updatable & Votable & {\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** The comment chosen as this discussion's answer, if any. */\n  answer?: Maybe<DiscussionComment>;\n  /** The time when a user chose this discussion's answer, if answered. */\n  answerChosenAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The user who chose this discussion's answer, if answered. */\n  answerChosenBy?: Maybe<Actor>;\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The main text of the discussion post. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** The category for this discussion. */\n  category: DiscussionCategory;\n  /** Indicates if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The replies to the discussion. */\n  comments: DiscussionCommentConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The Node ID of the Discussion object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** Only return answered/unanswered discussions */\n  isAnswered?: Maybe<Scalars['Boolean']['output']>;\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** `true` if the object is locked */\n  locked: Scalars['Boolean']['output'];\n  /** The number identifying this discussion within the repository. */\n  number: Scalars['Int']['output'];\n  /** The poll associated with this discussion, if one exists. */\n  poll?: Maybe<DiscussionPoll>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The path for this discussion. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the reason for the discussion's state. */\n  stateReason?: Maybe<DiscussionStateReason>;\n  /** The title of this discussion. */\n  title: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** Number of upvotes that this subject has received. */\n  upvoteCount: Scalars['Int']['output'];\n  /** The URL for this discussion. */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Indicates if the object can be closed by the viewer. */\n  viewerCanClose: Scalars['Boolean']['output'];\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Indicates if the object can be reopened by the viewer. */\n  viewerCanReopen: Scalars['Boolean']['output'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Whether or not the current user can add or remove an upvote on this subject. */\n  viewerCanUpvote: Scalars['Boolean']['output'];\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n  /** Whether or not the current user has already upvoted this subject. */\n  viewerHasUpvoted: Scalars['Boolean']['output'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** A discussion in a repository. */\nexport type DiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A discussion in a repository. */\nexport type DiscussionLabelsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n\n/** A discussion in a repository. */\nexport type DiscussionReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A discussion in a repository. */\nexport type DiscussionUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A category for discussions in a repository. */\nexport type DiscussionCategory = Node & RepositoryNode & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** A description of this category. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** An emoji representing this category. */\n  emoji: Scalars['String']['output'];\n  /** This category's emoji rendered as HTML. */\n  emojiHTML: Scalars['HTML']['output'];\n  /** The Node ID of the DiscussionCategory object */\n  id: Scalars['ID']['output'];\n  /** Whether or not discussions in this category support choosing an answer with the markDiscussionCommentAsAnswer mutation. */\n  isAnswerable: Scalars['Boolean']['output'];\n  /** The name of this category. */\n  name: Scalars['String']['output'];\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The slug of this category. */\n  slug: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for DiscussionCategory. */\nexport type DiscussionCategoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionCategoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DiscussionCategory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DiscussionCategoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DiscussionCategory>;\n};\n\n/** The possible reasons for closing a discussion. */\nexport enum DiscussionCloseReason {\n  /** The discussion is a duplicate of another */\n  Duplicate = 'DUPLICATE',\n  /** The discussion is no longer relevant */\n  Outdated = 'OUTDATED',\n  /** The discussion has been resolved */\n  Resolved = 'RESOLVED'\n}\n\n/** A comment on a discussion. */\nexport type DiscussionComment = Comment & Deletable & Minimizable & Node & Reactable & Updatable & UpdatableComment & Votable & {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The time when this replied-to comment was deleted */\n  deletedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The discussion this comment was created in */\n  discussion?: Maybe<Discussion>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The Node ID of the DiscussionComment object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** Has this comment been chosen as the answer of its discussion? */\n  isAnswer: Scalars['Boolean']['output'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean']['output'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Returns why the comment was minimized. One of `abuse`, `off-topic`,\n   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n   * formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n   */\n  minimizedReason?: Maybe<Scalars['String']['output']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The threaded replies to this comment. */\n  replies: DiscussionCommentConnection;\n  /** The discussion comment this comment is a reply to */\n  replyTo?: Maybe<DiscussionComment>;\n  /** The path for this discussion comment. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** Number of upvotes that this subject has received. */\n  upvoteCount: Scalars['Int']['output'];\n  /** The URL for this discussion comment. */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Can the current user mark this comment as an answer? */\n  viewerCanMarkAsAnswer: Scalars['Boolean']['output'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Can the current user unmark this comment as an answer? */\n  viewerCanUnmarkAsAnswer: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Whether or not the current user can add or remove an upvote on this subject. */\n  viewerCanUpvote: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n  /** Whether or not the current user has already upvoted this subject. */\n  viewerHasUpvoted: Scalars['Boolean']['output'];\n};\n\n\n/** A comment on a discussion. */\nexport type DiscussionCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A comment on a discussion. */\nexport type DiscussionCommentRepliesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A comment on a discussion. */\nexport type DiscussionCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for DiscussionComment. */\nexport type DiscussionCommentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DiscussionComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DiscussionCommentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DiscussionComment>;\n};\n\n/** The connection type for Discussion. */\nexport type DiscussionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Discussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DiscussionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Discussion>;\n};\n\n/** Ways in which lists of discussions can be ordered upon return. */\nexport type DiscussionOrder = {\n  /** The direction in which to order discussions by the specified field. */\n  direction: OrderDirection;\n  /** The field by which to order discussions. */\n  field: DiscussionOrderField;\n};\n\n/** Properties by which discussion connections can be ordered. */\nexport enum DiscussionOrderField {\n  /** Order discussions by creation time. */\n  CreatedAt = 'CREATED_AT',\n  /** Order discussions by most recent modification time. */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** A poll for a discussion. */\nexport type DiscussionPoll = Node & {\n  /** The discussion that this poll belongs to. */\n  discussion?: Maybe<Discussion>;\n  /** The Node ID of the DiscussionPoll object */\n  id: Scalars['ID']['output'];\n  /** The options for this poll. */\n  options?: Maybe<DiscussionPollOptionConnection>;\n  /** The question that is being asked by this poll. */\n  question: Scalars['String']['output'];\n  /** The total number of votes that have been cast for this poll. */\n  totalVoteCount: Scalars['Int']['output'];\n  /** Indicates if the viewer has permission to vote in this poll. */\n  viewerCanVote: Scalars['Boolean']['output'];\n  /** Indicates if the viewer has voted for any option in this poll. */\n  viewerHasVoted: Scalars['Boolean']['output'];\n};\n\n\n/** A poll for a discussion. */\nexport type DiscussionPollOptionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<DiscussionPollOptionOrder>;\n};\n\n/** An option for a discussion poll. */\nexport type DiscussionPollOption = Node & {\n  /** The Node ID of the DiscussionPollOption object */\n  id: Scalars['ID']['output'];\n  /** The text for this option. */\n  option: Scalars['String']['output'];\n  /** The discussion poll that this option belongs to. */\n  poll?: Maybe<DiscussionPoll>;\n  /** The total number of votes that have been cast for this option. */\n  totalVoteCount: Scalars['Int']['output'];\n  /** Indicates if the viewer has voted for this option in the poll. */\n  viewerHasVoted: Scalars['Boolean']['output'];\n};\n\n/** The connection type for DiscussionPollOption. */\nexport type DiscussionPollOptionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<DiscussionPollOptionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<DiscussionPollOption>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type DiscussionPollOptionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<DiscussionPollOption>;\n};\n\n/** Ordering options for discussion poll option connections. */\nexport type DiscussionPollOptionOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order poll options by. */\n  field: DiscussionPollOptionOrderField;\n};\n\n/** Properties by which discussion poll option connections can be ordered. */\nexport enum DiscussionPollOptionOrderField {\n  /** Order poll options by the order that the poll author specified when creating the poll. */\n  AuthoredOrder = 'AUTHORED_ORDER',\n  /** Order poll options by the number of votes it has. */\n  VoteCount = 'VOTE_COUNT'\n}\n\n/** The possible states of a discussion. */\nexport enum DiscussionState {\n  /** A discussion that has been closed */\n  Closed = 'CLOSED',\n  /** A discussion that is open */\n  Open = 'OPEN'\n}\n\n/** The possible state reasons of a discussion. */\nexport enum DiscussionStateReason {\n  /** The discussion is a duplicate of another */\n  Duplicate = 'DUPLICATE',\n  /** The discussion is no longer relevant */\n  Outdated = 'OUTDATED',\n  /** The discussion was reopened */\n  Reopened = 'REOPENED',\n  /** The discussion has been resolved */\n  Resolved = 'RESOLVED'\n}\n\n/** Autogenerated input type of DismissPullRequestReview */\nexport type DismissPullRequestReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The contents of the pull request review dismissal message. */\n  message: Scalars['String']['input'];\n  /** The Node ID of the pull request review to modify. */\n  pullRequestReviewId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DismissPullRequestReview. */\nexport type DismissPullRequestReviewPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The dismissed pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** The possible reasons that a Dependabot alert was dismissed. */\nexport enum DismissReason {\n  /** A fix has already been started */\n  FixStarted = 'FIX_STARTED',\n  /** This alert is inaccurate or incorrect */\n  Inaccurate = 'INACCURATE',\n  /** Vulnerable code is not actually used */\n  NotUsed = 'NOT_USED',\n  /** No bandwidth to fix this */\n  NoBandwidth = 'NO_BANDWIDTH',\n  /** Risk is tolerable to this project */\n  TolerableRisk = 'TOLERABLE_RISK'\n}\n\n/** Autogenerated input type of DismissRepositoryVulnerabilityAlert */\nexport type DismissRepositoryVulnerabilityAlertInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The reason the Dependabot alert is being dismissed. */\n  dismissReason: DismissReason;\n  /** The Dependabot alert ID to dismiss. */\n  repositoryVulnerabilityAlertId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of DismissRepositoryVulnerabilityAlert. */\nexport type DismissRepositoryVulnerabilityAlertPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Dependabot alert that was dismissed */\n  repositoryVulnerabilityAlert?: Maybe<RepositoryVulnerabilityAlert>;\n};\n\n/** A draft issue within a project. */\nexport type DraftIssue = Node & {\n  /** A list of users to assigned to this draft issue. */\n  assignees: UserConnection;\n  /** The body of the draft issue. */\n  body: Scalars['String']['output'];\n  /** The body of the draft issue rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body of the draft issue rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created this draft issue. */\n  creator?: Maybe<Actor>;\n  /** The Node ID of the DraftIssue object */\n  id: Scalars['ID']['output'];\n  /** List of items linked with the draft issue (currently draft issue can be linked to only one item). */\n  projectV2Items: ProjectV2ItemConnection;\n  /** Projects that link to this draft issue (currently draft issue can be linked to only one project). */\n  projectsV2: ProjectV2Connection;\n  /** The title of the draft issue */\n  title: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n\n/** A draft issue within a project. */\nexport type DraftIssueAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A draft issue within a project. */\nexport type DraftIssueProjectV2ItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A draft issue within a project. */\nexport type DraftIssueProjectsV2Args = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Specifies a review comment to be left with a Pull Request Review. */\nexport type DraftPullRequestReviewComment = {\n  /** Body of the comment to leave. */\n  body: Scalars['String']['input'];\n  /** Path to the file being commented on. */\n  path: Scalars['String']['input'];\n  /** Position in the file to leave a comment on. */\n  position: Scalars['Int']['input'];\n};\n\n/** Specifies a review comment thread to be left with a Pull Request Review. */\nexport type DraftPullRequestReviewThread = {\n  /** Body of the comment to leave. */\n  body: Scalars['String']['input'];\n  /** The line of the blob to which the thread refers. The end of the line range for multi-line comments. */\n  line: Scalars['Int']['input'];\n  /** Path to the file being commented on. */\n  path: Scalars['String']['input'];\n  /** The side of the diff on which the line resides. For multi-line comments, this is the side for the end of the line range. */\n  side?: InputMaybe<DiffSide>;\n  /** The first line of the range to which the comment refers. */\n  startLine?: InputMaybe<Scalars['Int']['input']>;\n  /** The side of the diff on which the start line resides. */\n  startSide?: InputMaybe<DiffSide>;\n};\n\n/** Autogenerated input type of EnablePullRequestAutoMerge */\nexport type EnablePullRequestAutoMergeInput = {\n  /** The email address to associate with this merge. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * Commit body to use for the commit when the PR is mergable; if omitted, a\n   * default message will be used. NOTE: when merging with a merge queue any input\n   * value for commit message is ignored.\n   */\n  commitBody?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * Commit headline to use for the commit when the PR is mergable; if omitted, a\n   * default message will be used. NOTE: when merging with a merge queue any input\n   * value for commit headline is ignored.\n   */\n  commitHeadline?: InputMaybe<Scalars['String']['input']>;\n  /** The expected head OID of the pull request. */\n  expectedHeadOid?: InputMaybe<Scalars['GitObjectID']['input']>;\n  /**\n   * The merge method to use. If omitted, defaults to `MERGE`. NOTE: when merging\n   * with a merge queue any input value for merge method is ignored.\n   */\n  mergeMethod?: InputMaybe<PullRequestMergeMethod>;\n  /** ID of the pull request to enable auto-merge on. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of EnablePullRequestAutoMerge. */\nexport type EnablePullRequestAutoMergePayload = {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request auto-merge was enabled on. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of EnqueuePullRequest */\nexport type EnqueuePullRequestInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The expected head OID of the pull request. */\n  expectedHeadOid?: InputMaybe<Scalars['GitObjectID']['input']>;\n  /** Add the pull request to the front of the queue. */\n  jump?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the pull request to enqueue. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of EnqueuePullRequest. */\nexport type EnqueuePullRequestPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The merge queue entry for the enqueued pull request. */\n  mergeQueueEntry?: Maybe<MergeQueueEntry>;\n};\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type Enterprise = AnnouncementBanner & Node & {\n  /** The text of the announcement */\n  announcement?: Maybe<Scalars['String']['output']>;\n  /** The date the announcement was created */\n  announcementCreatedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The expiration date of the announcement, if any */\n  announcementExpiresAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Whether the announcement can be dismissed by the user */\n  announcementUserDismissible?: Maybe<Scalars['Boolean']['output']>;\n  /** A URL pointing to the enterprise's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** The enterprise's billing email. */\n  billingEmail?: Maybe<Scalars['String']['output']>;\n  /** Enterprise billing information\u00A0visible to enterprise billing managers. */\n  billingInfo?: Maybe<EnterpriseBillingInfo>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The description of the enterprise. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The description of the enterprise as HTML. */\n  descriptionHTML: Scalars['HTML']['output'];\n  /** The Node ID of the Enterprise object */\n  id: Scalars['ID']['output'];\n  /** The location of the enterprise. */\n  location?: Maybe<Scalars['String']['output']>;\n  /** A list of users who are members of this enterprise. */\n  members: EnterpriseMemberConnection;\n  /** The name of the enterprise. */\n  name: Scalars['String']['output'];\n  /** A list of organizations that belong to this enterprise. */\n  organizations: OrganizationConnection;\n  /**\n   * Enterprise information visible to enterprise owners or enterprise owners'\n   * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n   */\n  ownerInfo?: Maybe<EnterpriseOwnerInfo>;\n  /** The raw content of the enterprise README. */\n  readme?: Maybe<Scalars['String']['output']>;\n  /** The content of the enterprise README as HTML. */\n  readmeHTML: Scalars['HTML']['output'];\n  /** The HTTP path for this enterprise. */\n  resourcePath: Scalars['URI']['output'];\n  /** The URL-friendly identifier for the enterprise. */\n  slug: Scalars['String']['output'];\n  /** The HTTP URL for this enterprise. */\n  url: Scalars['URI']['output'];\n  /** Is the current viewer an admin of this enterprise? */\n  viewerIsAdmin: Scalars['Boolean']['output'];\n  /** The URL of the enterprise website. */\n  websiteUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseMembersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  deployment?: InputMaybe<EnterpriseUserDeployment>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasTwoFactorEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  organizationLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;\n};\n\n\n/** An account to manage multiple organizations with consolidated policy and billing. */\nexport type EnterpriseOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  viewerOrganizationRole?: InputMaybe<RoleInOrganization>;\n};\n\n/** The connection type for User. */\nexport type EnterpriseAdministratorConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseAdministratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** A User who is an administrator of an enterprise. */\nexport type EnterpriseAdministratorEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role of the administrator. */\n  role: EnterpriseAdministratorRole;\n};\n\n/** An invitation for a user to become an owner or billing manager of an enterprise. */\nexport type EnterpriseAdministratorInvitation = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The email of the person who was invited to the enterprise. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The enterprise the invitation is for. */\n  enterprise: Enterprise;\n  /** The Node ID of the EnterpriseAdministratorInvitation object */\n  id: Scalars['ID']['output'];\n  /** The user who was invited to the enterprise. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter?: Maybe<User>;\n  /** The invitee's pending role in the enterprise (owner or billing_manager). */\n  role: EnterpriseAdministratorRole;\n};\n\n/** The connection type for EnterpriseAdministratorInvitation. */\nexport type EnterpriseAdministratorInvitationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseAdministratorInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseAdministratorInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseAdministratorInvitationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseAdministratorInvitation>;\n};\n\n/** Ordering options for enterprise administrator invitation connections */\nexport type EnterpriseAdministratorInvitationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise administrator invitations by. */\n  field: EnterpriseAdministratorInvitationOrderField;\n};\n\n/** Properties by which enterprise administrator invitation connections can be ordered. */\nexport enum EnterpriseAdministratorInvitationOrderField {\n  /** Order enterprise administrator member invitations by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The possible administrator roles in an enterprise account. */\nexport enum EnterpriseAdministratorRole {\n  /** Represents a billing manager of the enterprise account. */\n  BillingManager = 'BILLING_MANAGER',\n  /** Represents an owner of the enterprise account. */\n  Owner = 'OWNER'\n}\n\n/** The possible values for the enterprise allow private repository forking policy value. */\nexport enum EnterpriseAllowPrivateRepositoryForkingPolicyValue {\n  /** Members can fork a repository to an organization within this enterprise. */\n  EnterpriseOrganizations = 'ENTERPRISE_ORGANIZATIONS',\n  /** Members can fork a repository to their enterprise-managed user account or an organization inside this enterprise. */\n  EnterpriseOrganizationsUserAccounts = 'ENTERPRISE_ORGANIZATIONS_USER_ACCOUNTS',\n  /** Members can fork a repository to their user account or an organization, either inside or outside of this enterprise. */\n  Everywhere = 'EVERYWHERE',\n  /** Members can fork a repository only within the same organization (intra-org). */\n  SameOrganization = 'SAME_ORGANIZATION',\n  /** Members can fork a repository to their user account or within the same organization. */\n  SameOrganizationUserAccounts = 'SAME_ORGANIZATION_USER_ACCOUNTS',\n  /** Members can fork a repository to their user account. */\n  UserAccounts = 'USER_ACCOUNTS'\n}\n\n/** Metadata for an audit entry containing enterprise account information. */\nexport type EnterpriseAuditEntryData = {\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Enterprise billing information visible to enterprise billing managers and owners. */\nexport type EnterpriseBillingInfo = {\n  /** The number of licenseable users/emails across the enterprise. */\n  allLicensableUsersCount: Scalars['Int']['output'];\n  /** The number of data packs used by all organizations owned by the enterprise. */\n  assetPacks: Scalars['Int']['output'];\n  /** The bandwidth quota in GB for all organizations owned by the enterprise. */\n  bandwidthQuota: Scalars['Float']['output'];\n  /** The bandwidth usage in GB for all organizations owned by the enterprise. */\n  bandwidthUsage: Scalars['Float']['output'];\n  /** The bandwidth usage as a percentage of the bandwidth quota. */\n  bandwidthUsagePercentage: Scalars['Int']['output'];\n  /** The storage quota in GB for all organizations owned by the enterprise. */\n  storageQuota: Scalars['Float']['output'];\n  /** The storage usage in GB for all organizations owned by the enterprise. */\n  storageUsage: Scalars['Float']['output'];\n  /** The storage usage as a percentage of the storage quota. */\n  storageUsagePercentage: Scalars['Int']['output'];\n  /** The number of available licenses across all owned organizations based on the unique number of billable users. */\n  totalAvailableLicenses: Scalars['Int']['output'];\n  /** The total number of licenses allocated. */\n  totalLicenses: Scalars['Int']['output'];\n};\n\n/** The connection type for Enterprise. */\nexport type EnterpriseConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Enterprise>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** The possible values for the enterprise base repository permission setting. */\nexport enum EnterpriseDefaultRepositoryPermissionSettingValue {\n  /** Organization members will be able to clone, pull, push, and add new collaborators to all organization repositories. */\n  Admin = 'ADMIN',\n  /** Organization members will only be able to clone and pull public repositories. */\n  None = 'NONE',\n  /** Organizations in the enterprise choose base repository permissions for their members. */\n  NoPolicy = 'NO_POLICY',\n  /** Organization members will be able to clone and pull all organization repositories. */\n  Read = 'READ',\n  /** Organization members will be able to clone, pull, and push all organization repositories. */\n  Write = 'WRITE'\n}\n\n/** An edge in a connection. */\nexport type EnterpriseEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Enterprise>;\n};\n\n/** The possible values for an enabled/disabled enterprise setting. */\nexport enum EnterpriseEnabledDisabledSettingValue {\n  /** The setting is disabled for organizations in the enterprise. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = 'ENABLED',\n  /** There is no policy set for organizations in the enterprise. */\n  NoPolicy = 'NO_POLICY'\n}\n\n/** The possible values for an enabled/no policy enterprise setting. */\nexport enum EnterpriseEnabledSettingValue {\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = 'ENABLED',\n  /** There is no policy set for organizations in the enterprise. */\n  NoPolicy = 'NO_POLICY'\n}\n\n/** The connection type for OrganizationInvitation. */\nexport type EnterpriseFailedInvitationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseFailedInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n  /** Identifies the total count of unique users in the connection. */\n  totalUniqueUserCount: Scalars['Int']['output'];\n};\n\n/** A failed invitation to be a member in an enterprise organization. */\nexport type EnterpriseFailedInvitationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationInvitation>;\n};\n\n/**\n * An identity provider configured to provision identities for an enterprise.\n * Visible to enterprise owners or enterprise owners' personal access tokens\n * (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseIdentityProvider = Node & {\n  /** The digest algorithm used to sign SAML requests for the identity provider. */\n  digestMethod?: Maybe<SamlDigestAlgorithm>;\n  /** The enterprise this identity provider belongs to. */\n  enterprise?: Maybe<Enterprise>;\n  /** ExternalIdentities provisioned by this identity provider. */\n  externalIdentities: ExternalIdentityConnection;\n  /** The Node ID of the EnterpriseIdentityProvider object */\n  id: Scalars['ID']['output'];\n  /** The x509 certificate used by the identity provider to sign assertions and responses. */\n  idpCertificate?: Maybe<Scalars['X509Certificate']['output']>;\n  /** The Issuer Entity ID for the SAML identity provider. */\n  issuer?: Maybe<Scalars['String']['output']>;\n  /** Recovery codes that can be used by admins to access the enterprise if the identity provider is unavailable. */\n  recoveryCodes?: Maybe<Array<Scalars['String']['output']>>;\n  /** The signature algorithm used to sign SAML requests for the identity provider. */\n  signatureMethod?: Maybe<SamlSignatureAlgorithm>;\n  /** The URL endpoint for the identity provider's SAML SSO. */\n  ssoUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n\n/**\n * An identity provider configured to provision identities for an enterprise.\n * Visible to enterprise owners or enterprise owners' personal access tokens\n * (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseIdentityProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  login?: InputMaybe<Scalars['String']['input']>;\n  membersOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  userName?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** An object that is a member of an enterprise. */\nexport type EnterpriseMember = EnterpriseUserAccount | User;\n\n/** The connection type for EnterpriseMember. */\nexport type EnterpriseMemberConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseMember>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** A User who is a member of an enterprise through one or more organizations. */\nexport type EnterpriseMemberEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseMember>;\n};\n\n/** An invitation for a user to become an unaffiliated member of an enterprise. */\nexport type EnterpriseMemberInvitation = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The email of the person who was invited to the enterprise. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The enterprise the invitation is for. */\n  enterprise: Enterprise;\n  /** The Node ID of the EnterpriseMemberInvitation object */\n  id: Scalars['ID']['output'];\n  /** The user who was invited to the enterprise. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter?: Maybe<User>;\n};\n\n/** The connection type for EnterpriseMemberInvitation. */\nexport type EnterpriseMemberInvitationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseMemberInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseMemberInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseMemberInvitationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseMemberInvitation>;\n};\n\n/** Ordering options for enterprise administrator invitation connections */\nexport type EnterpriseMemberInvitationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise member invitations by. */\n  field: EnterpriseMemberInvitationOrderField;\n};\n\n/** Properties by which enterprise member invitation connections can be ordered. */\nexport enum EnterpriseMemberInvitationOrderField {\n  /** Order enterprise member invitations by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Ordering options for enterprise member connections. */\nexport type EnterpriseMemberOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise members by. */\n  field: EnterpriseMemberOrderField;\n};\n\n/** Properties by which enterprise member connections can be ordered. */\nexport enum EnterpriseMemberOrderField {\n  /** Order enterprise members by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order enterprise members by login */\n  Login = 'LOGIN'\n}\n\n/** The possible values for the enterprise members can create repositories setting. */\nexport enum EnterpriseMembersCanCreateRepositoriesSettingValue {\n  /** Members will be able to create public and private repositories. */\n  All = 'ALL',\n  /** Members will not be able to create public or private repositories. */\n  Disabled = 'DISABLED',\n  /** Organization owners choose whether to allow members to create repositories. */\n  NoPolicy = 'NO_POLICY',\n  /** Members will be able to create only private repositories. */\n  Private = 'PRIVATE',\n  /** Members will be able to create only public repositories. */\n  Public = 'PUBLIC'\n}\n\n/** The possible values for the members can make purchases setting. */\nexport enum EnterpriseMembersCanMakePurchasesSettingValue {\n  /** The setting is disabled for organizations in the enterprise. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for organizations in the enterprise. */\n  Enabled = 'ENABLED'\n}\n\n/** The possible values we have for filtering Platform::Objects::User#enterprises. */\nexport enum EnterpriseMembershipType {\n  /** Returns all enterprises in which the user is an admin. */\n  Admin = 'ADMIN',\n  /** Returns all enterprises in which the user is a member, admin, or billing manager. */\n  All = 'ALL',\n  /** Returns all enterprises in which the user is a billing manager. */\n  BillingManager = 'BILLING_MANAGER',\n  /** Returns all enterprises in which the user is a member of an org that is owned by the enterprise. */\n  OrgMembership = 'ORG_MEMBERSHIP'\n}\n\n/** Ordering options for enterprises. */\nexport type EnterpriseOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprises by. */\n  field: EnterpriseOrderField;\n};\n\n/** Properties by which enterprise connections can be ordered. */\nexport enum EnterpriseOrderField {\n  /** Order enterprises by name */\n  Name = 'NAME'\n}\n\n/** The connection type for Organization. */\nexport type EnterpriseOrganizationMembershipConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseOrganizationMembershipEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Organization>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An enterprise organization that a user is a member of. */\nexport type EnterpriseOrganizationMembershipEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Organization>;\n  /** The role of the user in the enterprise membership. */\n  role: EnterpriseUserAccountMembershipRole;\n};\n\n/** The connection type for User. */\nexport type EnterpriseOutsideCollaboratorConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseOutsideCollaboratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** A User who is an outside collaborator of an enterprise through one or more organizations. */\nexport type EnterpriseOutsideCollaboratorEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The enterprise organization repositories this user is a member of. */\n  repositories: EnterpriseRepositoryInfoConnection;\n};\n\n\n/** A User who is an outside collaborator of an enterprise through one or more organizations. */\nexport type EnterpriseOutsideCollaboratorEdgeRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n};\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfo = {\n  /** A list of all of the administrators for this enterprise. */\n  admins: EnterpriseAdministratorConnection;\n  /** A list of users in the enterprise who currently have two-factor authentication disabled. */\n  affiliatedUsersWithTwoFactorDisabled: UserConnection;\n  /** Whether or not affiliated users with two-factor authentication disabled exist in the enterprise. */\n  affiliatedUsersWithTwoFactorDisabledExist: Scalars['Boolean']['output'];\n  /** The setting value for whether private repository forking is enabled for repositories in organizations in this enterprise. */\n  allowPrivateRepositoryForkingSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided private repository forking setting value. */\n  allowPrivateRepositoryForkingSettingOrganizations: OrganizationConnection;\n  /** The value for the allow private repository forking policy on the enterprise. */\n  allowPrivateRepositoryForkingSettingPolicyValue?: Maybe<EnterpriseAllowPrivateRepositoryForkingPolicyValue>;\n  /** The setting value for base repository permissions for organizations in this enterprise. */\n  defaultRepositoryPermissionSetting: EnterpriseDefaultRepositoryPermissionSettingValue;\n  /** A list of enterprise organizations configured with the provided base repository permission. */\n  defaultRepositoryPermissionSettingOrganizations: OrganizationConnection;\n  /**\n   * A list of domains owned by the enterprise. Visible to enterprise owners or\n   * enterprise owners' personal access tokens (classic) with admin:enterprise scope.\n   */\n  domains: VerifiableDomainConnection;\n  /** Enterprise Server installations owned by the enterprise. */\n  enterpriseServerInstallations: EnterpriseServerInstallationConnection;\n  /** A list of failed invitations in the enterprise. */\n  failedInvitations: EnterpriseFailedInvitationConnection;\n  /** The setting value for whether the enterprise has an IP allow list enabled. */\n  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;\n  /**\n   * The IP addresses that are allowed to access resources owned by the enterprise.\n   * Visible to enterprise owners or enterprise owners' personal access tokens\n   * (classic) with admin:enterprise scope.\n   */\n  ipAllowListEntries: IpAllowListEntryConnection;\n  /** The setting value for whether the enterprise has IP allow list configuration for installed GitHub Apps enabled. */\n  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;\n  /** Whether or not the base repository permission is currently being updated. */\n  isUpdatingDefaultRepositoryPermission: Scalars['Boolean']['output'];\n  /** Whether the two-factor authentication requirement is currently being enforced. */\n  isUpdatingTwoFactorRequirement: Scalars['Boolean']['output'];\n  /**\n   * The setting value for whether organization members with admin permissions on a\n   * repository can change repository visibility.\n   */\n  membersCanChangeRepositoryVisibilitySetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided can change repository visibility setting value. */\n  membersCanChangeRepositoryVisibilitySettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members of organizations in the enterprise can create internal repositories. */\n  membersCanCreateInternalRepositoriesSetting?: Maybe<Scalars['Boolean']['output']>;\n  /** The setting value for whether members of organizations in the enterprise can create private repositories. */\n  membersCanCreatePrivateRepositoriesSetting?: Maybe<Scalars['Boolean']['output']>;\n  /** The setting value for whether members of organizations in the enterprise can create public repositories. */\n  membersCanCreatePublicRepositoriesSetting?: Maybe<Scalars['Boolean']['output']>;\n  /** The setting value for whether members of organizations in the enterprise can create repositories. */\n  membersCanCreateRepositoriesSetting?: Maybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;\n  /** A list of enterprise organizations configured with the provided repository creation setting value. */\n  membersCanCreateRepositoriesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members with admin permissions for repositories can delete issues. */\n  membersCanDeleteIssuesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can delete issues setting value. */\n  membersCanDeleteIssuesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members with admin permissions for repositories can delete or transfer repositories. */\n  membersCanDeleteRepositoriesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can delete repositories setting value. */\n  membersCanDeleteRepositoriesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members of organizations in the enterprise can invite outside collaborators. */\n  membersCanInviteCollaboratorsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can invite collaborators setting value. */\n  membersCanInviteCollaboratorsSettingOrganizations: OrganizationConnection;\n  /** Indicates whether members of this enterprise's organizations can purchase additional services for those organizations. */\n  membersCanMakePurchasesSetting: EnterpriseMembersCanMakePurchasesSettingValue;\n  /** The setting value for whether members with admin permissions for repositories can update protected branches. */\n  membersCanUpdateProtectedBranchesSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can update protected branches setting value. */\n  membersCanUpdateProtectedBranchesSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether members can view dependency insights. */\n  membersCanViewDependencyInsightsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided members can view dependency insights setting value. */\n  membersCanViewDependencyInsightsSettingOrganizations: OrganizationConnection;\n  /** Indicates if email notification delivery for this enterprise is restricted to verified or approved domains. */\n  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;\n  /** The OIDC Identity Provider for the enterprise. */\n  oidcProvider?: Maybe<OidcProvider>;\n  /** The setting value for whether organization projects are enabled for organizations in this enterprise. */\n  organizationProjectsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided organization projects setting value. */\n  organizationProjectsSettingOrganizations: OrganizationConnection;\n  /** A list of outside collaborators across the repositories in the enterprise. */\n  outsideCollaborators: EnterpriseOutsideCollaboratorConnection;\n  /** A list of pending administrator invitations for the enterprise. */\n  pendingAdminInvitations: EnterpriseAdministratorInvitationConnection;\n  /** A list of pending collaborator invitations across the repositories in the enterprise. */\n  pendingCollaboratorInvitations: RepositoryInvitationConnection;\n  /** A list of pending member invitations for organizations in the enterprise. */\n  pendingMemberInvitations: EnterprisePendingMemberInvitationConnection;\n  /** A list of pending unaffiliated member invitations for the enterprise. */\n  pendingUnaffiliatedMemberInvitations: EnterpriseMemberInvitationConnection;\n  /** The setting value for whether repository projects are enabled in this enterprise. */\n  repositoryProjectsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided repository projects setting value. */\n  repositoryProjectsSettingOrganizations: OrganizationConnection;\n  /** The SAML Identity Provider for the enterprise. */\n  samlIdentityProvider?: Maybe<EnterpriseIdentityProvider>;\n  /** A list of enterprise organizations configured with the SAML single sign-on setting value. */\n  samlIdentityProviderSettingOrganizations: OrganizationConnection;\n  /** A list of members with a support entitlement. */\n  supportEntitlements: EnterpriseMemberConnection;\n  /** The setting value for whether team discussions are enabled for organizations in this enterprise. */\n  teamDiscussionsSetting: EnterpriseEnabledDisabledSettingValue;\n  /** A list of enterprise organizations configured with the provided team discussions setting value. */\n  teamDiscussionsSettingOrganizations: OrganizationConnection;\n  /** The setting value for whether the enterprise requires two-factor authentication for its organizations and users. */\n  twoFactorRequiredSetting: EnterpriseEnabledSettingValue;\n  /** A list of enterprise organizations configured with the two-factor authentication setting value. */\n  twoFactorRequiredSettingOrganizations: OrganizationConnection;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoAdminsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasTwoFactorEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  organizationLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoAffiliatedUsersWithTwoFactorDisabledArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoAllowPrivateRepositoryForkingSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoDefaultRepositoryPermissionSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: DefaultRepositoryPermissionField;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoDomainsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  isApproved?: InputMaybe<Scalars['Boolean']['input']>;\n  isVerified?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<VerifiableDomainOrder>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoEnterpriseServerInstallationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  connectedOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseServerInstallationOrder>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoFailedInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoMembersCanChangeRepositoryVisibilitySettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoMembersCanCreateRepositoriesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: OrganizationMembersCanCreateRepositoriesSettingValue;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoMembersCanDeleteIssuesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoMembersCanDeleteRepositoriesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoMembersCanInviteCollaboratorsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoMembersCanUpdateProtectedBranchesSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoMembersCanViewDependencyInsightsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoOrganizationProjectsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoOutsideCollaboratorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasTwoFactorEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  login?: InputMaybe<Scalars['String']['input']>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n  organizationLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoPendingAdminInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseAdministratorInvitationOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoPendingCollaboratorInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryInvitationOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoPendingMemberInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  invitationSource?: InputMaybe<OrganizationInvitationSource>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  organizationLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoPendingUnaffiliatedMemberInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseMemberInvitationOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoRepositoryProjectsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoSamlIdentityProviderSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: IdentityProviderConfigurationState;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoSupportEntitlementsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseMemberOrder>;\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoTeamDiscussionsSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n\n/**\n * Enterprise information visible to enterprise owners or enterprise owners'\n * personal access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type EnterpriseOwnerInfoTwoFactorRequiredSettingOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  value: Scalars['Boolean']['input'];\n};\n\n/** The connection type for OrganizationInvitation. */\nexport type EnterprisePendingMemberInvitationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterprisePendingMemberInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n  /** Identifies the total count of unique users in the connection. */\n  totalUniqueUserCount: Scalars['Int']['output'];\n};\n\n/** An invitation to be a member in an enterprise organization. */\nexport type EnterprisePendingMemberInvitationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationInvitation>;\n};\n\n/** A subset of repository information queryable from an enterprise. */\nexport type EnterpriseRepositoryInfo = Node & {\n  /** The Node ID of the EnterpriseRepositoryInfo object */\n  id: Scalars['ID']['output'];\n  /** Identifies if the repository is private or internal. */\n  isPrivate: Scalars['Boolean']['output'];\n  /** The repository's name. */\n  name: Scalars['String']['output'];\n  /** The repository's name with owner. */\n  nameWithOwner: Scalars['String']['output'];\n};\n\n/** The connection type for EnterpriseRepositoryInfo. */\nexport type EnterpriseRepositoryInfoConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseRepositoryInfoEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseRepositoryInfo>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseRepositoryInfoEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseRepositoryInfo>;\n};\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallation = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The customer name to which the Enterprise Server installation belongs. */\n  customerName: Scalars['String']['output'];\n  /** The host name of the Enterprise Server installation. */\n  hostName: Scalars['String']['output'];\n  /** The Node ID of the EnterpriseServerInstallation object */\n  id: Scalars['ID']['output'];\n  /** Whether or not the installation is connected to an Enterprise Server installation via GitHub Connect. */\n  isConnected: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** User accounts on this Enterprise Server installation. */\n  userAccounts: EnterpriseServerUserAccountConnection;\n  /** User accounts uploads for the Enterprise Server installation. */\n  userAccountsUploads: EnterpriseServerUserAccountsUploadConnection;\n};\n\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallationUserAccountsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountOrder>;\n};\n\n\n/** An Enterprise Server installation. */\nexport type EnterpriseServerInstallationUserAccountsUploadsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountsUploadOrder>;\n};\n\n/** The connection type for EnterpriseServerInstallation. */\nexport type EnterpriseServerInstallationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerInstallationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerInstallation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerInstallationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerInstallation>;\n};\n\n/** The connection type for EnterpriseServerInstallation. */\nexport type EnterpriseServerInstallationMembershipConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerInstallationMembershipEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerInstallation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An Enterprise Server installation that a user is a member of. */\nexport type EnterpriseServerInstallationMembershipEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerInstallation>;\n  /** The role of the user in the enterprise membership. */\n  role: EnterpriseUserAccountMembershipRole;\n};\n\n/** Ordering options for Enterprise Server installation connections. */\nexport type EnterpriseServerInstallationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order Enterprise Server installations by. */\n  field: EnterpriseServerInstallationOrderField;\n};\n\n/** Properties by which Enterprise Server installation connections can be ordered. */\nexport enum EnterpriseServerInstallationOrderField {\n  /** Order Enterprise Server installations by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order Enterprise Server installations by customer name */\n  CustomerName = 'CUSTOMER_NAME',\n  /** Order Enterprise Server installations by host name */\n  HostName = 'HOST_NAME'\n}\n\n/** A user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccount = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** User emails belonging to this user account. */\n  emails: EnterpriseServerUserAccountEmailConnection;\n  /** The Enterprise Server installation on which this user account exists. */\n  enterpriseServerInstallation: EnterpriseServerInstallation;\n  /** The Node ID of the EnterpriseServerUserAccount object */\n  id: Scalars['ID']['output'];\n  /** Whether the user account is a site administrator on the Enterprise Server installation. */\n  isSiteAdmin: Scalars['Boolean']['output'];\n  /** The login of the user account on the Enterprise Server installation. */\n  login: Scalars['String']['output'];\n  /** The profile name of the user account on the Enterprise Server installation. */\n  profileName?: Maybe<Scalars['String']['output']>;\n  /** The date and time when the user account was created on the Enterprise Server installation. */\n  remoteCreatedAt: Scalars['DateTime']['output'];\n  /** The ID of the user account on the Enterprise Server installation. */\n  remoteUserId: Scalars['Int']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n\n/** A user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountEmailsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseServerUserAccountEmailOrder>;\n};\n\n/** The connection type for EnterpriseServerUserAccount. */\nexport type EnterpriseServerUserAccountConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccount>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccount>;\n};\n\n/** An email belonging to a user account on an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountEmail = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The email address. */\n  email: Scalars['String']['output'];\n  /** The Node ID of the EnterpriseServerUserAccountEmail object */\n  id: Scalars['ID']['output'];\n  /** Indicates whether this is the primary email of the associated user account. */\n  isPrimary: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The user account to which the email belongs. */\n  userAccount: EnterpriseServerUserAccount;\n};\n\n/** The connection type for EnterpriseServerUserAccountEmail. */\nexport type EnterpriseServerUserAccountEmailConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmailEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountEmail>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountEmailEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccountEmail>;\n};\n\n/** Ordering options for Enterprise Server user account email connections. */\nexport type EnterpriseServerUserAccountEmailOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order emails by. */\n  field: EnterpriseServerUserAccountEmailOrderField;\n};\n\n/** Properties by which Enterprise Server user account email connections can be ordered. */\nexport enum EnterpriseServerUserAccountEmailOrderField {\n  /** Order emails by email */\n  Email = 'EMAIL'\n}\n\n/** Ordering options for Enterprise Server user account connections. */\nexport type EnterpriseServerUserAccountOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user accounts by. */\n  field: EnterpriseServerUserAccountOrderField;\n};\n\n/** Properties by which Enterprise Server user account connections can be ordered. */\nexport enum EnterpriseServerUserAccountOrderField {\n  /** Order user accounts by login */\n  Login = 'LOGIN',\n  /** Order user accounts by creation time on the Enterprise Server installation */\n  RemoteCreatedAt = 'REMOTE_CREATED_AT'\n}\n\n/** A user accounts upload from an Enterprise Server installation. */\nexport type EnterpriseServerUserAccountsUpload = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The enterprise to which this upload belongs. */\n  enterprise: Enterprise;\n  /** The Enterprise Server installation for which this upload was generated. */\n  enterpriseServerInstallation: EnterpriseServerInstallation;\n  /** The Node ID of the EnterpriseServerUserAccountsUpload object */\n  id: Scalars['ID']['output'];\n  /** The name of the file uploaded. */\n  name: Scalars['String']['output'];\n  /** The synchronization state of the upload */\n  syncState: EnterpriseServerUserAccountsUploadSyncState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for EnterpriseServerUserAccountsUpload. */\nexport type EnterpriseServerUserAccountsUploadConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUploadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<EnterpriseServerUserAccountsUpload>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type EnterpriseServerUserAccountsUploadEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<EnterpriseServerUserAccountsUpload>;\n};\n\n/** Ordering options for Enterprise Server user accounts upload connections. */\nexport type EnterpriseServerUserAccountsUploadOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user accounts uploads by. */\n  field: EnterpriseServerUserAccountsUploadOrderField;\n};\n\n/** Properties by which Enterprise Server user accounts upload connections can be ordered. */\nexport enum EnterpriseServerUserAccountsUploadOrderField {\n  /** Order user accounts uploads by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Synchronization state of the Enterprise Server user accounts upload */\nexport enum EnterpriseServerUserAccountsUploadSyncState {\n  /** The synchronization of the upload failed. */\n  Failure = 'FAILURE',\n  /** The synchronization of the upload is pending. */\n  Pending = 'PENDING',\n  /** The synchronization of the upload succeeded. */\n  Success = 'SUCCESS'\n}\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccount = Actor & Node & {\n  /** A URL pointing to the enterprise user account's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The enterprise in which this user account exists. */\n  enterprise: Enterprise;\n  /** A list of Enterprise Server installations this user is a member of. */\n  enterpriseInstallations: EnterpriseServerInstallationMembershipConnection;\n  /** The Node ID of the EnterpriseUserAccount object */\n  id: Scalars['ID']['output'];\n  /** An identifier for the enterprise user account, a login or email address */\n  login: Scalars['String']['output'];\n  /** The name of the enterprise user account */\n  name?: Maybe<Scalars['String']['output']>;\n  /** A list of enterprise organizations this user is a member of. */\n  organizations: EnterpriseOrganizationMembershipConnection;\n  /** The HTTP path for this user. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this user. */\n  url: Scalars['URI']['output'];\n  /** The user within the enterprise. */\n  user?: Maybe<User>;\n};\n\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccountAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccountEnterpriseInstallationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<EnterpriseServerInstallationOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;\n};\n\n\n/** An account for a user who is an admin of an enterprise or a member of an enterprise through one or more organizations. */\nexport type EnterpriseUserAccountOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<EnterpriseUserAccountMembershipRole>;\n};\n\n/** The possible roles for enterprise membership. */\nexport enum EnterpriseUserAccountMembershipRole {\n  /** The user is a member of an organization in the enterprise. */\n  Member = 'MEMBER',\n  /** The user is an owner of an organization in the enterprise. */\n  Owner = 'OWNER',\n  /**\n   * The user is not an owner of the enterprise, and not a member or owner of any\n   * organizations in the enterprise; only for EMU-enabled enterprises.\n   */\n  Unaffiliated = 'UNAFFILIATED'\n}\n\n/** The possible GitHub Enterprise deployments where this user can exist. */\nexport enum EnterpriseUserDeployment {\n  /** The user is part of a GitHub Enterprise Cloud deployment. */\n  Cloud = 'CLOUD',\n  /** The user is part of a GitHub Enterprise Server deployment. */\n  Server = 'SERVER'\n}\n\n/** An environment. */\nexport type Environment = Node & {\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the Environment object */\n  id: Scalars['ID']['output'];\n  /** Indicates whether or not this environment is currently pinned to the repository */\n  isPinned?: Maybe<Scalars['Boolean']['output']>;\n  /** The latest completed deployment with status success, failure, or error if it exists */\n  latestCompletedDeployment?: Maybe<Deployment>;\n  /** The name of the environment */\n  name: Scalars['String']['output'];\n  /** The position of the environment if it is pinned, null if it is not pinned */\n  pinnedPosition?: Maybe<Scalars['Int']['output']>;\n  /** The protection rules defined for this environment */\n  protectionRules: DeploymentProtectionRuleConnection;\n};\n\n\n/** An environment. */\nexport type EnvironmentProtectionRulesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for Environment. */\nexport type EnvironmentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<EnvironmentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Environment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type EnvironmentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Environment>;\n};\n\n/** Properties by which environments connections can be ordered */\nexport enum EnvironmentOrderField {\n  /** Order environments by name. */\n  Name = 'NAME'\n}\n\n/** Properties by which environments connections can be ordered */\nexport enum EnvironmentPinnedFilterField {\n  /** All environments will be returned. */\n  All = 'ALL',\n  /** Environments exclude pinned will be returned */\n  None = 'NONE',\n  /** Only pinned environment will be returned */\n  Only = 'ONLY'\n}\n\n/** Ordering options for environments */\nexport type Environments = {\n  /** The direction in which to order environments by the specified field. */\n  direction: OrderDirection;\n  /** The field to order environments by. */\n  field: EnvironmentOrderField;\n};\n\n/**\n * An external identity provisioned by SAML SSO or SCIM. If SAML is configured on\n * the organization, the external identity is visible to (1) organization owners,\n * (2) organization owners' personal access tokens (classic) with read:org or\n * admin:org scope, (3) GitHub App with an installation token with read or write\n * access to members. If SAML is configured on the enterprise, the external\n * identity is visible to (1) enterprise owners, (2) enterprise owners' personal\n * access tokens (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type ExternalIdentity = Node & {\n  /** The GUID for this identity */\n  guid: Scalars['String']['output'];\n  /** The Node ID of the ExternalIdentity object */\n  id: Scalars['ID']['output'];\n  /** Organization invitation for this SCIM-provisioned external identity */\n  organizationInvitation?: Maybe<OrganizationInvitation>;\n  /** SAML Identity attributes */\n  samlIdentity?: Maybe<ExternalIdentitySamlAttributes>;\n  /** SCIM Identity attributes */\n  scimIdentity?: Maybe<ExternalIdentityScimAttributes>;\n  /** User linked to this external identity. Will be NULL if this identity has not been claimed by an organization member. */\n  user?: Maybe<User>;\n};\n\n/** An attribute for the External Identity attributes collection */\nexport type ExternalIdentityAttribute = {\n  /** The attribute metadata as JSON */\n  metadata?: Maybe<Scalars['String']['output']>;\n  /** The attribute name */\n  name: Scalars['String']['output'];\n  /** The attribute value */\n  value: Scalars['String']['output'];\n};\n\n/** The connection type for ExternalIdentity. */\nexport type ExternalIdentityConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ExternalIdentityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ExternalIdentity>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ExternalIdentityEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ExternalIdentity>;\n};\n\n/** SAML attributes for the External Identity */\nexport type ExternalIdentitySamlAttributes = {\n  /** SAML Identity attributes */\n  attributes: Array<ExternalIdentityAttribute>;\n  /** The emails associated with the SAML identity */\n  emails?: Maybe<Array<UserEmailMetadata>>;\n  /** Family name of the SAML identity */\n  familyName?: Maybe<Scalars['String']['output']>;\n  /** Given name of the SAML identity */\n  givenName?: Maybe<Scalars['String']['output']>;\n  /** The groups linked to this identity in IDP */\n  groups?: Maybe<Array<Scalars['String']['output']>>;\n  /** The NameID of the SAML identity */\n  nameId?: Maybe<Scalars['String']['output']>;\n  /** The userName of the SAML identity */\n  username?: Maybe<Scalars['String']['output']>;\n};\n\n/** SCIM attributes for the External Identity */\nexport type ExternalIdentityScimAttributes = {\n  /** The emails associated with the SCIM identity */\n  emails?: Maybe<Array<UserEmailMetadata>>;\n  /** Family name of the SCIM identity */\n  familyName?: Maybe<Scalars['String']['output']>;\n  /** Given name of the SCIM identity */\n  givenName?: Maybe<Scalars['String']['output']>;\n  /** The groups linked to this identity in IDP */\n  groups?: Maybe<Array<Scalars['String']['output']>>;\n  /** The userName of the SCIM identity */\n  username?: Maybe<Scalars['String']['output']>;\n};\n\n/**\n * A command to add a file at the given path with the given contents as part of a\n * commit.  Any existing file at that that path will be replaced.\n */\nexport type FileAddition = {\n  /** The base64 encoded contents of the file */\n  contents: Scalars['Base64String']['input'];\n  /** The path in the repository where the file will be located */\n  path: Scalars['String']['input'];\n};\n\n/**\n * A description of a set of changes to a file tree to be made as part of\n * a git commit, modeled as zero or more file `additions` and zero or more\n * file `deletions`.\n *\n * Both fields are optional; omitting both will produce a commit with no\n * file changes.\n *\n * `deletions` and `additions` describe changes to files identified\n * by their path in the git tree using unix-style path separators, i.e.\n * `/`.  The root of a git tree is an empty string, so paths are not\n * slash-prefixed.\n *\n * `path` values must be unique across all `additions` and `deletions`\n * provided.  Any duplication will result in a validation error.\n *\n * ### Encoding\n *\n * File contents must be provided in full for each `FileAddition`.\n *\n * The `contents` of a `FileAddition` must be encoded using RFC 4648\n * compliant base64, i.e. correct padding is required and no characters\n * outside the standard alphabet may be used.  Invalid base64\n * encoding will be rejected with a validation error.\n *\n * The encoded contents may be binary.\n *\n * For text files, no assumptions are made about the character encoding of\n * the file contents (after base64 decoding).  No charset transcoding or\n * line-ending normalization will be performed; it is the client's\n * responsibility to manage the character encoding of files they provide.\n * However, for maximum compatibility we recommend using UTF-8 encoding\n * and ensuring that all files in a repository use a consistent\n * line-ending convention (`\\n` or `\\r\\n`), and that all files end\n * with a newline.\n *\n * ### Modeling file changes\n *\n * Each of the the five types of conceptual changes that can be made in a\n * git commit can be described using the `FileChanges` type as follows:\n *\n * 1. New file addition: create file `hello world\\n` at path `docs/README.txt`:\n *\n *        {\n *          \"additions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *              \"contents\": base64encode(\"hello world\\n\")\n *            }\n *          ]\n *        }\n *\n * 2. Existing file modification: change existing `docs/README.txt` to have new\n *    content `new content here\\n`:\n *\n *        {\n *          \"additions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *              \"contents\": base64encode(\"new content here\\n\")\n *            }\n *          ]\n *        }\n *\n * 3. Existing file deletion: remove existing file `docs/README.txt`.\n *    Note that the path is required to exist -- specifying a\n *    path that does not exist on the given branch will abort the\n *    commit and return an error.\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\"\n *            }\n *          ]\n *        }\n *\n *\n * 4. File rename with no changes: rename `docs/README.txt` with\n *    previous content `hello world\\n` to the same content at\n *    `newdocs/README.txt`:\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *            }\n *          ],\n *          \"additions\" [\n *            {\n *              \"path\": \"newdocs/README.txt\",\n *              \"contents\": base64encode(\"hello world\\n\")\n *            }\n *          ]\n *        }\n *\n *\n * 5. File rename with changes: rename `docs/README.txt` with\n *    previous content `hello world\\n` to a file at path\n *    `newdocs/README.txt` with content `new contents\\n`:\n *\n *        {\n *          \"deletions\" [\n *            {\n *              \"path\": \"docs/README.txt\",\n *            }\n *          ],\n *          \"additions\" [\n *            {\n *              \"path\": \"newdocs/README.txt\",\n *              \"contents\": base64encode(\"new contents\\n\")\n *            }\n *          ]\n *        }\n */\nexport type FileChanges = {\n  /** File to add or change. */\n  additions?: InputMaybe<Array<FileAddition>>;\n  /** Files to delete. */\n  deletions?: InputMaybe<Array<FileDeletion>>;\n};\n\n/** A command to delete the file at the given path as part of a commit. */\nexport type FileDeletion = {\n  /** The path to delete */\n  path: Scalars['String']['input'];\n};\n\n/**\n * Prevent commits that include files with specified file extensions from being\n * pushed to the commit graph. NOTE: This rule is in beta and subject to change\n */\nexport type FileExtensionRestrictionParameters = {\n  /** The file extensions that are restricted from being pushed to the commit graph. */\n  restrictedFileExtensions: Array<Scalars['String']['output']>;\n};\n\n/**\n * Prevent commits that include files with specified file extensions from being\n * pushed to the commit graph. NOTE: This rule is in beta and subject to change\n */\nexport type FileExtensionRestrictionParametersInput = {\n  /** The file extensions that are restricted from being pushed to the commit graph. */\n  restrictedFileExtensions: Array<Scalars['String']['input']>;\n};\n\n/**\n * Prevent commits that include changes in specified file paths from being pushed\n * to the commit graph. NOTE: This rule is in beta and subject to change\n */\nexport type FilePathRestrictionParameters = {\n  /** The file paths that are restricted from being pushed to the commit graph. */\n  restrictedFilePaths: Array<Scalars['String']['output']>;\n};\n\n/**\n * Prevent commits that include changes in specified file paths from being pushed\n * to the commit graph. NOTE: This rule is in beta and subject to change\n */\nexport type FilePathRestrictionParametersInput = {\n  /** The file paths that are restricted from being pushed to the commit graph. */\n  restrictedFilePaths: Array<Scalars['String']['input']>;\n};\n\n/** The possible viewed states of a file . */\nexport enum FileViewedState {\n  /** The file has new changes since last viewed. */\n  Dismissed = 'DISMISSED',\n  /** The file has not been marked as viewed. */\n  Unviewed = 'UNVIEWED',\n  /** The file has been marked as viewed. */\n  Viewed = 'VIEWED'\n}\n\n/** Autogenerated input type of FollowOrganization */\nexport type FollowOrganizationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the organization to follow. */\n  organizationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of FollowOrganization. */\nexport type FollowOrganizationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The organization that was followed. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of FollowUser */\nexport type FollowUserInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the user to follow. */\n  userId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of FollowUser. */\nexport type FollowUserPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The user that was followed. */\n  user?: Maybe<User>;\n};\n\n/** The connection type for User. */\nexport type FollowerConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** The connection type for User. */\nexport type FollowingConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** A funding platform link for a repository. */\nexport type FundingLink = {\n  /** The funding platform this link is for. */\n  platform: FundingPlatform;\n  /** The configured URL for this funding link. */\n  url: Scalars['URI']['output'];\n};\n\n/** The possible funding platforms for repository funding links. */\nexport enum FundingPlatform {\n  /** Buy Me a Coffee funding platform. */\n  BuyMeACoffee = 'BUY_ME_A_COFFEE',\n  /** Community Bridge funding platform. */\n  CommunityBridge = 'COMMUNITY_BRIDGE',\n  /** Custom funding platform. */\n  Custom = 'CUSTOM',\n  /** GitHub funding platform. */\n  Github = 'GITHUB',\n  /** IssueHunt funding platform. */\n  Issuehunt = 'ISSUEHUNT',\n  /** Ko-fi funding platform. */\n  KoFi = 'KO_FI',\n  /** LFX Crowdfunding funding platform. */\n  LfxCrowdfunding = 'LFX_CROWDFUNDING',\n  /** Liberapay funding platform. */\n  Liberapay = 'LIBERAPAY',\n  /** Open Collective funding platform. */\n  OpenCollective = 'OPEN_COLLECTIVE',\n  /** Patreon funding platform. */\n  Patreon = 'PATREON',\n  /** Polar funding platform. */\n  Polar = 'POLAR',\n  /** Tidelift funding platform. */\n  Tidelift = 'TIDELIFT'\n}\n\n/** A generic hovercard context with a message and icon */\nexport type GenericHovercardContext = HovercardContext & {\n  /** A string describing this context */\n  message: Scalars['String']['output'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String']['output'];\n};\n\n/** A Gist. */\nexport type Gist = Node & Starrable & UniformResourceLocatable & {\n  /** A list of comments associated with the gist */\n  comments: GistCommentConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The gist description. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The files in this gist. */\n  files?: Maybe<Array<Maybe<GistFile>>>;\n  /** A list of forks associated with the gist */\n  forks: GistConnection;\n  /** The Node ID of the Gist object */\n  id: Scalars['ID']['output'];\n  /** Identifies if the gist is a fork. */\n  isFork: Scalars['Boolean']['output'];\n  /** Whether the gist is public or not. */\n  isPublic: Scalars['Boolean']['output'];\n  /** The gist name. */\n  name: Scalars['String']['output'];\n  /** The gist owner. */\n  owner?: Maybe<RepositoryOwner>;\n  /** Identifies when the gist was last pushed to. */\n  pushedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The HTML path to this resource. */\n  resourcePath: Scalars['URI']['output'];\n  /** Returns a count of how many stargazers there are on this object */\n  stargazerCount: Scalars['Int']['output'];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this Gist. */\n  url: Scalars['URI']['output'];\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars['Boolean']['output'];\n};\n\n\n/** A Gist. */\nexport type GistCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A Gist. */\nexport type GistFilesArgs = {\n  limit?: InputMaybe<Scalars['Int']['input']>;\n  oid?: InputMaybe<Scalars['GitObjectID']['input']>;\n};\n\n\n/** A Gist. */\nexport type GistForksArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<GistOrder>;\n};\n\n\n/** A Gist. */\nexport type GistStargazersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** Represents a comment on an Gist. */\nexport type GistComment = Comment & Deletable & Minimizable & Node & Updatable & UpdatableComment & {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the gist. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Identifies the comment body. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The associated gist. */\n  gist: Gist;\n  /** The Node ID of the GistComment object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean']['output'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Returns why the comment was minimized. One of `abuse`, `off-topic`,\n   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n   * formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n   */\n  minimizedReason?: Maybe<Scalars['String']['output']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n};\n\n\n/** Represents a comment on an Gist. */\nexport type GistCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for GistComment. */\nexport type GistCommentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GistCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GistComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type GistCommentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GistComment>;\n};\n\n/** The connection type for Gist. */\nexport type GistConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GistEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Gist>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type GistEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Gist>;\n};\n\n/** A file in a gist. */\nexport type GistFile = {\n  /** The file name encoded to remove characters that are invalid in URL paths. */\n  encodedName?: Maybe<Scalars['String']['output']>;\n  /** The gist file encoding. */\n  encoding?: Maybe<Scalars['String']['output']>;\n  /** The file extension from the file name. */\n  extension?: Maybe<Scalars['String']['output']>;\n  /** Indicates if this file is an image. */\n  isImage: Scalars['Boolean']['output'];\n  /** Whether the file's contents were truncated. */\n  isTruncated: Scalars['Boolean']['output'];\n  /** The programming language this file is written in. */\n  language?: Maybe<Language>;\n  /** The gist file name. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The gist file size in bytes. */\n  size?: Maybe<Scalars['Int']['output']>;\n  /** UTF8 text data or null if the file is binary */\n  text?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A file in a gist. */\nexport type GistFileTextArgs = {\n  truncate?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Ordering options for gist connections */\nexport type GistOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: GistOrderField;\n};\n\n/** Properties by which gist connections can be ordered. */\nexport enum GistOrderField {\n  /** Order gists by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order gists by push time */\n  PushedAt = 'PUSHED_AT',\n  /** Order gists by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The privacy of a Gist */\nexport enum GistPrivacy {\n  /** Gists that are public and secret */\n  All = 'ALL',\n  /** Public */\n  Public = 'PUBLIC',\n  /** Secret */\n  Secret = 'SECRET'\n}\n\n/** Represents an actor in a Git commit (ie. an author or committer). */\nexport type GitActor = {\n  /** A URL pointing to the author's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** The timestamp of the Git action (authoring or committing). */\n  date?: Maybe<Scalars['GitTimestamp']['output']>;\n  /** The email in the Git commit. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The name in the Git commit. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The GitHub user corresponding to the email field. Null if no such user exists. */\n  user?: Maybe<User>;\n};\n\n\n/** Represents an actor in a Git commit (ie. an author or committer). */\nexport type GitActorAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for GitActor. */\nexport type GitActorConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<GitActorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<GitActor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type GitActorEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<GitActor>;\n};\n\n/** Represents information about the GitHub instance. */\nexport type GitHubMetadata = {\n  /** Returns a String that's a SHA of `github-services` */\n  gitHubServicesSha: Scalars['GitObjectID']['output'];\n  /** IP addresses that users connect to for git operations */\n  gitIpAddresses?: Maybe<Array<Scalars['String']['output']>>;\n  /** IP addresses that GitHub Enterprise Importer uses for outbound connections */\n  githubEnterpriseImporterIpAddresses?: Maybe<Array<Scalars['String']['output']>>;\n  /** IP addresses that service hooks are sent from */\n  hookIpAddresses?: Maybe<Array<Scalars['String']['output']>>;\n  /** IP addresses that the importer connects from */\n  importerIpAddresses?: Maybe<Array<Scalars['String']['output']>>;\n  /** Whether or not users are verified */\n  isPasswordAuthenticationVerifiable: Scalars['Boolean']['output'];\n  /** IP addresses for GitHub Pages' A records */\n  pagesIpAddresses?: Maybe<Array<Scalars['String']['output']>>;\n};\n\n/** Represents a Git object. */\nexport type GitObject = {\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String']['output'];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI']['output'];\n  /** The Node ID of the GitObject object */\n  id: Scalars['ID']['output'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID']['output'];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n};\n\n/** Information about a signature (GPG or S/MIME) on a Commit or Tag. */\nexport type GitSignature = {\n  /** Email used to sign this object. */\n  email: Scalars['String']['output'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean']['output'];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String']['output'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String']['output'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean']['output'];\n};\n\n/** The state of a Git signature. */\nexport enum GitSignatureState {\n  /** The signing certificate or its chain could not be verified */\n  BadCert = 'BAD_CERT',\n  /** Invalid email used for signing */\n  BadEmail = 'BAD_EMAIL',\n  /** Signing key expired */\n  ExpiredKey = 'EXPIRED_KEY',\n  /** Internal error - the GPG verification service misbehaved */\n  GpgverifyError = 'GPGVERIFY_ERROR',\n  /** Internal error - the GPG verification service is unavailable at the moment */\n  GpgverifyUnavailable = 'GPGVERIFY_UNAVAILABLE',\n  /** Invalid signature */\n  Invalid = 'INVALID',\n  /** Malformed signature */\n  MalformedSig = 'MALFORMED_SIG',\n  /** The usage flags for the key that signed this don't allow signing */\n  NotSigningKey = 'NOT_SIGNING_KEY',\n  /** Email used for signing not known to GitHub */\n  NoUser = 'NO_USER',\n  /** Valid signature, though certificate revocation check failed */\n  OcspError = 'OCSP_ERROR',\n  /** Valid signature, pending certificate revocation checking */\n  OcspPending = 'OCSP_PENDING',\n  /** One or more certificates in chain has been revoked */\n  OcspRevoked = 'OCSP_REVOKED',\n  /** Key used for signing not known to GitHub */\n  UnknownKey = 'UNKNOWN_KEY',\n  /** Unknown signature type */\n  UnknownSigType = 'UNKNOWN_SIG_TYPE',\n  /** Unsigned */\n  Unsigned = 'UNSIGNED',\n  /** Email used for signing unverified on GitHub */\n  UnverifiedEmail = 'UNVERIFIED_EMAIL',\n  /** Valid signature and verified by GitHub */\n  Valid = 'VALID'\n}\n\n/** Represents a GPG signature on a Commit or Tag. */\nexport type GpgSignature = GitSignature & {\n  /** Email used to sign this object. */\n  email: Scalars['String']['output'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean']['output'];\n  /** Hex-encoded ID of the key that signed this object. */\n  keyId?: Maybe<Scalars['String']['output']>;\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String']['output'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String']['output'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean']['output'];\n};\n\n/** Autogenerated input type of GrantEnterpriseOrganizationsMigratorRole */\nexport type GrantEnterpriseOrganizationsMigratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of the user to grant the migrator role */\n  login: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole. */\nexport type GrantEnterpriseOrganizationsMigratorRolePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The organizations that had the migrator role applied to for the given user. */\n  organizations?: Maybe<OrganizationConnection>;\n};\n\n\n/** Autogenerated return type of GrantEnterpriseOrganizationsMigratorRole. */\nexport type GrantEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Autogenerated input type of GrantMigratorRole */\nexport type GrantMigratorRoleInput = {\n  /** The user login or Team slug to grant the migrator role. */\n  actor: Scalars['String']['input'];\n  /** Specifies the type of the actor, can be either USER or TEAM. */\n  actorType: ActorType;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the organization that the user/team belongs to. */\n  organizationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of GrantMigratorRole. */\nexport type GrantMigratorRolePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Represents a 'head_ref_deleted' event on a given pull request. */\nexport type HeadRefDeletedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the Ref associated with the `head_ref_deleted` event. */\n  headRef?: Maybe<Ref>;\n  /** Identifies the name of the Ref associated with the `head_ref_deleted` event. */\n  headRefName: Scalars['String']['output'];\n  /** The Node ID of the HeadRefDeletedEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Represents a 'head_ref_force_pushed' event on a given pull request. */\nexport type HeadRefForcePushedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the after commit SHA for the 'head_ref_force_pushed' event. */\n  afterCommit?: Maybe<Commit>;\n  /** Identifies the before commit SHA for the 'head_ref_force_pushed' event. */\n  beforeCommit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the HeadRefForcePushedEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the fully qualified ref name for the 'head_ref_force_pushed' event. */\n  ref?: Maybe<Ref>;\n};\n\n/** Represents a 'head_ref_restored' event on a given pull request. */\nexport type HeadRefRestoredEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the HeadRefRestoredEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n};\n\n/** Detail needed to display a hovercard for a user */\nexport type Hovercard = {\n  /** Each of the contexts for this hovercard */\n  contexts: Array<HovercardContext>;\n};\n\n/** An individual line of a hovercard */\nexport type HovercardContext = {\n  /** A string describing this context */\n  message: Scalars['String']['output'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String']['output'];\n};\n\n/** The possible states in which authentication can be configured with an identity provider. */\nexport enum IdentityProviderConfigurationState {\n  /** Authentication with an identity provider is configured but not enforced. */\n  Configured = 'CONFIGURED',\n  /** Authentication with an identity provider is configured and enforced. */\n  Enforced = 'ENFORCED',\n  /** Authentication with an identity provider is not configured. */\n  Unconfigured = 'UNCONFIGURED'\n}\n\n/** Autogenerated input type of ImportProject */\nexport type ImportProjectInput = {\n  /** The description of Project. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A list of columns containing issues and pull requests. */\n  columnImports: Array<ProjectColumnImport>;\n  /** The name of Project. */\n  name: Scalars['String']['input'];\n  /** The name of the Organization or User to create the Project under. */\n  ownerName: Scalars['String']['input'];\n  /** Whether the Project is public or not. */\n  public?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Autogenerated return type of ImportProject. */\nexport type ImportProjectPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new Project! */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of InviteEnterpriseAdmin */\nexport type InviteEnterpriseAdminInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the person to invite as an administrator. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise to which you want to invite an administrator. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of a user to invite as an administrator. */\n  invitee?: InputMaybe<Scalars['String']['input']>;\n  /** The role of the administrator. */\n  role?: InputMaybe<EnterpriseAdministratorRole>;\n};\n\n/** Autogenerated return type of InviteEnterpriseAdmin. */\nexport type InviteEnterpriseAdminPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created enterprise administrator invitation. */\n  invitation?: Maybe<EnterpriseAdministratorInvitation>;\n};\n\n/** Autogenerated input type of InviteEnterpriseMember */\nexport type InviteEnterpriseMemberInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The email of the person to invite as an unaffiliated member. */\n  email?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise to which you want to invite an unaffiliated member. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of a user to invite as an unaffiliated member. */\n  invitee?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of InviteEnterpriseMember. */\nexport type InviteEnterpriseMemberPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The created enterprise member invitation. */\n  invitation?: Maybe<EnterpriseMemberInvitation>;\n};\n\n/** The possible values for the IP allow list enabled setting. */\nexport enum IpAllowListEnabledSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for the owner. */\n  Enabled = 'ENABLED'\n}\n\n/** An IP address or range of addresses that is allowed to access an owner's resources. */\nexport type IpAllowListEntry = Node & {\n  /** A single IP address or range of IP addresses in CIDR notation. */\n  allowListValue: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the IpAllowListEntry object */\n  id: Scalars['ID']['output'];\n  /** Whether the entry is currently active. */\n  isActive: Scalars['Boolean']['output'];\n  /** The name of the IP allow list entry. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The owner of the IP allow list entry. */\n  owner: IpAllowListOwner;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for IpAllowListEntry. */\nexport type IpAllowListEntryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IpAllowListEntryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IpAllowListEntry>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type IpAllowListEntryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<IpAllowListEntry>;\n};\n\n/** Ordering options for IP allow list entry connections. */\nexport type IpAllowListEntryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order IP allow list entries by. */\n  field: IpAllowListEntryOrderField;\n};\n\n/** Properties by which IP allow list entry connections can be ordered. */\nexport enum IpAllowListEntryOrderField {\n  /** Order IP allow list entries by the allow list value. */\n  AllowListValue = 'ALLOW_LIST_VALUE',\n  /** Order IP allow list entries by creation time. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The possible values for the IP allow list configuration for installed GitHub Apps setting. */\nexport enum IpAllowListForInstalledAppsEnabledSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for the owner. */\n  Enabled = 'ENABLED'\n}\n\n/** Types that can own an IP allow list. */\nexport type IpAllowListOwner = App | Enterprise | Organization;\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type Issue = Assignable & Closable & Comment & Deletable & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & SubscribableThread & UniformResourceLocatable & Updatable & UpdatableComment & {\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** A list of Users assigned to this object. */\n  assignees: UserConnection;\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Identifies the body of the issue. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The http path for this issue body */\n  bodyResourcePath: Scalars['URI']['output'];\n  /** Identifies the body of the issue rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** The http URL for this issue body */\n  bodyUrl: Scalars['URI']['output'];\n  /** Indicates if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of comments associated with the Issue. */\n  comments: IssueCommentConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** Identifies the primary key from the database as a BigInt. */\n  fullDatabaseId?: Maybe<Scalars['BigInt']['output']>;\n  /** The hovercard information for this issue */\n  hovercard: Hovercard;\n  /** The Node ID of the Issue object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** Indicates whether or not this issue is currently pinned to the repository issues list */\n  isPinned?: Maybe<Scalars['Boolean']['output']>;\n  /** Is this issue read by the viewer */\n  isReadByViewer?: Maybe<Scalars['Boolean']['output']>;\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Branches linked to this issue. */\n  linkedBranches: LinkedBranchConnection;\n  /** `true` if the object is locked */\n  locked: Scalars['Boolean']['output'];\n  /** Identifies the milestone associated with the issue. */\n  milestone?: Maybe<Milestone>;\n  /** Identifies the issue number. */\n  number: Scalars['Int']['output'];\n  /** A list of Users that are participating in the Issue conversation. */\n  participants: UserConnection;\n  /** List of project cards associated with this issue. */\n  projectCards: ProjectCardConnection;\n  /** List of project items associated with this issue. */\n  projectItems: ProjectV2ItemConnection;\n  /** Find a project by number. */\n  projectV2?: Maybe<ProjectV2>;\n  /** A list of projects under the owner. */\n  projectsV2: ProjectV2Connection;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path for this issue */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the state of the issue. */\n  state: IssueState;\n  /** Identifies the reason for the issue state. */\n  stateReason?: Maybe<IssueStateReason>;\n  /**\n   * A list of events, comments, commits, etc. associated with the issue.\n   * @deprecated `timeline` will be removed Use Issue.timelineItems instead. Removal on 2020-10-01 UTC.\n   */\n  timeline: IssueTimelineConnection;\n  /** A list of events, comments, commits, etc. associated with the issue. */\n  timelineItems: IssueTimelineItemsConnection;\n  /** Identifies the issue title. */\n  title: Scalars['String']['output'];\n  /** Identifies the issue title rendered to HTML. */\n  titleHTML: Scalars['String']['output'];\n  /** A list of issues that track this issue */\n  trackedInIssues: IssueConnection;\n  /** A list of issues tracked inside the current issue */\n  trackedIssues: IssueConnection;\n  /** The number of tracked issues for this issue */\n  trackedIssuesCount: Scalars['Int']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this issue */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Indicates if the object can be closed by the viewer. */\n  viewerCanClose: Scalars['Boolean']['output'];\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Indicates if the object can be reopened by the viewer. */\n  viewerCanReopen: Scalars['Boolean']['output'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n  /** Identifies the viewer's thread subscription form action. */\n  viewerThreadSubscriptionFormAction?: Maybe<ThreadSubscriptionFormAction>;\n  /** Identifies the viewer's thread subscription status. */\n  viewerThreadSubscriptionStatus?: Maybe<ThreadSubscriptionState>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueHovercardArgs = {\n  includeNotificationContexts?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueLabelsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueLinkedBranchesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueParticipantsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectCardsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includeArchived?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectV2Args = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueProjectsV2Args = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  minPermissionLevel?: InputMaybe<ProjectV2PermissionLevel>;\n  orderBy?: InputMaybe<ProjectV2Order>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTimelineArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTimelineItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  itemTypes?: InputMaybe<Array<IssueTimelineItemsItemType>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  skip?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTrackedInIssuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTrackedIssuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueTrackedIssuesCountArgs = {\n  states?: InputMaybe<Array<InputMaybe<TrackedIssueStates>>>;\n};\n\n\n/** An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project. */\nexport type IssueUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The possible state reasons of a closed issue. */\nexport enum IssueClosedStateReason {\n  /** An issue that has been closed as completed */\n  Completed = 'COMPLETED',\n  /** An issue that has been closed as not planned */\n  NotPlanned = 'NOT_PLANNED'\n}\n\n/** Represents a comment on an Issue. */\nexport type IssueComment = Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment & {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** Identifies the primary key from the database as a BigInt. */\n  fullDatabaseId?: Maybe<Scalars['BigInt']['output']>;\n  /** The Node ID of the IssueComment object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean']['output'];\n  /** Identifies the issue associated with the comment. */\n  issue: Issue;\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Returns why the comment was minimized. One of `abuse`, `off-topic`,\n   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n   * formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n   */\n  minimizedReason?: Maybe<Scalars['String']['output']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Returns the pull request associated with the comment, if this comment was made on a\n   * pull request.\n   */\n  pullRequest?: Maybe<PullRequest>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path for this issue comment */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this issue comment */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n};\n\n\n/** Represents a comment on an Issue. */\nexport type IssueCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** Represents a comment on an Issue. */\nexport type IssueCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for IssueComment. */\nexport type IssueCommentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type IssueCommentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueComment>;\n};\n\n/** Ways in which lists of issue comments can be ordered upon return. */\nexport type IssueCommentOrder = {\n  /** The direction in which to order issue comments by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order issue comments by. */\n  field: IssueCommentOrderField;\n};\n\n/** Properties by which issue comment connections can be ordered. */\nexport enum IssueCommentOrderField {\n  /** Order issue comments by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The connection type for Issue. */\nexport type IssueConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Issue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** This aggregates issues opened by a user within one repository. */\nexport type IssueContributionsByRepository = {\n  /** The issue contributions. */\n  contributions: CreatedIssueContributionConnection;\n  /** The repository in which the issues were opened. */\n  repository: Repository;\n};\n\n\n/** This aggregates issues opened by a user within one repository. */\nexport type IssueContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type IssueEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Issue>;\n};\n\n/** Ways in which to filter lists of issues. */\nexport type IssueFilters = {\n  /**\n   * List issues assigned to given name. Pass in `null` for issues with no assigned\n   * user, and `*` for issues assigned to any user.\n   */\n  assignee?: InputMaybe<Scalars['String']['input']>;\n  /** List issues created by given name. */\n  createdBy?: InputMaybe<Scalars['String']['input']>;\n  /** List issues where the list of label names exist on the issue. */\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** List issues where the given name is mentioned in the issue. */\n  mentioned?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * List issues by given milestone argument. If an string representation of an\n   * integer is passed, it should refer to a milestone by its database ID. Pass in\n   * `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.\n   */\n  milestone?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * List issues by given milestone argument. If an string representation of an\n   * integer is passed, it should refer to a milestone by its number field. Pass in\n   * `null` for issues with no milestone, and `*` for issues that are assigned to any milestone.\n   */\n  milestoneNumber?: InputMaybe<Scalars['String']['input']>;\n  /** List issues that have been updated at or after the given date. */\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  /** List issues filtered by the list of states given. */\n  states?: InputMaybe<Array<IssueState>>;\n  /** List issues subscribed to by viewer. */\n  viewerSubscribed?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Used for return value of Repository.issueOrPullRequest. */\nexport type IssueOrPullRequest = Issue | PullRequest;\n\n/** Ways in which lists of issues can be ordered upon return. */\nexport type IssueOrder = {\n  /** The direction in which to order issues by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order issues by. */\n  field: IssueOrderField;\n};\n\n/** Properties by which issue connections can be ordered. */\nexport enum IssueOrderField {\n  /** Order issues by comment count */\n  Comments = 'COMMENTS',\n  /** Order issues by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order issues by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The possible states of an issue. */\nexport enum IssueState {\n  /** An issue that has been closed */\n  Closed = 'CLOSED',\n  /** An issue that is still open */\n  Open = 'OPEN'\n}\n\n/** The possible state reasons of an issue. */\nexport enum IssueStateReason {\n  /** An issue that has been closed as completed */\n  Completed = 'COMPLETED',\n  /** An issue that has been closed as not planned */\n  NotPlanned = 'NOT_PLANNED',\n  /** An issue that has been reopened */\n  Reopened = 'REOPENED'\n}\n\n/** A repository issue template. */\nexport type IssueTemplate = {\n  /** The template purpose. */\n  about?: Maybe<Scalars['String']['output']>;\n  /** The suggested assignees. */\n  assignees: UserConnection;\n  /** The suggested issue body. */\n  body?: Maybe<Scalars['String']['output']>;\n  /** The template filename. */\n  filename: Scalars['String']['output'];\n  /** The suggested issue labels */\n  labels?: Maybe<LabelConnection>;\n  /** The template name. */\n  name: Scalars['String']['output'];\n  /** The suggested issue title. */\n  title?: Maybe<Scalars['String']['output']>;\n};\n\n\n/** A repository issue template. */\nexport type IssueTemplateAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository issue template. */\nexport type IssueTemplateLabelsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n/** The connection type for IssueTimelineItem. */\nexport type IssueTimelineConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueTimelineItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueTimelineItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An item in an issue timeline */\nexport type IssueTimelineItem = AssignedEvent | ClosedEvent | Commit | CrossReferencedEvent | DemilestonedEvent | IssueComment | LabeledEvent | LockedEvent | MilestonedEvent | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent;\n\n/** An edge in a connection. */\nexport type IssueTimelineItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueTimelineItem>;\n};\n\n/** An item in an issue timeline */\nexport type IssueTimelineItems = AddedToProjectEvent | AssignedEvent | ClosedEvent | CommentDeletedEvent | ConnectedEvent | ConvertedNoteToIssueEvent | ConvertedToDiscussionEvent | CrossReferencedEvent | DemilestonedEvent | DisconnectedEvent | IssueComment | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | ReferencedEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnmarkedAsDuplicateEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent;\n\n/** The connection type for IssueTimelineItems. */\nexport type IssueTimelineItemsConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<IssueTimelineItemsEdge>>>;\n  /** Identifies the count of items after applying `before` and `after` filters. */\n  filteredCount: Scalars['Int']['output'];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<IssueTimelineItems>>>;\n  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */\n  pageCount: Scalars['Int']['output'];\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n  /** Identifies the date and time when the timeline was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** An edge in a connection. */\nexport type IssueTimelineItemsEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<IssueTimelineItems>;\n};\n\n/** The possible item types found in a timeline. */\nexport enum IssueTimelineItemsItemType {\n  /** Represents a 'added_to_project' event on a given issue or pull request. */\n  AddedToProjectEvent = 'ADDED_TO_PROJECT_EVENT',\n  /** Represents an 'assigned' event on any assignable object. */\n  AssignedEvent = 'ASSIGNED_EVENT',\n  /** Represents a 'closed' event on any `Closable`. */\n  ClosedEvent = 'CLOSED_EVENT',\n  /** Represents a 'comment_deleted' event on a given issue or pull request. */\n  CommentDeletedEvent = 'COMMENT_DELETED_EVENT',\n  /** Represents a 'connected' event on a given issue or pull request. */\n  ConnectedEvent = 'CONNECTED_EVENT',\n  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\n  ConvertedNoteToIssueEvent = 'CONVERTED_NOTE_TO_ISSUE_EVENT',\n  /** Represents a 'converted_to_discussion' event on a given issue. */\n  ConvertedToDiscussionEvent = 'CONVERTED_TO_DISCUSSION_EVENT',\n  /** Represents a mention made by one issue or pull request to another. */\n  CrossReferencedEvent = 'CROSS_REFERENCED_EVENT',\n  /** Represents a 'demilestoned' event on a given issue or pull request. */\n  DemilestonedEvent = 'DEMILESTONED_EVENT',\n  /** Represents a 'disconnected' event on a given issue or pull request. */\n  DisconnectedEvent = 'DISCONNECTED_EVENT',\n  /** Represents a comment on an Issue. */\n  IssueComment = 'ISSUE_COMMENT',\n  /** Represents a 'labeled' event on a given issue or pull request. */\n  LabeledEvent = 'LABELED_EVENT',\n  /** Represents a 'locked' event on a given issue or pull request. */\n  LockedEvent = 'LOCKED_EVENT',\n  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\n  MarkedAsDuplicateEvent = 'MARKED_AS_DUPLICATE_EVENT',\n  /** Represents a 'mentioned' event on a given issue or pull request. */\n  MentionedEvent = 'MENTIONED_EVENT',\n  /** Represents a 'milestoned' event on a given issue or pull request. */\n  MilestonedEvent = 'MILESTONED_EVENT',\n  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\n  MovedColumnsInProjectEvent = 'MOVED_COLUMNS_IN_PROJECT_EVENT',\n  /** Represents a 'pinned' event on a given issue or pull request. */\n  PinnedEvent = 'PINNED_EVENT',\n  /** Represents a 'referenced' event on a given `ReferencedSubject`. */\n  ReferencedEvent = 'REFERENCED_EVENT',\n  /** Represents a 'removed_from_project' event on a given issue or pull request. */\n  RemovedFromProjectEvent = 'REMOVED_FROM_PROJECT_EVENT',\n  /** Represents a 'renamed' event on a given issue or pull request */\n  RenamedTitleEvent = 'RENAMED_TITLE_EVENT',\n  /** Represents a 'reopened' event on any `Closable`. */\n  ReopenedEvent = 'REOPENED_EVENT',\n  /** Represents a 'subscribed' event on a given `Subscribable`. */\n  SubscribedEvent = 'SUBSCRIBED_EVENT',\n  /** Represents a 'transferred' event on a given issue or pull request. */\n  TransferredEvent = 'TRANSFERRED_EVENT',\n  /** Represents an 'unassigned' event on any assignable object. */\n  UnassignedEvent = 'UNASSIGNED_EVENT',\n  /** Represents an 'unlabeled' event on a given issue or pull request. */\n  UnlabeledEvent = 'UNLABELED_EVENT',\n  /** Represents an 'unlocked' event on a given issue or pull request. */\n  UnlockedEvent = 'UNLOCKED_EVENT',\n  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\n  UnmarkedAsDuplicateEvent = 'UNMARKED_AS_DUPLICATE_EVENT',\n  /** Represents an 'unpinned' event on a given issue or pull request. */\n  UnpinnedEvent = 'UNPINNED_EVENT',\n  /** Represents an 'unsubscribed' event on a given `Subscribable`. */\n  UnsubscribedEvent = 'UNSUBSCRIBED_EVENT',\n  /** Represents a 'user_blocked' event on a given user. */\n  UserBlockedEvent = 'USER_BLOCKED_EVENT'\n}\n\n/** Represents a user signing up for a GitHub account. */\nexport type JoinedGitHubContribution = Contribution & {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars['Boolean']['output'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime']['output'];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI']['output'];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type Label = Node & {\n  /** Identifies the label color. */\n  color: Scalars['String']['output'];\n  /** Identifies the date and time when the label was created. */\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A brief description of this label. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the Label object */\n  id: Scalars['ID']['output'];\n  /** Indicates whether or not this is a default label. */\n  isDefault: Scalars['Boolean']['output'];\n  /** A list of issues associated with this label. */\n  issues: IssueConnection;\n  /** Identifies the label name. */\n  name: Scalars['String']['output'];\n  /** A list of pull requests associated with this label. */\n  pullRequests: PullRequestConnection;\n  /** The repository associated with this label. */\n  repository: Repository;\n  /** The HTTP path for this label. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the label was last updated. */\n  updatedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The HTTP URL for this label. */\n  url: Scalars['URI']['output'];\n};\n\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type LabelIssuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n\n/** A label for categorizing Issues, Pull Requests, Milestones, or Discussions with a given Repository. */\nexport type LabelPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  baseRefName?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  headRefName?: InputMaybe<Scalars['String']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The connection type for Label. */\nexport type LabelConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LabelEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Label>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type LabelEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Label>;\n};\n\n/** Ways in which lists of labels can be ordered upon return. */\nexport type LabelOrder = {\n  /** The direction in which to order labels by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order labels by. */\n  field: LabelOrderField;\n};\n\n/** Properties by which label connections can be ordered. */\nexport enum LabelOrderField {\n  /** Order labels by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order labels by name  */\n  Name = 'NAME'\n}\n\n/** An object that can have labels assigned to it. */\nexport type Labelable = {\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n};\n\n\n/** An object that can have labels assigned to it. */\nexport type LabelableLabelsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n/** Represents a 'labeled' event on a given issue or pull request. */\nexport type LabeledEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the LabeledEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the label associated with the 'labeled' event. */\n  label: Label;\n  /** Identifies the `Labelable` associated with the event. */\n  labelable: Labelable;\n};\n\n/** Represents a given language found in repositories. */\nexport type Language = Node & {\n  /** The color defined for the current language. */\n  color?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the Language object */\n  id: Scalars['ID']['output'];\n  /** The name of the current language. */\n  name: Scalars['String']['output'];\n};\n\n/** A list of languages associated with the parent. */\nexport type LanguageConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LanguageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Language>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n  /** The total size in bytes of files written in that language. */\n  totalSize: Scalars['Int']['output'];\n};\n\n/** Represents the language of a repository. */\nexport type LanguageEdge = {\n  cursor: Scalars['String']['output'];\n  node: Language;\n  /** The number of bytes of code written in the language. */\n  size: Scalars['Int']['output'];\n};\n\n/** Ordering options for language connections. */\nexport type LanguageOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order languages by. */\n  field: LanguageOrderField;\n};\n\n/** Properties by which language connections can be ordered. */\nexport enum LanguageOrderField {\n  /** Order languages by the size of all files containing the language */\n  Size = 'SIZE'\n}\n\n/** A repository's open source license */\nexport type License = Node & {\n  /** The full text of the license */\n  body: Scalars['String']['output'];\n  /** The conditions set by the license */\n  conditions: Array<Maybe<LicenseRule>>;\n  /** A human-readable description of the license */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Whether the license should be featured */\n  featured: Scalars['Boolean']['output'];\n  /** Whether the license should be displayed in license pickers */\n  hidden: Scalars['Boolean']['output'];\n  /** The Node ID of the License object */\n  id: Scalars['ID']['output'];\n  /** Instructions on how to implement the license */\n  implementation?: Maybe<Scalars['String']['output']>;\n  /** The lowercased SPDX ID of the license */\n  key: Scalars['String']['output'];\n  /** The limitations set by the license */\n  limitations: Array<Maybe<LicenseRule>>;\n  /** The license full name specified by <https://spdx.org/licenses> */\n  name: Scalars['String']['output'];\n  /** Customary short name if applicable (e.g, GPLv3) */\n  nickname?: Maybe<Scalars['String']['output']>;\n  /** The permissions set by the license */\n  permissions: Array<Maybe<LicenseRule>>;\n  /** Whether the license is a pseudo-license placeholder (e.g., other, no-license) */\n  pseudoLicense: Scalars['Boolean']['output'];\n  /** Short identifier specified by <https://spdx.org/licenses> */\n  spdxId?: Maybe<Scalars['String']['output']>;\n  /** URL to the license on <https://choosealicense.com> */\n  url?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Describes a License's conditions, permissions, and limitations */\nexport type LicenseRule = {\n  /** A description of the rule */\n  description: Scalars['String']['output'];\n  /** The machine-readable rule key */\n  key: Scalars['String']['output'];\n  /** The human-readable rule label */\n  label: Scalars['String']['output'];\n};\n\n/** Autogenerated input type of LinkProjectV2ToRepository */\nexport type LinkProjectV2ToRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the project to link to the repository. */\n  projectId: Scalars['ID']['input'];\n  /** The ID of the repository to link to the project. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of LinkProjectV2ToRepository. */\nexport type LinkProjectV2ToRepositoryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The repository the project is linked to. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of LinkProjectV2ToTeam */\nexport type LinkProjectV2ToTeamInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the project to link to the team. */\n  projectId: Scalars['ID']['input'];\n  /** The ID of the team to link to the project. */\n  teamId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of LinkProjectV2ToTeam. */\nexport type LinkProjectV2ToTeamPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The team the project is linked to */\n  team?: Maybe<Team>;\n};\n\n/** Autogenerated input type of LinkRepositoryToProject */\nexport type LinkRepositoryToProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Project to link to a Repository */\n  projectId: Scalars['ID']['input'];\n  /** The ID of the Repository to link to a Project. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of LinkRepositoryToProject. */\nexport type LinkRepositoryToProjectPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The linked Project. */\n  project?: Maybe<Project>;\n  /** The linked Repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** A branch linked to an issue. */\nexport type LinkedBranch = Node & {\n  /** The Node ID of the LinkedBranch object */\n  id: Scalars['ID']['output'];\n  /** The branch's ref. */\n  ref?: Maybe<Ref>;\n};\n\n/** A list of branches linked to an issue. */\nexport type LinkedBranchConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<LinkedBranchEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<LinkedBranch>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type LinkedBranchEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<LinkedBranch>;\n};\n\n/** Autogenerated input type of LockLockable */\nexport type LockLockableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A reason for why the item will be locked. */\n  lockReason?: InputMaybe<LockReason>;\n  /** ID of the item to be locked. */\n  lockableId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of LockLockable. */\nexport type LockLockablePayload = {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The item that was locked. */\n  lockedRecord?: Maybe<Lockable>;\n};\n\n/** The possible reasons that an issue or pull request was locked. */\nexport enum LockReason {\n  /** The issue or pull request was locked because the conversation was off-topic. */\n  OffTopic = 'OFF_TOPIC',\n  /** The issue or pull request was locked because the conversation was resolved. */\n  Resolved = 'RESOLVED',\n  /** The issue or pull request was locked because the conversation was spam. */\n  Spam = 'SPAM',\n  /** The issue or pull request was locked because the conversation was too heated. */\n  TooHeated = 'TOO_HEATED'\n}\n\n/** An object that can be locked. */\nexport type Lockable = {\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** `true` if the object is locked */\n  locked: Scalars['Boolean']['output'];\n};\n\n/** Represents a 'locked' event on a given issue or pull request. */\nexport type LockedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the LockedEvent object */\n  id: Scalars['ID']['output'];\n  /** Reason that the conversation was locked (optional). */\n  lockReason?: Maybe<LockReason>;\n  /** Object that was locked. */\n  lockable: Lockable;\n};\n\n/** A placeholder user for attribution of imported data on GitHub. */\nexport type Mannequin = Actor & Node & UniformResourceLocatable & {\n  /** A URL pointing to the GitHub App's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** The user that has claimed the data attributed to this mannequin. */\n  claimant?: Maybe<User>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The mannequin's email on the source instance. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the Mannequin object */\n  id: Scalars['ID']['output'];\n  /** The username of the actor. */\n  login: Scalars['String']['output'];\n  /** The HTML path to this resource. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The URL to this resource. */\n  url: Scalars['URI']['output'];\n};\n\n\n/** A placeholder user for attribution of imported data on GitHub. */\nexport type MannequinAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A list of mannequins. */\nexport type MannequinConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MannequinEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Mannequin>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a mannequin. */\nexport type MannequinEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Mannequin>;\n};\n\n/** Ordering options for mannequins. */\nexport type MannequinOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order mannequins by. */\n  field: MannequinOrderField;\n};\n\n/** Properties by which mannequins can be ordered. */\nexport enum MannequinOrderField {\n  /** Order mannequins why when they were created. */\n  CreatedAt = 'CREATED_AT',\n  /** Order mannequins alphabetically by their source login. */\n  Login = 'LOGIN'\n}\n\n/** Autogenerated input type of MarkDiscussionCommentAsAnswer */\nexport type MarkDiscussionCommentAsAnswerInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion comment to mark as an answer. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MarkDiscussionCommentAsAnswer. */\nexport type MarkDiscussionCommentAsAnswerPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The discussion that includes the chosen comment. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of MarkFileAsViewed */\nexport type MarkFileAsViewedInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The path of the file to mark as viewed */\n  path: Scalars['String']['input'];\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MarkFileAsViewed. */\nexport type MarkFileAsViewedPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of MarkNotificationAsDone */\nexport type MarkNotificationAsDoneInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The NotificationThread id. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MarkNotificationAsDone. */\nexport type MarkNotificationAsDonePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']['output']>;\n  /** The user that the notification belongs to. */\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of MarkProjectV2AsTemplate */\nexport type MarkProjectV2AsTemplateInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Project to mark as a template. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MarkProjectV2AsTemplate. */\nexport type MarkProjectV2AsTemplatePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The project. */\n  projectV2?: Maybe<ProjectV2>;\n};\n\n/** Autogenerated input type of MarkPullRequestReadyForReview */\nexport type MarkPullRequestReadyForReviewInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the pull request to be marked as ready for review. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MarkPullRequestReadyForReview. */\nexport type MarkPullRequestReadyForReviewPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request that is ready for review. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\nexport type MarkedAsDuplicateEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** The authoritative issue or pull request which has been duplicated by another. */\n  canonical?: Maybe<IssueOrPullRequest>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The issue or pull request which has been marked as a duplicate of another. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n  /** The Node ID of the MarkedAsDuplicateEvent object */\n  id: Scalars['ID']['output'];\n  /** Canonical and duplicate belong to different repositories. */\n  isCrossRepository: Scalars['Boolean']['output'];\n};\n\n/** A public description of a Marketplace category. */\nexport type MarketplaceCategory = Node & {\n  /** The category's description. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The technical description of how apps listed in this category work with GitHub. */\n  howItWorks?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the MarketplaceCategory object */\n  id: Scalars['ID']['output'];\n  /** The category's name. */\n  name: Scalars['String']['output'];\n  /** How many Marketplace listings have this as their primary category. */\n  primaryListingCount: Scalars['Int']['output'];\n  /** The HTTP path for this Marketplace category. */\n  resourcePath: Scalars['URI']['output'];\n  /** How many Marketplace listings have this as their secondary category. */\n  secondaryListingCount: Scalars['Int']['output'];\n  /** The short name of the category used in its URL. */\n  slug: Scalars['String']['output'];\n  /** The HTTP URL for this Marketplace category. */\n  url: Scalars['URI']['output'];\n};\n\n/** A listing in the GitHub integration marketplace. */\nexport type MarketplaceListing = Node & {\n  /** The GitHub App this listing represents. */\n  app?: Maybe<App>;\n  /** URL to the listing owner's company site. */\n  companyUrl?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP path for configuring access to the listing's integration or OAuth app */\n  configurationResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for configuring access to the listing's integration or OAuth app */\n  configurationUrl: Scalars['URI']['output'];\n  /** URL to the listing's documentation. */\n  documentationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The listing's detailed description. */\n  extendedDescription?: Maybe<Scalars['String']['output']>;\n  /** The listing's detailed description rendered to HTML. */\n  extendedDescriptionHTML: Scalars['HTML']['output'];\n  /** The listing's introductory description. */\n  fullDescription: Scalars['String']['output'];\n  /** The listing's introductory description rendered to HTML. */\n  fullDescriptionHTML: Scalars['HTML']['output'];\n  /** Does this listing have any plans with a free trial? */\n  hasPublishedFreeTrialPlans: Scalars['Boolean']['output'];\n  /** Does this listing have a terms of service link? */\n  hasTermsOfService: Scalars['Boolean']['output'];\n  /** Whether the creator of the app is a verified org */\n  hasVerifiedOwner: Scalars['Boolean']['output'];\n  /** A technical description of how this app works with GitHub. */\n  howItWorks?: Maybe<Scalars['String']['output']>;\n  /** The listing's technical description rendered to HTML. */\n  howItWorksHTML: Scalars['HTML']['output'];\n  /** The Node ID of the MarketplaceListing object */\n  id: Scalars['ID']['output'];\n  /** URL to install the product to the viewer's account or organization. */\n  installationUrl?: Maybe<Scalars['URI']['output']>;\n  /** Whether this listing's app has been installed for the current viewer */\n  installedForViewer: Scalars['Boolean']['output'];\n  /** Whether this listing has been removed from the Marketplace. */\n  isArchived: Scalars['Boolean']['output'];\n  /**\n   * Whether this listing is still an editable draft that has not been submitted\n   * for review and is not publicly visible in the Marketplace.\n   */\n  isDraft: Scalars['Boolean']['output'];\n  /** Whether the product this listing represents is available as part of a paid plan. */\n  isPaid: Scalars['Boolean']['output'];\n  /** Whether this listing has been approved for display in the Marketplace. */\n  isPublic: Scalars['Boolean']['output'];\n  /** Whether this listing has been rejected by GitHub for display in the Marketplace. */\n  isRejected: Scalars['Boolean']['output'];\n  /** Whether this listing has been approved for unverified display in the Marketplace. */\n  isUnverified: Scalars['Boolean']['output'];\n  /** Whether this draft listing has been submitted for review for approval to be unverified in the Marketplace. */\n  isUnverifiedPending: Scalars['Boolean']['output'];\n  /** Whether this draft listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */\n  isVerificationPendingFromDraft: Scalars['Boolean']['output'];\n  /** Whether this unverified listing has been submitted for review from GitHub for approval to be verified in the Marketplace. */\n  isVerificationPendingFromUnverified: Scalars['Boolean']['output'];\n  /** Whether this listing has been approved for verified display in the Marketplace. */\n  isVerified: Scalars['Boolean']['output'];\n  /** The hex color code, without the leading '#', for the logo background. */\n  logoBackgroundColor: Scalars['String']['output'];\n  /** URL for the listing's logo image. */\n  logoUrl?: Maybe<Scalars['URI']['output']>;\n  /** The listing's full name. */\n  name: Scalars['String']['output'];\n  /** The listing's very short description without a trailing period or ampersands. */\n  normalizedShortDescription: Scalars['String']['output'];\n  /** URL to the listing's detailed pricing. */\n  pricingUrl?: Maybe<Scalars['URI']['output']>;\n  /** The category that best describes the listing. */\n  primaryCategory: MarketplaceCategory;\n  /** URL to the listing's privacy policy, may return an empty string for listings that do not require a privacy policy URL. */\n  privacyPolicyUrl: Scalars['URI']['output'];\n  /** The HTTP path for the Marketplace listing. */\n  resourcePath: Scalars['URI']['output'];\n  /** The URLs for the listing's screenshots. */\n  screenshotUrls: Array<Maybe<Scalars['String']['output']>>;\n  /** An alternate category that describes the listing. */\n  secondaryCategory?: Maybe<MarketplaceCategory>;\n  /** The listing's very short description. */\n  shortDescription: Scalars['String']['output'];\n  /** The short name of the listing used in its URL. */\n  slug: Scalars['String']['output'];\n  /** URL to the listing's status page. */\n  statusUrl?: Maybe<Scalars['URI']['output']>;\n  /** An email address for support for this listing's app. */\n  supportEmail?: Maybe<Scalars['String']['output']>;\n  /**\n   * Either a URL or an email address for support for this listing's app, may\n   * return an empty string for listings that do not require a support URL.\n   */\n  supportUrl: Scalars['URI']['output'];\n  /** URL to the listing's terms of service. */\n  termsOfServiceUrl?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the Marketplace listing. */\n  url: Scalars['URI']['output'];\n  /** Can the current viewer add plans for this Marketplace listing. */\n  viewerCanAddPlans: Scalars['Boolean']['output'];\n  /** Can the current viewer approve this Marketplace listing. */\n  viewerCanApprove: Scalars['Boolean']['output'];\n  /** Can the current viewer delist this Marketplace listing. */\n  viewerCanDelist: Scalars['Boolean']['output'];\n  /** Can the current viewer edit this Marketplace listing. */\n  viewerCanEdit: Scalars['Boolean']['output'];\n  /**\n   * Can the current viewer edit the primary and secondary category of this\n   * Marketplace listing.\n   */\n  viewerCanEditCategories: Scalars['Boolean']['output'];\n  /** Can the current viewer edit the plans for this Marketplace listing. */\n  viewerCanEditPlans: Scalars['Boolean']['output'];\n  /**\n   * Can the current viewer return this Marketplace listing to draft state\n   * so it becomes editable again.\n   */\n  viewerCanRedraft: Scalars['Boolean']['output'];\n  /**\n   * Can the current viewer reject this Marketplace listing by returning it to\n   * an editable draft state or rejecting it entirely.\n   */\n  viewerCanReject: Scalars['Boolean']['output'];\n  /**\n   * Can the current viewer request this listing be reviewed for display in\n   * the Marketplace as verified.\n   */\n  viewerCanRequestApproval: Scalars['Boolean']['output'];\n  /** Indicates whether the current user has an active subscription to this Marketplace listing. */\n  viewerHasPurchased: Scalars['Boolean']['output'];\n  /**\n   * Indicates if the current user has purchased a subscription to this Marketplace listing\n   * for all of the organizations the user owns.\n   */\n  viewerHasPurchasedForAllOrganizations: Scalars['Boolean']['output'];\n  /** Does the current viewer role allow them to administer this Marketplace listing. */\n  viewerIsListingAdmin: Scalars['Boolean']['output'];\n};\n\n\n/** A listing in the GitHub integration marketplace. */\nexport type MarketplaceListingLogoUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Look up Marketplace Listings */\nexport type MarketplaceListingConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MarketplaceListingEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MarketplaceListing>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type MarketplaceListingEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MarketplaceListing>;\n};\n\n/**\n * Prevent commits that include file paths that exceed a specified character limit\n * from being pushed to the commit graph. NOTE: This rule is in beta and subject to change\n */\nexport type MaxFilePathLengthParameters = {\n  /** The maximum amount of characters allowed in file paths */\n  maxFilePathLength: Scalars['Int']['output'];\n};\n\n/**\n * Prevent commits that include file paths that exceed a specified character limit\n * from being pushed to the commit graph. NOTE: This rule is in beta and subject to change\n */\nexport type MaxFilePathLengthParametersInput = {\n  /** The maximum amount of characters allowed in file paths */\n  maxFilePathLength: Scalars['Int']['input'];\n};\n\n/**\n * Prevent commits that exceed a specified file size limit from being pushed to the\n * commit. NOTE: This rule is in beta and subject to change\n */\nexport type MaxFileSizeParameters = {\n  /** The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS). */\n  maxFileSize: Scalars['Int']['output'];\n};\n\n/**\n * Prevent commits that exceed a specified file size limit from being pushed to the\n * commit. NOTE: This rule is in beta and subject to change\n */\nexport type MaxFileSizeParametersInput = {\n  /** The maximum file size allowed in megabytes. This limit does not apply to Git Large File Storage (Git LFS). */\n  maxFileSize: Scalars['Int']['input'];\n};\n\n/** Represents a member feature request notification */\nexport type MemberFeatureRequestNotification = Node & {\n  /** Represents member feature request body containing entity name and the number of feature requests */\n  body: Scalars['String']['output'];\n  /** The Node ID of the MemberFeatureRequestNotification object */\n  id: Scalars['ID']['output'];\n  /** Represents member feature request notification title */\n  title: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** Entities that have members who can set status messages. */\nexport type MemberStatusable = {\n  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n  memberStatuses: UserStatusConnection;\n};\n\n\n/** Entities that have members who can set status messages. */\nexport type MemberStatusableMemberStatusesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n/** Audit log entry for a members_can_delete_repos.clear event. */\nexport type MembersCanDeleteReposClearAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the MembersCanDeleteReposClearAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a members_can_delete_repos.disable event. */\nexport type MembersCanDeleteReposDisableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the MembersCanDeleteReposDisableAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a members_can_delete_repos.enable event. */\nexport type MembersCanDeleteReposEnableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the MembersCanDeleteReposEnableAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Represents a 'mentioned' event on a given issue or pull request. */\nexport type MentionedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the MentionedEvent object */\n  id: Scalars['ID']['output'];\n};\n\n/** Autogenerated input type of MergeBranch */\nexport type MergeBranchInput = {\n  /** The email address to associate with this commit. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the base branch that the provided head will be merged into. */\n  base: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Message to use for the merge commit. If omitted, a default will be used. */\n  commitMessage?: InputMaybe<Scalars['String']['input']>;\n  /** The head to merge into the base branch. This can be a branch name or a commit GitObjectID. */\n  head: Scalars['String']['input'];\n  /** The Node ID of the Repository containing the base branch that will be modified. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MergeBranch. */\nexport type MergeBranchPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The resulting merge Commit. */\n  mergeCommit?: Maybe<Commit>;\n};\n\n/** The possible default commit messages for merges. */\nexport enum MergeCommitMessage {\n  /** Default to a blank commit message. */\n  Blank = 'BLANK',\n  /** Default to the pull request's body. */\n  PrBody = 'PR_BODY',\n  /** Default to the pull request's title. */\n  PrTitle = 'PR_TITLE'\n}\n\n/** The possible default commit titles for merges. */\nexport enum MergeCommitTitle {\n  /** Default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name). */\n  MergeMessage = 'MERGE_MESSAGE',\n  /** Default to the pull request's title. */\n  PrTitle = 'PR_TITLE'\n}\n\n/** Autogenerated input type of MergePullRequest */\nexport type MergePullRequestInput = {\n  /** The email address to associate with this merge. */\n  authorEmail?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Commit body to use for the merge commit; if omitted, a default message will be used */\n  commitBody?: InputMaybe<Scalars['String']['input']>;\n  /** Commit headline to use for the merge commit; if omitted, a default message will be used. */\n  commitHeadline?: InputMaybe<Scalars['String']['input']>;\n  /** OID that the pull request head ref must match to allow merge; if omitted, no check is performed. */\n  expectedHeadOid?: InputMaybe<Scalars['GitObjectID']['input']>;\n  /** The merge method to use. If omitted, defaults to 'MERGE' */\n  mergeMethod?: InputMaybe<PullRequestMergeMethod>;\n  /** ID of the pull request to be merged. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MergePullRequest. */\nexport type MergePullRequestPayload = {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request that was merged. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** The queue of pull request entries to be merged into a protected branch in a repository. */\nexport type MergeQueue = Node & {\n  /** The configuration for this merge queue */\n  configuration?: Maybe<MergeQueueConfiguration>;\n  /** The entries in the queue */\n  entries?: Maybe<MergeQueueEntryConnection>;\n  /** The Node ID of the MergeQueue object */\n  id: Scalars['ID']['output'];\n  /** The estimated time in seconds until a newly added entry would be merged */\n  nextEntryEstimatedTimeToMerge?: Maybe<Scalars['Int']['output']>;\n  /** The repository this merge queue belongs to */\n  repository?: Maybe<Repository>;\n  /** The HTTP path for this merge queue */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this merge queue */\n  url: Scalars['URI']['output'];\n};\n\n\n/** The queue of pull request entries to be merged into a protected branch in a repository. */\nexport type MergeQueueEntriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Configuration for a MergeQueue */\nexport type MergeQueueConfiguration = {\n  /** The amount of time in minutes to wait for a check response before considering it a failure. */\n  checkResponseTimeout?: Maybe<Scalars['Int']['output']>;\n  /** The maximum number of entries to build at once. */\n  maximumEntriesToBuild?: Maybe<Scalars['Int']['output']>;\n  /** The maximum number of entries to merge at once. */\n  maximumEntriesToMerge?: Maybe<Scalars['Int']['output']>;\n  /** The merge method to use for this queue. */\n  mergeMethod?: Maybe<PullRequestMergeMethod>;\n  /** The strategy to use when merging entries. */\n  mergingStrategy?: Maybe<MergeQueueMergingStrategy>;\n  /** The minimum number of entries required to merge at once. */\n  minimumEntriesToMerge?: Maybe<Scalars['Int']['output']>;\n  /**\n   * The amount of time in minutes to wait before ignoring the minumum number of\n   * entries in the queue requirement and merging a collection of entries\n   */\n  minimumEntriesToMergeWaitTime?: Maybe<Scalars['Int']['output']>;\n};\n\n/** Entries in a MergeQueue */\nexport type MergeQueueEntry = Node & {\n  /** The base commit for this entry */\n  baseCommit?: Maybe<Commit>;\n  /** The date and time this entry was added to the merge queue */\n  enqueuedAt: Scalars['DateTime']['output'];\n  /** The actor that enqueued this entry */\n  enqueuer: Actor;\n  /** The estimated time in seconds until this entry will be merged */\n  estimatedTimeToMerge?: Maybe<Scalars['Int']['output']>;\n  /** The head commit for this entry */\n  headCommit?: Maybe<Commit>;\n  /** The Node ID of the MergeQueueEntry object */\n  id: Scalars['ID']['output'];\n  /** Whether this pull request should jump the queue */\n  jump: Scalars['Boolean']['output'];\n  /** The merge queue that this entry belongs to */\n  mergeQueue?: Maybe<MergeQueue>;\n  /** The position of this entry in the queue */\n  position: Scalars['Int']['output'];\n  /** The pull request that will be added to a merge group */\n  pullRequest?: Maybe<PullRequest>;\n  /** Does this pull request need to be deployed on its own */\n  solo: Scalars['Boolean']['output'];\n  /** The state of this entry in the queue */\n  state: MergeQueueEntryState;\n};\n\n/** The connection type for MergeQueueEntry. */\nexport type MergeQueueEntryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MergeQueueEntryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MergeQueueEntry>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type MergeQueueEntryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MergeQueueEntry>;\n};\n\n/** The possible states for a merge queue entry. */\nexport enum MergeQueueEntryState {\n  /** The entry is currently waiting for checks to pass. */\n  AwaitingChecks = 'AWAITING_CHECKS',\n  /** The entry is currently locked. */\n  Locked = 'LOCKED',\n  /** The entry is currently mergeable. */\n  Mergeable = 'MERGEABLE',\n  /** The entry is currently queued. */\n  Queued = 'QUEUED',\n  /** The entry is currently unmergeable. */\n  Unmergeable = 'UNMERGEABLE'\n}\n\n/** The possible merging strategies for a merge queue. */\nexport enum MergeQueueMergingStrategy {\n  /** Entries only allowed to merge if they are passing. */\n  Allgreen = 'ALLGREEN',\n  /** Failing Entires are allowed to merge if they are with a passing entry. */\n  Headgreen = 'HEADGREEN'\n}\n\n/** Detailed status information about a pull request merge. */\nexport enum MergeStateStatus {\n  /** The head ref is out of date. */\n  Behind = 'BEHIND',\n  /** The merge is blocked. */\n  Blocked = 'BLOCKED',\n  /** Mergeable and passing commit status. */\n  Clean = 'CLEAN',\n  /** The merge commit cannot be cleanly created. */\n  Dirty = 'DIRTY',\n  /**\n   * The merge is blocked due to the pull request being a draft.\n   * @deprecated DRAFT state will be removed from this enum and `isDraft` should be used instead Use PullRequest.isDraft instead. Removal on 2021-01-01 UTC.\n   */\n  Draft = 'DRAFT',\n  /** Mergeable with passing commit status and pre-receive hooks. */\n  HasHooks = 'HAS_HOOKS',\n  /** The state cannot currently be determined. */\n  Unknown = 'UNKNOWN',\n  /** Mergeable with non-passing commit status. */\n  Unstable = 'UNSTABLE'\n}\n\n/** Whether or not a PullRequest can be merged. */\nexport enum MergeableState {\n  /** The pull request cannot be merged due to merge conflicts. */\n  Conflicting = 'CONFLICTING',\n  /** The pull request can be merged. */\n  Mergeable = 'MERGEABLE',\n  /** The mergeability of the pull request is still being calculated. */\n  Unknown = 'UNKNOWN'\n}\n\n/** Represents a 'merged' event on a given pull request. */\nexport type MergedEvent = Node & UniformResourceLocatable & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the commit associated with the `merge` event. */\n  commit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the MergedEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the Ref associated with the `merge` event. */\n  mergeRef?: Maybe<Ref>;\n  /** Identifies the name of the Ref associated with the `merge` event. */\n  mergeRefName: Scalars['String']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this merged event. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this merged event. */\n  url: Scalars['URI']['output'];\n};\n\n/** Represents a GitHub Enterprise Importer (GEI) migration. */\nexport type Migration = {\n  /** The migration flag to continue on error. */\n  continueOnError: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['String']['output']>;\n  /** The reason the migration failed. */\n  failureReason?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the Migration object */\n  id: Scalars['ID']['output'];\n  /** The URL for the migration log (expires 1 day after migration completes). */\n  migrationLogUrl?: Maybe<Scalars['URI']['output']>;\n  /** The migration source. */\n  migrationSource: MigrationSource;\n  /** The target repository name. */\n  repositoryName: Scalars['String']['output'];\n  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */\n  sourceUrl: Scalars['URI']['output'];\n  /** The migration state. */\n  state: MigrationState;\n  /**\n   * The number of warnings encountered for this migration. To review the warnings,\n   * check the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).\n   */\n  warningsCount: Scalars['Int']['output'];\n};\n\n/** A GitHub Enterprise Importer (GEI) migration source. */\nexport type MigrationSource = Node & {\n  /** The Node ID of the MigrationSource object */\n  id: Scalars['ID']['output'];\n  /** The migration source name. */\n  name: Scalars['String']['output'];\n  /** The migration source type. */\n  type: MigrationSourceType;\n  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */\n  url: Scalars['URI']['output'];\n};\n\n/** Represents the different GitHub Enterprise Importer (GEI) migration sources. */\nexport enum MigrationSourceType {\n  /** An Azure DevOps migration source. */\n  AzureDevops = 'AZURE_DEVOPS',\n  /** A Bitbucket Server migration source. */\n  BitbucketServer = 'BITBUCKET_SERVER',\n  /** A GitHub Migration API source. */\n  GithubArchive = 'GITHUB_ARCHIVE'\n}\n\n/** The GitHub Enterprise Importer (GEI) migration state. */\nexport enum MigrationState {\n  /** The migration has failed. */\n  Failed = 'FAILED',\n  /** The migration has invalid credentials. */\n  FailedValidation = 'FAILED_VALIDATION',\n  /** The migration is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The migration has not started. */\n  NotStarted = 'NOT_STARTED',\n  /** The migration needs to have its credentials validated. */\n  PendingValidation = 'PENDING_VALIDATION',\n  /** The migration has been queued. */\n  Queued = 'QUEUED',\n  /** The migration has succeeded. */\n  Succeeded = 'SUCCEEDED'\n}\n\n/** Represents a Milestone object on a given repository. */\nexport type Milestone = Closable & Node & UniformResourceLocatable & {\n  /** Indicates if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the actor who created the milestone. */\n  creator?: Maybe<Actor>;\n  /** Identifies the description of the milestone. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Identifies the due date of the milestone. */\n  dueOn?: Maybe<Scalars['DateTime']['output']>;\n  /** The Node ID of the Milestone object */\n  id: Scalars['ID']['output'];\n  /** A list of issues associated with the milestone. */\n  issues: IssueConnection;\n  /** Identifies the number of the milestone. */\n  number: Scalars['Int']['output'];\n  /** Identifies the percentage complete for the milestone */\n  progressPercentage: Scalars['Float']['output'];\n  /** A list of pull requests associated with the milestone. */\n  pullRequests: PullRequestConnection;\n  /** The repository associated with this milestone. */\n  repository: Repository;\n  /** The HTTP path for this milestone */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the state of the milestone. */\n  state: MilestoneState;\n  /** Identifies the title of the milestone. */\n  title: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this milestone */\n  url: Scalars['URI']['output'];\n  /** Indicates if the object can be closed by the viewer. */\n  viewerCanClose: Scalars['Boolean']['output'];\n  /** Indicates if the object can be reopened by the viewer. */\n  viewerCanReopen: Scalars['Boolean']['output'];\n};\n\n\n/** Represents a Milestone object on a given repository. */\nexport type MilestoneIssuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n\n/** Represents a Milestone object on a given repository. */\nexport type MilestonePullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  baseRefName?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  headRefName?: InputMaybe<Scalars['String']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n/** The connection type for Milestone. */\nexport type MilestoneConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MilestoneEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Milestone>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type MilestoneEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Milestone>;\n};\n\n/** Types that can be inside a Milestone. */\nexport type MilestoneItem = Issue | PullRequest;\n\n/** Ordering options for milestone connections. */\nexport type MilestoneOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order milestones by. */\n  field: MilestoneOrderField;\n};\n\n/** Properties by which milestone connections can be ordered. */\nexport enum MilestoneOrderField {\n  /** Order milestones by when they were created. */\n  CreatedAt = 'CREATED_AT',\n  /** Order milestones by when they are due. */\n  DueDate = 'DUE_DATE',\n  /** Order milestones by their number. */\n  Number = 'NUMBER',\n  /** Order milestones by when they were last updated. */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The possible states of a milestone. */\nexport enum MilestoneState {\n  /** A milestone that has been closed. */\n  Closed = 'CLOSED',\n  /** A milestone that is still open. */\n  Open = 'OPEN'\n}\n\n/** Represents a 'milestoned' event on a given issue or pull request. */\nexport type MilestonedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the MilestonedEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the milestone title associated with the 'milestoned' event. */\n  milestoneTitle: Scalars['String']['output'];\n  /** Object referenced by event. */\n  subject: MilestoneItem;\n};\n\n/** Entities that can be minimized. */\nexport type Minimizable = {\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean']['output'];\n  /**\n   * Returns why the comment was minimized. One of `abuse`, `off-topic`,\n   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n   * formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n   */\n  minimizedReason?: Maybe<Scalars['String']['output']>;\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean']['output'];\n};\n\n/** Autogenerated input type of MinimizeComment */\nexport type MinimizeCommentInput = {\n  /** The classification of comment */\n  classifier: ReportedContentClassifiers;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MinimizeComment. */\nexport type MinimizeCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The comment that was minimized. */\n  minimizedComment?: Maybe<Minimizable>;\n};\n\n/** Autogenerated input type of MoveProjectCard */\nexport type MoveProjectCardInput = {\n  /** Place the new card after the card with this id. Pass null to place it at the top. */\n  afterCardId?: InputMaybe<Scalars['ID']['input']>;\n  /** The id of the card to move. */\n  cardId: Scalars['ID']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the column to move it into. */\n  columnId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MoveProjectCard. */\nexport type MoveProjectCardPayload = {\n  /** The new edge of the moved card. */\n  cardEdge?: Maybe<ProjectCardEdge>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of MoveProjectColumn */\nexport type MoveProjectColumnInput = {\n  /** Place the new column after the column with this id. Pass null to place it at the front. */\n  afterColumnId?: InputMaybe<Scalars['ID']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The id of the column to move. */\n  columnId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of MoveProjectColumn. */\nexport type MoveProjectColumnPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new edge of the moved column. */\n  columnEdge?: Maybe<ProjectColumnEdge>;\n};\n\n/** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\nexport type MovedColumnsInProjectEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the MovedColumnsInProjectEvent object */\n  id: Scalars['ID']['output'];\n  /** Column name the issue or pull request was moved from. */\n  previousProjectColumnName: Scalars['String']['output'];\n  /** Project referenced by event. */\n  project?: Maybe<Project>;\n  /** Project card referenced by this project event. */\n  projectCard?: Maybe<ProjectCard>;\n  /** Column name the issue or pull request was moved to. */\n  projectColumnName: Scalars['String']['output'];\n};\n\n/** The root query for implementing GraphQL mutations. */\nexport type Mutation = {\n  /** Clear all of a customer's queued migrations */\n  abortQueuedMigrations?: Maybe<AbortQueuedMigrationsPayload>;\n  /** Abort a repository migration queued or in progress. */\n  abortRepositoryMigration?: Maybe<AbortRepositoryMigrationPayload>;\n  /** Accepts a pending invitation for a user to become an administrator of an enterprise. */\n  acceptEnterpriseAdministratorInvitation?: Maybe<AcceptEnterpriseAdministratorInvitationPayload>;\n  /** Accepts a pending invitation for a user to become an unaffiliated member of an enterprise. */\n  acceptEnterpriseMemberInvitation?: Maybe<AcceptEnterpriseMemberInvitationPayload>;\n  /** Applies a suggested topic to the repository. */\n  acceptTopicSuggestion?: Maybe<AcceptTopicSuggestionPayload>;\n  /** Adds assignees to an assignable object. */\n  addAssigneesToAssignable?: Maybe<AddAssigneesToAssignablePayload>;\n  /** Adds a comment to an Issue or Pull Request. */\n  addComment?: Maybe<AddCommentPayload>;\n  /** Adds a comment to a Discussion, possibly as a reply to another comment. */\n  addDiscussionComment?: Maybe<AddDiscussionCommentPayload>;\n  /** Vote for an option in a discussion poll. */\n  addDiscussionPollVote?: Maybe<AddDiscussionPollVotePayload>;\n  /** Adds enterprise members to an organization within the enterprise. */\n  addEnterpriseOrganizationMember?: Maybe<AddEnterpriseOrganizationMemberPayload>;\n  /** Adds a support entitlement to an enterprise member. */\n  addEnterpriseSupportEntitlement?: Maybe<AddEnterpriseSupportEntitlementPayload>;\n  /** Adds labels to a labelable object. */\n  addLabelsToLabelable?: Maybe<AddLabelsToLabelablePayload>;\n  /** Adds a card to a ProjectColumn. Either `contentId` or `note` must be provided but **not** both. */\n  addProjectCard?: Maybe<AddProjectCardPayload>;\n  /** Adds a column to a Project. */\n  addProjectColumn?: Maybe<AddProjectColumnPayload>;\n  /** Creates a new draft issue and add it to a Project. */\n  addProjectV2DraftIssue?: Maybe<AddProjectV2DraftIssuePayload>;\n  /** Links an existing content instance to a Project. */\n  addProjectV2ItemById?: Maybe<AddProjectV2ItemByIdPayload>;\n  /** Adds a review to a Pull Request. */\n  addPullRequestReview?: Maybe<AddPullRequestReviewPayload>;\n  /** Adds a comment to a review. */\n  addPullRequestReviewComment?: Maybe<AddPullRequestReviewCommentPayload>;\n  /** Adds a new thread to a pending Pull Request Review. */\n  addPullRequestReviewThread?: Maybe<AddPullRequestReviewThreadPayload>;\n  /** Adds a reply to an existing Pull Request Review Thread. */\n  addPullRequestReviewThreadReply?: Maybe<AddPullRequestReviewThreadReplyPayload>;\n  /** Adds a reaction to a subject. */\n  addReaction?: Maybe<AddReactionPayload>;\n  /** Adds a star to a Starrable. */\n  addStar?: Maybe<AddStarPayload>;\n  /** Add an upvote to a discussion or discussion comment. */\n  addUpvote?: Maybe<AddUpvotePayload>;\n  /** Adds a verifiable domain to an owning account. */\n  addVerifiableDomain?: Maybe<AddVerifiableDomainPayload>;\n  /** Approve all pending deployments under one or more environments */\n  approveDeployments?: Maybe<ApproveDeploymentsPayload>;\n  /** Approve a verifiable domain for notification delivery. */\n  approveVerifiableDomain?: Maybe<ApproveVerifiableDomainPayload>;\n  /** Archives a ProjectV2Item */\n  archiveProjectV2Item?: Maybe<ArchiveProjectV2ItemPayload>;\n  /** Marks a repository as archived. */\n  archiveRepository?: Maybe<ArchiveRepositoryPayload>;\n  /** Cancels a pending invitation for an administrator to join an enterprise. */\n  cancelEnterpriseAdminInvitation?: Maybe<CancelEnterpriseAdminInvitationPayload>;\n  /** Cancels a pending invitation for an unaffiliated member to join an enterprise. */\n  cancelEnterpriseMemberInvitation?: Maybe<CancelEnterpriseMemberInvitationPayload>;\n  /** Cancel an active sponsorship. */\n  cancelSponsorship?: Maybe<CancelSponsorshipPayload>;\n  /** Update your status on GitHub. */\n  changeUserStatus?: Maybe<ChangeUserStatusPayload>;\n  /** Clears all labels from a labelable object. */\n  clearLabelsFromLabelable?: Maybe<ClearLabelsFromLabelablePayload>;\n  /**\n   * This mutation clears the value of a field for an item in a Project. Currently\n   * only text, number, date, assignees, labels, single-select, iteration and\n   * milestone fields are supported.\n   */\n  clearProjectV2ItemFieldValue?: Maybe<ClearProjectV2ItemFieldValuePayload>;\n  /** Creates a new project by cloning configuration from an existing project. */\n  cloneProject?: Maybe<CloneProjectPayload>;\n  /** Create a new repository with the same files and directory structure as a template repository. */\n  cloneTemplateRepository?: Maybe<CloneTemplateRepositoryPayload>;\n  /** Close a discussion. */\n  closeDiscussion?: Maybe<CloseDiscussionPayload>;\n  /** Close an issue. */\n  closeIssue?: Maybe<CloseIssuePayload>;\n  /** Close a pull request. */\n  closePullRequest?: Maybe<ClosePullRequestPayload>;\n  /** Convert a project note card to one associated with a newly created issue. */\n  convertProjectCardNoteToIssue?: Maybe<ConvertProjectCardNoteToIssuePayload>;\n  /** Converts a projectV2 draft issue item to an issue. */\n  convertProjectV2DraftIssueItemToIssue?: Maybe<ConvertProjectV2DraftIssueItemToIssuePayload>;\n  /** Converts a pull request to draft */\n  convertPullRequestToDraft?: Maybe<ConvertPullRequestToDraftPayload>;\n  /** Copy a project. */\n  copyProjectV2?: Maybe<CopyProjectV2Payload>;\n  /** Invites a user to claim reattributable data */\n  createAttributionInvitation?: Maybe<CreateAttributionInvitationPayload>;\n  /** Create a new branch protection rule */\n  createBranchProtectionRule?: Maybe<CreateBranchProtectionRulePayload>;\n  /** Create a check run. */\n  createCheckRun?: Maybe<CreateCheckRunPayload>;\n  /** Create a check suite */\n  createCheckSuite?: Maybe<CreateCheckSuitePayload>;\n  /**\n   * Appends a commit to the given branch as the authenticated user.\n   *\n   * This mutation creates a commit whose parent is the HEAD of the provided\n   * branch and also updates that branch to point to the new commit.\n   * It can be thought of as similar to `git commit`.\n   *\n   * ### Locating a Branch\n   *\n   * Commits are appended to a `branch` of type `Ref`.\n   * This must refer to a git branch (i.e.  the fully qualified path must\n   * begin with `refs/heads/`, although including this prefix is optional.\n   *\n   * Callers may specify the `branch` to commit to either by its global node\n   * ID or by passing both of `repositoryNameWithOwner` and `refName`.  For\n   * more details see the documentation for `CommittableBranch`.\n   *\n   * ### Describing Changes\n   *\n   * `fileChanges` are specified as a `FilesChanges` object describing\n   * `FileAdditions` and `FileDeletions`.\n   *\n   * Please see the documentation for `FileChanges` for more information on\n   * how to use this argument to describe any set of file changes.\n   *\n   * ### Authorship\n   *\n   * Similar to the web commit interface, this mutation does not support\n   * specifying the author or committer of the commit and will not add\n   * support for this in the future.\n   *\n   * A commit created by a successful execution of this mutation will be\n   * authored by the owner of the credential which authenticates the API\n   * request.  The committer will be identical to that of commits authored\n   * using the web interface.\n   *\n   * If you need full control over author and committer information, please\n   * use the Git Database REST API instead.\n   *\n   * ### Commit Signing\n   *\n   * Commits made using this mutation are automatically signed by GitHub if\n   * supported and will be marked as verified in the user interface.\n   */\n  createCommitOnBranch?: Maybe<CreateCommitOnBranchPayload>;\n  /**\n   * Creates a new deployment event.\n   * https://docs.github.com/en/graphql/reference/mutations#createdeployment\n   */\n  createDeployment?: Maybe<CreateDeploymentPayload>;\n  /**\n   * Creates a deployment status.\n   * https://docs.github.com/en/graphql/reference/mutations#createdeploymentstatus\n   */\n  createDeploymentStatus?: Maybe<CreateDeploymentStatusPayload>;\n  /** Create a discussion. */\n  createDiscussion?: Maybe<CreateDiscussionPayload>;\n  /**\n   * Creates an organization as part of an enterprise account. A personal access\n   * token used to create an organization is implicitly permitted to update the\n   * organization it created, if the organization is part of an enterprise that has\n   * SAML enabled or uses Enterprise Managed Users. If the organization is not part\n   * of such an enterprise, and instead has SAML enabled for it individually, the\n   * token will then require SAML authorization to continue working against that organization.\n   */\n  createEnterpriseOrganization?: Maybe<CreateEnterpriseOrganizationPayload>;\n  /** Creates an environment or simply returns it if already exists. */\n  createEnvironment?: Maybe<CreateEnvironmentPayload>;\n  /** Creates a new IP allow list entry. */\n  createIpAllowListEntry?: Maybe<CreateIpAllowListEntryPayload>;\n  /** Creates a new issue. */\n  createIssue?: Maybe<CreateIssuePayload>;\n  /** Creates a new label. */\n  createLabel?: Maybe<CreateLabelPayload>;\n  /** Create a branch linked to an issue. */\n  createLinkedBranch?: Maybe<CreateLinkedBranchPayload>;\n  /** Creates a GitHub Enterprise Importer (GEI) migration source. */\n  createMigrationSource?: Maybe<CreateMigrationSourcePayload>;\n  /** Creates a new project. */\n  createProject?: Maybe<CreateProjectPayload>;\n  /** Creates a new project. */\n  createProjectV2?: Maybe<CreateProjectV2Payload>;\n  /** Create a new project field. */\n  createProjectV2Field?: Maybe<CreateProjectV2FieldPayload>;\n  /** Creates a status update within a Project. */\n  createProjectV2StatusUpdate?: Maybe<CreateProjectV2StatusUpdatePayload>;\n  /** Create a new pull request */\n  createPullRequest?: Maybe<CreatePullRequestPayload>;\n  /** Create a new Git Ref. */\n  createRef?: Maybe<CreateRefPayload>;\n  /** Create a new repository. */\n  createRepository?: Maybe<CreateRepositoryPayload>;\n  /** Create a repository ruleset */\n  createRepositoryRuleset?: Maybe<CreateRepositoryRulesetPayload>;\n  /** Create a GitHub Sponsors profile to allow others to sponsor you or your organization. */\n  createSponsorsListing?: Maybe<CreateSponsorsListingPayload>;\n  /** Create a new payment tier for your GitHub Sponsors profile. */\n  createSponsorsTier?: Maybe<CreateSponsorsTierPayload>;\n  /** Start a new sponsorship of a maintainer in GitHub Sponsors, or reactivate a past sponsorship. */\n  createSponsorship?: Maybe<CreateSponsorshipPayload>;\n  /**\n   * Make many sponsorships for different sponsorable users or organizations at\n   * once. Can only sponsor those who have a public GitHub Sponsors profile.\n   */\n  createSponsorships?: Maybe<CreateSponsorshipsPayload>;\n  /** Creates a new team discussion. */\n  createTeamDiscussion?: Maybe<CreateTeamDiscussionPayload>;\n  /** Creates a new team discussion comment. */\n  createTeamDiscussionComment?: Maybe<CreateTeamDiscussionCommentPayload>;\n  /** Creates a new user list. */\n  createUserList?: Maybe<CreateUserListPayload>;\n  /** Rejects a suggested topic for the repository. */\n  declineTopicSuggestion?: Maybe<DeclineTopicSuggestionPayload>;\n  /** Delete a branch protection rule */\n  deleteBranchProtectionRule?: Maybe<DeleteBranchProtectionRulePayload>;\n  /** Deletes a deployment. */\n  deleteDeployment?: Maybe<DeleteDeploymentPayload>;\n  /** Delete a discussion and all of its replies. */\n  deleteDiscussion?: Maybe<DeleteDiscussionPayload>;\n  /** Delete a discussion comment. If it has replies, wipe it instead. */\n  deleteDiscussionComment?: Maybe<DeleteDiscussionCommentPayload>;\n  /** Deletes an environment */\n  deleteEnvironment?: Maybe<DeleteEnvironmentPayload>;\n  /** Deletes an IP allow list entry. */\n  deleteIpAllowListEntry?: Maybe<DeleteIpAllowListEntryPayload>;\n  /** Deletes an Issue object. */\n  deleteIssue?: Maybe<DeleteIssuePayload>;\n  /** Deletes an IssueComment object. */\n  deleteIssueComment?: Maybe<DeleteIssueCommentPayload>;\n  /** Deletes a label. */\n  deleteLabel?: Maybe<DeleteLabelPayload>;\n  /** Unlink a branch from an issue. */\n  deleteLinkedBranch?: Maybe<DeleteLinkedBranchPayload>;\n  /** Delete a package version. */\n  deletePackageVersion?: Maybe<DeletePackageVersionPayload>;\n  /** Deletes a project. */\n  deleteProject?: Maybe<DeleteProjectPayload>;\n  /** Deletes a project card. */\n  deleteProjectCard?: Maybe<DeleteProjectCardPayload>;\n  /** Deletes a project column. */\n  deleteProjectColumn?: Maybe<DeleteProjectColumnPayload>;\n  /** Delete a project. */\n  deleteProjectV2?: Maybe<DeleteProjectV2Payload>;\n  /** Delete a project field. */\n  deleteProjectV2Field?: Maybe<DeleteProjectV2FieldPayload>;\n  /** Deletes an item from a Project. */\n  deleteProjectV2Item?: Maybe<DeleteProjectV2ItemPayload>;\n  /** Deletes a project status update. */\n  deleteProjectV2StatusUpdate?: Maybe<DeleteProjectV2StatusUpdatePayload>;\n  /** Deletes a project workflow. */\n  deleteProjectV2Workflow?: Maybe<DeleteProjectV2WorkflowPayload>;\n  /** Deletes a pull request review. */\n  deletePullRequestReview?: Maybe<DeletePullRequestReviewPayload>;\n  /** Deletes a pull request review comment. */\n  deletePullRequestReviewComment?: Maybe<DeletePullRequestReviewCommentPayload>;\n  /** Delete a Git Ref. */\n  deleteRef?: Maybe<DeleteRefPayload>;\n  /** Delete a repository ruleset */\n  deleteRepositoryRuleset?: Maybe<DeleteRepositoryRulesetPayload>;\n  /** Deletes a team discussion. */\n  deleteTeamDiscussion?: Maybe<DeleteTeamDiscussionPayload>;\n  /** Deletes a team discussion comment. */\n  deleteTeamDiscussionComment?: Maybe<DeleteTeamDiscussionCommentPayload>;\n  /** Deletes a user list. */\n  deleteUserList?: Maybe<DeleteUserListPayload>;\n  /** Deletes a verifiable domain. */\n  deleteVerifiableDomain?: Maybe<DeleteVerifiableDomainPayload>;\n  /** Remove a pull request from the merge queue. */\n  dequeuePullRequest?: Maybe<DequeuePullRequestPayload>;\n  /** Disable auto merge on the given pull request */\n  disablePullRequestAutoMerge?: Maybe<DisablePullRequestAutoMergePayload>;\n  /** Dismisses an approved or rejected pull request review. */\n  dismissPullRequestReview?: Maybe<DismissPullRequestReviewPayload>;\n  /** Dismisses the Dependabot alert. */\n  dismissRepositoryVulnerabilityAlert?: Maybe<DismissRepositoryVulnerabilityAlertPayload>;\n  /** Enable the default auto-merge on a pull request. */\n  enablePullRequestAutoMerge?: Maybe<EnablePullRequestAutoMergePayload>;\n  /** Add a pull request to the merge queue. */\n  enqueuePullRequest?: Maybe<EnqueuePullRequestPayload>;\n  /** Follow an organization. */\n  followOrganization?: Maybe<FollowOrganizationPayload>;\n  /** Follow a user. */\n  followUser?: Maybe<FollowUserPayload>;\n  /** Grant the migrator role to a user for all organizations under an enterprise account. */\n  grantEnterpriseOrganizationsMigratorRole?: Maybe<GrantEnterpriseOrganizationsMigratorRolePayload>;\n  /** Grant the migrator role to a user or a team. */\n  grantMigratorRole?: Maybe<GrantMigratorRolePayload>;\n  /** Creates a new project by importing columns and a list of issues/PRs. */\n  importProject?: Maybe<ImportProjectPayload>;\n  /** Invite someone to become an administrator of the enterprise. */\n  inviteEnterpriseAdmin?: Maybe<InviteEnterpriseAdminPayload>;\n  /** Invite someone to become an unaffiliated member of the enterprise. */\n  inviteEnterpriseMember?: Maybe<InviteEnterpriseMemberPayload>;\n  /** Links a project to a repository. */\n  linkProjectV2ToRepository?: Maybe<LinkProjectV2ToRepositoryPayload>;\n  /** Links a project to a team. */\n  linkProjectV2ToTeam?: Maybe<LinkProjectV2ToTeamPayload>;\n  /** Creates a repository link for a project. */\n  linkRepositoryToProject?: Maybe<LinkRepositoryToProjectPayload>;\n  /** Lock a lockable object */\n  lockLockable?: Maybe<LockLockablePayload>;\n  /** Mark a discussion comment as the chosen answer for discussions in an answerable category. */\n  markDiscussionCommentAsAnswer?: Maybe<MarkDiscussionCommentAsAnswerPayload>;\n  /** Mark a pull request file as viewed */\n  markFileAsViewed?: Maybe<MarkFileAsViewedPayload>;\n  /** Marks a notification as done */\n  markNotificationAsDone?: Maybe<MarkNotificationAsDonePayload>;\n  /** Mark a project as a template. Note that only projects which are owned by an Organization can be marked as a template. */\n  markProjectV2AsTemplate?: Maybe<MarkProjectV2AsTemplatePayload>;\n  /** Marks a pull request ready for review. */\n  markPullRequestReadyForReview?: Maybe<MarkPullRequestReadyForReviewPayload>;\n  /** Merge a head into a branch. */\n  mergeBranch?: Maybe<MergeBranchPayload>;\n  /** Merge a pull request. */\n  mergePullRequest?: Maybe<MergePullRequestPayload>;\n  /** Minimizes a comment on an Issue, Commit, Pull Request, or Gist */\n  minimizeComment?: Maybe<MinimizeCommentPayload>;\n  /** Moves a project card to another place. */\n  moveProjectCard?: Maybe<MoveProjectCardPayload>;\n  /** Moves a project column to another place. */\n  moveProjectColumn?: Maybe<MoveProjectColumnPayload>;\n  /** Pin an environment to a repository */\n  pinEnvironment?: Maybe<PinEnvironmentPayload>;\n  /** Pin an issue to a repository */\n  pinIssue?: Maybe<PinIssuePayload>;\n  /** Publish an existing sponsorship tier that is currently still a draft to a GitHub Sponsors profile. */\n  publishSponsorsTier?: Maybe<PublishSponsorsTierPayload>;\n  /** Regenerates the identity provider recovery codes for an enterprise */\n  regenerateEnterpriseIdentityProviderRecoveryCodes?: Maybe<RegenerateEnterpriseIdentityProviderRecoveryCodesPayload>;\n  /** Regenerates a verifiable domain's verification token. */\n  regenerateVerifiableDomainToken?: Maybe<RegenerateVerifiableDomainTokenPayload>;\n  /** Reject all pending deployments under one or more environments */\n  rejectDeployments?: Maybe<RejectDeploymentsPayload>;\n  /** Removes assignees from an assignable object. */\n  removeAssigneesFromAssignable?: Maybe<RemoveAssigneesFromAssignablePayload>;\n  /** Removes an administrator from the enterprise. */\n  removeEnterpriseAdmin?: Maybe<RemoveEnterpriseAdminPayload>;\n  /**\n   * Removes the identity provider from an enterprise. Owners of enterprises both\n   * with and without Enterprise Managed Users may use this mutation.\n   */\n  removeEnterpriseIdentityProvider?: Maybe<RemoveEnterpriseIdentityProviderPayload>;\n  /** Removes a user from all organizations within the enterprise */\n  removeEnterpriseMember?: Maybe<RemoveEnterpriseMemberPayload>;\n  /** Removes an organization from the enterprise */\n  removeEnterpriseOrganization?: Maybe<RemoveEnterpriseOrganizationPayload>;\n  /** Removes a support entitlement from an enterprise member. */\n  removeEnterpriseSupportEntitlement?: Maybe<RemoveEnterpriseSupportEntitlementPayload>;\n  /** Removes labels from a Labelable object. */\n  removeLabelsFromLabelable?: Maybe<RemoveLabelsFromLabelablePayload>;\n  /** Removes outside collaborator from all repositories in an organization. */\n  removeOutsideCollaborator?: Maybe<RemoveOutsideCollaboratorPayload>;\n  /** Removes a reaction from a subject. */\n  removeReaction?: Maybe<RemoveReactionPayload>;\n  /** Removes a star from a Starrable. */\n  removeStar?: Maybe<RemoveStarPayload>;\n  /** Remove an upvote to a discussion or discussion comment. */\n  removeUpvote?: Maybe<RemoveUpvotePayload>;\n  /** Reopen a discussion. */\n  reopenDiscussion?: Maybe<ReopenDiscussionPayload>;\n  /** Reopen a issue. */\n  reopenIssue?: Maybe<ReopenIssuePayload>;\n  /** Reopen a pull request. */\n  reopenPullRequest?: Maybe<ReopenPullRequestPayload>;\n  /** Reorder a pinned repository environment */\n  reorderEnvironment?: Maybe<ReorderEnvironmentPayload>;\n  /** Set review requests on a pull request. */\n  requestReviews?: Maybe<RequestReviewsPayload>;\n  /** Rerequests an existing check suite. */\n  rerequestCheckSuite?: Maybe<RerequestCheckSuitePayload>;\n  /** Marks a review thread as resolved. */\n  resolveReviewThread?: Maybe<ResolveReviewThreadPayload>;\n  /** Retire a published payment tier from your GitHub Sponsors profile so it cannot be used to start new sponsorships. */\n  retireSponsorsTier?: Maybe<RetireSponsorsTierPayload>;\n  /** Create a pull request that reverts the changes from a merged pull request. */\n  revertPullRequest?: Maybe<RevertPullRequestPayload>;\n  /** Revoke the migrator role to a user for all organizations under an enterprise account. */\n  revokeEnterpriseOrganizationsMigratorRole?: Maybe<RevokeEnterpriseOrganizationsMigratorRolePayload>;\n  /** Revoke the migrator role from a user or a team. */\n  revokeMigratorRole?: Maybe<RevokeMigratorRolePayload>;\n  /** Creates or updates the identity provider for an enterprise. */\n  setEnterpriseIdentityProvider?: Maybe<SetEnterpriseIdentityProviderPayload>;\n  /** Set an organization level interaction limit for an organization's public repositories. */\n  setOrganizationInteractionLimit?: Maybe<SetOrganizationInteractionLimitPayload>;\n  /** Sets an interaction limit setting for a repository. */\n  setRepositoryInteractionLimit?: Maybe<SetRepositoryInteractionLimitPayload>;\n  /** Set a user level interaction limit for an user's public repositories. */\n  setUserInteractionLimit?: Maybe<SetUserInteractionLimitPayload>;\n  /** Starts a GitHub Enterprise Importer organization migration. */\n  startOrganizationMigration?: Maybe<StartOrganizationMigrationPayload>;\n  /** Starts a GitHub Enterprise Importer (GEI) repository migration. */\n  startRepositoryMigration?: Maybe<StartRepositoryMigrationPayload>;\n  /** Submits a pending pull request review. */\n  submitPullRequestReview?: Maybe<SubmitPullRequestReviewPayload>;\n  /** Transfer an organization from one enterprise to another enterprise. */\n  transferEnterpriseOrganization?: Maybe<TransferEnterpriseOrganizationPayload>;\n  /** Transfer an issue to a different repository */\n  transferIssue?: Maybe<TransferIssuePayload>;\n  /** Unarchives a ProjectV2Item */\n  unarchiveProjectV2Item?: Maybe<UnarchiveProjectV2ItemPayload>;\n  /** Unarchives a repository. */\n  unarchiveRepository?: Maybe<UnarchiveRepositoryPayload>;\n  /** Unfollow an organization. */\n  unfollowOrganization?: Maybe<UnfollowOrganizationPayload>;\n  /** Unfollow a user. */\n  unfollowUser?: Maybe<UnfollowUserPayload>;\n  /** Unlinks a project from a repository. */\n  unlinkProjectV2FromRepository?: Maybe<UnlinkProjectV2FromRepositoryPayload>;\n  /** Unlinks a project to a team. */\n  unlinkProjectV2FromTeam?: Maybe<UnlinkProjectV2FromTeamPayload>;\n  /** Deletes a repository link from a project. */\n  unlinkRepositoryFromProject?: Maybe<UnlinkRepositoryFromProjectPayload>;\n  /** Unlock a lockable object */\n  unlockLockable?: Maybe<UnlockLockablePayload>;\n  /** Unmark a discussion comment as the chosen answer for discussions in an answerable category. */\n  unmarkDiscussionCommentAsAnswer?: Maybe<UnmarkDiscussionCommentAsAnswerPayload>;\n  /** Unmark a pull request file as viewed */\n  unmarkFileAsViewed?: Maybe<UnmarkFileAsViewedPayload>;\n  /** Unmark an issue as a duplicate of another issue. */\n  unmarkIssueAsDuplicate?: Maybe<UnmarkIssueAsDuplicatePayload>;\n  /** Unmark a project as a template. */\n  unmarkProjectV2AsTemplate?: Maybe<UnmarkProjectV2AsTemplatePayload>;\n  /** Unminimizes a comment on an Issue, Commit, Pull Request, or Gist */\n  unminimizeComment?: Maybe<UnminimizeCommentPayload>;\n  /** Unpin a pinned issue from a repository */\n  unpinIssue?: Maybe<UnpinIssuePayload>;\n  /** Marks a review thread as unresolved. */\n  unresolveReviewThread?: Maybe<UnresolveReviewThreadPayload>;\n  /** Unsubscribes from notifications */\n  unsubscribeFromNotifications?: Maybe<UnsubscribeFromNotificationsPayload>;\n  /** Update a branch protection rule */\n  updateBranchProtectionRule?: Maybe<UpdateBranchProtectionRulePayload>;\n  /** Update a check run */\n  updateCheckRun?: Maybe<UpdateCheckRunPayload>;\n  /** Modifies the settings of an existing check suite */\n  updateCheckSuitePreferences?: Maybe<UpdateCheckSuitePreferencesPayload>;\n  /** Update a discussion */\n  updateDiscussion?: Maybe<UpdateDiscussionPayload>;\n  /** Update the contents of a comment on a Discussion */\n  updateDiscussionComment?: Maybe<UpdateDiscussionCommentPayload>;\n  /** Updates the role of an enterprise administrator. */\n  updateEnterpriseAdministratorRole?: Maybe<UpdateEnterpriseAdministratorRolePayload>;\n  /** Sets whether private repository forks are enabled for an enterprise. */\n  updateEnterpriseAllowPrivateRepositoryForkingSetting?: Maybe<UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload>;\n  /** Sets the base repository permission for organizations in an enterprise. */\n  updateEnterpriseDefaultRepositoryPermissionSetting?: Maybe<UpdateEnterpriseDefaultRepositoryPermissionSettingPayload>;\n  /** Sets whether organization members with admin permissions on a repository can change repository visibility. */\n  updateEnterpriseMembersCanChangeRepositoryVisibilitySetting?: Maybe<UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload>;\n  /** Sets the members can create repositories setting for an enterprise. */\n  updateEnterpriseMembersCanCreateRepositoriesSetting?: Maybe<UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload>;\n  /** Sets the members can delete issues setting for an enterprise. */\n  updateEnterpriseMembersCanDeleteIssuesSetting?: Maybe<UpdateEnterpriseMembersCanDeleteIssuesSettingPayload>;\n  /** Sets the members can delete repositories setting for an enterprise. */\n  updateEnterpriseMembersCanDeleteRepositoriesSetting?: Maybe<UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload>;\n  /** Sets whether members can invite collaborators are enabled for an enterprise. */\n  updateEnterpriseMembersCanInviteCollaboratorsSetting?: Maybe<UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload>;\n  /** Sets whether or not an organization owner can make purchases. */\n  updateEnterpriseMembersCanMakePurchasesSetting?: Maybe<UpdateEnterpriseMembersCanMakePurchasesSettingPayload>;\n  /** Sets the members can update protected branches setting for an enterprise. */\n  updateEnterpriseMembersCanUpdateProtectedBranchesSetting?: Maybe<UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload>;\n  /** Sets the members can view dependency insights for an enterprise. */\n  updateEnterpriseMembersCanViewDependencyInsightsSetting?: Maybe<UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload>;\n  /** Sets whether organization projects are enabled for an enterprise. */\n  updateEnterpriseOrganizationProjectsSetting?: Maybe<UpdateEnterpriseOrganizationProjectsSettingPayload>;\n  /** Updates the role of an enterprise owner with an organization. */\n  updateEnterpriseOwnerOrganizationRole?: Maybe<UpdateEnterpriseOwnerOrganizationRolePayload>;\n  /** Updates an enterprise's profile. */\n  updateEnterpriseProfile?: Maybe<UpdateEnterpriseProfilePayload>;\n  /** Sets whether repository projects are enabled for a enterprise. */\n  updateEnterpriseRepositoryProjectsSetting?: Maybe<UpdateEnterpriseRepositoryProjectsSettingPayload>;\n  /** Sets whether team discussions are enabled for an enterprise. */\n  updateEnterpriseTeamDiscussionsSetting?: Maybe<UpdateEnterpriseTeamDiscussionsSettingPayload>;\n  /** Sets whether two factor authentication is required for all users in an enterprise. */\n  updateEnterpriseTwoFactorAuthenticationRequiredSetting?: Maybe<UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload>;\n  /** Updates an environment. */\n  updateEnvironment?: Maybe<UpdateEnvironmentPayload>;\n  /** Sets whether an IP allow list is enabled on an owner. */\n  updateIpAllowListEnabledSetting?: Maybe<UpdateIpAllowListEnabledSettingPayload>;\n  /** Updates an IP allow list entry. */\n  updateIpAllowListEntry?: Maybe<UpdateIpAllowListEntryPayload>;\n  /** Sets whether IP allow list configuration for installed GitHub Apps is enabled on an owner. */\n  updateIpAllowListForInstalledAppsEnabledSetting?: Maybe<UpdateIpAllowListForInstalledAppsEnabledSettingPayload>;\n  /** Updates an Issue. */\n  updateIssue?: Maybe<UpdateIssuePayload>;\n  /** Updates an IssueComment object. */\n  updateIssueComment?: Maybe<UpdateIssueCommentPayload>;\n  /** Updates an existing label. */\n  updateLabel?: Maybe<UpdateLabelPayload>;\n  /** Update the setting to restrict notifications to only verified or approved domains available to an owner. */\n  updateNotificationRestrictionSetting?: Maybe<UpdateNotificationRestrictionSettingPayload>;\n  /** Sets whether private repository forks are enabled for an organization. */\n  updateOrganizationAllowPrivateRepositoryForkingSetting?: Maybe<UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload>;\n  /** Sets whether contributors are required to sign off on web-based commits for repositories in an organization. */\n  updateOrganizationWebCommitSignoffSetting?: Maybe<UpdateOrganizationWebCommitSignoffSettingPayload>;\n  /**\n   * Toggle the setting for your GitHub Sponsors profile that allows other GitHub\n   * accounts to sponsor you on GitHub while paying for the sponsorship on Patreon.\n   * Only applicable when you have a GitHub Sponsors profile and have connected\n   * your GitHub account with Patreon.\n   */\n  updatePatreonSponsorability?: Maybe<UpdatePatreonSponsorabilityPayload>;\n  /** Updates an existing project. */\n  updateProject?: Maybe<UpdateProjectPayload>;\n  /** Updates an existing project card. */\n  updateProjectCard?: Maybe<UpdateProjectCardPayload>;\n  /** Updates an existing project column. */\n  updateProjectColumn?: Maybe<UpdateProjectColumnPayload>;\n  /** Updates an existing project. */\n  updateProjectV2?: Maybe<UpdateProjectV2Payload>;\n  /** Update the collaborators on a team or a project */\n  updateProjectV2Collaborators?: Maybe<UpdateProjectV2CollaboratorsPayload>;\n  /** Updates a draft issue within a Project. */\n  updateProjectV2DraftIssue?: Maybe<UpdateProjectV2DraftIssuePayload>;\n  /**\n   * This mutation updates the value of a field for an item in a Project. Currently\n   * only single-select, text, number, date, and iteration fields are supported.\n   */\n  updateProjectV2ItemFieldValue?: Maybe<UpdateProjectV2ItemFieldValuePayload>;\n  /** This mutation updates the position of the item in the project, where the position represents the priority of an item. */\n  updateProjectV2ItemPosition?: Maybe<UpdateProjectV2ItemPositionPayload>;\n  /** Updates a status update within a Project. */\n  updateProjectV2StatusUpdate?: Maybe<UpdateProjectV2StatusUpdatePayload>;\n  /** Update a pull request */\n  updatePullRequest?: Maybe<UpdatePullRequestPayload>;\n  /** Merge or Rebase HEAD from upstream branch into pull request branch */\n  updatePullRequestBranch?: Maybe<UpdatePullRequestBranchPayload>;\n  /** Updates the body of a pull request review. */\n  updatePullRequestReview?: Maybe<UpdatePullRequestReviewPayload>;\n  /** Updates a pull request review comment. */\n  updatePullRequestReviewComment?: Maybe<UpdatePullRequestReviewCommentPayload>;\n  /** Update a Git Ref. */\n  updateRef?: Maybe<UpdateRefPayload>;\n  /**\n   * Creates, updates and/or deletes multiple refs in a repository.\n   *\n   * This mutation takes a list of `RefUpdate`s and performs these updates\n   * on the repository. All updates are performed atomically, meaning that\n   * if one of them is rejected, no other ref will be modified.\n   *\n   * `RefUpdate.beforeOid` specifies that the given reference needs to point\n   * to the given value before performing any updates. A value of\n   * `0000000000000000000000000000000000000000` can be used to verify that\n   * the references should not exist.\n   *\n   * `RefUpdate.afterOid` specifies the value that the given reference\n   * will point to after performing all updates. A value of\n   * `0000000000000000000000000000000000000000` can be used to delete a\n   * reference.\n   *\n   * If `RefUpdate.force` is set to `true`, a non-fast-forward updates\n   * for the given reference will be allowed.\n   */\n  updateRefs?: Maybe<UpdateRefsPayload>;\n  /** Update information about a repository. */\n  updateRepository?: Maybe<UpdateRepositoryPayload>;\n  /** Update a repository ruleset */\n  updateRepositoryRuleset?: Maybe<UpdateRepositoryRulesetPayload>;\n  /** Sets whether contributors are required to sign off on web-based commits for a repository. */\n  updateRepositoryWebCommitSignoffSetting?: Maybe<UpdateRepositoryWebCommitSignoffSettingPayload>;\n  /** Change visibility of your sponsorship and opt in or out of email updates from the maintainer. */\n  updateSponsorshipPreferences?: Maybe<UpdateSponsorshipPreferencesPayload>;\n  /** Updates the state for subscribable subjects. */\n  updateSubscription?: Maybe<UpdateSubscriptionPayload>;\n  /** Updates a team discussion. */\n  updateTeamDiscussion?: Maybe<UpdateTeamDiscussionPayload>;\n  /** Updates a discussion comment. */\n  updateTeamDiscussionComment?: Maybe<UpdateTeamDiscussionCommentPayload>;\n  /** Updates team review assignment. */\n  updateTeamReviewAssignment?: Maybe<UpdateTeamReviewAssignmentPayload>;\n  /** Update team repository. */\n  updateTeamsRepository?: Maybe<UpdateTeamsRepositoryPayload>;\n  /** Replaces the repository's topics with the given topics. */\n  updateTopics?: Maybe<UpdateTopicsPayload>;\n  /** Updates an existing user list. */\n  updateUserList?: Maybe<UpdateUserListPayload>;\n  /** Updates which of the viewer's lists an item belongs to */\n  updateUserListsForItem?: Maybe<UpdateUserListsForItemPayload>;\n  /** Verify that a verifiable domain has the expected DNS record. */\n  verifyVerifiableDomain?: Maybe<VerifyVerifiableDomainPayload>;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAbortQueuedMigrationsArgs = {\n  input: AbortQueuedMigrationsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAbortRepositoryMigrationArgs = {\n  input: AbortRepositoryMigrationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAcceptEnterpriseAdministratorInvitationArgs = {\n  input: AcceptEnterpriseAdministratorInvitationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAcceptEnterpriseMemberInvitationArgs = {\n  input: AcceptEnterpriseMemberInvitationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAcceptTopicSuggestionArgs = {\n  input: AcceptTopicSuggestionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddAssigneesToAssignableArgs = {\n  input: AddAssigneesToAssignableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddCommentArgs = {\n  input: AddCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddDiscussionCommentArgs = {\n  input: AddDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddDiscussionPollVoteArgs = {\n  input: AddDiscussionPollVoteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddEnterpriseOrganizationMemberArgs = {\n  input: AddEnterpriseOrganizationMemberInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddEnterpriseSupportEntitlementArgs = {\n  input: AddEnterpriseSupportEntitlementInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddLabelsToLabelableArgs = {\n  input: AddLabelsToLabelableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectCardArgs = {\n  input: AddProjectCardInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectColumnArgs = {\n  input: AddProjectColumnInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectV2DraftIssueArgs = {\n  input: AddProjectV2DraftIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddProjectV2ItemByIdArgs = {\n  input: AddProjectV2ItemByIdInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewArgs = {\n  input: AddPullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewCommentArgs = {\n  input: AddPullRequestReviewCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewThreadArgs = {\n  input: AddPullRequestReviewThreadInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddPullRequestReviewThreadReplyArgs = {\n  input: AddPullRequestReviewThreadReplyInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddReactionArgs = {\n  input: AddReactionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddStarArgs = {\n  input: AddStarInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddUpvoteArgs = {\n  input: AddUpvoteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationAddVerifiableDomainArgs = {\n  input: AddVerifiableDomainInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationApproveDeploymentsArgs = {\n  input: ApproveDeploymentsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationApproveVerifiableDomainArgs = {\n  input: ApproveVerifiableDomainInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationArchiveProjectV2ItemArgs = {\n  input: ArchiveProjectV2ItemInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationArchiveRepositoryArgs = {\n  input: ArchiveRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCancelEnterpriseAdminInvitationArgs = {\n  input: CancelEnterpriseAdminInvitationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCancelEnterpriseMemberInvitationArgs = {\n  input: CancelEnterpriseMemberInvitationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCancelSponsorshipArgs = {\n  input: CancelSponsorshipInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationChangeUserStatusArgs = {\n  input: ChangeUserStatusInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationClearLabelsFromLabelableArgs = {\n  input: ClearLabelsFromLabelableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationClearProjectV2ItemFieldValueArgs = {\n  input: ClearProjectV2ItemFieldValueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloneProjectArgs = {\n  input: CloneProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloneTemplateRepositoryArgs = {\n  input: CloneTemplateRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloseDiscussionArgs = {\n  input: CloseDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCloseIssueArgs = {\n  input: CloseIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationClosePullRequestArgs = {\n  input: ClosePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationConvertProjectCardNoteToIssueArgs = {\n  input: ConvertProjectCardNoteToIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationConvertProjectV2DraftIssueItemToIssueArgs = {\n  input: ConvertProjectV2DraftIssueItemToIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationConvertPullRequestToDraftArgs = {\n  input: ConvertPullRequestToDraftInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCopyProjectV2Args = {\n  input: CopyProjectV2Input;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateAttributionInvitationArgs = {\n  input: CreateAttributionInvitationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateBranchProtectionRuleArgs = {\n  input: CreateBranchProtectionRuleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCheckRunArgs = {\n  input: CreateCheckRunInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCheckSuiteArgs = {\n  input: CreateCheckSuiteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateCommitOnBranchArgs = {\n  input: CreateCommitOnBranchInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateDeploymentArgs = {\n  input: CreateDeploymentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateDeploymentStatusArgs = {\n  input: CreateDeploymentStatusInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateDiscussionArgs = {\n  input: CreateDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateEnterpriseOrganizationArgs = {\n  input: CreateEnterpriseOrganizationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateEnvironmentArgs = {\n  input: CreateEnvironmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateIpAllowListEntryArgs = {\n  input: CreateIpAllowListEntryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateIssueArgs = {\n  input: CreateIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateLabelArgs = {\n  input: CreateLabelInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateLinkedBranchArgs = {\n  input: CreateLinkedBranchInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateMigrationSourceArgs = {\n  input: CreateMigrationSourceInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateProjectArgs = {\n  input: CreateProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateProjectV2Args = {\n  input: CreateProjectV2Input;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateProjectV2FieldArgs = {\n  input: CreateProjectV2FieldInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateProjectV2StatusUpdateArgs = {\n  input: CreateProjectV2StatusUpdateInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreatePullRequestArgs = {\n  input: CreatePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateRefArgs = {\n  input: CreateRefInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateRepositoryArgs = {\n  input: CreateRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateRepositoryRulesetArgs = {\n  input: CreateRepositoryRulesetInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateSponsorsListingArgs = {\n  input: CreateSponsorsListingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateSponsorsTierArgs = {\n  input: CreateSponsorsTierInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateSponsorshipArgs = {\n  input: CreateSponsorshipInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateSponsorshipsArgs = {\n  input: CreateSponsorshipsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateTeamDiscussionArgs = {\n  input: CreateTeamDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateTeamDiscussionCommentArgs = {\n  input: CreateTeamDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationCreateUserListArgs = {\n  input: CreateUserListInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeclineTopicSuggestionArgs = {\n  input: DeclineTopicSuggestionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteBranchProtectionRuleArgs = {\n  input: DeleteBranchProtectionRuleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDeploymentArgs = {\n  input: DeleteDeploymentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDiscussionArgs = {\n  input: DeleteDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteDiscussionCommentArgs = {\n  input: DeleteDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteEnvironmentArgs = {\n  input: DeleteEnvironmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIpAllowListEntryArgs = {\n  input: DeleteIpAllowListEntryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIssueArgs = {\n  input: DeleteIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteIssueCommentArgs = {\n  input: DeleteIssueCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteLabelArgs = {\n  input: DeleteLabelInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteLinkedBranchArgs = {\n  input: DeleteLinkedBranchInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeletePackageVersionArgs = {\n  input: DeletePackageVersionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectArgs = {\n  input: DeleteProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectCardArgs = {\n  input: DeleteProjectCardInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectColumnArgs = {\n  input: DeleteProjectColumnInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectV2Args = {\n  input: DeleteProjectV2Input;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectV2FieldArgs = {\n  input: DeleteProjectV2FieldInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectV2ItemArgs = {\n  input: DeleteProjectV2ItemInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectV2StatusUpdateArgs = {\n  input: DeleteProjectV2StatusUpdateInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteProjectV2WorkflowArgs = {\n  input: DeleteProjectV2WorkflowInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeletePullRequestReviewArgs = {\n  input: DeletePullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeletePullRequestReviewCommentArgs = {\n  input: DeletePullRequestReviewCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteRefArgs = {\n  input: DeleteRefInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteRepositoryRulesetArgs = {\n  input: DeleteRepositoryRulesetInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteTeamDiscussionArgs = {\n  input: DeleteTeamDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteTeamDiscussionCommentArgs = {\n  input: DeleteTeamDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteUserListArgs = {\n  input: DeleteUserListInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDeleteVerifiableDomainArgs = {\n  input: DeleteVerifiableDomainInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDequeuePullRequestArgs = {\n  input: DequeuePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDisablePullRequestAutoMergeArgs = {\n  input: DisablePullRequestAutoMergeInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDismissPullRequestReviewArgs = {\n  input: DismissPullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationDismissRepositoryVulnerabilityAlertArgs = {\n  input: DismissRepositoryVulnerabilityAlertInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationEnablePullRequestAutoMergeArgs = {\n  input: EnablePullRequestAutoMergeInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationEnqueuePullRequestArgs = {\n  input: EnqueuePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationFollowOrganizationArgs = {\n  input: FollowOrganizationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationFollowUserArgs = {\n  input: FollowUserInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationGrantEnterpriseOrganizationsMigratorRoleArgs = {\n  input: GrantEnterpriseOrganizationsMigratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationGrantMigratorRoleArgs = {\n  input: GrantMigratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationImportProjectArgs = {\n  input: ImportProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationInviteEnterpriseAdminArgs = {\n  input: InviteEnterpriseAdminInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationInviteEnterpriseMemberArgs = {\n  input: InviteEnterpriseMemberInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationLinkProjectV2ToRepositoryArgs = {\n  input: LinkProjectV2ToRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationLinkProjectV2ToTeamArgs = {\n  input: LinkProjectV2ToTeamInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationLinkRepositoryToProjectArgs = {\n  input: LinkRepositoryToProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationLockLockableArgs = {\n  input: LockLockableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkDiscussionCommentAsAnswerArgs = {\n  input: MarkDiscussionCommentAsAnswerInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkFileAsViewedArgs = {\n  input: MarkFileAsViewedInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkNotificationAsDoneArgs = {\n  input: MarkNotificationAsDoneInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkProjectV2AsTemplateArgs = {\n  input: MarkProjectV2AsTemplateInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMarkPullRequestReadyForReviewArgs = {\n  input: MarkPullRequestReadyForReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMergeBranchArgs = {\n  input: MergeBranchInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMergePullRequestArgs = {\n  input: MergePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMinimizeCommentArgs = {\n  input: MinimizeCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMoveProjectCardArgs = {\n  input: MoveProjectCardInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationMoveProjectColumnArgs = {\n  input: MoveProjectColumnInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationPinEnvironmentArgs = {\n  input: PinEnvironmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationPinIssueArgs = {\n  input: PinIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationPublishSponsorsTierArgs = {\n  input: PublishSponsorsTierInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRegenerateEnterpriseIdentityProviderRecoveryCodesArgs = {\n  input: RegenerateEnterpriseIdentityProviderRecoveryCodesInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRegenerateVerifiableDomainTokenArgs = {\n  input: RegenerateVerifiableDomainTokenInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRejectDeploymentsArgs = {\n  input: RejectDeploymentsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveAssigneesFromAssignableArgs = {\n  input: RemoveAssigneesFromAssignableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseAdminArgs = {\n  input: RemoveEnterpriseAdminInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseIdentityProviderArgs = {\n  input: RemoveEnterpriseIdentityProviderInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseMemberArgs = {\n  input: RemoveEnterpriseMemberInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseOrganizationArgs = {\n  input: RemoveEnterpriseOrganizationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveEnterpriseSupportEntitlementArgs = {\n  input: RemoveEnterpriseSupportEntitlementInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveLabelsFromLabelableArgs = {\n  input: RemoveLabelsFromLabelableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveOutsideCollaboratorArgs = {\n  input: RemoveOutsideCollaboratorInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveReactionArgs = {\n  input: RemoveReactionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveStarArgs = {\n  input: RemoveStarInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRemoveUpvoteArgs = {\n  input: RemoveUpvoteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationReopenDiscussionArgs = {\n  input: ReopenDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationReopenIssueArgs = {\n  input: ReopenIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationReopenPullRequestArgs = {\n  input: ReopenPullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationReorderEnvironmentArgs = {\n  input: ReorderEnvironmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRequestReviewsArgs = {\n  input: RequestReviewsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRerequestCheckSuiteArgs = {\n  input: RerequestCheckSuiteInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationResolveReviewThreadArgs = {\n  input: ResolveReviewThreadInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRetireSponsorsTierArgs = {\n  input: RetireSponsorsTierInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRevertPullRequestArgs = {\n  input: RevertPullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRevokeEnterpriseOrganizationsMigratorRoleArgs = {\n  input: RevokeEnterpriseOrganizationsMigratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationRevokeMigratorRoleArgs = {\n  input: RevokeMigratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetEnterpriseIdentityProviderArgs = {\n  input: SetEnterpriseIdentityProviderInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetOrganizationInteractionLimitArgs = {\n  input: SetOrganizationInteractionLimitInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetRepositoryInteractionLimitArgs = {\n  input: SetRepositoryInteractionLimitInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSetUserInteractionLimitArgs = {\n  input: SetUserInteractionLimitInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationStartOrganizationMigrationArgs = {\n  input: StartOrganizationMigrationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationStartRepositoryMigrationArgs = {\n  input: StartRepositoryMigrationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationSubmitPullRequestReviewArgs = {\n  input: SubmitPullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationTransferEnterpriseOrganizationArgs = {\n  input: TransferEnterpriseOrganizationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationTransferIssueArgs = {\n  input: TransferIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnarchiveProjectV2ItemArgs = {\n  input: UnarchiveProjectV2ItemInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnarchiveRepositoryArgs = {\n  input: UnarchiveRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnfollowOrganizationArgs = {\n  input: UnfollowOrganizationInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnfollowUserArgs = {\n  input: UnfollowUserInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnlinkProjectV2FromRepositoryArgs = {\n  input: UnlinkProjectV2FromRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnlinkProjectV2FromTeamArgs = {\n  input: UnlinkProjectV2FromTeamInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnlinkRepositoryFromProjectArgs = {\n  input: UnlinkRepositoryFromProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnlockLockableArgs = {\n  input: UnlockLockableInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkDiscussionCommentAsAnswerArgs = {\n  input: UnmarkDiscussionCommentAsAnswerInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkFileAsViewedArgs = {\n  input: UnmarkFileAsViewedInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkIssueAsDuplicateArgs = {\n  input: UnmarkIssueAsDuplicateInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnmarkProjectV2AsTemplateArgs = {\n  input: UnmarkProjectV2AsTemplateInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnminimizeCommentArgs = {\n  input: UnminimizeCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnpinIssueArgs = {\n  input: UnpinIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnresolveReviewThreadArgs = {\n  input: UnresolveReviewThreadInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUnsubscribeFromNotificationsArgs = {\n  input: UnsubscribeFromNotificationsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateBranchProtectionRuleArgs = {\n  input: UpdateBranchProtectionRuleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateCheckRunArgs = {\n  input: UpdateCheckRunInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateCheckSuitePreferencesArgs = {\n  input: UpdateCheckSuitePreferencesInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateDiscussionArgs = {\n  input: UpdateDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateDiscussionCommentArgs = {\n  input: UpdateDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseAdministratorRoleArgs = {\n  input: UpdateEnterpriseAdministratorRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseAllowPrivateRepositoryForkingSettingArgs = {\n  input: UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseDefaultRepositoryPermissionSettingArgs = {\n  input: UpdateEnterpriseDefaultRepositoryPermissionSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingArgs = {\n  input: UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanCreateRepositoriesSettingArgs = {\n  input: UpdateEnterpriseMembersCanCreateRepositoriesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanDeleteIssuesSettingArgs = {\n  input: UpdateEnterpriseMembersCanDeleteIssuesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanDeleteRepositoriesSettingArgs = {\n  input: UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanInviteCollaboratorsSettingArgs = {\n  input: UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanMakePurchasesSettingArgs = {\n  input: UpdateEnterpriseMembersCanMakePurchasesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanUpdateProtectedBranchesSettingArgs = {\n  input: UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseMembersCanViewDependencyInsightsSettingArgs = {\n  input: UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseOrganizationProjectsSettingArgs = {\n  input: UpdateEnterpriseOrganizationProjectsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseOwnerOrganizationRoleArgs = {\n  input: UpdateEnterpriseOwnerOrganizationRoleInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseProfileArgs = {\n  input: UpdateEnterpriseProfileInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseRepositoryProjectsSettingArgs = {\n  input: UpdateEnterpriseRepositoryProjectsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseTeamDiscussionsSettingArgs = {\n  input: UpdateEnterpriseTeamDiscussionsSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnterpriseTwoFactorAuthenticationRequiredSettingArgs = {\n  input: UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateEnvironmentArgs = {\n  input: UpdateEnvironmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListEnabledSettingArgs = {\n  input: UpdateIpAllowListEnabledSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListEntryArgs = {\n  input: UpdateIpAllowListEntryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIpAllowListForInstalledAppsEnabledSettingArgs = {\n  input: UpdateIpAllowListForInstalledAppsEnabledSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIssueArgs = {\n  input: UpdateIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateIssueCommentArgs = {\n  input: UpdateIssueCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateLabelArgs = {\n  input: UpdateLabelInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateNotificationRestrictionSettingArgs = {\n  input: UpdateNotificationRestrictionSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateOrganizationAllowPrivateRepositoryForkingSettingArgs = {\n  input: UpdateOrganizationAllowPrivateRepositoryForkingSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateOrganizationWebCommitSignoffSettingArgs = {\n  input: UpdateOrganizationWebCommitSignoffSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePatreonSponsorabilityArgs = {\n  input: UpdatePatreonSponsorabilityInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectArgs = {\n  input: UpdateProjectInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectCardArgs = {\n  input: UpdateProjectCardInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectColumnArgs = {\n  input: UpdateProjectColumnInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectV2Args = {\n  input: UpdateProjectV2Input;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectV2CollaboratorsArgs = {\n  input: UpdateProjectV2CollaboratorsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectV2DraftIssueArgs = {\n  input: UpdateProjectV2DraftIssueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectV2ItemFieldValueArgs = {\n  input: UpdateProjectV2ItemFieldValueInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectV2ItemPositionArgs = {\n  input: UpdateProjectV2ItemPositionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateProjectV2StatusUpdateArgs = {\n  input: UpdateProjectV2StatusUpdateInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestArgs = {\n  input: UpdatePullRequestInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestBranchArgs = {\n  input: UpdatePullRequestBranchInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestReviewArgs = {\n  input: UpdatePullRequestReviewInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdatePullRequestReviewCommentArgs = {\n  input: UpdatePullRequestReviewCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRefArgs = {\n  input: UpdateRefInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRefsArgs = {\n  input: UpdateRefsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRepositoryArgs = {\n  input: UpdateRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRepositoryRulesetArgs = {\n  input: UpdateRepositoryRulesetInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateRepositoryWebCommitSignoffSettingArgs = {\n  input: UpdateRepositoryWebCommitSignoffSettingInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateSponsorshipPreferencesArgs = {\n  input: UpdateSponsorshipPreferencesInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateSubscriptionArgs = {\n  input: UpdateSubscriptionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamDiscussionArgs = {\n  input: UpdateTeamDiscussionInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamDiscussionCommentArgs = {\n  input: UpdateTeamDiscussionCommentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamReviewAssignmentArgs = {\n  input: UpdateTeamReviewAssignmentInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTeamsRepositoryArgs = {\n  input: UpdateTeamsRepositoryInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateTopicsArgs = {\n  input: UpdateTopicsInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateUserListArgs = {\n  input: UpdateUserListInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationUpdateUserListsForItemArgs = {\n  input: UpdateUserListsForItemInput;\n};\n\n\n/** The root query for implementing GraphQL mutations. */\nexport type MutationVerifyVerifiableDomainArgs = {\n  input: VerifyVerifiableDomainInput;\n};\n\n/** An object with an ID. */\nexport type Node = {\n  /** ID of the object. */\n  id: Scalars['ID']['output'];\n};\n\n/** The possible values for the notification restriction setting. */\nexport enum NotificationRestrictionSettingValue {\n  /** The setting is disabled for the owner. */\n  Disabled = 'DISABLED',\n  /** The setting is enabled for the owner. */\n  Enabled = 'ENABLED'\n}\n\n/**\n * An OIDC identity provider configured to provision identities for an enterprise.\n * Visible to enterprise owners or enterprise owners' personal access tokens\n * (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type OidcProvider = Node & {\n  /** The enterprise this identity provider belongs to. */\n  enterprise?: Maybe<Enterprise>;\n  /** ExternalIdentities provisioned by this identity provider. */\n  externalIdentities: ExternalIdentityConnection;\n  /** The Node ID of the OIDCProvider object */\n  id: Scalars['ID']['output'];\n  /** The OIDC identity provider type */\n  providerType: OidcProviderType;\n  /** The id of the tenant this provider is attached to */\n  tenantId: Scalars['String']['output'];\n};\n\n\n/**\n * An OIDC identity provider configured to provision identities for an enterprise.\n * Visible to enterprise owners or enterprise owners' personal access tokens\n * (classic) with read:enterprise or admin:enterprise scope.\n */\nexport type OidcProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  login?: InputMaybe<Scalars['String']['input']>;\n  membersOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  userName?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The OIDC identity provider type */\nexport enum OidcProviderType {\n  /** Azure Active Directory */\n  Aad = 'AAD'\n}\n\n/** Metadata for an audit entry with action oauth_application.* */\nexport type OauthApplicationAuditEntryData = {\n  /** The name of the OAuth application. */\n  oauthApplicationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the OAuth application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the OAuth application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a oauth_application.create event. */\nexport type OauthApplicationCreateAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The application URL of the OAuth application. */\n  applicationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The callback URL of the OAuth application. */\n  callbackUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OauthApplicationCreateAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The name of the OAuth application. */\n  oauthApplicationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the OAuth application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the OAuth application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The rate limit of the OAuth application. */\n  rateLimit?: Maybe<Scalars['Int']['output']>;\n  /** The state of the OAuth application. */\n  state?: Maybe<OauthApplicationCreateAuditEntryState>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The state of an OAuth application when it was created. */\nexport enum OauthApplicationCreateAuditEntryState {\n  /** The OAuth application was active and allowed to have OAuth Accesses. */\n  Active = 'ACTIVE',\n  /** The OAuth application was in the process of being deleted. */\n  PendingDeletion = 'PENDING_DELETION',\n  /** The OAuth application was suspended from generating OAuth Accesses due to abuse or security concerns. */\n  Suspended = 'SUSPENDED'\n}\n\n/** The corresponding operation type for the action */\nexport enum OperationType {\n  /** An existing resource was accessed */\n  Access = 'ACCESS',\n  /** A resource performed an authentication event */\n  Authentication = 'AUTHENTICATION',\n  /** A new resource was created */\n  Create = 'CREATE',\n  /** An existing resource was modified */\n  Modify = 'MODIFY',\n  /** An existing resource was removed */\n  Remove = 'REMOVE',\n  /** An existing resource was restored */\n  Restore = 'RESTORE',\n  /** An existing resource was transferred between multiple resources */\n  Transfer = 'TRANSFER'\n}\n\n/** Possible directions in which to order a list of items when provided an `orderBy` argument. */\nexport enum OrderDirection {\n  /** Specifies an ascending order for a given `orderBy` argument. */\n  Asc = 'ASC',\n  /** Specifies a descending order for a given `orderBy` argument. */\n  Desc = 'DESC'\n}\n\n/** Audit log entry for a org.add_billing_manager */\nexport type OrgAddBillingManagerAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgAddBillingManagerAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The email address used to invite a billing manager for the organization. */\n  invitationEmail?: Maybe<Scalars['String']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.add_member */\nexport type OrgAddMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgAddMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The permission level of the member added to the organization. */\n  permission?: Maybe<OrgAddMemberAuditEntryPermission>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The permissions available to members on an Organization. */\nexport enum OrgAddMemberAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = 'ADMIN',\n  /** Can read and clone repositories. */\n  Read = 'READ'\n}\n\n/** Audit log entry for a org.block_user */\nexport type OrgBlockUserAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The blocked user. */\n  blockedUser?: Maybe<User>;\n  /** The username of the blocked user. */\n  blockedUserName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the blocked user. */\n  blockedUserResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the blocked user. */\n  blockedUserUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgBlockUserAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.config.disable_collaborators_only event. */\nexport type OrgConfigDisableCollaboratorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgConfigDisableCollaboratorsOnlyAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.config.enable_collaborators_only event. */\nexport type OrgConfigEnableCollaboratorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgConfigEnableCollaboratorsOnlyAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.create event. */\nexport type OrgCreateAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The billing plan for the Organization. */\n  billingPlan?: Maybe<OrgCreateAuditEntryBillingPlan>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgCreateAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The billing plans available for organizations. */\nexport enum OrgCreateAuditEntryBillingPlan {\n  /** Team Plan */\n  Business = 'BUSINESS',\n  /** Enterprise Cloud Plan */\n  BusinessPlus = 'BUSINESS_PLUS',\n  /** Free Plan */\n  Free = 'FREE',\n  /** Tiered Per Seat Plan */\n  TieredPerSeat = 'TIERED_PER_SEAT',\n  /** Legacy Unlimited Plan */\n  Unlimited = 'UNLIMITED'\n}\n\n/** Audit log entry for a org.disable_oauth_app_restrictions event. */\nexport type OrgDisableOauthAppRestrictionsAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgDisableOauthAppRestrictionsAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.disable_saml event. */\nexport type OrgDisableSamlAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The SAML provider's digest algorithm URL. */\n  digestMethodUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the OrgDisableSamlAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The SAML provider's issuer URL. */\n  issuerUrl?: Maybe<Scalars['URI']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The SAML provider's signature algorithm URL. */\n  signatureMethodUrl?: Maybe<Scalars['URI']['output']>;\n  /** The SAML provider's single sign-on URL. */\n  singleSignOnUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.disable_two_factor_requirement event. */\nexport type OrgDisableTwoFactorRequirementAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgDisableTwoFactorRequirementAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.enable_oauth_app_restrictions event. */\nexport type OrgEnableOauthAppRestrictionsAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgEnableOauthAppRestrictionsAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.enable_saml event. */\nexport type OrgEnableSamlAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The SAML provider's digest algorithm URL. */\n  digestMethodUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the OrgEnableSamlAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The SAML provider's issuer URL. */\n  issuerUrl?: Maybe<Scalars['URI']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The SAML provider's signature algorithm URL. */\n  signatureMethodUrl?: Maybe<Scalars['URI']['output']>;\n  /** The SAML provider's single sign-on URL. */\n  singleSignOnUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.enable_two_factor_requirement event. */\nexport type OrgEnableTwoFactorRequirementAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgEnableTwoFactorRequirementAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Ordering options for an organization's enterprise owner connections. */\nexport type OrgEnterpriseOwnerOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order enterprise owners by. */\n  field: OrgEnterpriseOwnerOrderField;\n};\n\n/** Properties by which enterprise owners can be ordered. */\nexport enum OrgEnterpriseOwnerOrderField {\n  /** Order enterprise owners by login. */\n  Login = 'LOGIN'\n}\n\n/** Audit log entry for a org.invite_member event. */\nexport type OrgInviteMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The email address of the organization invitation. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the OrgInviteMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The organization invitation. */\n  organizationInvitation?: Maybe<OrganizationInvitation>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.invite_to_business event. */\nexport type OrgInviteToBusinessAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the OrgInviteToBusinessAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.oauth_app_access_approved event. */\nexport type OrgOauthAppAccessApprovedAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgOauthAppAccessApprovedAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The name of the OAuth application. */\n  oauthApplicationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the OAuth application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the OAuth application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.oauth_app_access_blocked event. */\nexport type OrgOauthAppAccessBlockedAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgOauthAppAccessBlockedAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The name of the OAuth application. */\n  oauthApplicationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the OAuth application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the OAuth application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.oauth_app_access_denied event. */\nexport type OrgOauthAppAccessDeniedAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgOauthAppAccessDeniedAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The name of the OAuth application. */\n  oauthApplicationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the OAuth application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the OAuth application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.oauth_app_access_requested event. */\nexport type OrgOauthAppAccessRequestedAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgOauthAppAccessRequestedAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The name of the OAuth application. */\n  oauthApplicationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the OAuth application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the OAuth application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.oauth_app_access_unblocked event. */\nexport type OrgOauthAppAccessUnblockedAuditEntry = AuditEntry & Node & OauthApplicationAuditEntryData & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgOauthAppAccessUnblockedAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The name of the OAuth application. */\n  oauthApplicationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the OAuth application */\n  oauthApplicationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the OAuth application */\n  oauthApplicationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.remove_billing_manager event. */\nexport type OrgRemoveBillingManagerAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgRemoveBillingManagerAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The reason for the billing manager being removed. */\n  reason?: Maybe<OrgRemoveBillingManagerAuditEntryReason>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The reason a billing manager was removed from an Organization. */\nexport enum OrgRemoveBillingManagerAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',\n  /** SAML SSO enforcement requires an external identity */\n  SamlSsoEnforcementRequiresExternalIdentity = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'\n}\n\n/** Audit log entry for a org.remove_member event. */\nexport type OrgRemoveMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgRemoveMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The types of membership the member has with the organization. */\n  membershipTypes?: Maybe<Array<OrgRemoveMemberAuditEntryMembershipType>>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The reason for the member being removed. */\n  reason?: Maybe<OrgRemoveMemberAuditEntryReason>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The type of membership a user has with an Organization. */\nexport enum OrgRemoveMemberAuditEntryMembershipType {\n  /**\n   * Organization owners have full access and can change several settings,\n   * including the names of repositories that belong to the Organization and Owners\n   * team membership. In addition, organization owners can delete the organization\n   * and all of its repositories.\n   */\n  Admin = 'ADMIN',\n  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */\n  BillingManager = 'BILLING_MANAGER',\n  /** A direct member is a user that is a member of the Organization. */\n  DirectMember = 'DIRECT_MEMBER',\n  /**\n   * An outside collaborator is a person who isn't explicitly a member of the\n   * Organization, but who has Read, Write, or Admin permissions to one or more\n   * repositories in the organization.\n   */\n  OutsideCollaborator = 'OUTSIDE_COLLABORATOR',\n  /** A suspended member. */\n  Suspended = 'SUSPENDED',\n  /**\n   * An unaffiliated collaborator is a person who is not a member of the\n   * Organization and does not have access to any repositories in the Organization.\n   */\n  Unaffiliated = 'UNAFFILIATED'\n}\n\n/** The reason a member was removed from an Organization. */\nexport enum OrgRemoveMemberAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',\n  /** SAML SSO enforcement requires an external identity */\n  SamlSsoEnforcementRequiresExternalIdentity = 'SAML_SSO_ENFORCEMENT_REQUIRES_EXTERNAL_IDENTITY',\n  /** User was removed from organization during account recovery */\n  TwoFactorAccountRecovery = 'TWO_FACTOR_ACCOUNT_RECOVERY',\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE',\n  /** User account has been deleted */\n  UserAccountDeleted = 'USER_ACCOUNT_DELETED'\n}\n\n/** Audit log entry for a org.remove_outside_collaborator event. */\nexport type OrgRemoveOutsideCollaboratorAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgRemoveOutsideCollaboratorAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The types of membership the outside collaborator has with the organization. */\n  membershipTypes?: Maybe<Array<OrgRemoveOutsideCollaboratorAuditEntryMembershipType>>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The reason for the outside collaborator being removed from the Organization. */\n  reason?: Maybe<OrgRemoveOutsideCollaboratorAuditEntryReason>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The type of membership a user has with an Organization. */\nexport enum OrgRemoveOutsideCollaboratorAuditEntryMembershipType {\n  /** A billing manager is a user who manages the billing settings for the Organization, such as updating payment information. */\n  BillingManager = 'BILLING_MANAGER',\n  /**\n   * An outside collaborator is a person who isn't explicitly a member of the\n   * Organization, but who has Read, Write, or Admin permissions to one or more\n   * repositories in the organization.\n   */\n  OutsideCollaborator = 'OUTSIDE_COLLABORATOR',\n  /**\n   * An unaffiliated collaborator is a person who is not a member of the\n   * Organization and does not have access to any repositories in the organization.\n   */\n  Unaffiliated = 'UNAFFILIATED'\n}\n\n/** The reason an outside collaborator was removed from an Organization. */\nexport enum OrgRemoveOutsideCollaboratorAuditEntryReason {\n  /** SAML external identity missing */\n  SamlExternalIdentityMissing = 'SAML_EXTERNAL_IDENTITY_MISSING',\n  /** The organization required 2FA of its billing managers and this user did not have 2FA enabled. */\n  TwoFactorRequirementNonCompliance = 'TWO_FACTOR_REQUIREMENT_NON_COMPLIANCE'\n}\n\n/** Audit log entry for a org.restore_member event. */\nexport type OrgRestoreMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgRestoreMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The number of custom email routings for the restored member. */\n  restoredCustomEmailRoutingsCount?: Maybe<Scalars['Int']['output']>;\n  /** The number of issue assignments for the restored member. */\n  restoredIssueAssignmentsCount?: Maybe<Scalars['Int']['output']>;\n  /** Restored organization membership objects. */\n  restoredMemberships?: Maybe<Array<OrgRestoreMemberAuditEntryMembership>>;\n  /** The number of restored memberships. */\n  restoredMembershipsCount?: Maybe<Scalars['Int']['output']>;\n  /** The number of repositories of the restored member. */\n  restoredRepositoriesCount?: Maybe<Scalars['Int']['output']>;\n  /** The number of starred repositories for the restored member. */\n  restoredRepositoryStarsCount?: Maybe<Scalars['Int']['output']>;\n  /** The number of watched repositories for the restored member. */\n  restoredRepositoryWatchesCount?: Maybe<Scalars['Int']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Types of memberships that can be restored for an Organization member. */\nexport type OrgRestoreMemberAuditEntryMembership = OrgRestoreMemberMembershipOrganizationAuditEntryData | OrgRestoreMemberMembershipRepositoryAuditEntryData | OrgRestoreMemberMembershipTeamAuditEntryData;\n\n/** Metadata for an organization membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipOrganizationAuditEntryData = OrganizationAuditEntryData & {\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Metadata for a repository membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipRepositoryAuditEntryData = RepositoryAuditEntryData & {\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Metadata for a team membership for org.restore_member actions */\nexport type OrgRestoreMemberMembershipTeamAuditEntryData = TeamAuditEntryData & {\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.unblock_user */\nexport type OrgUnblockUserAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user being unblocked by the organization. */\n  blockedUser?: Maybe<User>;\n  /** The username of the blocked user. */\n  blockedUserName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the blocked user. */\n  blockedUserResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the blocked user. */\n  blockedUserUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgUnblockUserAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a org.update_default_repository_permission */\nexport type OrgUpdateDefaultRepositoryPermissionAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgUpdateDefaultRepositoryPermissionAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The new base repository permission level for the organization. */\n  permission?: Maybe<OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;\n  /** The former base repository permission level for the organization. */\n  permissionWas?: Maybe<OrgUpdateDefaultRepositoryPermissionAuditEntryPermission>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The default permission a repository can have in an Organization. */\nexport enum OrgUpdateDefaultRepositoryPermissionAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = 'ADMIN',\n  /** No default permission value. */\n  None = 'NONE',\n  /** Can read and clone repositories. */\n  Read = 'READ',\n  /** Can read, clone and push to repositories. */\n  Write = 'WRITE'\n}\n\n/** Audit log entry for a org.update_member event. */\nexport type OrgUpdateMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgUpdateMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The new member permission level for the organization. */\n  permission?: Maybe<OrgUpdateMemberAuditEntryPermission>;\n  /** The former member permission level for the organization. */\n  permissionWas?: Maybe<OrgUpdateMemberAuditEntryPermission>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The permissions available to members on an Organization. */\nexport enum OrgUpdateMemberAuditEntryPermission {\n  /** Can read, clone, push, and add collaborators to repositories. */\n  Admin = 'ADMIN',\n  /** Can read and clone repositories. */\n  Read = 'READ'\n}\n\n/** Audit log entry for a org.update_member_repository_creation_permission event. */\nexport type OrgUpdateMemberRepositoryCreationPermissionAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** Can members create repositories in the organization. */\n  canCreateRepositories?: Maybe<Scalars['Boolean']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgUpdateMemberRepositoryCreationPermissionAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n  /** The permission for visibility level of repositories for this organization. */\n  visibility?: Maybe<OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility>;\n};\n\n/** The permissions available for repository creation on an Organization. */\nexport enum OrgUpdateMemberRepositoryCreationPermissionAuditEntryVisibility {\n  /** All organization members are restricted from creating any repositories. */\n  All = 'ALL',\n  /** All organization members are restricted from creating internal repositories. */\n  Internal = 'INTERNAL',\n  /** All organization members are allowed to create any repositories. */\n  None = 'NONE',\n  /** All organization members are restricted from creating private repositories. */\n  Private = 'PRIVATE',\n  /** All organization members are restricted from creating private or internal repositories. */\n  PrivateInternal = 'PRIVATE_INTERNAL',\n  /** All organization members are restricted from creating public repositories. */\n  Public = 'PUBLIC',\n  /** All organization members are restricted from creating public or internal repositories. */\n  PublicInternal = 'PUBLIC_INTERNAL',\n  /** All organization members are restricted from creating public or private repositories. */\n  PublicPrivate = 'PUBLIC_PRIVATE'\n}\n\n/** Audit log entry for a org.update_member_repository_invitation_permission event. */\nexport type OrgUpdateMemberRepositoryInvitationPermissionAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** Can outside collaborators be invited to repositories in the organization. */\n  canInviteOutsideCollaboratorsToRepositories?: Maybe<Scalars['Boolean']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the OrgUpdateMemberRepositoryInvitationPermissionAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type Organization = Actor & AnnouncementBanner & MemberStatusable & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable & {\n  /** The text of the announcement */\n  announcement?: Maybe<Scalars['String']['output']>;\n  /** The date the announcement was created */\n  announcementCreatedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The expiration date of the announcement, if any */\n  announcementExpiresAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Whether the announcement can be dismissed by the user */\n  announcementUserDismissible?: Maybe<Scalars['Boolean']['output']>;\n  /** Determine if this repository owner has any items that can be pinned to their profile. */\n  anyPinnableItems: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the organization was archived. */\n  archivedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Audit log entries of the organization */\n  auditLog: OrganizationAuditEntryConnection;\n  /** A URL pointing to the organization's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The organization's public profile description. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The organization's public profile description rendered to HTML. */\n  descriptionHTML?: Maybe<Scalars['String']['output']>;\n  /** A list of domains owned by the organization. */\n  domains?: Maybe<VerifiableDomainConnection>;\n  /** The organization's public email. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** A list of owners of the organization's enterprise account. */\n  enterpriseOwners: OrganizationEnterpriseOwnerConnection;\n  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n  estimatedNextSponsorsPayoutInCents: Scalars['Int']['output'];\n  /** True if this user/organization has a GitHub Sponsors listing. */\n  hasSponsorsListing: Scalars['Boolean']['output'];\n  /** The Node ID of the Organization object */\n  id: Scalars['ID']['output'];\n  /** The interaction ability settings for this organization. */\n  interactionAbility?: Maybe<RepositoryInteractionAbility>;\n  /** The setting value for whether the organization has an IP allow list enabled. */\n  ipAllowListEnabledSetting: IpAllowListEnabledSettingValue;\n  /** The IP addresses that are allowed to access resources owned by the organization. */\n  ipAllowListEntries: IpAllowListEntryConnection;\n  /** The setting value for whether the organization has IP allow list configuration for installed GitHub Apps enabled. */\n  ipAllowListForInstalledAppsEnabledSetting: IpAllowListForInstalledAppsEnabledSettingValue;\n  /** Whether the given account is sponsoring this user/organization. */\n  isSponsoredBy: Scalars['Boolean']['output'];\n  /** True if the viewer is sponsored by this user/organization. */\n  isSponsoringViewer: Scalars['Boolean']['output'];\n  /** Whether the organization has verified its profile email and website. */\n  isVerified: Scalars['Boolean']['output'];\n  /**\n   * Showcases a selection of repositories and gists that the profile owner has\n   * either curated or that have been selected automatically based on popularity.\n   */\n  itemShowcase: ProfileItemShowcase;\n  /**\n   * Calculate how much each sponsor has ever paid total to this maintainer via\n   * GitHub Sponsors. Does not include sponsorships paid via Patreon.\n   */\n  lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection;\n  /** The organization's public profile location. */\n  location?: Maybe<Scalars['String']['output']>;\n  /** The organization's login name. */\n  login: Scalars['String']['output'];\n  /** A list of all mannequins for this organization. */\n  mannequins: MannequinConnection;\n  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n  memberStatuses: UserStatusConnection;\n  /** Members can fork private repositories in this organization */\n  membersCanForkPrivateRepositories: Scalars['Boolean']['output'];\n  /** A list of users who are members of this organization. */\n  membersWithRole: OrganizationMemberConnection;\n  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int']['output'];\n  /** The organization's public profile name. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path creating a new team */\n  newTeamResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL creating a new team */\n  newTeamUrl: Scalars['URI']['output'];\n  /** Indicates if email notification delivery for this organization is restricted to verified or approved domains. */\n  notificationDeliveryRestrictionEnabledSetting: NotificationRestrictionSettingValue;\n  /** The billing email for the organization. */\n  organizationBillingEmail?: Maybe<Scalars['String']['output']>;\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n  /** A list of users who have been invited to join this organization. */\n  pendingMembers: UserConnection;\n  /** A list of repositories and gists this profile owner can pin to their profile. */\n  pinnableItems: PinnableItemConnection;\n  /** A list of repositories and gists this profile owner has pinned to their profile */\n  pinnedItems: PinnableItemConnection;\n  /** Returns how many more items this profile owner can pin to their profile. */\n  pinnedItemsRemaining: Scalars['Int']['output'];\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** Find a project by number. */\n  projectV2?: Maybe<ProjectV2>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** The HTTP path listing organization's projects */\n  projectsResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL listing organization's projects */\n  projectsUrl: Scalars['URI']['output'];\n  /** A list of projects under the owner. */\n  projectsV2: ProjectV2Connection;\n  /** Recent projects that this user has modified in the context of the owner. */\n  recentProjects: ProjectV2Connection;\n  /** A list of repositories that the user owns. */\n  repositories: RepositoryConnection;\n  /** Find Repository. */\n  repository?: Maybe<Repository>;\n  /** Discussion comments this user has authored. */\n  repositoryDiscussionComments: DiscussionCommentConnection;\n  /** Discussions this user has started. */\n  repositoryDiscussions: DiscussionConnection;\n  /** A list of all repository migrations for this organization. */\n  repositoryMigrations: RepositoryMigrationConnection;\n  /**\n   * When true the organization requires all members, billing managers, and outside\n   * collaborators to enable two-factor authentication.\n   */\n  requiresTwoFactorAuthentication?: Maybe<Scalars['Boolean']['output']>;\n  /** The HTTP path for this organization. */\n  resourcePath: Scalars['URI']['output'];\n  /** Returns a single ruleset from the current organization by ID. */\n  ruleset?: Maybe<RepositoryRuleset>;\n  /** A list of rulesets for this organization. */\n  rulesets?: Maybe<RepositoryRulesetConnection>;\n  /**\n   * The Organization's SAML identity provider. Visible to (1) organization owners,\n   * (2) organization owners' personal access tokens (classic) with read:org or\n   * admin:org scope, (3) GitHub App with an installation token with read or write\n   * access to members.\n   */\n  samlIdentityProvider?: Maybe<OrganizationIdentityProvider>;\n  /** List of users and organizations this entity is sponsoring. */\n  sponsoring: SponsorConnection;\n  /** List of sponsors for this user or organization. */\n  sponsors: SponsorConnection;\n  /** Events involving this sponsorable, such as new sponsorships. */\n  sponsorsActivities: SponsorsActivityConnection;\n  /** The GitHub Sponsors listing for this user or organization. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */\n  sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */\n  sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n  /** List of sponsorship updates sent from this sponsorable to sponsors. */\n  sponsorshipNewsletters: SponsorshipNewsletterConnection;\n  /** The sponsorships where this user or organization is the maintainer receiving the funds. */\n  sponsorshipsAsMaintainer: SponsorshipConnection;\n  /** The sponsorships where this user or organization is the funder. */\n  sponsorshipsAsSponsor: SponsorshipConnection;\n  /** Find an organization's team by its slug. */\n  team?: Maybe<Team>;\n  /** A list of teams in this organization. */\n  teams: TeamConnection;\n  /** The HTTP path listing organization's teams */\n  teamsResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL listing organization's teams */\n  teamsUrl: Scalars['URI']['output'];\n  /**\n   * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has\n   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the\n   * user themselves or by a user who can manage sponsorships for the requested organization.\n   */\n  totalSponsorshipAmountAsSponsorInCents?: Maybe<Scalars['Int']['output']>;\n  /** The organization's Twitter username. */\n  twitterUsername?: Maybe<Scalars['String']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this organization. */\n  url: Scalars['URI']['output'];\n  /** Organization is adminable by the viewer. */\n  viewerCanAdminister: Scalars['Boolean']['output'];\n  /** Can the viewer pin repositories and gists to the profile? */\n  viewerCanChangePinnedItems: Scalars['Boolean']['output'];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars['Boolean']['output'];\n  /** Viewer can create repositories on this organization */\n  viewerCanCreateRepositories: Scalars['Boolean']['output'];\n  /** Viewer can create teams on this organization. */\n  viewerCanCreateTeams: Scalars['Boolean']['output'];\n  /** Whether or not the viewer is able to sponsor this user/organization. */\n  viewerCanSponsor: Scalars['Boolean']['output'];\n  /** Viewer is an active member of this organization. */\n  viewerIsAMember: Scalars['Boolean']['output'];\n  /** Whether or not this Organization is followed by the viewer. */\n  viewerIsFollowing: Scalars['Boolean']['output'];\n  /** True if the viewer is sponsoring this user/organization. */\n  viewerIsSponsoring: Scalars['Boolean']['output'];\n  /** Whether contributors are required to sign off on web-based commits for repositories in this organization. */\n  webCommitSignoffRequired: Scalars['Boolean']['output'];\n  /** The organization's public profile URL. */\n  websiteUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAuditLogArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<AuditLogOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationDomainsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  isApproved?: InputMaybe<Scalars['Boolean']['input']>;\n  isVerified?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<VerifiableDomainOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationEnterpriseOwnersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrgEnterpriseOwnerOrder>;\n  organizationRole?: InputMaybe<RoleInOrganization>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationIpAllowListEntriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IpAllowListEntryOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationIsSponsoredByArgs = {\n  accountLogin: Scalars['String']['input'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationLifetimeReceivedSponsorshipValuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorAndLifetimeValueOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationMannequinsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  login?: InputMaybe<Scalars['String']['input']>;\n  orderBy?: InputMaybe<MannequinOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationMemberStatusesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationMembersWithRoleArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPackagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  names?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPendingMembersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPinnableItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationPinnedItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectV2Args = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars['String']['input']>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationProjectsV2Args = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  minPermissionLevel?: InputMaybe<ProjectV2PermissionLevel>;\n  orderBy?: InputMaybe<ProjectV2Order>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRecentProjectsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  isArchived?: InputMaybe<Scalars['Boolean']['input']>;\n  isFork?: InputMaybe<Scalars['Boolean']['input']>;\n  isLocked?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars['Boolean']['input']>;\n  name: Scalars['String']['input'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  onlyAnswers?: InputMaybe<Scalars['Boolean']['input']>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  answered?: InputMaybe<Scalars['Boolean']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n  states?: InputMaybe<Array<DiscussionState>>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRepositoryMigrationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryMigrationOrder>;\n  repositoryName?: InputMaybe<Scalars['String']['input']>;\n  state?: InputMaybe<MigrationState>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRulesetArgs = {\n  databaseId: Scalars['Int']['input'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationRulesetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includeParents?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsoringArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorsActivitiesArgs = {\n  actions?: InputMaybe<Array<SponsorsActivityAction>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includeAsSponsor?: InputMaybe<Scalars['Boolean']['input']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  until?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipForViewerAsSponsorArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipForViewerAsSponsorableArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipsAsMaintainerArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationSponsorshipsAsSponsorArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  maintainerLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationTeamArgs = {\n  slug: Scalars['String']['input'];\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationTeamsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  ldapMapped?: InputMaybe<Scalars['Boolean']['input']>;\n  notificationSetting?: InputMaybe<TeamNotificationSetting>;\n  orderBy?: InputMaybe<TeamOrder>;\n  privacy?: InputMaybe<TeamPrivacy>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<TeamRole>;\n  rootTeamsOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  userLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n};\n\n\n/** An account on GitHub, with one or more owners, that has repositories, members and teams. */\nexport type OrganizationTotalSponsorshipAmountAsSponsorInCentsArgs = {\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  sponsorableLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  until?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n/** An audit entry in an organization audit log. */\nexport type OrganizationAuditEntry = MembersCanDeleteReposClearAuditEntry | MembersCanDeleteReposDisableAuditEntry | MembersCanDeleteReposEnableAuditEntry | OauthApplicationCreateAuditEntry | OrgAddBillingManagerAuditEntry | OrgAddMemberAuditEntry | OrgBlockUserAuditEntry | OrgConfigDisableCollaboratorsOnlyAuditEntry | OrgConfigEnableCollaboratorsOnlyAuditEntry | OrgCreateAuditEntry | OrgDisableOauthAppRestrictionsAuditEntry | OrgDisableSamlAuditEntry | OrgDisableTwoFactorRequirementAuditEntry | OrgEnableOauthAppRestrictionsAuditEntry | OrgEnableSamlAuditEntry | OrgEnableTwoFactorRequirementAuditEntry | OrgInviteMemberAuditEntry | OrgInviteToBusinessAuditEntry | OrgOauthAppAccessApprovedAuditEntry | OrgOauthAppAccessBlockedAuditEntry | OrgOauthAppAccessDeniedAuditEntry | OrgOauthAppAccessRequestedAuditEntry | OrgOauthAppAccessUnblockedAuditEntry | OrgRemoveBillingManagerAuditEntry | OrgRemoveMemberAuditEntry | OrgRemoveOutsideCollaboratorAuditEntry | OrgRestoreMemberAuditEntry | OrgUnblockUserAuditEntry | OrgUpdateDefaultRepositoryPermissionAuditEntry | OrgUpdateMemberAuditEntry | OrgUpdateMemberRepositoryCreationPermissionAuditEntry | OrgUpdateMemberRepositoryInvitationPermissionAuditEntry | PrivateRepositoryForkingDisableAuditEntry | PrivateRepositoryForkingEnableAuditEntry | RepoAccessAuditEntry | RepoAddMemberAuditEntry | RepoAddTopicAuditEntry | RepoArchivedAuditEntry | RepoChangeMergeSettingAuditEntry | RepoConfigDisableAnonymousGitAccessAuditEntry | RepoConfigDisableCollaboratorsOnlyAuditEntry | RepoConfigDisableContributorsOnlyAuditEntry | RepoConfigDisableSockpuppetDisallowedAuditEntry | RepoConfigEnableAnonymousGitAccessAuditEntry | RepoConfigEnableCollaboratorsOnlyAuditEntry | RepoConfigEnableContributorsOnlyAuditEntry | RepoConfigEnableSockpuppetDisallowedAuditEntry | RepoConfigLockAnonymousGitAccessAuditEntry | RepoConfigUnlockAnonymousGitAccessAuditEntry | RepoCreateAuditEntry | RepoDestroyAuditEntry | RepoRemoveMemberAuditEntry | RepoRemoveTopicAuditEntry | RepositoryVisibilityChangeDisableAuditEntry | RepositoryVisibilityChangeEnableAuditEntry | TeamAddMemberAuditEntry | TeamAddRepositoryAuditEntry | TeamChangeParentTeamAuditEntry | TeamRemoveMemberAuditEntry | TeamRemoveRepositoryAuditEntry;\n\n/** The connection type for OrganizationAuditEntry. */\nexport type OrganizationAuditEntryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationAuditEntryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationAuditEntry>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Metadata for an audit entry with action org.* */\nexport type OrganizationAuditEntryData = {\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** An edge in a connection. */\nexport type OrganizationAuditEntryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationAuditEntry>;\n};\n\n/** A list of organizations managed by an enterprise. */\nexport type OrganizationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Organization>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type OrganizationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Organization>;\n};\n\n/** The connection type for User. */\nexport type OrganizationEnterpriseOwnerConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationEnterpriseOwnerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An enterprise owner in the context of an organization that is part of the enterprise. */\nexport type OrganizationEnterpriseOwnerEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role of the owner with respect to the organization. */\n  organizationRole: RoleInOrganization;\n};\n\n/**\n * An Identity Provider configured to provision SAML and SCIM identities for\n * Organizations. Visible to (1) organization owners, (2) organization owners'\n * personal access tokens (classic) with read:org or admin:org scope, (3) GitHub\n * App with an installation token with read or write access to members.\n */\nexport type OrganizationIdentityProvider = Node & {\n  /** The digest algorithm used to sign SAML requests for the Identity Provider. */\n  digestMethod?: Maybe<Scalars['URI']['output']>;\n  /** External Identities provisioned by this Identity Provider */\n  externalIdentities: ExternalIdentityConnection;\n  /** The Node ID of the OrganizationIdentityProvider object */\n  id: Scalars['ID']['output'];\n  /** The x509 certificate used by the Identity Provider to sign assertions and responses. */\n  idpCertificate?: Maybe<Scalars['X509Certificate']['output']>;\n  /** The Issuer Entity ID for the SAML Identity Provider */\n  issuer?: Maybe<Scalars['String']['output']>;\n  /** Organization this Identity Provider belongs to */\n  organization?: Maybe<Organization>;\n  /** The signature algorithm used to sign SAML requests for the Identity Provider. */\n  signatureMethod?: Maybe<Scalars['URI']['output']>;\n  /** The URL endpoint for the Identity Provider's SAML SSO. */\n  ssoUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n\n/**\n * An Identity Provider configured to provision SAML and SCIM identities for\n * Organizations. Visible to (1) organization owners, (2) organization owners'\n * personal access tokens (classic) with read:org or admin:org scope, (3) GitHub\n * App with an installation token with read or write access to members.\n */\nexport type OrganizationIdentityProviderExternalIdentitiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  login?: InputMaybe<Scalars['String']['input']>;\n  membersOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  userName?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** An Invitation for a user to an organization. */\nexport type OrganizationInvitation = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The email address of the user invited to the organization. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the OrganizationInvitation object */\n  id: Scalars['ID']['output'];\n  /** The source of the invitation. */\n  invitationSource: OrganizationInvitationSource;\n  /** The type of invitation that was sent (e.g. email, user). */\n  invitationType: OrganizationInvitationType;\n  /** The user who was invited to the organization. */\n  invitee?: Maybe<User>;\n  /**\n   * The user who created the invitation.\n   * @deprecated `inviter` will be removed. `inviter` will be replaced by `inviterActor`. Removal on 2024-07-01 UTC.\n   */\n  inviter: User;\n  /** The user who created the invitation. */\n  inviterActor?: Maybe<User>;\n  /** The organization the invite is for */\n  organization: Organization;\n  /** The user's pending role in the organization (e.g. member, owner). */\n  role: OrganizationInvitationRole;\n};\n\n/** The connection type for OrganizationInvitation. */\nexport type OrganizationInvitationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<OrganizationInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type OrganizationInvitationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<OrganizationInvitation>;\n};\n\n/** The possible organization invitation roles. */\nexport enum OrganizationInvitationRole {\n  /** The user is invited to be an admin of the organization. */\n  Admin = 'ADMIN',\n  /** The user is invited to be a billing manager of the organization. */\n  BillingManager = 'BILLING_MANAGER',\n  /** The user is invited to be a direct member of the organization. */\n  DirectMember = 'DIRECT_MEMBER',\n  /** The user's previous role will be reinstated. */\n  Reinstate = 'REINSTATE'\n}\n\n/** The possible organization invitation sources. */\nexport enum OrganizationInvitationSource {\n  /** The invitation was created from the web interface or from API */\n  Member = 'MEMBER',\n  /** The invitation was created from SCIM */\n  Scim = 'SCIM',\n  /** The invitation was sent before this feature was added */\n  Unknown = 'UNKNOWN'\n}\n\n/** The possible organization invitation types. */\nexport enum OrganizationInvitationType {\n  /** The invitation was to an email address. */\n  Email = 'EMAIL',\n  /** The invitation was to an existing user. */\n  User = 'USER'\n}\n\n/** A list of users who belong to the organization. */\nexport type OrganizationMemberConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrganizationMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a user within an organization. */\nexport type OrganizationMemberEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** Whether the organization member has two factor enabled or not. Returns null if information is not available to viewer. */\n  hasTwoFactorEnabled?: Maybe<Scalars['Boolean']['output']>;\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n  /** The role this user has in the organization. */\n  role?: Maybe<OrganizationMemberRole>;\n};\n\n/** The possible roles within an organization for its members. */\nexport enum OrganizationMemberRole {\n  /** The user is an administrator of the organization. */\n  Admin = 'ADMIN',\n  /** The user is a member of the organization. */\n  Member = 'MEMBER'\n}\n\n/** The possible values for the members can create repositories setting on an organization. */\nexport enum OrganizationMembersCanCreateRepositoriesSettingValue {\n  /** Members will be able to create public and private repositories. */\n  All = 'ALL',\n  /** Members will not be able to create public or private repositories. */\n  Disabled = 'DISABLED',\n  /** Members will be able to create only internal repositories. */\n  Internal = 'INTERNAL',\n  /** Members will be able to create only private repositories. */\n  Private = 'PRIVATE'\n}\n\n/** A GitHub Enterprise Importer (GEI) organization migration. */\nexport type OrganizationMigration = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['String']['output']>;\n  /** The reason the organization migration failed. */\n  failureReason?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the OrganizationMigration object */\n  id: Scalars['ID']['output'];\n  /** The remaining amount of repos to be migrated. */\n  remainingRepositoriesCount?: Maybe<Scalars['Int']['output']>;\n  /** The name of the source organization to be migrated. */\n  sourceOrgName: Scalars['String']['output'];\n  /** The URL of the source organization to migrate. */\n  sourceOrgUrl: Scalars['URI']['output'];\n  /** The migration state. */\n  state: OrganizationMigrationState;\n  /** The name of the target organization. */\n  targetOrgName: Scalars['String']['output'];\n  /** The total amount of repositories to be migrated. */\n  totalRepositoriesCount?: Maybe<Scalars['Int']['output']>;\n};\n\n/** The Octoshift Organization migration state. */\nexport enum OrganizationMigrationState {\n  /** The Octoshift migration has failed. */\n  Failed = 'FAILED',\n  /** The Octoshift migration has invalid credentials. */\n  FailedValidation = 'FAILED_VALIDATION',\n  /** The Octoshift migration is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The Octoshift migration has not started. */\n  NotStarted = 'NOT_STARTED',\n  /** The Octoshift migration needs to have its credentials validated. */\n  PendingValidation = 'PENDING_VALIDATION',\n  /** The Octoshift migration is performing post repository migrations. */\n  PostRepoMigration = 'POST_REPO_MIGRATION',\n  /** The Octoshift migration is performing pre repository migrations. */\n  PreRepoMigration = 'PRE_REPO_MIGRATION',\n  /** The Octoshift migration has been queued. */\n  Queued = 'QUEUED',\n  /** The Octoshift org migration is performing repository migrations. */\n  RepoMigration = 'REPO_MIGRATION',\n  /** The Octoshift migration has succeeded. */\n  Succeeded = 'SUCCEEDED'\n}\n\n/** Used for argument of CreateProjectV2 mutation. */\nexport type OrganizationOrUser = Organization | User;\n\n/** Ordering options for organization connections. */\nexport type OrganizationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order organizations by. */\n  field: OrganizationOrderField;\n};\n\n/** Properties by which organization connections can be ordered. */\nexport enum OrganizationOrderField {\n  /** Order organizations by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order organizations by login */\n  Login = 'LOGIN'\n}\n\n/** An organization teams hovercard context */\nexport type OrganizationTeamsHovercardContext = HovercardContext & {\n  /** A string describing this context */\n  message: Scalars['String']['output'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String']['output'];\n  /** Teams in this organization the user is a member of that are relevant */\n  relevantTeams: TeamConnection;\n  /** The path for the full team list for this user */\n  teamsResourcePath: Scalars['URI']['output'];\n  /** The URL for the full team list for this user */\n  teamsUrl: Scalars['URI']['output'];\n  /** The total number of teams the user is on in the organization */\n  totalTeamCount: Scalars['Int']['output'];\n};\n\n\n/** An organization teams hovercard context */\nexport type OrganizationTeamsHovercardContextRelevantTeamsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** An organization list hovercard context */\nexport type OrganizationsHovercardContext = HovercardContext & {\n  /** A string describing this context */\n  message: Scalars['String']['output'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String']['output'];\n  /** Organizations this user is a member of that are relevant */\n  relevantOrganizations: OrganizationConnection;\n  /** The total number of organizations this user is in */\n  totalOrganizationCount: Scalars['Int']['output'];\n};\n\n\n/** An organization list hovercard context */\nexport type OrganizationsHovercardContextRelevantOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n};\n\n/** Information for an uploaded package. */\nexport type Package = Node & {\n  /** The Node ID of the Package object */\n  id: Scalars['ID']['output'];\n  /** Find the latest version for the package. */\n  latestVersion?: Maybe<PackageVersion>;\n  /** Identifies the name of the package. */\n  name: Scalars['String']['output'];\n  /** Identifies the type of the package. */\n  packageType: PackageType;\n  /** The repository this package belongs to. */\n  repository?: Maybe<Repository>;\n  /** Statistics about package activity. */\n  statistics?: Maybe<PackageStatistics>;\n  /** Find package version by version string. */\n  version?: Maybe<PackageVersion>;\n  /** list of versions for this package */\n  versions: PackageVersionConnection;\n};\n\n\n/** Information for an uploaded package. */\nexport type PackageVersionArgs = {\n  version: Scalars['String']['input'];\n};\n\n\n/** Information for an uploaded package. */\nexport type PackageVersionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<PackageVersionOrder>;\n};\n\n/** The connection type for Package. */\nexport type PackageConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Package>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PackageEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Package>;\n};\n\n/** A file in a package version. */\nexport type PackageFile = Node & {\n  /** The Node ID of the PackageFile object */\n  id: Scalars['ID']['output'];\n  /** MD5 hash of the file. */\n  md5?: Maybe<Scalars['String']['output']>;\n  /** Name of the file. */\n  name: Scalars['String']['output'];\n  /** The package version this file belongs to. */\n  packageVersion?: Maybe<PackageVersion>;\n  /** SHA1 hash of the file. */\n  sha1?: Maybe<Scalars['String']['output']>;\n  /** SHA256 hash of the file. */\n  sha256?: Maybe<Scalars['String']['output']>;\n  /** Size of the file in bytes. */\n  size?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** URL to download the asset. */\n  url?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The connection type for PackageFile. */\nexport type PackageFileConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageFileEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PackageFile>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PackageFileEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PackageFile>;\n};\n\n/** Ways in which lists of package files can be ordered upon return. */\nexport type PackageFileOrder = {\n  /** The direction in which to order package files by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order package files by. */\n  field?: InputMaybe<PackageFileOrderField>;\n};\n\n/** Properties by which package file connections can be ordered. */\nexport enum PackageFileOrderField {\n  /** Order package files by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Ways in which lists of packages can be ordered upon return. */\nexport type PackageOrder = {\n  /** The direction in which to order packages by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order packages by. */\n  field?: InputMaybe<PackageOrderField>;\n};\n\n/** Properties by which package connections can be ordered. */\nexport enum PackageOrderField {\n  /** Order packages by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Represents an owner of a package. */\nexport type PackageOwner = {\n  /** The Node ID of the PackageOwner object */\n  id: Scalars['ID']['output'];\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n};\n\n\n/** Represents an owner of a package. */\nexport type PackageOwnerPackagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  names?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Represents a object that contains package activity statistics such as downloads. */\nexport type PackageStatistics = {\n  /** Number of times the package was downloaded since it was created. */\n  downloadsTotalCount: Scalars['Int']['output'];\n};\n\n/** A version tag contains the mapping between a tag name and a version. */\nexport type PackageTag = Node & {\n  /** The Node ID of the PackageTag object */\n  id: Scalars['ID']['output'];\n  /** Identifies the tag name of the version. */\n  name: Scalars['String']['output'];\n  /** Version that the tag is associated with. */\n  version?: Maybe<PackageVersion>;\n};\n\n/** The possible types of a package. */\nexport enum PackageType {\n  /** A debian package. */\n  Debian = 'DEBIAN',\n  /**\n   * A docker image.\n   * @deprecated DOCKER will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2021-06-21 UTC.\n   */\n  Docker = 'DOCKER',\n  /**\n   * A maven package.\n   * @deprecated MAVEN will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2023-02-10 UTC.\n   */\n  Maven = 'MAVEN',\n  /**\n   * An npm package.\n   * @deprecated NPM will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC.\n   */\n  Npm = 'NPM',\n  /**\n   * A nuget package.\n   * @deprecated NUGET will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-11-21 UTC.\n   */\n  Nuget = 'NUGET',\n  /** A python package. */\n  Pypi = 'PYPI',\n  /**\n   * A rubygems package.\n   * @deprecated RUBYGEMS will be removed from this enum as this type will be migrated to only be used by the Packages REST API. Removal on 2022-12-28 UTC.\n   */\n  Rubygems = 'RUBYGEMS'\n}\n\n/** Information about a specific package version. */\nexport type PackageVersion = Node & {\n  /** List of files associated with this package version */\n  files: PackageFileConnection;\n  /** The Node ID of the PackageVersion object */\n  id: Scalars['ID']['output'];\n  /** The package associated with this version. */\n  package?: Maybe<Package>;\n  /** The platform this version was built for. */\n  platform?: Maybe<Scalars['String']['output']>;\n  /** Whether or not this version is a pre-release. */\n  preRelease: Scalars['Boolean']['output'];\n  /** The README of this package version. */\n  readme?: Maybe<Scalars['String']['output']>;\n  /** The release associated with this package version. */\n  release?: Maybe<Release>;\n  /** Statistics about package activity. */\n  statistics?: Maybe<PackageVersionStatistics>;\n  /** The package version summary. */\n  summary?: Maybe<Scalars['String']['output']>;\n  /** The version string. */\n  version: Scalars['String']['output'];\n};\n\n\n/** Information about a specific package version. */\nexport type PackageVersionFilesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<PackageFileOrder>;\n};\n\n/** The connection type for PackageVersion. */\nexport type PackageVersionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PackageVersionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PackageVersion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PackageVersionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PackageVersion>;\n};\n\n/** Ways in which lists of package versions can be ordered upon return. */\nexport type PackageVersionOrder = {\n  /** The direction in which to order package versions by the specified field. */\n  direction?: InputMaybe<OrderDirection>;\n  /** The field in which to order package versions by. */\n  field?: InputMaybe<PackageVersionOrderField>;\n};\n\n/** Properties by which package version connections can be ordered. */\nexport enum PackageVersionOrderField {\n  /** Order package versions by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Represents a object that contains package version activity statistics such as downloads. */\nexport type PackageVersionStatistics = {\n  /** Number of times the package was downloaded since it was created. */\n  downloadsTotalCount: Scalars['Int']['output'];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']['output']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean']['output'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']['output']>;\n};\n\n/** The possible types of patch statuses. */\nexport enum PatchStatus {\n  /** The file was added. Git status 'A'. */\n  Added = 'ADDED',\n  /** The file's type was changed. Git status 'T'. */\n  Changed = 'CHANGED',\n  /** The file was copied. Git status 'C'. */\n  Copied = 'COPIED',\n  /** The file was deleted. Git status 'D'. */\n  Deleted = 'DELETED',\n  /** The file's contents were changed. Git status 'M'. */\n  Modified = 'MODIFIED',\n  /** The file was renamed. Git status 'R'. */\n  Renamed = 'RENAMED'\n}\n\n/** Types that can grant permissions on a repository to a user */\nexport type PermissionGranter = Organization | Repository | Team;\n\n/** A level of permission and source for a user's access to a repository. */\nexport type PermissionSource = {\n  /** The organization the repository belongs to. */\n  organization: Organization;\n  /** The level of access this source has granted to the user. */\n  permission: DefaultRepositoryPermissionField;\n  /** The name of the role this source has granted to the user. */\n  roleName?: Maybe<Scalars['String']['output']>;\n  /** The source of this permission. */\n  source: PermissionGranter;\n};\n\n/** Autogenerated input type of PinEnvironment */\nexport type PinEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the environment to modify */\n  environmentId: Scalars['ID']['input'];\n  /** The desired state of the environment. If true, environment will be pinned. If false, it will be unpinned. */\n  pinned: Scalars['Boolean']['input'];\n};\n\n/** Autogenerated return type of PinEnvironment. */\nexport type PinEnvironmentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The environment that was pinned */\n  environment?: Maybe<Environment>;\n  /** The pinned environment if we pinned */\n  pinnedEnvironment?: Maybe<PinnedEnvironment>;\n};\n\n/** Autogenerated input type of PinIssue */\nexport type PinIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the issue to be pinned */\n  issueId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of PinIssue. */\nexport type PinIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The issue that was pinned */\n  issue?: Maybe<Issue>;\n};\n\n/** Types that can be pinned to a profile page. */\nexport type PinnableItem = Gist | Repository;\n\n/** The connection type for PinnableItem. */\nexport type PinnableItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnableItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnableItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PinnableItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnableItem>;\n};\n\n/** Represents items that can be pinned to a profile page or dashboard. */\nexport enum PinnableItemType {\n  /** A gist. */\n  Gist = 'GIST',\n  /** An issue. */\n  Issue = 'ISSUE',\n  /** An organization. */\n  Organization = 'ORGANIZATION',\n  /** A project. */\n  Project = 'PROJECT',\n  /** A pull request. */\n  PullRequest = 'PULL_REQUEST',\n  /** A repository. */\n  Repository = 'REPOSITORY',\n  /** A team. */\n  Team = 'TEAM',\n  /** A user. */\n  User = 'USER'\n}\n\n/** A Pinned Discussion is a discussion pinned to a repository's index page. */\nexport type PinnedDiscussion = Node & RepositoryNode & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The discussion that was pinned. */\n  discussion: Discussion;\n  /** Color stops of the chosen gradient */\n  gradientStopColors: Array<Scalars['String']['output']>;\n  /** The Node ID of the PinnedDiscussion object */\n  id: Scalars['ID']['output'];\n  /** Background texture pattern */\n  pattern: PinnedDiscussionPattern;\n  /** The actor that pinned this discussion. */\n  pinnedBy: Actor;\n  /** Preconfigured background gradient option */\n  preconfiguredGradient?: Maybe<PinnedDiscussionGradient>;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for PinnedDiscussion. */\nexport type PinnedDiscussionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnedDiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnedDiscussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PinnedDiscussionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnedDiscussion>;\n};\n\n/** Preconfigured gradients that may be used to style discussions pinned within a repository. */\nexport enum PinnedDiscussionGradient {\n  /** A gradient of blue to mint */\n  BlueMint = 'BLUE_MINT',\n  /** A gradient of blue to purple */\n  BluePurple = 'BLUE_PURPLE',\n  /** A gradient of pink to blue */\n  PinkBlue = 'PINK_BLUE',\n  /** A gradient of purple to coral */\n  PurpleCoral = 'PURPLE_CORAL',\n  /** A gradient of red to orange */\n  RedOrange = 'RED_ORANGE'\n}\n\n/** Preconfigured background patterns that may be used to style discussions pinned within a repository. */\nexport enum PinnedDiscussionPattern {\n  /** An upward-facing chevron pattern */\n  ChevronUp = 'CHEVRON_UP',\n  /** A hollow dot pattern */\n  Dot = 'DOT',\n  /** A solid dot pattern */\n  DotFill = 'DOT_FILL',\n  /** A heart pattern */\n  HeartFill = 'HEART_FILL',\n  /** A plus sign pattern */\n  Plus = 'PLUS',\n  /** A lightning bolt pattern */\n  Zap = 'ZAP'\n}\n\n/** Represents a pinned environment on a given repository */\nexport type PinnedEnvironment = Node & {\n  /** Identifies the date and time when the pinned environment was created */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the environment associated. */\n  environment: Environment;\n  /** The Node ID of the PinnedEnvironment object */\n  id: Scalars['ID']['output'];\n  /** Identifies the position of the pinned environment. */\n  position: Scalars['Int']['output'];\n  /** The repository that this environment was pinned to. */\n  repository: Repository;\n};\n\n/** The connection type for PinnedEnvironment. */\nexport type PinnedEnvironmentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnedEnvironmentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnedEnvironment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PinnedEnvironmentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnedEnvironment>;\n};\n\n/** Ordering options for pinned environments */\nexport type PinnedEnvironmentOrder = {\n  /** The direction in which to order pinned environments by the specified field. */\n  direction: OrderDirection;\n  /** The field to order pinned environments by. */\n  field: PinnedEnvironmentOrderField;\n};\n\n/** Properties by which pinned environments connections can be ordered */\nexport enum PinnedEnvironmentOrderField {\n  /** Order pinned environments by position */\n  Position = 'POSITION'\n}\n\n/** Represents a 'pinned' event on a given issue or pull request. */\nexport type PinnedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the PinnedEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** A Pinned Issue is a issue pinned to a repository's index page. */\nexport type PinnedIssue = Node & {\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the primary key from the database as a BigInt. */\n  fullDatabaseId?: Maybe<Scalars['BigInt']['output']>;\n  /** The Node ID of the PinnedIssue object */\n  id: Scalars['ID']['output'];\n  /** The issue that was pinned. */\n  issue: Issue;\n  /** The actor that pinned this issue. */\n  pinnedBy: Actor;\n  /** The repository that this issue was pinned to. */\n  repository: Repository;\n};\n\n/** The connection type for PinnedIssue. */\nexport type PinnedIssueConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PinnedIssueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PinnedIssue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PinnedIssueEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PinnedIssue>;\n};\n\n/** Audit log entry for a private_repository_forking.disable event. */\nexport type PrivateRepositoryForkingDisableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the PrivateRepositoryForkingDisableAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a private_repository_forking.enable event. */\nexport type PrivateRepositoryForkingEnableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the PrivateRepositoryForkingEnableAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/**\n * A curatable list of repositories relating to a repository owner, which defaults\n * to showing the most popular repositories they own.\n */\nexport type ProfileItemShowcase = {\n  /** Whether or not the owner has pinned any repositories or gists. */\n  hasPinnedItems: Scalars['Boolean']['output'];\n  /**\n   * The repositories and gists in the showcase. If the profile owner has any\n   * pinned items, those will be returned. Otherwise, the profile owner's popular\n   * repositories will be returned.\n   */\n  items: PinnableItemConnection;\n};\n\n\n/**\n * A curatable list of repositories relating to a repository owner, which defaults\n * to showing the most popular repositories they own.\n */\nexport type ProfileItemShowcaseItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwner = {\n  /** Determine if this repository owner has any items that can be pinned to their profile. */\n  anyPinnableItems: Scalars['Boolean']['output'];\n  /** The public profile email. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the ProfileOwner object */\n  id: Scalars['ID']['output'];\n  /**\n   * Showcases a selection of repositories and gists that the profile owner has\n   * either curated or that have been selected automatically based on popularity.\n   */\n  itemShowcase: ProfileItemShowcase;\n  /** The public profile location. */\n  location?: Maybe<Scalars['String']['output']>;\n  /** The username used to login. */\n  login: Scalars['String']['output'];\n  /** The public profile name. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** A list of repositories and gists this profile owner can pin to their profile. */\n  pinnableItems: PinnableItemConnection;\n  /** A list of repositories and gists this profile owner has pinned to their profile */\n  pinnedItems: PinnableItemConnection;\n  /** Returns how many more items this profile owner can pin to their profile. */\n  pinnedItemsRemaining: Scalars['Int']['output'];\n  /** Can the viewer pin repositories and gists to the profile? */\n  viewerCanChangePinnedItems: Scalars['Boolean']['output'];\n  /** The public profile website URL. */\n  websiteUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerPinnableItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** Represents any entity on GitHub that has a profile page. */\nexport type ProfileOwnerPinnedItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type Project = Closable & Node & Updatable & {\n  /** The project's description body. */\n  body?: Maybe<Scalars['String']['output']>;\n  /** The projects description body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** Indicates if the object is closed (definition of closed may depend on type) */\n  closed: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** List of columns in the project */\n  columns: ProjectColumnConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who originally created the project. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the Project object */\n  id: Scalars['ID']['output'];\n  /** The project's name. */\n  name: Scalars['String']['output'];\n  /** The project's number. */\n  number: Scalars['Int']['output'];\n  /** The project's owner. Currently limited to repositories, organizations, and users. */\n  owner: ProjectOwner;\n  /** List of pending cards in this project */\n  pendingCards: ProjectCardConnection;\n  /** Project progress details. */\n  progress: ProjectProgress;\n  /** The HTTP path for this project */\n  resourcePath: Scalars['URI']['output'];\n  /** Whether the project is open or closed. */\n  state: ProjectState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this project */\n  url: Scalars['URI']['output'];\n  /** Indicates if the object can be closed by the viewer. */\n  viewerCanClose: Scalars['Boolean']['output'];\n  /** Indicates if the object can be reopened by the viewer. */\n  viewerCanReopen: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n};\n\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type ProjectColumnsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Projects manage issues, pull requests and notes within a project owner. */\nexport type ProjectPendingCardsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A card in a project. */\nexport type ProjectCard = Node & {\n  /**\n   * The project column this card is associated under. A card may only belong to one\n   * project column at a time. The column field will be null if the card is created\n   * in a pending state and has yet to be associated with a column. Once cards are\n   * associated with a column, they will not become pending in the future.\n   */\n  column?: Maybe<ProjectColumn>;\n  /** The card content item */\n  content?: Maybe<ProjectCardItem>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created this card */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ProjectCard object */\n  id: Scalars['ID']['output'];\n  /** Whether the card is archived */\n  isArchived: Scalars['Boolean']['output'];\n  /** The card note */\n  note?: Maybe<Scalars['String']['output']>;\n  /** The project that contains this card. */\n  project: Project;\n  /** The HTTP path for this card */\n  resourcePath: Scalars['URI']['output'];\n  /** The state of ProjectCard */\n  state?: Maybe<ProjectCardState>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this card */\n  url: Scalars['URI']['output'];\n};\n\n/** The possible archived states of a project card. */\nexport enum ProjectCardArchivedState {\n  /** A project card that is archived */\n  Archived = 'ARCHIVED',\n  /** A project card that is not archived */\n  NotArchived = 'NOT_ARCHIVED'\n}\n\n/** The connection type for ProjectCard. */\nexport type ProjectCardConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectCardEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectCard>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectCardEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectCard>;\n};\n\n/** An issue or PR and its owning repository to be used in a project card. */\nexport type ProjectCardImport = {\n  /** The issue or pull request number. */\n  number: Scalars['Int']['input'];\n  /** Repository name with owner (owner/repository). */\n  repository: Scalars['String']['input'];\n};\n\n/** Types that can be inside Project Cards. */\nexport type ProjectCardItem = Issue | PullRequest;\n\n/** Various content states of a ProjectCard */\nexport enum ProjectCardState {\n  /** The card has content only. */\n  ContentOnly = 'CONTENT_ONLY',\n  /** The card has a note only. */\n  NoteOnly = 'NOTE_ONLY',\n  /** The card is redacted. */\n  Redacted = 'REDACTED'\n}\n\n/** A column inside a project. */\nexport type ProjectColumn = Node & {\n  /** List of cards in the column */\n  cards: ProjectCardConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ProjectColumn object */\n  id: Scalars['ID']['output'];\n  /** The project column's name. */\n  name: Scalars['String']['output'];\n  /** The project that contains this column. */\n  project: Project;\n  /** The semantic purpose of the column */\n  purpose?: Maybe<ProjectColumnPurpose>;\n  /** The HTTP path for this project column */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this project column */\n  url: Scalars['URI']['output'];\n};\n\n\n/** A column inside a project. */\nexport type ProjectColumnCardsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for ProjectColumn. */\nexport type ProjectColumnConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectColumnEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectColumn>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectColumnEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectColumn>;\n};\n\n/** A project column and a list of its issues and PRs. */\nexport type ProjectColumnImport = {\n  /** The name of the column. */\n  columnName: Scalars['String']['input'];\n  /** A list of issues and pull requests in the column. */\n  issues?: InputMaybe<Array<ProjectCardImport>>;\n  /** The position of the column, starting from 0. */\n  position: Scalars['Int']['input'];\n};\n\n/** The semantic purpose of the column - todo, in progress, or done. */\nexport enum ProjectColumnPurpose {\n  /** The column contains cards which are complete */\n  Done = 'DONE',\n  /** The column contains cards which are currently being worked on */\n  InProgress = 'IN_PROGRESS',\n  /** The column contains cards still to be worked on */\n  Todo = 'TODO'\n}\n\n/** A list of projects associated with the owner. */\nexport type ProjectConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Project>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Project>;\n};\n\n/** Ways in which lists of projects can be ordered upon return. */\nexport type ProjectOrder = {\n  /** The direction in which to order projects by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order projects by. */\n  field: ProjectOrderField;\n};\n\n/** Properties by which project connections can be ordered. */\nexport enum ProjectOrderField {\n  /** Order projects by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order projects by name */\n  Name = 'NAME',\n  /** Order projects by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Represents an owner of a Project. */\nexport type ProjectOwner = {\n  /** The Node ID of the ProjectOwner object */\n  id: Scalars['ID']['output'];\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** The HTTP path listing owners projects */\n  projectsResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL listing owners projects */\n  projectsUrl: Scalars['URI']['output'];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars['Boolean']['output'];\n};\n\n\n/** Represents an owner of a Project. */\nexport type ProjectOwnerProjectArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** Represents an owner of a Project. */\nexport type ProjectOwnerProjectsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars['String']['input']>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n/** Project progress stats. */\nexport type ProjectProgress = {\n  /** The number of done cards. */\n  doneCount: Scalars['Int']['output'];\n  /** The percentage of done cards. */\n  donePercentage: Scalars['Float']['output'];\n  /** Whether progress tracking is enabled and cards with purpose exist for this project */\n  enabled: Scalars['Boolean']['output'];\n  /** The number of in-progress cards. */\n  inProgressCount: Scalars['Int']['output'];\n  /** The percentage of in-progress cards. */\n  inProgressPercentage: Scalars['Float']['output'];\n  /** The number of to do cards. */\n  todoCount: Scalars['Int']['output'];\n  /** The percentage of to do cards. */\n  todoPercentage: Scalars['Float']['output'];\n};\n\n/** State of the project; either 'open' or 'closed' */\nexport enum ProjectState {\n  /** The project is closed. */\n  Closed = 'CLOSED',\n  /** The project is open. */\n  Open = 'OPEN'\n}\n\n/** GitHub-provided templates for Projects */\nexport enum ProjectTemplate {\n  /** Create a board with v2 triggers to automatically move cards across To do, In progress and Done columns. */\n  AutomatedKanbanV2 = 'AUTOMATED_KANBAN_V2',\n  /** Create a board with triggers to automatically move cards across columns with review automation. */\n  AutomatedReviewsKanban = 'AUTOMATED_REVIEWS_KANBAN',\n  /** Create a board with columns for To do, In progress and Done. */\n  BasicKanban = 'BASIC_KANBAN',\n  /** Create a board to triage and prioritize bugs with To do, priority, and Done columns. */\n  BugTriage = 'BUG_TRIAGE'\n}\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2 = Closable & Node & Updatable & {\n  /** Returns true if the project is closed. */\n  closed: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who originally created the project. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** A field of the project */\n  field?: Maybe<ProjectV2FieldConfiguration>;\n  /** List of fields and their constraints in the project */\n  fields: ProjectV2FieldConfigurationConnection;\n  /** The Node ID of the ProjectV2 object */\n  id: Scalars['ID']['output'];\n  /** List of items in the project */\n  items: ProjectV2ItemConnection;\n  /** The project's number. */\n  number: Scalars['Int']['output'];\n  /** The project's owner. Currently limited to organizations and users. */\n  owner: ProjectV2Owner;\n  /** Returns true if the project is public. */\n  public: Scalars['Boolean']['output'];\n  /** The project's readme. */\n  readme?: Maybe<Scalars['String']['output']>;\n  /** The repositories the project is linked to. */\n  repositories: RepositoryConnection;\n  /** The HTTP path for this project */\n  resourcePath: Scalars['URI']['output'];\n  /** The project's short description. */\n  shortDescription?: Maybe<Scalars['String']['output']>;\n  /** List of the status updates in the project. */\n  statusUpdates: ProjectV2StatusUpdateConnection;\n  /** The teams the project is linked to. */\n  teams: TeamConnection;\n  /** Returns true if this project is a template. */\n  template: Scalars['Boolean']['output'];\n  /** The project's name. */\n  title: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this project */\n  url: Scalars['URI']['output'];\n  /** A view of the project */\n  view?: Maybe<ProjectV2View>;\n  /** Indicates if the object can be closed by the viewer. */\n  viewerCanClose: Scalars['Boolean']['output'];\n  /** Indicates if the object can be reopened by the viewer. */\n  viewerCanReopen: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** List of views in the project */\n  views: ProjectV2ViewConnection;\n  /** A workflow of the project */\n  workflow?: Maybe<ProjectV2Workflow>;\n  /** List of the workflows in the project */\n  workflows: ProjectV2WorkflowConnection;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2FieldArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2FieldsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2FieldOrder>;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2ItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2ItemOrder>;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2RepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2StatusUpdatesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2StatusOrder>;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2TeamsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<TeamOrder>;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2ViewArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2ViewsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2ViewOrder>;\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2WorkflowArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** New projects that manage issues, pull requests and drafts using tables and boards. */\nexport type ProjectV2WorkflowsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2WorkflowOrder>;\n};\n\n/** Possible collaborators for a project. */\nexport type ProjectV2Actor = Team | User;\n\n/** The connection type for ProjectV2Actor. */\nexport type ProjectV2ActorConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2ActorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2Actor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2ActorEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2Actor>;\n};\n\n/** A collaborator to update on a project. Only one of the userId or teamId should be provided. */\nexport type ProjectV2Collaborator = {\n  /** The role to grant the collaborator */\n  role: ProjectV2Roles;\n  /** The ID of the team as a collaborator. */\n  teamId?: InputMaybe<Scalars['ID']['input']>;\n  /** The ID of the user as a collaborator. */\n  userId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** The connection type for ProjectV2. */\nexport type ProjectV2Connection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2Edge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** The type of a project field. */\nexport enum ProjectV2CustomFieldType {\n  /** Date */\n  Date = 'DATE',\n  /** Number */\n  Number = 'NUMBER',\n  /** Single Select */\n  SingleSelect = 'SINGLE_SELECT',\n  /** Text */\n  Text = 'TEXT'\n}\n\n/** An edge in a connection. */\nexport type ProjectV2Edge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2>;\n};\n\n/** A field inside a project. */\nexport type ProjectV2Field = Node & ProjectV2FieldCommon & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The field's type. */\n  dataType: ProjectV2FieldType;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ProjectV2Field object */\n  id: Scalars['ID']['output'];\n  /** The project field's name. */\n  name: Scalars['String']['output'];\n  /** The project that contains this field. */\n  project: ProjectV2;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** Common fields across different project field types */\nexport type ProjectV2FieldCommon = {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The field's type. */\n  dataType: ProjectV2FieldType;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ProjectV2FieldCommon object */\n  id: Scalars['ID']['output'];\n  /** The project field's name. */\n  name: Scalars['String']['output'];\n  /** The project that contains this field. */\n  project: ProjectV2;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** Configurations for project fields. */\nexport type ProjectV2FieldConfiguration = ProjectV2Field | ProjectV2IterationField | ProjectV2SingleSelectField;\n\n/** The connection type for ProjectV2FieldConfiguration. */\nexport type ProjectV2FieldConfigurationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2FieldConfigurationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2FieldConfiguration>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2FieldConfigurationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2FieldConfiguration>;\n};\n\n/** The connection type for ProjectV2Field. */\nexport type ProjectV2FieldConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2FieldEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2Field>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2FieldEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2Field>;\n};\n\n/** Ordering options for project v2 field connections */\nexport type ProjectV2FieldOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order the project v2 fields by. */\n  field: ProjectV2FieldOrderField;\n};\n\n/** Properties by which project v2 field connections can be ordered. */\nexport enum ProjectV2FieldOrderField {\n  /** Order project v2 fields by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order project v2 fields by name */\n  Name = 'NAME',\n  /** Order project v2 fields by position */\n  Position = 'POSITION'\n}\n\n/** The type of a project field. */\nexport enum ProjectV2FieldType {\n  /** Assignees */\n  Assignees = 'ASSIGNEES',\n  /** Date */\n  Date = 'DATE',\n  /** Iteration */\n  Iteration = 'ITERATION',\n  /** Labels */\n  Labels = 'LABELS',\n  /** Linked Pull Requests */\n  LinkedPullRequests = 'LINKED_PULL_REQUESTS',\n  /** Milestone */\n  Milestone = 'MILESTONE',\n  /** Number */\n  Number = 'NUMBER',\n  /** Repository */\n  Repository = 'REPOSITORY',\n  /** Reviewers */\n  Reviewers = 'REVIEWERS',\n  /** Single Select */\n  SingleSelect = 'SINGLE_SELECT',\n  /** Text */\n  Text = 'TEXT',\n  /** Title */\n  Title = 'TITLE',\n  /** Tracked by */\n  TrackedBy = 'TRACKED_BY',\n  /** Tracks */\n  Tracks = 'TRACKS'\n}\n\n/** The values that can be used to update a field of an item inside a Project. Only 1 value can be updated at a time. */\nexport type ProjectV2FieldValue = {\n  /** The ISO 8601 date to set on the field. */\n  date?: InputMaybe<Scalars['Date']['input']>;\n  /** The id of the iteration to set on the field. */\n  iterationId?: InputMaybe<Scalars['String']['input']>;\n  /** The number to set on the field. */\n  number?: InputMaybe<Scalars['Float']['input']>;\n  /** The id of the single select option to set on the field. */\n  singleSelectOptionId?: InputMaybe<Scalars['String']['input']>;\n  /** The text to set on the field. */\n  text?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Ways in which to filter lists of projects. */\nexport type ProjectV2Filters = {\n  /** List project v2 filtered by the state given. */\n  state?: InputMaybe<ProjectV2State>;\n};\n\n/** An item within a Project. */\nexport type ProjectV2Item = Node & {\n  /** The content of the referenced draft issue, issue, or pull request */\n  content?: Maybe<ProjectV2ItemContent>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The field value of the first project field which matches the 'name' argument that is set on the item. */\n  fieldValueByName?: Maybe<ProjectV2ItemFieldValue>;\n  /** The field values that are set on the item. */\n  fieldValues: ProjectV2ItemFieldValueConnection;\n  /** Identifies the primary key from the database as a BigInt. */\n  fullDatabaseId?: Maybe<Scalars['BigInt']['output']>;\n  /** The Node ID of the ProjectV2Item object */\n  id: Scalars['ID']['output'];\n  /** Whether the item is archived. */\n  isArchived: Scalars['Boolean']['output'];\n  /** The project that contains this item. */\n  project: ProjectV2;\n  /** The type of the item. */\n  type: ProjectV2ItemType;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n\n/** An item within a Project. */\nexport type ProjectV2ItemFieldValueByNameArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/** An item within a Project. */\nexport type ProjectV2ItemFieldValuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2ItemFieldValueOrder>;\n};\n\n/** The connection type for ProjectV2Item. */\nexport type ProjectV2ItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2ItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2Item>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Types that can be inside Project Items. */\nexport type ProjectV2ItemContent = DraftIssue | Issue | PullRequest;\n\n/** An edge in a connection. */\nexport type ProjectV2ItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2Item>;\n};\n\n/** The value of a date field in a Project item. */\nexport type ProjectV2ItemFieldDateValue = Node & ProjectV2ItemFieldValueCommon & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** Date value for the field */\n  date?: Maybe<Scalars['Date']['output']>;\n  /** The project field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The Node ID of the ProjectV2ItemFieldDateValue object */\n  id: Scalars['ID']['output'];\n  /** The project item that contains this value. */\n  item: ProjectV2Item;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The value of an iteration field in a Project item. */\nexport type ProjectV2ItemFieldIterationValue = Node & ProjectV2ItemFieldValueCommon & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The duration of the iteration in days. */\n  duration: Scalars['Int']['output'];\n  /** The project field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The Node ID of the ProjectV2ItemFieldIterationValue object */\n  id: Scalars['ID']['output'];\n  /** The project item that contains this value. */\n  item: ProjectV2Item;\n  /** The ID of the iteration. */\n  iterationId: Scalars['String']['output'];\n  /** The start date of the iteration. */\n  startDate: Scalars['Date']['output'];\n  /** The title of the iteration. */\n  title: Scalars['String']['output'];\n  /** The title of the iteration, with HTML. */\n  titleHTML: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The value of the labels field in a Project item. */\nexport type ProjectV2ItemFieldLabelValue = {\n  /** The field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** Labels value of a field */\n  labels?: Maybe<LabelConnection>;\n};\n\n\n/** The value of the labels field in a Project item. */\nexport type ProjectV2ItemFieldLabelValueLabelsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The value of a milestone field in a Project item. */\nexport type ProjectV2ItemFieldMilestoneValue = {\n  /** The field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** Milestone value of a field */\n  milestone?: Maybe<Milestone>;\n};\n\n/** The value of a number field in a Project item. */\nexport type ProjectV2ItemFieldNumberValue = Node & ProjectV2ItemFieldValueCommon & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The project field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The Node ID of the ProjectV2ItemFieldNumberValue object */\n  id: Scalars['ID']['output'];\n  /** The project item that contains this value. */\n  item: ProjectV2Item;\n  /** Number as a float(8) */\n  number?: Maybe<Scalars['Float']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The value of a pull request field in a Project item. */\nexport type ProjectV2ItemFieldPullRequestValue = {\n  /** The field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The pull requests for this field */\n  pullRequests?: Maybe<PullRequestConnection>;\n};\n\n\n/** The value of a pull request field in a Project item. */\nexport type ProjectV2ItemFieldPullRequestValuePullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<PullRequestOrder>;\n};\n\n/** The value of a repository field in a Project item. */\nexport type ProjectV2ItemFieldRepositoryValue = {\n  /** The field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The repository for this field. */\n  repository?: Maybe<Repository>;\n};\n\n/** The value of a reviewers field in a Project item. */\nexport type ProjectV2ItemFieldReviewerValue = {\n  /** The field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The reviewers for this field. */\n  reviewers?: Maybe<RequestedReviewerConnection>;\n};\n\n\n/** The value of a reviewers field in a Project item. */\nexport type ProjectV2ItemFieldReviewerValueReviewersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The value of a single select field in a Project item. */\nexport type ProjectV2ItemFieldSingleSelectValue = Node & ProjectV2ItemFieldValueCommon & {\n  /** The color applied to the selected single-select option. */\n  color: ProjectV2SingleSelectFieldOptionColor;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** A plain-text description of the selected single-select option, such as what the option means. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The description of the selected single-select option, including HTML tags. */\n  descriptionHTML?: Maybe<Scalars['String']['output']>;\n  /** The project field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The Node ID of the ProjectV2ItemFieldSingleSelectValue object */\n  id: Scalars['ID']['output'];\n  /** The project item that contains this value. */\n  item: ProjectV2Item;\n  /** The name of the selected single select option. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** The html name of the selected single select option. */\n  nameHTML?: Maybe<Scalars['String']['output']>;\n  /** The id of the selected single select option. */\n  optionId?: Maybe<Scalars['String']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The value of a text field in a Project item. */\nexport type ProjectV2ItemFieldTextValue = Node & ProjectV2ItemFieldValueCommon & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The project field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The Node ID of the ProjectV2ItemFieldTextValue object */\n  id: Scalars['ID']['output'];\n  /** The project item that contains this value. */\n  item: ProjectV2Item;\n  /** Text value of a field */\n  text?: Maybe<Scalars['String']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The value of a user field in a Project item. */\nexport type ProjectV2ItemFieldUserValue = {\n  /** The field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The users for this field */\n  users?: Maybe<UserConnection>;\n};\n\n\n/** The value of a user field in a Project item. */\nexport type ProjectV2ItemFieldUserValueUsersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Project field values */\nexport type ProjectV2ItemFieldValue = ProjectV2ItemFieldDateValue | ProjectV2ItemFieldIterationValue | ProjectV2ItemFieldLabelValue | ProjectV2ItemFieldMilestoneValue | ProjectV2ItemFieldNumberValue | ProjectV2ItemFieldPullRequestValue | ProjectV2ItemFieldRepositoryValue | ProjectV2ItemFieldReviewerValue | ProjectV2ItemFieldSingleSelectValue | ProjectV2ItemFieldTextValue | ProjectV2ItemFieldUserValue;\n\n/** Common fields across different project field value types */\nexport type ProjectV2ItemFieldValueCommon = {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created the item. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The project field that contains this value. */\n  field: ProjectV2FieldConfiguration;\n  /** The Node ID of the ProjectV2ItemFieldValueCommon object */\n  id: Scalars['ID']['output'];\n  /** The project item that contains this value. */\n  item: ProjectV2Item;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for ProjectV2ItemFieldValue. */\nexport type ProjectV2ItemFieldValueConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2ItemFieldValueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2ItemFieldValue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2ItemFieldValueEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2ItemFieldValue>;\n};\n\n/** Ordering options for project v2 item field value connections */\nexport type ProjectV2ItemFieldValueOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order the project v2 item field values by. */\n  field: ProjectV2ItemFieldValueOrderField;\n};\n\n/** Properties by which project v2 item field value connections can be ordered. */\nexport enum ProjectV2ItemFieldValueOrderField {\n  /** Order project v2 item field values by the their position in the project */\n  Position = 'POSITION'\n}\n\n/** Ordering options for project v2 item connections */\nexport type ProjectV2ItemOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order the project v2 items by. */\n  field: ProjectV2ItemOrderField;\n};\n\n/** Properties by which project v2 item connections can be ordered. */\nexport enum ProjectV2ItemOrderField {\n  /** Order project v2 items by the their position in the project */\n  Position = 'POSITION'\n}\n\n/** The type of a project item. */\nexport enum ProjectV2ItemType {\n  /** Draft Issue */\n  DraftIssue = 'DRAFT_ISSUE',\n  /** Issue */\n  Issue = 'ISSUE',\n  /** Pull Request */\n  PullRequest = 'PULL_REQUEST',\n  /** Redacted Item */\n  Redacted = 'REDACTED'\n}\n\n/** An iteration field inside a project. */\nexport type ProjectV2IterationField = Node & ProjectV2FieldCommon & {\n  /** Iteration configuration settings */\n  configuration: ProjectV2IterationFieldConfiguration;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The field's type. */\n  dataType: ProjectV2FieldType;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ProjectV2IterationField object */\n  id: Scalars['ID']['output'];\n  /** The project field's name. */\n  name: Scalars['String']['output'];\n  /** The project that contains this field. */\n  project: ProjectV2;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** Iteration field configuration for a project. */\nexport type ProjectV2IterationFieldConfiguration = {\n  /** The iteration's completed iterations */\n  completedIterations: Array<ProjectV2IterationFieldIteration>;\n  /** The iteration's duration in days */\n  duration: Scalars['Int']['output'];\n  /** The iteration's iterations */\n  iterations: Array<ProjectV2IterationFieldIteration>;\n  /** The iteration's start day of the week */\n  startDay: Scalars['Int']['output'];\n};\n\n/** Iteration field iteration settings for a project. */\nexport type ProjectV2IterationFieldIteration = {\n  /** The iteration's duration in days */\n  duration: Scalars['Int']['output'];\n  /** The iteration's ID. */\n  id: Scalars['String']['output'];\n  /** The iteration's start date */\n  startDate: Scalars['Date']['output'];\n  /** The iteration's title. */\n  title: Scalars['String']['output'];\n  /** The iteration's html title. */\n  titleHTML: Scalars['String']['output'];\n};\n\n/** Ways in which lists of projects can be ordered upon return. */\nexport type ProjectV2Order = {\n  /** The direction in which to order projects by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order projects by. */\n  field: ProjectV2OrderField;\n};\n\n/** Properties by which projects can be ordered. */\nexport enum ProjectV2OrderField {\n  /** The project's date and time of creation */\n  CreatedAt = 'CREATED_AT',\n  /** The project's number */\n  Number = 'NUMBER',\n  /** The project's title */\n  Title = 'TITLE',\n  /** The project's date and time of update */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Represents an owner of a project. */\nexport type ProjectV2Owner = {\n  /** The Node ID of the ProjectV2Owner object */\n  id: Scalars['ID']['output'];\n  /** Find a project by number. */\n  projectV2?: Maybe<ProjectV2>;\n  /** A list of projects under the owner. */\n  projectsV2: ProjectV2Connection;\n};\n\n\n/** Represents an owner of a project. */\nexport type ProjectV2OwnerProjectV2Args = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** Represents an owner of a project. */\nexport type ProjectV2OwnerProjectsV2Args = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  minPermissionLevel?: InputMaybe<ProjectV2PermissionLevel>;\n  orderBy?: InputMaybe<ProjectV2Order>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** The possible roles of a collaborator on a project. */\nexport enum ProjectV2PermissionLevel {\n  /** The collaborator can view, edit, and maange the settings of the project */\n  Admin = 'ADMIN',\n  /** The collaborator can view the project */\n  Read = 'READ',\n  /** The collaborator can view and edit the project */\n  Write = 'WRITE'\n}\n\n/** Recent projects for the owner. */\nexport type ProjectV2Recent = {\n  /** Recent projects that this user has modified in the context of the owner. */\n  recentProjects: ProjectV2Connection;\n};\n\n\n/** Recent projects for the owner. */\nexport type ProjectV2RecentRecentProjectsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The possible roles of a collaborator on a project. */\nexport enum ProjectV2Roles {\n  /** The collaborator can view, edit, and maange the settings of the project */\n  Admin = 'ADMIN',\n  /** The collaborator has no direct access to the project */\n  None = 'NONE',\n  /** The collaborator can view the project */\n  Reader = 'READER',\n  /** The collaborator can view and edit the project */\n  Writer = 'WRITER'\n}\n\n/** A single select field inside a project. */\nexport type ProjectV2SingleSelectField = Node & ProjectV2FieldCommon & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The field's type. */\n  dataType: ProjectV2FieldType;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ProjectV2SingleSelectField object */\n  id: Scalars['ID']['output'];\n  /** The project field's name. */\n  name: Scalars['String']['output'];\n  /** Options for the single select field */\n  options: Array<ProjectV2SingleSelectFieldOption>;\n  /** The project that contains this field. */\n  project: ProjectV2;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n\n/** A single select field inside a project. */\nexport type ProjectV2SingleSelectFieldOptionsArgs = {\n  names?: InputMaybe<Array<Scalars['String']['input']>>;\n};\n\n/** Single select field option for a configuration for a project. */\nexport type ProjectV2SingleSelectFieldOption = {\n  /** The option's display color. */\n  color: ProjectV2SingleSelectFieldOptionColor;\n  /** The option's plain-text description. */\n  description: Scalars['String']['output'];\n  /** The option's description, possibly containing HTML. */\n  descriptionHTML: Scalars['String']['output'];\n  /** The option's ID. */\n  id: Scalars['String']['output'];\n  /** The option's name. */\n  name: Scalars['String']['output'];\n  /** The option's html name. */\n  nameHTML: Scalars['String']['output'];\n};\n\n/** The display color of a single-select field option. */\nexport enum ProjectV2SingleSelectFieldOptionColor {\n  /** BLUE */\n  Blue = 'BLUE',\n  /** GRAY */\n  Gray = 'GRAY',\n  /** GREEN */\n  Green = 'GREEN',\n  /** ORANGE */\n  Orange = 'ORANGE',\n  /** PINK */\n  Pink = 'PINK',\n  /** PURPLE */\n  Purple = 'PURPLE',\n  /** RED */\n  Red = 'RED',\n  /** YELLOW */\n  Yellow = 'YELLOW'\n}\n\n/** Represents a single select field option */\nexport type ProjectV2SingleSelectFieldOptionInput = {\n  /** The display color of the option */\n  color: ProjectV2SingleSelectFieldOptionColor;\n  /** The description text of the option */\n  description: Scalars['String']['input'];\n  /** The name of the option */\n  name: Scalars['String']['input'];\n};\n\n/** Represents a sort by field and direction. */\nexport type ProjectV2SortBy = {\n  /** The direction of the sorting. Possible values are ASC and DESC. */\n  direction: OrderDirection;\n  /** The field by which items are sorted. */\n  field: ProjectV2Field;\n};\n\n/** The connection type for ProjectV2SortBy. */\nexport type ProjectV2SortByConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2SortByEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2SortBy>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2SortByEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2SortBy>;\n};\n\n/** Represents a sort by field and direction. */\nexport type ProjectV2SortByField = {\n  /** The direction of the sorting. Possible values are ASC and DESC. */\n  direction: OrderDirection;\n  /** The field by which items are sorted. */\n  field: ProjectV2FieldConfiguration;\n};\n\n/** The connection type for ProjectV2SortByField. */\nexport type ProjectV2SortByFieldConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2SortByFieldEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2SortByField>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2SortByFieldEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2SortByField>;\n};\n\n/** The possible states of a project v2. */\nexport enum ProjectV2State {\n  /** A project v2 that has been closed */\n  Closed = 'CLOSED',\n  /** A project v2 that is still open */\n  Open = 'OPEN'\n}\n\n/** Ways in which project v2 status updates can be ordered. */\nexport type ProjectV2StatusOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field by which to order nodes. */\n  field: ProjectV2StatusUpdateOrderField;\n};\n\n/** A status update within a project. */\nexport type ProjectV2StatusUpdate = Node & {\n  /** The body of the status update. */\n  body?: Maybe<Scalars['String']['output']>;\n  /** The body of the status update rendered to HTML. */\n  bodyHTML?: Maybe<Scalars['HTML']['output']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created the status update. */\n  creator?: Maybe<Actor>;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ProjectV2StatusUpdate object */\n  id: Scalars['ID']['output'];\n  /** The project that contains this status update. */\n  project: ProjectV2;\n  /** The start date of the status update. */\n  startDate?: Maybe<Scalars['Date']['output']>;\n  /** The status of the status update. */\n  status?: Maybe<ProjectV2StatusUpdateStatus>;\n  /** The target date of the status update. */\n  targetDate?: Maybe<Scalars['Date']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for ProjectV2StatusUpdate. */\nexport type ProjectV2StatusUpdateConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2StatusUpdateEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2StatusUpdate>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2StatusUpdateEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2StatusUpdate>;\n};\n\n/** Properties by which project v2 status updates can be ordered. */\nexport enum ProjectV2StatusUpdateOrderField {\n  /** Allows chronological ordering of project v2 status updates. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The possible statuses of a project v2. */\nexport enum ProjectV2StatusUpdateStatus {\n  /** A project v2 that is at risk and encountering some challenges. */\n  AtRisk = 'AT_RISK',\n  /** A project v2 that is complete. */\n  Complete = 'COMPLETE',\n  /** A project v2 that is inactive. */\n  Inactive = 'INACTIVE',\n  /** A project v2 that is off track and needs attention. */\n  OffTrack = 'OFF_TRACK',\n  /** A project v2 that is on track with no risks. */\n  OnTrack = 'ON_TRACK'\n}\n\n/** A view within a ProjectV2. */\nexport type ProjectV2View = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The view's visible fields. */\n  fields?: Maybe<ProjectV2FieldConfigurationConnection>;\n  /** The project view's filter. */\n  filter?: Maybe<Scalars['String']['output']>;\n  /**\n   * The view's group-by field.\n   * @deprecated The `ProjectV2View#order_by` API is deprecated in favour of the more capable `ProjectV2View#group_by_field` API. Check out the `ProjectV2View#group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.\n   */\n  groupBy?: Maybe<ProjectV2FieldConnection>;\n  /** The view's group-by field. */\n  groupByFields?: Maybe<ProjectV2FieldConfigurationConnection>;\n  /** The Node ID of the ProjectV2View object */\n  id: Scalars['ID']['output'];\n  /** The project view's layout. */\n  layout: ProjectV2ViewLayout;\n  /** The project view's name. */\n  name: Scalars['String']['output'];\n  /** The project view's number. */\n  number: Scalars['Int']['output'];\n  /** The project that contains this view. */\n  project: ProjectV2;\n  /**\n   * The view's sort-by config.\n   * @deprecated The `ProjectV2View#sort_by` API is deprecated in favour of the more capable `ProjectV2View#sort_by_fields` API. Check out the `ProjectV2View#sort_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.\n   */\n  sortBy?: Maybe<ProjectV2SortByConnection>;\n  /** The view's sort-by config. */\n  sortByFields?: Maybe<ProjectV2SortByFieldConnection>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /**\n   * The view's vertical-group-by field.\n   * @deprecated The `ProjectV2View#vertical_group_by` API is deprecated in favour of the more capable `ProjectV2View#vertical_group_by_fields` API. Check out the `ProjectV2View#vertical_group_by_fields` API as an example for the more capable alternative. Removal on 2023-04-01 UTC.\n   */\n  verticalGroupBy?: Maybe<ProjectV2FieldConnection>;\n  /** The view's vertical-group-by field. */\n  verticalGroupByFields?: Maybe<ProjectV2FieldConfigurationConnection>;\n  /**\n   * The view's visible fields.\n   * @deprecated The `ProjectV2View#visibleFields` API is deprecated in favour of the more capable `ProjectV2View#fields` API. Check out the `ProjectV2View#fields` API as an example for the more capable alternative. Removal on 2023-01-01 UTC.\n   */\n  visibleFields?: Maybe<ProjectV2FieldConnection>;\n};\n\n\n/** A view within a ProjectV2. */\nexport type ProjectV2ViewFieldsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2FieldOrder>;\n};\n\n\n/** A view within a ProjectV2. */\nexport type ProjectV2ViewGroupByArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2FieldOrder>;\n};\n\n\n/** A view within a ProjectV2. */\nexport type ProjectV2ViewGroupByFieldsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2FieldOrder>;\n};\n\n\n/** A view within a ProjectV2. */\nexport type ProjectV2ViewSortByArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A view within a ProjectV2. */\nexport type ProjectV2ViewSortByFieldsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A view within a ProjectV2. */\nexport type ProjectV2ViewVerticalGroupByArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2FieldOrder>;\n};\n\n\n/** A view within a ProjectV2. */\nexport type ProjectV2ViewVerticalGroupByFieldsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2FieldOrder>;\n};\n\n\n/** A view within a ProjectV2. */\nexport type ProjectV2ViewVisibleFieldsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectV2FieldOrder>;\n};\n\n/** The connection type for ProjectV2View. */\nexport type ProjectV2ViewConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2ViewEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2View>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2ViewEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2View>;\n};\n\n/** The layout of a project v2 view. */\nexport enum ProjectV2ViewLayout {\n  /** Board layout */\n  BoardLayout = 'BOARD_LAYOUT',\n  /** Roadmap layout */\n  RoadmapLayout = 'ROADMAP_LAYOUT',\n  /** Table layout */\n  TableLayout = 'TABLE_LAYOUT'\n}\n\n/** Ordering options for project v2 view connections */\nexport type ProjectV2ViewOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order the project v2 views by. */\n  field: ProjectV2ViewOrderField;\n};\n\n/** Properties by which project v2 view connections can be ordered. */\nexport enum ProjectV2ViewOrderField {\n  /** Order project v2 views by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order project v2 views by name */\n  Name = 'NAME',\n  /** Order project v2 views by position */\n  Position = 'POSITION'\n}\n\n/** A workflow inside a project. */\nexport type ProjectV2Workflow = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** Whether the workflow is enabled. */\n  enabled: Scalars['Boolean']['output'];\n  /** The Node ID of the ProjectV2Workflow object */\n  id: Scalars['ID']['output'];\n  /** The name of the workflow. */\n  name: Scalars['String']['output'];\n  /** The number of the workflow. */\n  number: Scalars['Int']['output'];\n  /** The project that contains this workflow. */\n  project: ProjectV2;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for ProjectV2Workflow. */\nexport type ProjectV2WorkflowConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ProjectV2WorkflowEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ProjectV2Workflow>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ProjectV2WorkflowEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ProjectV2Workflow>;\n};\n\n/** Ordering options for project v2 workflows connections */\nexport type ProjectV2WorkflowOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order the project v2 workflows by. */\n  field: ProjectV2WorkflowsOrderField;\n};\n\n/** Properties by which project workflows can be ordered. */\nexport enum ProjectV2WorkflowsOrderField {\n  /** The date and time of the workflow creation */\n  CreatedAt = 'CREATED_AT',\n  /** The name of the workflow */\n  Name = 'NAME',\n  /** The number of the workflow */\n  Number = 'NUMBER',\n  /** The date and time of the workflow update */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** A property that must match */\nexport type PropertyTargetDefinition = {\n  /** The name of the property */\n  name: Scalars['String']['output'];\n  /** The values to match for */\n  propertyValues: Array<Scalars['String']['output']>;\n  /** The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified */\n  source?: Maybe<Scalars['String']['output']>;\n};\n\n/** A property that must match */\nexport type PropertyTargetDefinitionInput = {\n  /** The name of the property */\n  name: Scalars['String']['input'];\n  /** The values to match for */\n  propertyValues: Array<Scalars['String']['input']>;\n  /** The source of the property. Choose 'custom' or 'system'. Defaults to 'custom' if not specified */\n  source?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A user's public key. */\nexport type PublicKey = Node & {\n  /** The last time this authorization was used to perform an action. Values will be null for keys not owned by the user. */\n  accessedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Identifies the date and time when the key was created. Keys created before\n   * March 5th, 2014 have inaccurate values. Values will be null for keys not owned by the user.\n   */\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The fingerprint for this PublicKey. */\n  fingerprint: Scalars['String']['output'];\n  /** The Node ID of the PublicKey object */\n  id: Scalars['ID']['output'];\n  /** Whether this PublicKey is read-only or not. Values will be null for keys not owned by the user. */\n  isReadOnly?: Maybe<Scalars['Boolean']['output']>;\n  /** The public key string. */\n  key: Scalars['String']['output'];\n  /**\n   * Identifies the date and time when the key was updated. Keys created before\n   * March 5th, 2014 may have inaccurate values. Values will be null for keys not\n   * owned by the user.\n   */\n  updatedAt?: Maybe<Scalars['DateTime']['output']>;\n};\n\n/** The connection type for PublicKey. */\nexport type PublicKeyConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PublicKeyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PublicKey>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PublicKeyEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PublicKey>;\n};\n\n/** Autogenerated input type of PublishSponsorsTier */\nexport type PublishSponsorsTierInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the draft tier to publish. */\n  tierId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of PublishSponsorsTier. */\nexport type PublishSponsorsTierPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The tier that was published. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n};\n\n/** A repository pull request. */\nexport type PullRequest = Assignable & Closable & Comment & Labelable & Lockable & Node & ProjectV2Owner & Reactable & RepositoryNode & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment & {\n  /** Reason that the conversation was locked. */\n  activeLockReason?: Maybe<LockReason>;\n  /** The number of additions in this pull request. */\n  additions: Scalars['Int']['output'];\n  /** A list of Users assigned to this object. */\n  assignees: UserConnection;\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Returns the auto-merge request object if one exists for this pull request. */\n  autoMergeRequest?: Maybe<AutoMergeRequest>;\n  /** Identifies the base Ref associated with the pull request. */\n  baseRef?: Maybe<Ref>;\n  /** Identifies the name of the base Ref associated with the pull request, even if the ref has been deleted. */\n  baseRefName: Scalars['String']['output'];\n  /** Identifies the oid of the base ref associated with the pull request, even if the ref has been deleted. */\n  baseRefOid: Scalars['GitObjectID']['output'];\n  /** The repository associated with this pull request's base Ref. */\n  baseRepository?: Maybe<Repository>;\n  /** The body as Markdown. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /** Whether or not the pull request is rebaseable. */\n  canBeRebased: Scalars['Boolean']['output'];\n  /** The number of changed files in this pull request. */\n  changedFiles: Scalars['Int']['output'];\n  /** The HTTP path for the checks of this pull request. */\n  checksResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for the checks of this pull request. */\n  checksUrl: Scalars['URI']['output'];\n  /** `true` if the pull request is closed */\n  closed: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was closed. */\n  closedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** List of issues that were may be closed by this pull request */\n  closingIssuesReferences?: Maybe<IssueConnection>;\n  /** A list of comments associated with the pull request. */\n  comments: IssueCommentConnection;\n  /** A list of commits present in this pull request's head branch not present in the base branch. */\n  commits: PullRequestCommitConnection;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /**\n   * Identifies the primary key from the database.\n   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC.\n   */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The number of deletions in this pull request. */\n  deletions: Scalars['Int']['output'];\n  /** The actor who edited this pull request's body. */\n  editor?: Maybe<Actor>;\n  /** Lists the files changed within this pull request. */\n  files?: Maybe<PullRequestChangedFileConnection>;\n  /** Identifies the primary key from the database as a BigInt. */\n  fullDatabaseId?: Maybe<Scalars['BigInt']['output']>;\n  /** Identifies the head Ref associated with the pull request. */\n  headRef?: Maybe<Ref>;\n  /** Identifies the name of the head Ref associated with the pull request, even if the ref has been deleted. */\n  headRefName: Scalars['String']['output'];\n  /** Identifies the oid of the head ref associated with the pull request, even if the ref has been deleted. */\n  headRefOid: Scalars['GitObjectID']['output'];\n  /** The repository associated with this pull request's head Ref. */\n  headRepository?: Maybe<Repository>;\n  /** The owner of the repository associated with this pull request's head Ref. */\n  headRepositoryOwner?: Maybe<RepositoryOwner>;\n  /** The hovercard information for this issue */\n  hovercard: Hovercard;\n  /** The Node ID of the PullRequest object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** The head and base repositories are different. */\n  isCrossRepository: Scalars['Boolean']['output'];\n  /** Identifies if the pull request is a draft. */\n  isDraft: Scalars['Boolean']['output'];\n  /** Indicates whether the pull request is in a merge queue */\n  isInMergeQueue: Scalars['Boolean']['output'];\n  /** Indicates whether the pull request's base ref has a merge queue enabled. */\n  isMergeQueueEnabled: Scalars['Boolean']['output'];\n  /** Is this pull request read by the viewer */\n  isReadByViewer?: Maybe<Scalars['Boolean']['output']>;\n  /** A list of labels associated with the object. */\n  labels?: Maybe<LabelConnection>;\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of latest reviews per user associated with the pull request. */\n  latestOpinionatedReviews?: Maybe<PullRequestReviewConnection>;\n  /** A list of latest reviews per user associated with the pull request that are not also pending review. */\n  latestReviews?: Maybe<PullRequestReviewConnection>;\n  /** `true` if the pull request is locked */\n  locked: Scalars['Boolean']['output'];\n  /** Indicates whether maintainers can modify the pull request. */\n  maintainerCanModify: Scalars['Boolean']['output'];\n  /** The commit that was created when this pull request was merged. */\n  mergeCommit?: Maybe<Commit>;\n  /** The merge queue for the pull request's base branch */\n  mergeQueue?: Maybe<MergeQueue>;\n  /** The merge queue entry of the pull request in the base branch's merge queue */\n  mergeQueueEntry?: Maybe<MergeQueueEntry>;\n  /** Detailed information about the current pull request merge state status. */\n  mergeStateStatus: MergeStateStatus;\n  /** Whether or not the pull request can be merged based on the existence of merge conflicts. */\n  mergeable: MergeableState;\n  /** Whether or not the pull request was merged. */\n  merged: Scalars['Boolean']['output'];\n  /** The date and time that the pull request was merged. */\n  mergedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The actor who merged the pull request. */\n  mergedBy?: Maybe<Actor>;\n  /** Identifies the milestone associated with the pull request. */\n  milestone?: Maybe<Milestone>;\n  /** Identifies the pull request number. */\n  number: Scalars['Int']['output'];\n  /** A list of Users that are participating in the Pull Request conversation. */\n  participants: UserConnection;\n  /** The permalink to the pull request. */\n  permalink: Scalars['URI']['output'];\n  /**\n   * The commit that GitHub automatically generated to test if this pull request\n   * could be merged. This field will not return a value if the pull request is\n   * merged, or if the test merge commit is still being generated. See the\n   * `mergeable` field for more details on the mergeability of the pull request.\n   */\n  potentialMergeCommit?: Maybe<Commit>;\n  /** List of project cards associated with this pull request. */\n  projectCards: ProjectCardConnection;\n  /** List of project items associated with this pull request. */\n  projectItems: ProjectV2ItemConnection;\n  /** Find a project by number. */\n  projectV2?: Maybe<ProjectV2>;\n  /** A list of projects under the owner. */\n  projectsV2: ProjectV2Connection;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path for this pull request. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP path for reverting this pull request. */\n  revertResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for reverting this pull request. */\n  revertUrl: Scalars['URI']['output'];\n  /** The current status of this pull request with respect to code review. */\n  reviewDecision?: Maybe<PullRequestReviewDecision>;\n  /** A list of review requests associated with the pull request. */\n  reviewRequests?: Maybe<ReviewRequestConnection>;\n  /** The list of all review threads for this pull request. */\n  reviewThreads: PullRequestReviewThreadConnection;\n  /** A list of reviews associated with the pull request. */\n  reviews?: Maybe<PullRequestReviewConnection>;\n  /** Identifies the state of the pull request. */\n  state: PullRequestState;\n  /** Check and Status rollup information for the PR's head ref. */\n  statusCheckRollup?: Maybe<StatusCheckRollup>;\n  /** A list of reviewer suggestions based on commit history and past review comments. */\n  suggestedReviewers: Array<Maybe<SuggestedReviewer>>;\n  /**\n   * A list of events, comments, commits, etc. associated with the pull request.\n   * @deprecated `timeline` will be removed Use PullRequest.timelineItems instead. Removal on 2020-10-01 UTC.\n   */\n  timeline: PullRequestTimelineConnection;\n  /** A list of events, comments, commits, etc. associated with the pull request. */\n  timelineItems: PullRequestTimelineItemsConnection;\n  /** Identifies the pull request title. */\n  title: Scalars['String']['output'];\n  /** Identifies the pull request title rendered to HTML. */\n  titleHTML: Scalars['HTML']['output'];\n  /** Returns a count of how many comments this pull request has received. */\n  totalCommentsCount?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this pull request. */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Whether or not the viewer can apply suggestion. */\n  viewerCanApplySuggestion: Scalars['Boolean']['output'];\n  /** Indicates if the object can be closed by the viewer. */\n  viewerCanClose: Scalars['Boolean']['output'];\n  /** Check if the viewer can restore the deleted head ref. */\n  viewerCanDeleteHeadRef: Scalars['Boolean']['output'];\n  /** Whether or not the viewer can disable auto-merge */\n  viewerCanDisableAutoMerge: Scalars['Boolean']['output'];\n  /** Can the viewer edit files within this pull request. */\n  viewerCanEditFiles: Scalars['Boolean']['output'];\n  /** Whether or not the viewer can enable auto-merge */\n  viewerCanEnableAutoMerge: Scalars['Boolean']['output'];\n  /** Indicates whether the viewer can bypass branch protections and merge the pull request immediately */\n  viewerCanMergeAsAdmin: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Indicates if the object can be reopened by the viewer. */\n  viewerCanReopen: Scalars['Boolean']['output'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /**\n   * Whether or not the viewer can update the head ref of this PR, by merging or rebasing the base ref.\n   * If the head ref is up to date or unable to be updated by this user, this will return false.\n   */\n  viewerCanUpdateBranch: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n  /** The latest review given from the viewer. */\n  viewerLatestReview?: Maybe<PullRequestReview>;\n  /** The person who has requested the viewer for review on this pull request. */\n  viewerLatestReviewRequest?: Maybe<ReviewRequest>;\n  /** The merge body text for the viewer and method. */\n  viewerMergeBodyText: Scalars['String']['output'];\n  /** The merge headline text for the viewer and method. */\n  viewerMergeHeadlineText: Scalars['String']['output'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestAssigneesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestClosingIssuesReferencesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  userLinkedOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestCommitsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestFilesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestHovercardArgs = {\n  includeNotificationContexts?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestLabelsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<LabelOrder>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestLatestOpinionatedReviewsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  writersOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestLatestReviewsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestParticipantsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestProjectCardsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  archivedStates?: InputMaybe<Array<InputMaybe<ProjectCardArchivedState>>>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestProjectItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includeArchived?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestProjectV2Args = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository pull request. */\nexport type PullRequestProjectsV2Args = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  minPermissionLevel?: InputMaybe<ProjectV2PermissionLevel>;\n  orderBy?: InputMaybe<ProjectV2Order>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestReviewRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestReviewThreadsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestReviewsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  author?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  states?: InputMaybe<Array<PullRequestReviewState>>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestTimelineArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestTimelineItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  itemTypes?: InputMaybe<Array<PullRequestTimelineItemsItemType>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  skip?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestViewerMergeBodyTextArgs = {\n  mergeType?: InputMaybe<PullRequestMergeMethod>;\n};\n\n\n/** A repository pull request. */\nexport type PullRequestViewerMergeHeadlineTextArgs = {\n  mergeType?: InputMaybe<PullRequestMergeMethod>;\n};\n\n/** The possible methods for updating a pull request's head branch with the base branch. */\nexport enum PullRequestBranchUpdateMethod {\n  /** Update branch via merge */\n  Merge = 'MERGE',\n  /** Update branch via rebase */\n  Rebase = 'REBASE'\n}\n\n/** A file changed in a pull request. */\nexport type PullRequestChangedFile = {\n  /** The number of additions to the file. */\n  additions: Scalars['Int']['output'];\n  /** How the file was changed in this PullRequest */\n  changeType: PatchStatus;\n  /** The number of deletions to the file. */\n  deletions: Scalars['Int']['output'];\n  /** The path of the file. */\n  path: Scalars['String']['output'];\n  /** The state of the file for the viewer. */\n  viewerViewedState: FileViewedState;\n};\n\n/** The connection type for PullRequestChangedFile. */\nexport type PullRequestChangedFileConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestChangedFileEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestChangedFile>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestChangedFileEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestChangedFile>;\n};\n\n/** Represents a Git commit part of a pull request. */\nexport type PullRequestCommit = Node & UniformResourceLocatable & {\n  /** The Git commit object */\n  commit: Commit;\n  /** The Node ID of the PullRequestCommit object */\n  id: Scalars['ID']['output'];\n  /** The pull request this commit belongs to */\n  pullRequest: PullRequest;\n  /** The HTTP path for this pull request commit */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this pull request commit */\n  url: Scalars['URI']['output'];\n};\n\n/** Represents a commit comment thread part of a pull request. */\nexport type PullRequestCommitCommentThread = Node & RepositoryNode & {\n  /** The comments that exist in this thread. */\n  comments: CommitCommentConnection;\n  /** The commit the comments were made on. */\n  commit: Commit;\n  /** The Node ID of the PullRequestCommitCommentThread object */\n  id: Scalars['ID']['output'];\n  /** The file the comments were made on. */\n  path?: Maybe<Scalars['String']['output']>;\n  /** The position in the diff for the commit that the comment was made on. */\n  position?: Maybe<Scalars['Int']['output']>;\n  /** The pull request this commit comment thread belongs to */\n  pullRequest: PullRequest;\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n\n/** Represents a commit comment thread part of a pull request. */\nexport type PullRequestCommitCommentThreadCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for PullRequestCommit. */\nexport type PullRequestCommitConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestCommitEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestCommit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestCommitEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestCommit>;\n};\n\n/** The connection type for PullRequest. */\nexport type PullRequestConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** This aggregates pull requests opened by a user within one repository. */\nexport type PullRequestContributionsByRepository = {\n  /** The pull request contributions. */\n  contributions: CreatedPullRequestContributionConnection;\n  /** The repository in which the pull requests were opened. */\n  repository: Repository;\n};\n\n\n/** This aggregates pull requests opened by a user within one repository. */\nexport type PullRequestContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** An edge in a connection. */\nexport type PullRequestEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequest>;\n};\n\n/** Represents available types of methods to use when merging a pull request. */\nexport enum PullRequestMergeMethod {\n  /** Add all commits from the head branch to the base branch with a merge commit. */\n  Merge = 'MERGE',\n  /** Add all commits from the head branch onto the base branch individually. */\n  Rebase = 'REBASE',\n  /** Combine all commits from the head branch into a single commit in the base branch. */\n  Squash = 'SQUASH'\n}\n\n/** Ways in which lists of issues can be ordered upon return. */\nexport type PullRequestOrder = {\n  /** The direction in which to order pull requests by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order pull requests by. */\n  field: PullRequestOrderField;\n};\n\n/** Properties by which pull_requests connections can be ordered. */\nexport enum PullRequestOrderField {\n  /** Order pull_requests by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order pull_requests by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */\nexport type PullRequestParameters = {\n  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */\n  dismissStaleReviewsOnPush: Scalars['Boolean']['output'];\n  /** Require an approving review in pull requests that modify files that have a designated code owner. */\n  requireCodeOwnerReview: Scalars['Boolean']['output'];\n  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */\n  requireLastPushApproval: Scalars['Boolean']['output'];\n  /** The number of approving reviews that are required before a pull request can be merged. */\n  requiredApprovingReviewCount: Scalars['Int']['output'];\n  /** All conversations on code must be resolved before a pull request can be merged. */\n  requiredReviewThreadResolution: Scalars['Boolean']['output'];\n};\n\n/** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */\nexport type PullRequestParametersInput = {\n  /** New, reviewable commits pushed will dismiss previous pull request review approvals. */\n  dismissStaleReviewsOnPush: Scalars['Boolean']['input'];\n  /** Require an approving review in pull requests that modify files that have a designated code owner. */\n  requireCodeOwnerReview: Scalars['Boolean']['input'];\n  /** Whether the most recent reviewable push must be approved by someone other than the person who pushed it. */\n  requireLastPushApproval: Scalars['Boolean']['input'];\n  /** The number of approving reviews that are required before a pull request can be merged. */\n  requiredApprovingReviewCount: Scalars['Int']['input'];\n  /** All conversations on code must be resolved before a pull request can be merged. */\n  requiredReviewThreadResolution: Scalars['Boolean']['input'];\n};\n\n/** A review object for a given pull request. */\nexport type PullRequestReview = Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment & {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** Indicates whether the author of this review has push access to the repository. */\n  authorCanPushToRepository: Scalars['Boolean']['output'];\n  /** Identifies the pull request review body. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body of this review rendered as plain text. */\n  bodyText: Scalars['String']['output'];\n  /** A list of review comments for the current pull request review. */\n  comments: PullRequestReviewCommentConnection;\n  /** Identifies the commit associated with this pull request review. */\n  commit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /**\n   * Identifies the primary key from the database.\n   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC.\n   */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** Identifies the primary key from the database as a BigInt. */\n  fullDatabaseId?: Maybe<Scalars['BigInt']['output']>;\n  /** The Node ID of the PullRequestReview object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean']['output'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Returns why the comment was minimized. One of `abuse`, `off-topic`,\n   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n   * formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n   */\n  minimizedReason?: Maybe<Scalars['String']['output']>;\n  /** A list of teams that this review was made on behalf of. */\n  onBehalfOf: TeamConnection;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies the pull request associated with this pull request review. */\n  pullRequest: PullRequest;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path permalink for this PullRequestReview. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the current state of the pull request review. */\n  state: PullRequestReviewState;\n  /** Identifies when the Pull Request Review was submitted */\n  submittedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL permalink for this PullRequestReview. */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n};\n\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewOnBehalfOfArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A review object for a given pull request. */\nexport type PullRequestReviewUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewComment = Comment & Deletable & Minimizable & Node & Reactable & RepositoryNode & Updatable & UpdatableComment & {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /** Author's association with the subject of the comment. */\n  authorAssociation: CommentAuthorAssociation;\n  /** The comment body of this review comment. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The comment body of this review comment rendered as plain text. */\n  bodyText: Scalars['String']['output'];\n  /** Identifies the commit associated with the comment. */\n  commit?: Maybe<Commit>;\n  /** Identifies when the comment was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /**\n   * Identifies the primary key from the database.\n   * @deprecated `databaseId` will be removed because it does not support 64-bit signed integer identifiers. Use `fullDatabaseId` instead. Removal on 2024-07-01 UTC.\n   */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The diff hunk to which the comment applies. */\n  diffHunk: Scalars['String']['output'];\n  /** Identifies when the comment was created in a draft state. */\n  draftedAt: Scalars['DateTime']['output'];\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** Identifies the primary key from the database as a BigInt. */\n  fullDatabaseId?: Maybe<Scalars['BigInt']['output']>;\n  /** The Node ID of the PullRequestReviewComment object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** Returns whether or not a comment has been minimized. */\n  isMinimized: Scalars['Boolean']['output'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The end line number on the file to which the comment applies */\n  line?: Maybe<Scalars['Int']['output']>;\n  /**\n   * Returns why the comment was minimized. One of `abuse`, `off-topic`,\n   * `outdated`, `resolved`, `duplicate` and `spam`. Note that the case and\n   * formatting of these values differs from the inputs to the `MinimizeComment` mutation.\n   */\n  minimizedReason?: Maybe<Scalars['String']['output']>;\n  /** Identifies the original commit associated with the comment. */\n  originalCommit?: Maybe<Commit>;\n  /** The end line number on the file to which the comment applied when it was first created */\n  originalLine?: Maybe<Scalars['Int']['output']>;\n  /**\n   * The original line index in the diff to which the comment applies.\n   * @deprecated We are phasing out diff-relative positioning for PR comments Removal on 2023-10-01 UTC.\n   */\n  originalPosition: Scalars['Int']['output'];\n  /** The start line number on the file to which the comment applied when it was first created */\n  originalStartLine?: Maybe<Scalars['Int']['output']>;\n  /** Identifies when the comment body is outdated */\n  outdated: Scalars['Boolean']['output'];\n  /** The path to which the comment applies. */\n  path: Scalars['String']['output'];\n  /**\n   * The line index in the diff to which the comment applies.\n   * @deprecated We are phasing out diff-relative positioning for PR comments Use the `line` and `startLine` fields instead, which are file line numbers instead of diff line numbers Removal on 2023-10-01 UTC.\n   */\n  position?: Maybe<Scalars['Int']['output']>;\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The pull request associated with this review comment. */\n  pullRequest: PullRequest;\n  /** The pull request review associated with this review comment. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** The comment this is a reply to. */\n  replyTo?: Maybe<PullRequestReviewComment>;\n  /** The repository associated with this node. */\n  repository: Repository;\n  /** The HTTP path permalink for this review comment. */\n  resourcePath: Scalars['URI']['output'];\n  /** The start line number on the file to which the comment applies */\n  startLine?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the state of the comment. */\n  state: PullRequestReviewCommentState;\n  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */\n  subjectType: PullRequestReviewThreadSubjectType;\n  /** Identifies when the comment was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL permalink for this review comment. */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Check if the current viewer can minimize this object. */\n  viewerCanMinimize: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n};\n\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A review comment associated with a given repository pull request. */\nexport type PullRequestReviewCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for PullRequestReviewComment. */\nexport type PullRequestReviewCommentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReviewComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestReviewCommentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReviewComment>;\n};\n\n/** The possible states of a pull request review comment. */\nexport enum PullRequestReviewCommentState {\n  /** A comment that is part of a pending review */\n  Pending = 'PENDING',\n  /** A comment that is part of a submitted review */\n  Submitted = 'SUBMITTED'\n}\n\n/** The connection type for PullRequestReview. */\nexport type PullRequestReviewConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReview>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** This aggregates pull request reviews made by a user within one repository. */\nexport type PullRequestReviewContributionsByRepository = {\n  /** The pull request review contributions. */\n  contributions: CreatedPullRequestReviewContributionConnection;\n  /** The repository in which the pull request reviews were made. */\n  repository: Repository;\n};\n\n\n/** This aggregates pull request reviews made by a user within one repository. */\nexport type PullRequestReviewContributionsByRepositoryContributionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ContributionOrder>;\n};\n\n/** The review status of a pull request. */\nexport enum PullRequestReviewDecision {\n  /** The pull request has received an approving review. */\n  Approved = 'APPROVED',\n  /** Changes have been requested on the pull request. */\n  ChangesRequested = 'CHANGES_REQUESTED',\n  /** A review is required before the pull request can be merged. */\n  ReviewRequired = 'REVIEW_REQUIRED'\n}\n\n/** An edge in a connection. */\nexport type PullRequestReviewEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReview>;\n};\n\n/** The possible events to perform on a pull request review. */\nexport enum PullRequestReviewEvent {\n  /** Submit feedback and approve merging these changes. */\n  Approve = 'APPROVE',\n  /** Submit general feedback without explicit approval. */\n  Comment = 'COMMENT',\n  /** Dismiss review so it now longer effects merging. */\n  Dismiss = 'DISMISS',\n  /** Submit feedback that must be addressed before merging. */\n  RequestChanges = 'REQUEST_CHANGES'\n}\n\n/** The possible states of a pull request review. */\nexport enum PullRequestReviewState {\n  /** A review allowing the pull request to merge. */\n  Approved = 'APPROVED',\n  /** A review blocking the pull request from merging. */\n  ChangesRequested = 'CHANGES_REQUESTED',\n  /** An informational review. */\n  Commented = 'COMMENTED',\n  /** A review that has been dismissed. */\n  Dismissed = 'DISMISSED',\n  /** A review that has not yet been submitted. */\n  Pending = 'PENDING'\n}\n\n/** A threaded list of comments for a given pull request. */\nexport type PullRequestReviewThread = Node & {\n  /** A list of pull request comments associated with the thread. */\n  comments: PullRequestReviewCommentConnection;\n  /** The side of the diff on which this thread was placed. */\n  diffSide: DiffSide;\n  /** The Node ID of the PullRequestReviewThread object */\n  id: Scalars['ID']['output'];\n  /** Whether or not the thread has been collapsed (resolved) */\n  isCollapsed: Scalars['Boolean']['output'];\n  /** Indicates whether this thread was outdated by newer changes. */\n  isOutdated: Scalars['Boolean']['output'];\n  /** Whether this thread has been resolved */\n  isResolved: Scalars['Boolean']['output'];\n  /** The line in the file to which this thread refers */\n  line?: Maybe<Scalars['Int']['output']>;\n  /** The original line in the file to which this thread refers. */\n  originalLine?: Maybe<Scalars['Int']['output']>;\n  /** The original start line in the file to which this thread refers (multi-line only). */\n  originalStartLine?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the file path of this thread. */\n  path: Scalars['String']['output'];\n  /** Identifies the pull request associated with this thread. */\n  pullRequest: PullRequest;\n  /** Identifies the repository associated with this thread. */\n  repository: Repository;\n  /** The user who resolved this thread */\n  resolvedBy?: Maybe<User>;\n  /** The side of the diff that the first line of the thread starts on (multi-line only) */\n  startDiffSide?: Maybe<DiffSide>;\n  /** The start line in the file to which this thread refers (multi-line only) */\n  startLine?: Maybe<Scalars['Int']['output']>;\n  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */\n  subjectType: PullRequestReviewThreadSubjectType;\n  /** Indicates whether the current viewer can reply to this thread. */\n  viewerCanReply: Scalars['Boolean']['output'];\n  /** Whether or not the viewer can resolve this thread */\n  viewerCanResolve: Scalars['Boolean']['output'];\n  /** Whether or not the viewer can unresolve this thread */\n  viewerCanUnresolve: Scalars['Boolean']['output'];\n};\n\n\n/** A threaded list of comments for a given pull request. */\nexport type PullRequestReviewThreadCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  skip?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Review comment threads for a pull request review. */\nexport type PullRequestReviewThreadConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestReviewThreadEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestReviewThread>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestReviewThreadEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestReviewThread>;\n};\n\n/** The possible subject types of a pull request review comment. */\nexport enum PullRequestReviewThreadSubjectType {\n  /** A comment that has been made against the file of a pull request */\n  File = 'FILE',\n  /** A comment that has been made against the line of a pull request */\n  Line = 'LINE'\n}\n\n/** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */\nexport type PullRequestRevisionMarker = {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The last commit the viewer has seen. */\n  lastSeenCommit: Commit;\n  /** The pull request to which the marker belongs. */\n  pullRequest: PullRequest;\n};\n\n/** The possible states of a pull request. */\nexport enum PullRequestState {\n  /** A pull request that has been closed without being merged. */\n  Closed = 'CLOSED',\n  /** A pull request that has been closed by being merged. */\n  Merged = 'MERGED',\n  /** A pull request that is still open. */\n  Open = 'OPEN'\n}\n\n/** A repository pull request template. */\nexport type PullRequestTemplate = {\n  /** The body of the template */\n  body?: Maybe<Scalars['String']['output']>;\n  /** The filename of the template */\n  filename?: Maybe<Scalars['String']['output']>;\n  /** The repository the template belongs to */\n  repository: Repository;\n};\n\n/** A threaded list of comments for a given pull request. */\nexport type PullRequestThread = Node & {\n  /** A list of pull request comments associated with the thread. */\n  comments: PullRequestReviewCommentConnection;\n  /** The side of the diff on which this thread was placed. */\n  diffSide: DiffSide;\n  /** The Node ID of the PullRequestThread object */\n  id: Scalars['ID']['output'];\n  /** Whether or not the thread has been collapsed (resolved) */\n  isCollapsed: Scalars['Boolean']['output'];\n  /** Indicates whether this thread was outdated by newer changes. */\n  isOutdated: Scalars['Boolean']['output'];\n  /** Whether this thread has been resolved */\n  isResolved: Scalars['Boolean']['output'];\n  /** The line in the file to which this thread refers */\n  line?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the file path of this thread. */\n  path: Scalars['String']['output'];\n  /** Identifies the pull request associated with this thread. */\n  pullRequest: PullRequest;\n  /** Identifies the repository associated with this thread. */\n  repository: Repository;\n  /** The user who resolved this thread */\n  resolvedBy?: Maybe<User>;\n  /** The side of the diff that the first line of the thread starts on (multi-line only) */\n  startDiffSide?: Maybe<DiffSide>;\n  /** The line of the first file diff in the thread. */\n  startLine?: Maybe<Scalars['Int']['output']>;\n  /** The level at which the comments in the corresponding thread are targeted, can be a diff line or a file */\n  subjectType: PullRequestReviewThreadSubjectType;\n  /** Indicates whether the current viewer can reply to this thread. */\n  viewerCanReply: Scalars['Boolean']['output'];\n  /** Whether or not the viewer can resolve this thread */\n  viewerCanResolve: Scalars['Boolean']['output'];\n  /** Whether or not the viewer can unresolve this thread */\n  viewerCanUnresolve: Scalars['Boolean']['output'];\n};\n\n\n/** A threaded list of comments for a given pull request. */\nexport type PullRequestThreadCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  skip?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for PullRequestTimelineItem. */\nexport type PullRequestTimelineConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestTimelineItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestTimelineItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An item in a pull request timeline */\nexport type PullRequestTimelineItem = AssignedEvent | BaseRefDeletedEvent | BaseRefForcePushedEvent | ClosedEvent | Commit | CommitCommentThread | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MergedEvent | MilestonedEvent | PullRequestReview | PullRequestReviewComment | PullRequestReviewThread | ReferencedEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnsubscribedEvent | UserBlockedEvent;\n\n/** An edge in a connection. */\nexport type PullRequestTimelineItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestTimelineItem>;\n};\n\n/** An item in a pull request timeline */\nexport type PullRequestTimelineItems = AddedToMergeQueueEvent | AddedToProjectEvent | AssignedEvent | AutoMergeDisabledEvent | AutoMergeEnabledEvent | AutoRebaseEnabledEvent | AutoSquashEnabledEvent | AutomaticBaseChangeFailedEvent | AutomaticBaseChangeSucceededEvent | BaseRefChangedEvent | BaseRefDeletedEvent | BaseRefForcePushedEvent | ClosedEvent | CommentDeletedEvent | ConnectedEvent | ConvertToDraftEvent | ConvertedNoteToIssueEvent | ConvertedToDiscussionEvent | CrossReferencedEvent | DemilestonedEvent | DeployedEvent | DeploymentEnvironmentChangedEvent | DisconnectedEvent | HeadRefDeletedEvent | HeadRefForcePushedEvent | HeadRefRestoredEvent | IssueComment | LabeledEvent | LockedEvent | MarkedAsDuplicateEvent | MentionedEvent | MergedEvent | MilestonedEvent | MovedColumnsInProjectEvent | PinnedEvent | PullRequestCommit | PullRequestCommitCommentThread | PullRequestReview | PullRequestReviewThread | PullRequestRevisionMarker | ReadyForReviewEvent | ReferencedEvent | RemovedFromMergeQueueEvent | RemovedFromProjectEvent | RenamedTitleEvent | ReopenedEvent | ReviewDismissedEvent | ReviewRequestRemovedEvent | ReviewRequestedEvent | SubscribedEvent | TransferredEvent | UnassignedEvent | UnlabeledEvent | UnlockedEvent | UnmarkedAsDuplicateEvent | UnpinnedEvent | UnsubscribedEvent | UserBlockedEvent;\n\n/** The connection type for PullRequestTimelineItems. */\nexport type PullRequestTimelineItemsConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PullRequestTimelineItemsEdge>>>;\n  /** Identifies the count of items after applying `before` and `after` filters. */\n  filteredCount: Scalars['Int']['output'];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PullRequestTimelineItems>>>;\n  /** Identifies the count of items after applying `before`/`after` filters and `first`/`last`/`skip` slicing. */\n  pageCount: Scalars['Int']['output'];\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n  /** Identifies the date and time when the timeline was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** An edge in a connection. */\nexport type PullRequestTimelineItemsEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PullRequestTimelineItems>;\n};\n\n/** The possible item types found in a timeline. */\nexport enum PullRequestTimelineItemsItemType {\n  /** Represents an 'added_to_merge_queue' event on a given pull request. */\n  AddedToMergeQueueEvent = 'ADDED_TO_MERGE_QUEUE_EVENT',\n  /** Represents a 'added_to_project' event on a given issue or pull request. */\n  AddedToProjectEvent = 'ADDED_TO_PROJECT_EVENT',\n  /** Represents an 'assigned' event on any assignable object. */\n  AssignedEvent = 'ASSIGNED_EVENT',\n  /** Represents a 'automatic_base_change_failed' event on a given pull request. */\n  AutomaticBaseChangeFailedEvent = 'AUTOMATIC_BASE_CHANGE_FAILED_EVENT',\n  /** Represents a 'automatic_base_change_succeeded' event on a given pull request. */\n  AutomaticBaseChangeSucceededEvent = 'AUTOMATIC_BASE_CHANGE_SUCCEEDED_EVENT',\n  /** Represents a 'auto_merge_disabled' event on a given pull request. */\n  AutoMergeDisabledEvent = 'AUTO_MERGE_DISABLED_EVENT',\n  /** Represents a 'auto_merge_enabled' event on a given pull request. */\n  AutoMergeEnabledEvent = 'AUTO_MERGE_ENABLED_EVENT',\n  /** Represents a 'auto_rebase_enabled' event on a given pull request. */\n  AutoRebaseEnabledEvent = 'AUTO_REBASE_ENABLED_EVENT',\n  /** Represents a 'auto_squash_enabled' event on a given pull request. */\n  AutoSquashEnabledEvent = 'AUTO_SQUASH_ENABLED_EVENT',\n  /** Represents a 'base_ref_changed' event on a given issue or pull request. */\n  BaseRefChangedEvent = 'BASE_REF_CHANGED_EVENT',\n  /** Represents a 'base_ref_deleted' event on a given pull request. */\n  BaseRefDeletedEvent = 'BASE_REF_DELETED_EVENT',\n  /** Represents a 'base_ref_force_pushed' event on a given pull request. */\n  BaseRefForcePushedEvent = 'BASE_REF_FORCE_PUSHED_EVENT',\n  /** Represents a 'closed' event on any `Closable`. */\n  ClosedEvent = 'CLOSED_EVENT',\n  /** Represents a 'comment_deleted' event on a given issue or pull request. */\n  CommentDeletedEvent = 'COMMENT_DELETED_EVENT',\n  /** Represents a 'connected' event on a given issue or pull request. */\n  ConnectedEvent = 'CONNECTED_EVENT',\n  /** Represents a 'converted_note_to_issue' event on a given issue or pull request. */\n  ConvertedNoteToIssueEvent = 'CONVERTED_NOTE_TO_ISSUE_EVENT',\n  /** Represents a 'converted_to_discussion' event on a given issue. */\n  ConvertedToDiscussionEvent = 'CONVERTED_TO_DISCUSSION_EVENT',\n  /** Represents a 'convert_to_draft' event on a given pull request. */\n  ConvertToDraftEvent = 'CONVERT_TO_DRAFT_EVENT',\n  /** Represents a mention made by one issue or pull request to another. */\n  CrossReferencedEvent = 'CROSS_REFERENCED_EVENT',\n  /** Represents a 'demilestoned' event on a given issue or pull request. */\n  DemilestonedEvent = 'DEMILESTONED_EVENT',\n  /** Represents a 'deployed' event on a given pull request. */\n  DeployedEvent = 'DEPLOYED_EVENT',\n  /** Represents a 'deployment_environment_changed' event on a given pull request. */\n  DeploymentEnvironmentChangedEvent = 'DEPLOYMENT_ENVIRONMENT_CHANGED_EVENT',\n  /** Represents a 'disconnected' event on a given issue or pull request. */\n  DisconnectedEvent = 'DISCONNECTED_EVENT',\n  /** Represents a 'head_ref_deleted' event on a given pull request. */\n  HeadRefDeletedEvent = 'HEAD_REF_DELETED_EVENT',\n  /** Represents a 'head_ref_force_pushed' event on a given pull request. */\n  HeadRefForcePushedEvent = 'HEAD_REF_FORCE_PUSHED_EVENT',\n  /** Represents a 'head_ref_restored' event on a given pull request. */\n  HeadRefRestoredEvent = 'HEAD_REF_RESTORED_EVENT',\n  /** Represents a comment on an Issue. */\n  IssueComment = 'ISSUE_COMMENT',\n  /** Represents a 'labeled' event on a given issue or pull request. */\n  LabeledEvent = 'LABELED_EVENT',\n  /** Represents a 'locked' event on a given issue or pull request. */\n  LockedEvent = 'LOCKED_EVENT',\n  /** Represents a 'marked_as_duplicate' event on a given issue or pull request. */\n  MarkedAsDuplicateEvent = 'MARKED_AS_DUPLICATE_EVENT',\n  /** Represents a 'mentioned' event on a given issue or pull request. */\n  MentionedEvent = 'MENTIONED_EVENT',\n  /** Represents a 'merged' event on a given pull request. */\n  MergedEvent = 'MERGED_EVENT',\n  /** Represents a 'milestoned' event on a given issue or pull request. */\n  MilestonedEvent = 'MILESTONED_EVENT',\n  /** Represents a 'moved_columns_in_project' event on a given issue or pull request. */\n  MovedColumnsInProjectEvent = 'MOVED_COLUMNS_IN_PROJECT_EVENT',\n  /** Represents a 'pinned' event on a given issue or pull request. */\n  PinnedEvent = 'PINNED_EVENT',\n  /** Represents a Git commit part of a pull request. */\n  PullRequestCommit = 'PULL_REQUEST_COMMIT',\n  /** Represents a commit comment thread part of a pull request. */\n  PullRequestCommitCommentThread = 'PULL_REQUEST_COMMIT_COMMENT_THREAD',\n  /** A review object for a given pull request. */\n  PullRequestReview = 'PULL_REQUEST_REVIEW',\n  /** A threaded list of comments for a given pull request. */\n  PullRequestReviewThread = 'PULL_REQUEST_REVIEW_THREAD',\n  /** Represents the latest point in the pull request timeline for which the viewer has seen the pull request's commits. */\n  PullRequestRevisionMarker = 'PULL_REQUEST_REVISION_MARKER',\n  /** Represents a 'ready_for_review' event on a given pull request. */\n  ReadyForReviewEvent = 'READY_FOR_REVIEW_EVENT',\n  /** Represents a 'referenced' event on a given `ReferencedSubject`. */\n  ReferencedEvent = 'REFERENCED_EVENT',\n  /** Represents a 'removed_from_merge_queue' event on a given pull request. */\n  RemovedFromMergeQueueEvent = 'REMOVED_FROM_MERGE_QUEUE_EVENT',\n  /** Represents a 'removed_from_project' event on a given issue or pull request. */\n  RemovedFromProjectEvent = 'REMOVED_FROM_PROJECT_EVENT',\n  /** Represents a 'renamed' event on a given issue or pull request */\n  RenamedTitleEvent = 'RENAMED_TITLE_EVENT',\n  /** Represents a 'reopened' event on any `Closable`. */\n  ReopenedEvent = 'REOPENED_EVENT',\n  /** Represents a 'review_dismissed' event on a given issue or pull request. */\n  ReviewDismissedEvent = 'REVIEW_DISMISSED_EVENT',\n  /** Represents an 'review_requested' event on a given pull request. */\n  ReviewRequestedEvent = 'REVIEW_REQUESTED_EVENT',\n  /** Represents an 'review_request_removed' event on a given pull request. */\n  ReviewRequestRemovedEvent = 'REVIEW_REQUEST_REMOVED_EVENT',\n  /** Represents a 'subscribed' event on a given `Subscribable`. */\n  SubscribedEvent = 'SUBSCRIBED_EVENT',\n  /** Represents a 'transferred' event on a given issue or pull request. */\n  TransferredEvent = 'TRANSFERRED_EVENT',\n  /** Represents an 'unassigned' event on any assignable object. */\n  UnassignedEvent = 'UNASSIGNED_EVENT',\n  /** Represents an 'unlabeled' event on a given issue or pull request. */\n  UnlabeledEvent = 'UNLABELED_EVENT',\n  /** Represents an 'unlocked' event on a given issue or pull request. */\n  UnlockedEvent = 'UNLOCKED_EVENT',\n  /** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\n  UnmarkedAsDuplicateEvent = 'UNMARKED_AS_DUPLICATE_EVENT',\n  /** Represents an 'unpinned' event on a given issue or pull request. */\n  UnpinnedEvent = 'UNPINNED_EVENT',\n  /** Represents an 'unsubscribed' event on a given `Subscribable`. */\n  UnsubscribedEvent = 'UNSUBSCRIBED_EVENT',\n  /** Represents a 'user_blocked' event on a given user. */\n  UserBlockedEvent = 'USER_BLOCKED_EVENT'\n}\n\n/** The possible target states when updating a pull request. */\nexport enum PullRequestUpdateState {\n  /** A pull request that has been closed without being merged. */\n  Closed = 'CLOSED',\n  /** A pull request that is still open. */\n  Open = 'OPEN'\n}\n\n/** A Git push. */\nexport type Push = Node & {\n  /** The Node ID of the Push object */\n  id: Scalars['ID']['output'];\n  /** The SHA after the push */\n  nextSha?: Maybe<Scalars['GitObjectID']['output']>;\n  /** The permalink for this push. */\n  permalink: Scalars['URI']['output'];\n  /** The SHA before the push */\n  previousSha?: Maybe<Scalars['GitObjectID']['output']>;\n  /** The actor who pushed */\n  pusher: Actor;\n  /** The repository that was pushed to */\n  repository: Repository;\n};\n\n/** A team, user, or app who has the ability to push to a protected branch. */\nexport type PushAllowance = Node & {\n  /** The actor that can push. */\n  actor?: Maybe<PushAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user, team, or app. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** The Node ID of the PushAllowance object */\n  id: Scalars['ID']['output'];\n};\n\n/** Types that can be an actor. */\nexport type PushAllowanceActor = App | Team | User;\n\n/** The connection type for PushAllowance. */\nexport type PushAllowanceConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PushAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<PushAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type PushAllowanceEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<PushAllowance>;\n};\n\n/** The query root of GitHub's GraphQL interface. */\nexport type Query = {\n  /** Look up a code of conduct by its key */\n  codeOfConduct?: Maybe<CodeOfConduct>;\n  /** Look up a code of conduct by its key */\n  codesOfConduct?: Maybe<Array<Maybe<CodeOfConduct>>>;\n  /** Look up an enterprise by URL slug. */\n  enterprise?: Maybe<Enterprise>;\n  /** Look up a pending enterprise administrator invitation by invitee, enterprise and role. */\n  enterpriseAdministratorInvitation?: Maybe<EnterpriseAdministratorInvitation>;\n  /** Look up a pending enterprise administrator invitation by invitation token. */\n  enterpriseAdministratorInvitationByToken?: Maybe<EnterpriseAdministratorInvitation>;\n  /** Look up a pending enterprise unaffiliated member invitation by invitee and enterprise. */\n  enterpriseMemberInvitation?: Maybe<EnterpriseMemberInvitation>;\n  /** Look up a pending enterprise unaffiliated member invitation by invitation token. */\n  enterpriseMemberInvitationByToken?: Maybe<EnterpriseMemberInvitation>;\n  /** Look up an open source license by its key */\n  license?: Maybe<License>;\n  /** Return a list of known open source licenses */\n  licenses: Array<Maybe<License>>;\n  /** Get alphabetically sorted list of Marketplace categories */\n  marketplaceCategories: Array<MarketplaceCategory>;\n  /** Look up a Marketplace category by its slug. */\n  marketplaceCategory?: Maybe<MarketplaceCategory>;\n  /** Look up a single Marketplace listing */\n  marketplaceListing?: Maybe<MarketplaceListing>;\n  /** Look up Marketplace listings */\n  marketplaceListings: MarketplaceListingConnection;\n  /** Return information about the GitHub instance */\n  meta: GitHubMetadata;\n  /** Fetches an object given its ID. */\n  node?: Maybe<Node>;\n  /** Lookup nodes by a list of IDs. */\n  nodes: Array<Maybe<Node>>;\n  /** Lookup a organization by login. */\n  organization?: Maybe<Organization>;\n  /** The client's rate limit information. */\n  rateLimit?: Maybe<RateLimit>;\n  /**\n   * Workaround for re-exposing the root query object. (Refer to\n   * https://github.com/facebook/relay/issues/112 for more information.)\n   */\n  relay: Query;\n  /** Lookup a given repository by the owner and repository name. */\n  repository?: Maybe<Repository>;\n  /** Lookup a repository owner (ie. either a User or an Organization) by login. */\n  repositoryOwner?: Maybe<RepositoryOwner>;\n  /** Lookup resource by a URL. */\n  resource?: Maybe<UniformResourceLocatable>;\n  /** Perform a search across resources, returning a maximum of 1,000 results. */\n  search: SearchResultItemConnection;\n  /** GitHub Security Advisories */\n  securityAdvisories: SecurityAdvisoryConnection;\n  /** Fetch a Security Advisory by its GHSA ID */\n  securityAdvisory?: Maybe<SecurityAdvisory>;\n  /** Software Vulnerabilities documented by GitHub Security Advisories */\n  securityVulnerabilities: SecurityVulnerabilityConnection;\n  /** Users and organizations who can be sponsored via GitHub Sponsors. */\n  sponsorables: SponsorableItemConnection;\n  /** Look up a topic by name. */\n  topic?: Maybe<Topic>;\n  /** Lookup a user by login. */\n  user?: Maybe<User>;\n  /** The currently authenticated user. */\n  viewer: User;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryCodeOfConductArgs = {\n  key: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseArgs = {\n  invitationToken?: InputMaybe<Scalars['String']['input']>;\n  slug: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseAdministratorInvitationArgs = {\n  enterpriseSlug: Scalars['String']['input'];\n  role: EnterpriseAdministratorRole;\n  userLogin: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseAdministratorInvitationByTokenArgs = {\n  invitationToken: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseMemberInvitationArgs = {\n  enterpriseSlug: Scalars['String']['input'];\n  userLogin: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryEnterpriseMemberInvitationByTokenArgs = {\n  invitationToken: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryLicenseArgs = {\n  key: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceCategoriesArgs = {\n  excludeEmpty?: InputMaybe<Scalars['Boolean']['input']>;\n  excludeSubcategories?: InputMaybe<Scalars['Boolean']['input']>;\n  includeCategories?: InputMaybe<Array<Scalars['String']['input']>>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceCategoryArgs = {\n  slug: Scalars['String']['input'];\n  useTopicAliases?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceListingArgs = {\n  slug: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryMarketplaceListingsArgs = {\n  adminId?: InputMaybe<Scalars['ID']['input']>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  allStates?: InputMaybe<Scalars['Boolean']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  categorySlug?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  organizationId?: InputMaybe<Scalars['ID']['input']>;\n  primaryCategoryOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  slugs?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  useTopicAliases?: InputMaybe<Scalars['Boolean']['input']>;\n  viewerCanAdmin?: InputMaybe<Scalars['Boolean']['input']>;\n  withFreeTrialsOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryNodeArgs = {\n  id: Scalars['ID']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryNodesArgs = {\n  ids: Array<Scalars['ID']['input']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryOrganizationArgs = {\n  login: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRateLimitArgs = {\n  dryRun?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars['Boolean']['input']>;\n  name: Scalars['String']['input'];\n  owner: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryRepositoryOwnerArgs = {\n  login: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryResourceArgs = {\n  url: Scalars['URI']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySearchArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  query: Scalars['String']['input'];\n  type: SearchType;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityAdvisoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  classifications?: InputMaybe<Array<SecurityAdvisoryClassification>>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  identifier?: InputMaybe<SecurityAdvisoryIdentifierFilter>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SecurityAdvisoryOrder>;\n  publishedSince?: InputMaybe<Scalars['DateTime']['input']>;\n  updatedSince?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityAdvisoryArgs = {\n  ghsaId: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySecurityVulnerabilitiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  classifications?: InputMaybe<Array<SecurityAdvisoryClassification>>;\n  ecosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SecurityVulnerabilityOrder>;\n  package?: InputMaybe<Scalars['String']['input']>;\n  severities?: InputMaybe<Array<SecurityAdvisorySeverity>>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QuerySponsorablesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  dependencyEcosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  ecosystem?: InputMaybe<DependencyGraphEcosystem>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  onlyDependencies?: InputMaybe<Scalars['Boolean']['input']>;\n  orderBy?: InputMaybe<SponsorableOrder>;\n  orgLoginForDependencies?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryTopicArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/** The query root of GitHub's GraphQL interface. */\nexport type QueryUserArgs = {\n  login: Scalars['String']['input'];\n};\n\n/** Represents the client's rate limit. */\nexport type RateLimit = {\n  /** The point cost for the current query counting against the rate limit. */\n  cost: Scalars['Int']['output'];\n  /** The maximum number of points the client is permitted to consume in a 60 minute window. */\n  limit: Scalars['Int']['output'];\n  /** The maximum number of nodes this query may return */\n  nodeCount: Scalars['Int']['output'];\n  /** The number of points remaining in the current rate limit window. */\n  remaining: Scalars['Int']['output'];\n  /** The time at which the current rate limit window resets in UTC epoch seconds. */\n  resetAt: Scalars['DateTime']['output'];\n  /** The number of points used in the current rate limit window. */\n  used: Scalars['Int']['output'];\n};\n\n/** Represents a subject that can be reacted on. */\nexport type Reactable = {\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the Reactable object */\n  id: Scalars['ID']['output'];\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n};\n\n\n/** Represents a subject that can be reacted on. */\nexport type ReactableReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n/** The connection type for User. */\nexport type ReactingUserConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactingUserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a user that's made a reaction. */\nexport type ReactingUserEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  node: User;\n  /** The moment when the user made the reaction. */\n  reactedAt: Scalars['DateTime']['output'];\n};\n\n/** An emoji reaction to a particular piece of content. */\nexport type Reaction = Node & {\n  /** Identifies the emoji reaction. */\n  content: ReactionContent;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the Reaction object */\n  id: Scalars['ID']['output'];\n  /** The reactable piece of content */\n  reactable: Reactable;\n  /** Identifies the user who created this reaction. */\n  user?: Maybe<User>;\n};\n\n/** A list of reactions that have been left on the subject. */\nexport type ReactionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Reaction>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n  /** Whether or not the authenticated user has left a reaction on the subject. */\n  viewerHasReacted: Scalars['Boolean']['output'];\n};\n\n/** Emojis that can be attached to Issues, Pull Requests and Comments. */\nexport enum ReactionContent {\n  /** Represents the `:confused:` emoji. */\n  Confused = 'CONFUSED',\n  /** Represents the `:eyes:` emoji. */\n  Eyes = 'EYES',\n  /** Represents the `:heart:` emoji. */\n  Heart = 'HEART',\n  /** Represents the `:hooray:` emoji. */\n  Hooray = 'HOORAY',\n  /** Represents the `:laugh:` emoji. */\n  Laugh = 'LAUGH',\n  /** Represents the `:rocket:` emoji. */\n  Rocket = 'ROCKET',\n  /** Represents the `:-1:` emoji. */\n  ThumbsDown = 'THUMBS_DOWN',\n  /** Represents the `:+1:` emoji. */\n  ThumbsUp = 'THUMBS_UP'\n}\n\n/** An edge in a connection. */\nexport type ReactionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Reaction>;\n};\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroup = {\n  /** Identifies the emoji reaction. */\n  content: ReactionContent;\n  /** Identifies when the reaction was created. */\n  createdAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Reactors to the reaction subject with the emotion represented by this reaction group. */\n  reactors: ReactorConnection;\n  /** The subject that was reacted to. */\n  subject: Reactable;\n  /**\n   * Users who have reacted to the reaction subject with the emotion represented by this reaction group\n   * @deprecated Reactors can now be mannequins, bots, and organizations. Use the `reactors` field instead. Removal on 2021-10-01 UTC.\n   */\n  users: ReactingUserConnection;\n  /** Whether or not the authenticated user has left a reaction on the subject. */\n  viewerHasReacted: Scalars['Boolean']['output'];\n};\n\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroupReactorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A group of emoji reactions to a particular piece of content. */\nexport type ReactionGroupUsersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Ways in which lists of reactions can be ordered upon return. */\nexport type ReactionOrder = {\n  /** The direction in which to order reactions by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order reactions by. */\n  field: ReactionOrderField;\n};\n\n/** A list of fields that reactions can be ordered by. */\nexport enum ReactionOrderField {\n  /** Allows ordering a list of reactions by when they were created. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Types that can be assigned to reactions. */\nexport type Reactor = Bot | Mannequin | Organization | User;\n\n/** The connection type for Reactor. */\nexport type ReactorConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReactorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Reactor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents an author of a reaction. */\nexport type ReactorEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The author of the reaction. */\n  node: Reactor;\n  /** The moment when the user made the reaction. */\n  reactedAt: Scalars['DateTime']['output'];\n};\n\n/** Represents a 'ready_for_review' event on a given pull request. */\nexport type ReadyForReviewEvent = Node & UniformResourceLocatable & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the ReadyForReviewEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** The HTTP path for this ready for review event. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this ready for review event. */\n  url: Scalars['URI']['output'];\n};\n\n/** Represents a Git reference. */\nexport type Ref = Node & {\n  /** A list of pull requests with this ref as the head ref. */\n  associatedPullRequests: PullRequestConnection;\n  /** Branch protection rules for this ref */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** Compares the current ref as a base ref to another head ref, if the comparison can be made. */\n  compare?: Maybe<Comparison>;\n  /** The Node ID of the Ref object */\n  id: Scalars['ID']['output'];\n  /** The ref name. */\n  name: Scalars['String']['output'];\n  /** The ref's prefix, such as `refs/heads/` or `refs/tags/`. */\n  prefix: Scalars['String']['output'];\n  /** Branch protection rules that are viewable by non-admins */\n  refUpdateRule?: Maybe<RefUpdateRule>;\n  /** The repository the ref belongs to. */\n  repository: Repository;\n  /** A list of rules from active Repository and Organization rulesets that apply to this ref. */\n  rules?: Maybe<RepositoryRuleConnection>;\n  /** The object the ref points to. Returns null when object does not exist. */\n  target?: Maybe<GitObject>;\n};\n\n\n/** Represents a Git reference. */\nexport type RefAssociatedPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  baseRefName?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  headRefName?: InputMaybe<Scalars['String']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n\n/** Represents a Git reference. */\nexport type RefCompareArgs = {\n  headRef: Scalars['String']['input'];\n};\n\n\n/** Represents a Git reference. */\nexport type RefRulesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryRuleOrder>;\n};\n\n/** The connection type for Ref. */\nexport type RefConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RefEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Ref>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type RefEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Ref>;\n};\n\n/** Parameters to be used for the ref_name condition */\nexport type RefNameConditionTarget = {\n  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */\n  exclude: Array<Scalars['String']['output']>;\n  /**\n   * Array of ref names or patterns to include. One of these patterns must match\n   * for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the\n   * default branch or `~ALL` to include all branches.\n   */\n  include: Array<Scalars['String']['output']>;\n};\n\n/** Parameters to be used for the ref_name condition */\nexport type RefNameConditionTargetInput = {\n  /** Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match. */\n  exclude: Array<Scalars['String']['input']>;\n  /**\n   * Array of ref names or patterns to include. One of these patterns must match\n   * for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the\n   * default branch or `~ALL` to include all branches.\n   */\n  include: Array<Scalars['String']['input']>;\n};\n\n/** Ways in which lists of git refs can be ordered upon return. */\nexport type RefOrder = {\n  /** The direction in which to order refs by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order refs by. */\n  field: RefOrderField;\n};\n\n/** Properties by which ref connections can be ordered. */\nexport enum RefOrderField {\n  /** Order refs by their alphanumeric name */\n  Alphabetical = 'ALPHABETICAL',\n  /** Order refs by underlying commit date if the ref prefix is refs/tags/ */\n  TagCommitDate = 'TAG_COMMIT_DATE'\n}\n\n/** A ref update */\nexport type RefUpdate = {\n  /** The value this ref should be updated to. */\n  afterOid: Scalars['GitObjectID']['input'];\n  /** The value this ref needs to point to before the update. */\n  beforeOid?: InputMaybe<Scalars['GitObjectID']['input']>;\n  /** Force a non fast-forward update. */\n  force?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The fully qualified name of the ref to be update. For example `refs/heads/branch-name` */\n  name: Scalars['GitRefname']['input'];\n};\n\n/** Branch protection rules that are enforced on the viewer. */\nexport type RefUpdateRule = {\n  /** Can this branch be deleted. */\n  allowsDeletions: Scalars['Boolean']['output'];\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes: Scalars['Boolean']['output'];\n  /** Can matching branches be created. */\n  blocksCreations: Scalars['Boolean']['output'];\n  /** Identifies the protection rule pattern. */\n  pattern: Scalars['String']['output'];\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: Maybe<Scalars['Int']['output']>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: Maybe<Array<Maybe<Scalars['String']['output']>>>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews: Scalars['Boolean']['output'];\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution: Scalars['Boolean']['output'];\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory: Scalars['Boolean']['output'];\n  /** Are commits required to be signed. */\n  requiresSignatures: Scalars['Boolean']['output'];\n  /** Is the viewer allowed to dismiss reviews. */\n  viewerAllowedToDismissReviews: Scalars['Boolean']['output'];\n  /** Can the viewer push to the branch */\n  viewerCanPush: Scalars['Boolean']['output'];\n};\n\n/** Represents a 'referenced' event on a given `ReferencedSubject`. */\nexport type ReferencedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the commit associated with the 'referenced' event. */\n  commit?: Maybe<Commit>;\n  /** Identifies the repository associated with the 'referenced' event. */\n  commitRepository: Repository;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the ReferencedEvent object */\n  id: Scalars['ID']['output'];\n  /** Reference originated in a different repository. */\n  isCrossRepository: Scalars['Boolean']['output'];\n  /** Checks if the commit message itself references the subject. Can be false in the case of a commit comment reference. */\n  isDirectReference: Scalars['Boolean']['output'];\n  /** Object referenced by event. */\n  subject: ReferencedSubject;\n};\n\n/** Any referencable object */\nexport type ReferencedSubject = Issue | PullRequest;\n\n/** Autogenerated input type of RegenerateEnterpriseIdentityProviderRecoveryCodes */\nexport type RegenerateEnterpriseIdentityProviderRecoveryCodesInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set an identity provider. */\n  enterpriseId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RegenerateEnterpriseIdentityProviderRecoveryCodes. */\nexport type RegenerateEnterpriseIdentityProviderRecoveryCodesPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The identity provider for the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of RegenerateVerifiableDomainToken */\nexport type RegenerateVerifiableDomainTokenInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the verifiable domain to regenerate the verification token of. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RegenerateVerifiableDomainToken. */\nexport type RegenerateVerifiableDomainTokenPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The verification token that was generated. */\n  verificationToken?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of RejectDeployments */\nexport type RejectDeploymentsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Optional comment for rejecting deployments */\n  comment?: InputMaybe<Scalars['String']['input']>;\n  /** The ids of environments to reject deployments */\n  environmentIds: Array<Scalars['ID']['input']>;\n  /** The node ID of the workflow run containing the pending deployments. */\n  workflowRunId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RejectDeployments. */\nexport type RejectDeploymentsPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The affected deployments. */\n  deployments?: Maybe<Array<Deployment>>;\n};\n\n/** A release contains the content for a release. */\nexport type Release = Node & Reactable & UniformResourceLocatable & {\n  /** The author of the release */\n  author?: Maybe<User>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The description of the release. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The description of this release rendered to HTML. */\n  descriptionHTML?: Maybe<Scalars['HTML']['output']>;\n  /** The Node ID of the Release object */\n  id: Scalars['ID']['output'];\n  /** Whether or not the release is a draft */\n  isDraft: Scalars['Boolean']['output'];\n  /** Whether or not the release is the latest releast */\n  isLatest: Scalars['Boolean']['output'];\n  /** Whether or not the release is a prerelease */\n  isPrerelease: Scalars['Boolean']['output'];\n  /** A list of users mentioned in the release description */\n  mentions?: Maybe<UserConnection>;\n  /** The title of the release. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Identifies the date and time when the release was created. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /** List of releases assets which are dependent on this release. */\n  releaseAssets: ReleaseAssetConnection;\n  /** The repository that the release belongs to. */\n  repository: Repository;\n  /** The HTTP path for this issue */\n  resourcePath: Scalars['URI']['output'];\n  /** A description of the release, rendered to HTML without any links in it. */\n  shortDescriptionHTML?: Maybe<Scalars['HTML']['output']>;\n  /** The Git tag the release points to */\n  tag?: Maybe<Ref>;\n  /** The tag commit for this release. */\n  tagCommit?: Maybe<Commit>;\n  /** The name of the release's Git tag */\n  tagName: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this issue */\n  url: Scalars['URI']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n};\n\n\n/** A release contains the content for a release. */\nexport type ReleaseMentionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A release contains the content for a release. */\nexport type ReleaseReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A release contains the content for a release. */\nexport type ReleaseReleaseAssetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  name?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A release contains the content for a release. */\nexport type ReleaseShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A release asset contains the content for a release asset. */\nexport type ReleaseAsset = Node & {\n  /** The asset's content-type */\n  contentType: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The number of times this asset was downloaded */\n  downloadCount: Scalars['Int']['output'];\n  /** Identifies the URL where you can download the release asset via the browser. */\n  downloadUrl: Scalars['URI']['output'];\n  /** The Node ID of the ReleaseAsset object */\n  id: Scalars['ID']['output'];\n  /** Identifies the title of the release asset. */\n  name: Scalars['String']['output'];\n  /** Release that the asset is associated with */\n  release?: Maybe<Release>;\n  /** The size (in bytes) of the asset */\n  size: Scalars['Int']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The user that performed the upload */\n  uploadedBy: User;\n  /** Identifies the URL of the release asset. */\n  url: Scalars['URI']['output'];\n};\n\n/** The connection type for ReleaseAsset. */\nexport type ReleaseAssetConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReleaseAssetEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReleaseAsset>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ReleaseAssetEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReleaseAsset>;\n};\n\n/** The connection type for Release. */\nexport type ReleaseConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReleaseEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Release>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ReleaseEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Release>;\n};\n\n/** Ways in which lists of releases can be ordered upon return. */\nexport type ReleaseOrder = {\n  /** The direction in which to order releases by the specified field. */\n  direction: OrderDirection;\n  /** The field in which to order releases by. */\n  field: ReleaseOrderField;\n};\n\n/** Properties by which release connections can be ordered. */\nexport enum ReleaseOrderField {\n  /** Order releases by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order releases alphabetically by name */\n  Name = 'NAME'\n}\n\n/** Autogenerated input type of RemoveAssigneesFromAssignable */\nexport type RemoveAssigneesFromAssignableInput = {\n  /** The id of the assignable object to remove assignees from. */\n  assignableId: Scalars['ID']['input'];\n  /** The id of users to remove as assignees. */\n  assigneeIds: Array<Scalars['ID']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of RemoveAssigneesFromAssignable. */\nexport type RemoveAssigneesFromAssignablePayload = {\n  /** The item that was unassigned. */\n  assignable?: Maybe<Assignable>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseAdmin */\nexport type RemoveEnterpriseAdminInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Enterprise ID from which to remove the administrator. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of the user to remove as an administrator. */\n  login: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseAdmin. */\nexport type RemoveEnterpriseAdminPayload = {\n  /** The user who was removed as an administrator. */\n  admin?: Maybe<User>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of removing an administrator. */\n  message?: Maybe<Scalars['String']['output']>;\n  /** The viewer performing the mutation. */\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseIdentityProvider */\nexport type RemoveEnterpriseIdentityProviderInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise from which to remove the identity provider. */\n  enterpriseId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseIdentityProvider. */\nexport type RemoveEnterpriseIdentityProviderPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The identity provider that was removed from the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseMember */\nexport type RemoveEnterpriseMemberInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise from which the user should be removed. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The ID of the user to remove from the enterprise. */\n  userId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseMember. */\nexport type RemoveEnterpriseMemberPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n  /** The user that was removed from the enterprise. */\n  user?: Maybe<User>;\n  /** The viewer performing the mutation. */\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseOrganization */\nexport type RemoveEnterpriseOrganizationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise from which the organization should be removed. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The ID of the organization to remove from the enterprise. */\n  organizationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseOrganization. */\nexport type RemoveEnterpriseOrganizationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n  /** The organization that was removed from the enterprise. */\n  organization?: Maybe<Organization>;\n  /** The viewer performing the mutation. */\n  viewer?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveEnterpriseSupportEntitlement */\nexport type RemoveEnterpriseSupportEntitlementInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of a member who will lose the support entitlement. */\n  login: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of RemoveEnterpriseSupportEntitlement. */\nexport type RemoveEnterpriseSupportEntitlementPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** A message confirming the result of removing the support entitlement. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of RemoveLabelsFromLabelable */\nexport type RemoveLabelsFromLabelableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ids of labels to remove. */\n  labelIds: Array<Scalars['ID']['input']>;\n  /** The id of the Labelable to remove labels from. */\n  labelableId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RemoveLabelsFromLabelable. */\nexport type RemoveLabelsFromLabelablePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The Labelable the labels were removed from. */\n  labelable?: Maybe<Labelable>;\n};\n\n/** Autogenerated input type of RemoveOutsideCollaborator */\nexport type RemoveOutsideCollaboratorInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the organization to remove the outside collaborator from. */\n  organizationId: Scalars['ID']['input'];\n  /** The ID of the outside collaborator to remove. */\n  userId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RemoveOutsideCollaborator. */\nexport type RemoveOutsideCollaboratorPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The user that was removed as an outside collaborator. */\n  removedUser?: Maybe<User>;\n};\n\n/** Autogenerated input type of RemoveReaction */\nexport type RemoveReactionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the emoji reaction to remove. */\n  content: ReactionContent;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RemoveReaction. */\nexport type RemoveReactionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The reaction object. */\n  reaction?: Maybe<Reaction>;\n  /** The reaction groups for the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** The reactable subject. */\n  subject?: Maybe<Reactable>;\n};\n\n/** Autogenerated input type of RemoveStar */\nexport type RemoveStarInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Starrable ID to unstar. */\n  starrableId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RemoveStar. */\nexport type RemoveStarPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The starrable. */\n  starrable?: Maybe<Starrable>;\n};\n\n/** Autogenerated input type of RemoveUpvote */\nexport type RemoveUpvoteInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion or comment to remove upvote. */\n  subjectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RemoveUpvote. */\nexport type RemoveUpvotePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The votable subject. */\n  subject?: Maybe<Votable>;\n};\n\n/** Represents a 'removed_from_merge_queue' event on a given pull request. */\nexport type RemovedFromMergeQueueEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the before commit SHA for the 'removed_from_merge_queue' event. */\n  beforeCommit?: Maybe<Commit>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The user who removed this Pull Request from the merge queue */\n  enqueuer?: Maybe<User>;\n  /** The Node ID of the RemovedFromMergeQueueEvent object */\n  id: Scalars['ID']['output'];\n  /** The merge queue where this pull request was removed from. */\n  mergeQueue?: Maybe<MergeQueue>;\n  /** PullRequest referenced by event. */\n  pullRequest?: Maybe<PullRequest>;\n  /** The reason this pull request was removed from the queue. */\n  reason?: Maybe<Scalars['String']['output']>;\n};\n\n/** Represents a 'removed_from_project' event on a given issue or pull request. */\nexport type RemovedFromProjectEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the RemovedFromProjectEvent object */\n  id: Scalars['ID']['output'];\n  /** Project referenced by event. */\n  project?: Maybe<Project>;\n  /** Column name referenced by this project event. */\n  projectColumnName: Scalars['String']['output'];\n};\n\n/** Represents a 'renamed' event on a given issue or pull request */\nexport type RenamedTitleEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the current title of the issue or pull request. */\n  currentTitle: Scalars['String']['output'];\n  /** The Node ID of the RenamedTitleEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the previous title of the issue or pull request. */\n  previousTitle: Scalars['String']['output'];\n  /** Subject that was renamed. */\n  subject: RenamedTitleSubject;\n};\n\n/** An object which has a renamable title */\nexport type RenamedTitleSubject = Issue | PullRequest;\n\n/** Autogenerated input type of ReopenDiscussion */\nexport type ReopenDiscussionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the discussion to be reopened. */\n  discussionId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ReopenDiscussion. */\nexport type ReopenDiscussionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The discussion that was reopened. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of ReopenIssue */\nexport type ReopenIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the issue to be opened. */\n  issueId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ReopenIssue. */\nexport type ReopenIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The issue that was opened. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of ReopenPullRequest */\nexport type ReopenPullRequestInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the pull request to be reopened. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ReopenPullRequest. */\nexport type ReopenPullRequestPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request that was reopened. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Represents a 'reopened' event on any `Closable`. */\nexport type ReopenedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Object that was reopened. */\n  closable: Closable;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the ReopenedEvent object */\n  id: Scalars['ID']['output'];\n  /** The reason the issue state was changed to open. */\n  stateReason?: Maybe<IssueStateReason>;\n};\n\n/** Autogenerated input type of ReorderEnvironment */\nexport type ReorderEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the environment to modify */\n  environmentId: Scalars['ID']['input'];\n  /** The desired position of the environment */\n  position: Scalars['Int']['input'];\n};\n\n/** Autogenerated return type of ReorderEnvironment. */\nexport type ReorderEnvironmentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The environment that was reordered */\n  environment?: Maybe<Environment>;\n};\n\n/** Audit log entry for a repo.access event. */\nexport type RepoAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoAccessAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoAccessAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoAccessAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.add_member event. */\nexport type RepoAddMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoAddMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoAddMemberAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoAddMemberAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.add_topic event. */\nexport type RepoAddTopicAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoAddTopicAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The name of the topic added to the repository */\n  topic?: Maybe<Topic>;\n  /** The name of the topic added to the repository */\n  topicName?: Maybe<Scalars['String']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.archived event. */\nexport type RepoArchivedAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoArchivedAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoArchivedAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoArchivedAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.change_merge_setting event. */\nexport type RepoChangeMergeSettingAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoChangeMergeSettingAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** Whether the change was to enable (true) or disable (false) the merge type */\n  isEnabled?: Maybe<Scalars['Boolean']['output']>;\n  /** The merge method affected by the change */\n  mergeType?: Maybe<RepoChangeMergeSettingAuditEntryMergeType>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The merge options available for pull requests to this repository. */\nexport enum RepoChangeMergeSettingAuditEntryMergeType {\n  /** The pull request is added to the base branch in a merge commit. */\n  Merge = 'MERGE',\n  /** Commits from the pull request are added onto the base branch individually without a merge commit. */\n  Rebase = 'REBASE',\n  /** The pull request's commits are squashed into a single commit before they are merged to the base branch. */\n  Squash = 'SQUASH'\n}\n\n/** Audit log entry for a repo.config.disable_anonymous_git_access event. */\nexport type RepoConfigDisableAnonymousGitAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigDisableAnonymousGitAccessAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.disable_collaborators_only event. */\nexport type RepoConfigDisableCollaboratorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigDisableCollaboratorsOnlyAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.disable_contributors_only event. */\nexport type RepoConfigDisableContributorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigDisableContributorsOnlyAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.disable_sockpuppet_disallowed event. */\nexport type RepoConfigDisableSockpuppetDisallowedAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigDisableSockpuppetDisallowedAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.enable_anonymous_git_access event. */\nexport type RepoConfigEnableAnonymousGitAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigEnableAnonymousGitAccessAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.enable_collaborators_only event. */\nexport type RepoConfigEnableCollaboratorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigEnableCollaboratorsOnlyAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.enable_contributors_only event. */\nexport type RepoConfigEnableContributorsOnlyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigEnableContributorsOnlyAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.enable_sockpuppet_disallowed event. */\nexport type RepoConfigEnableSockpuppetDisallowedAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigEnableSockpuppetDisallowedAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.lock_anonymous_git_access event. */\nexport type RepoConfigLockAnonymousGitAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigLockAnonymousGitAccessAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.config.unlock_anonymous_git_access event. */\nexport type RepoConfigUnlockAnonymousGitAccessAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoConfigUnlockAnonymousGitAccessAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repo.create event. */\nexport type RepoCreateAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The name of the parent repository for this forked repository. */\n  forkParentName?: Maybe<Scalars['String']['output']>;\n  /** The name of the root repository for this network. */\n  forkSourceName?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the RepoCreateAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoCreateAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoCreateAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.destroy event. */\nexport type RepoDestroyAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoDestroyAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoDestroyAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoDestroyAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.remove_member event. */\nexport type RepoRemoveMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoRemoveMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n  /** The visibility of the repository */\n  visibility?: Maybe<RepoRemoveMemberAuditEntryVisibility>;\n};\n\n/** The privacy of a repository */\nexport enum RepoRemoveMemberAuditEntryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repo.remove_topic event. */\nexport type RepoRemoveTopicAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TopicAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the RepoRemoveTopicAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The name of the topic added to the repository */\n  topic?: Maybe<Topic>;\n  /** The name of the topic added to the repository */\n  topicName?: Maybe<Scalars['String']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The reasons a piece of content can be reported or minimized. */\nexport enum ReportedContentClassifiers {\n  /** An abusive or harassing piece of content */\n  Abuse = 'ABUSE',\n  /** A duplicated piece of content */\n  Duplicate = 'DUPLICATE',\n  /** An irrelevant piece of content */\n  OffTopic = 'OFF_TOPIC',\n  /** An outdated piece of content */\n  Outdated = 'OUTDATED',\n  /** The content has been resolved */\n  Resolved = 'RESOLVED',\n  /** A spammy piece of content */\n  Spam = 'SPAM'\n}\n\n/** A repository contains the content for a project. */\nexport type Repository = Node & PackageOwner & ProjectOwner & ProjectV2Recent & RepositoryInfo & Starrable & Subscribable & UniformResourceLocatable & {\n  /**\n   * Whether or not a pull request head branch that is behind its base branch can\n   * always be updated even if it is not required to be up to date before merging.\n   */\n  allowUpdateBranch: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the repository was archived. */\n  archivedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of users that can be assigned to issues in this repository. */\n  assignableUsers: UserConnection;\n  /** Whether or not Auto-merge can be enabled on pull requests in this repository. */\n  autoMergeAllowed: Scalars['Boolean']['output'];\n  /** A list of branch protection rules for this repository. */\n  branchProtectionRules: BranchProtectionRuleConnection;\n  /** Returns the code of conduct for this repository */\n  codeOfConduct?: Maybe<CodeOfConduct>;\n  /** Information extracted from the repository's `CODEOWNERS` file. */\n  codeowners?: Maybe<RepositoryCodeowners>;\n  /** A list of collaborators associated with the repository. */\n  collaborators?: Maybe<RepositoryCollaboratorConnection>;\n  /** A list of commit comments associated with the repository. */\n  commitComments: CommitCommentConnection;\n  /** Returns a list of contact links associated to the repository */\n  contactLinks?: Maybe<Array<RepositoryContactLink>>;\n  /** Returns the contributing guidelines for this repository. */\n  contributingGuidelines?: Maybe<ContributingGuidelines>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Ref associated with the repository's default branch. */\n  defaultBranchRef?: Maybe<Ref>;\n  /** Whether or not branches are automatically deleted when merged in this repository. */\n  deleteBranchOnMerge: Scalars['Boolean']['output'];\n  /** A list of dependency manifests contained in the repository */\n  dependencyGraphManifests?: Maybe<DependencyGraphManifestConnection>;\n  /** A list of deploy keys that are on this repository. */\n  deployKeys: DeployKeyConnection;\n  /** Deployments associated with the repository */\n  deployments: DeploymentConnection;\n  /** The description of the repository. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The description of the repository rendered to HTML. */\n  descriptionHTML: Scalars['HTML']['output'];\n  /** Returns a single discussion from the current repository by number. */\n  discussion?: Maybe<Discussion>;\n  /** A list of discussion categories that are available in the repository. */\n  discussionCategories: DiscussionCategoryConnection;\n  /** A discussion category by slug. */\n  discussionCategory?: Maybe<DiscussionCategory>;\n  /** A list of discussions that have been opened in the repository. */\n  discussions: DiscussionConnection;\n  /** The number of kilobytes this repository occupies on disk. */\n  diskUsage?: Maybe<Scalars['Int']['output']>;\n  /** Returns a single active environment from the current repository by name. */\n  environment?: Maybe<Environment>;\n  /** A list of environments that are in this repository. */\n  environments: EnvironmentConnection;\n  /** Returns how many forks there are of this repository in the whole network. */\n  forkCount: Scalars['Int']['output'];\n  /** Whether this repository allows forks. */\n  forkingAllowed: Scalars['Boolean']['output'];\n  /** A list of direct forked repositories. */\n  forks: RepositoryConnection;\n  /** The funding links for this repository */\n  fundingLinks: Array<FundingLink>;\n  /** Indicates if the repository has the Discussions feature enabled. */\n  hasDiscussionsEnabled: Scalars['Boolean']['output'];\n  /** Indicates if the repository has issues feature enabled. */\n  hasIssuesEnabled: Scalars['Boolean']['output'];\n  /** Indicates if the repository has the Projects feature enabled. */\n  hasProjectsEnabled: Scalars['Boolean']['output'];\n  /** Indicates if the repository displays a Sponsor button for financial contributions. */\n  hasSponsorshipsEnabled: Scalars['Boolean']['output'];\n  /** Whether vulnerability alerts are enabled for the repository. */\n  hasVulnerabilityAlertsEnabled: Scalars['Boolean']['output'];\n  /** Indicates if the repository has wiki feature enabled. */\n  hasWikiEnabled: Scalars['Boolean']['output'];\n  /** The repository's URL. */\n  homepageUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the Repository object */\n  id: Scalars['ID']['output'];\n  /** The interaction ability settings for this repository. */\n  interactionAbility?: Maybe<RepositoryInteractionAbility>;\n  /** Indicates if the repository is unmaintained. */\n  isArchived: Scalars['Boolean']['output'];\n  /** Returns true if blank issue creation is allowed */\n  isBlankIssuesEnabled: Scalars['Boolean']['output'];\n  /** Returns whether or not this repository disabled. */\n  isDisabled: Scalars['Boolean']['output'];\n  /** Returns whether or not this repository is empty. */\n  isEmpty: Scalars['Boolean']['output'];\n  /** Identifies if the repository is a fork. */\n  isFork: Scalars['Boolean']['output'];\n  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */\n  isInOrganization: Scalars['Boolean']['output'];\n  /** Indicates if the repository has been locked or not. */\n  isLocked: Scalars['Boolean']['output'];\n  /** Identifies if the repository is a mirror. */\n  isMirror: Scalars['Boolean']['output'];\n  /** Identifies if the repository is private or internal. */\n  isPrivate: Scalars['Boolean']['output'];\n  /** Returns true if this repository has a security policy */\n  isSecurityPolicyEnabled?: Maybe<Scalars['Boolean']['output']>;\n  /** Identifies if the repository is a template that can be used to generate new repositories. */\n  isTemplate: Scalars['Boolean']['output'];\n  /** Is this repository a user configuration repository? */\n  isUserConfigurationRepository: Scalars['Boolean']['output'];\n  /** Returns a single issue from the current repository by number. */\n  issue?: Maybe<Issue>;\n  /** Returns a single issue-like object from the current repository by number. */\n  issueOrPullRequest?: Maybe<IssueOrPullRequest>;\n  /** Returns a list of issue templates associated to the repository */\n  issueTemplates?: Maybe<Array<IssueTemplate>>;\n  /** A list of issues that have been opened in the repository. */\n  issues: IssueConnection;\n  /** Returns a single label by name */\n  label?: Maybe<Label>;\n  /** A list of labels associated with the repository. */\n  labels?: Maybe<LabelConnection>;\n  /** A list containing a breakdown of the language composition of the repository. */\n  languages?: Maybe<LanguageConnection>;\n  /** Get the latest release for the repository if one exists. */\n  latestRelease?: Maybe<Release>;\n  /** The license associated with the repository */\n  licenseInfo?: Maybe<License>;\n  /** The reason the repository has been locked. */\n  lockReason?: Maybe<RepositoryLockReason>;\n  /** A list of Users that can be mentioned in the context of the repository. */\n  mentionableUsers: UserConnection;\n  /** Whether or not PRs are merged with a merge commit on this repository. */\n  mergeCommitAllowed: Scalars['Boolean']['output'];\n  /** How the default commit message will be generated when merging a pull request. */\n  mergeCommitMessage: MergeCommitMessage;\n  /** How the default commit title will be generated when merging a pull request. */\n  mergeCommitTitle: MergeCommitTitle;\n  /** The merge queue for a specified branch, otherwise the default branch if not provided. */\n  mergeQueue?: Maybe<MergeQueue>;\n  /** Returns a single milestone from the current repository by number. */\n  milestone?: Maybe<Milestone>;\n  /** A list of milestones associated with the repository. */\n  milestones?: Maybe<MilestoneConnection>;\n  /** The repository's original mirror URL. */\n  mirrorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The name of the repository. */\n  name: Scalars['String']['output'];\n  /** The repository's name with owner. */\n  nameWithOwner: Scalars['String']['output'];\n  /** A Git object in the repository */\n  object?: Maybe<GitObject>;\n  /** The image used to represent this repository in Open Graph data. */\n  openGraphImageUrl: Scalars['URI']['output'];\n  /** The User owner of the repository. */\n  owner: RepositoryOwner;\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n  /** The repository parent, if this is a fork. */\n  parent?: Maybe<Repository>;\n  /** A list of discussions that have been pinned in this repository. */\n  pinnedDiscussions: PinnedDiscussionConnection;\n  /** A list of pinned environments for this repository. */\n  pinnedEnvironments?: Maybe<PinnedEnvironmentConnection>;\n  /** A list of pinned issues for this repository. */\n  pinnedIssues?: Maybe<PinnedIssueConnection>;\n  /** Returns information about the availability of certain features and limits based on the repository's billing plan. */\n  planFeatures: RepositoryPlanFeatures;\n  /** The primary language of the repository's code. */\n  primaryLanguage?: Maybe<Language>;\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** Finds and returns the Project according to the provided Project number. */\n  projectV2?: Maybe<ProjectV2>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** The HTTP path listing the repository's projects */\n  projectsResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL listing the repository's projects */\n  projectsUrl: Scalars['URI']['output'];\n  /** List of projects linked to this repository. */\n  projectsV2: ProjectV2Connection;\n  /** Returns a single pull request from the current repository by number. */\n  pullRequest?: Maybe<PullRequest>;\n  /** Returns a list of pull request templates associated to the repository */\n  pullRequestTemplates?: Maybe<Array<PullRequestTemplate>>;\n  /** A list of pull requests that have been opened in the repository. */\n  pullRequests: PullRequestConnection;\n  /** Identifies the date and time when the repository was last pushed to. */\n  pushedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Whether or not rebase-merging is enabled on this repository. */\n  rebaseMergeAllowed: Scalars['Boolean']['output'];\n  /** Recent projects that this user has modified in the context of the owner. */\n  recentProjects: ProjectV2Connection;\n  /** Fetch a given ref from the repository */\n  ref?: Maybe<Ref>;\n  /** Fetch a list of refs from the repository */\n  refs?: Maybe<RefConnection>;\n  /** Lookup a single release given various criteria. */\n  release?: Maybe<Release>;\n  /** List of releases which are dependent on this repository. */\n  releases: ReleaseConnection;\n  /** A list of applied repository-topic associations for this repository. */\n  repositoryTopics: RepositoryTopicConnection;\n  /** The HTTP path for this repository */\n  resourcePath: Scalars['URI']['output'];\n  /** Returns a single ruleset from the current repository by ID. */\n  ruleset?: Maybe<RepositoryRuleset>;\n  /** A list of rulesets for this repository. */\n  rulesets?: Maybe<RepositoryRulesetConnection>;\n  /** The security policy URL. */\n  securityPolicyUrl?: Maybe<Scalars['URI']['output']>;\n  /** A description of the repository, rendered to HTML without any links in it. */\n  shortDescriptionHTML: Scalars['HTML']['output'];\n  /** Whether or not squash-merging is enabled on this repository. */\n  squashMergeAllowed: Scalars['Boolean']['output'];\n  /** How the default commit message will be generated when squash merging a pull request. */\n  squashMergeCommitMessage: SquashMergeCommitMessage;\n  /** How the default commit title will be generated when squash merging a pull request. */\n  squashMergeCommitTitle: SquashMergeCommitTitle;\n  /**\n   * Whether a squash merge commit can use the pull request title as default.\n   * @deprecated `squashPrTitleUsedAsDefault` will be removed. Use `Repository.squashMergeCommitTitle` instead. Removal on 2023-04-01 UTC.\n   */\n  squashPrTitleUsedAsDefault: Scalars['Boolean']['output'];\n  /** The SSH URL to clone this repository */\n  sshUrl: Scalars['GitSSHRemote']['output'];\n  /** Returns a count of how many stargazers there are on this object */\n  stargazerCount: Scalars['Int']['output'];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /**\n   * Returns a list of all submodules in this repository parsed from the\n   * .gitmodules file as of the default branch's HEAD commit.\n   */\n  submodules: SubmoduleConnection;\n  /** Temporary authentication token for cloning this repository. */\n  tempCloneToken?: Maybe<Scalars['String']['output']>;\n  /** The repository from which this repository was generated, if any. */\n  templateRepository?: Maybe<Repository>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this repository */\n  url: Scalars['URI']['output'];\n  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */\n  usesCustomOpenGraphImage: Scalars['Boolean']['output'];\n  /** Indicates whether the viewer has admin permissions on this repository. */\n  viewerCanAdminister: Scalars['Boolean']['output'];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars['Boolean']['output'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean']['output'];\n  /** Indicates whether the viewer can update the topics of this repository. */\n  viewerCanUpdateTopics: Scalars['Boolean']['output'];\n  /** The last commit email for the viewer. */\n  viewerDefaultCommitEmail?: Maybe<Scalars['String']['output']>;\n  /** The last used merge method by the viewer or the default for the repository. */\n  viewerDefaultMergeMethod: PullRequestMergeMethod;\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars['Boolean']['output'];\n  /** The users permission level on the repository. Will return null if authenticated as an GitHub App. */\n  viewerPermission?: Maybe<RepositoryPermission>;\n  /** A list of emails this viewer can commit with. */\n  viewerPossibleCommitEmails?: Maybe<Array<Scalars['String']['output']>>;\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n  /** Returns a single vulnerability alert from the current repository by number. */\n  vulnerabilityAlert?: Maybe<RepositoryVulnerabilityAlert>;\n  /** A list of vulnerability alerts that are on this repository. */\n  vulnerabilityAlerts?: Maybe<RepositoryVulnerabilityAlertConnection>;\n  /** A list of users watching the repository. */\n  watchers: UserConnection;\n  /** Whether contributors are required to sign off on web-based commits in this repository. */\n  webCommitSignoffRequired: Scalars['Boolean']['output'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryAssignableUsersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryBranchProtectionRulesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryCodeownersArgs = {\n  refName?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryCollaboratorsArgs = {\n  affiliation?: InputMaybe<CollaboratorAffiliation>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  login?: InputMaybe<Scalars['String']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryCommitCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDependencyGraphManifestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  dependenciesAfter?: InputMaybe<Scalars['String']['input']>;\n  dependenciesFirst?: InputMaybe<Scalars['Int']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  withDependencies?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDeployKeysArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDeploymentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  environments?: InputMaybe<Array<Scalars['String']['input']>>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<DeploymentOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionCategoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filterByAssignable?: InputMaybe<Scalars['Boolean']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionCategoryArgs = {\n  slug: Scalars['String']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  answered?: InputMaybe<Scalars['Boolean']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  categoryId?: InputMaybe<Scalars['ID']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  states?: InputMaybe<Array<DiscussionState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryEnvironmentArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryEnvironmentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  names?: InputMaybe<Array<Scalars['String']['input']>>;\n  orderBy?: InputMaybe<Environments>;\n  pinnedEnvironmentFilter?: InputMaybe<EnvironmentPinnedFilterField>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryForksArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  isLocked?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssueArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssueOrPullRequestArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryIssuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryLabelArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryLabelsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<LabelOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryLanguagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<LanguageOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryMentionableUsersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryMergeQueueArgs = {\n  branch?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryMilestoneArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryMilestonesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<MilestoneOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  states?: InputMaybe<Array<MilestoneState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryObjectArgs = {\n  expression?: InputMaybe<Scalars['String']['input']>;\n  oid?: InputMaybe<Scalars['GitObjectID']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPackagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  names?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPinnedDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPinnedEnvironmentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<PinnedEnvironmentOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPinnedIssuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectV2Args = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars['String']['input']>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryProjectsV2Args = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  minPermissionLevel?: InputMaybe<ProjectV2PermissionLevel>;\n  orderBy?: InputMaybe<ProjectV2Order>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPullRequestArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  baseRefName?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  headRefName?: InputMaybe<Scalars['String']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRecentProjectsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRefArgs = {\n  qualifiedName: Scalars['String']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRefsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  direction?: InputMaybe<OrderDirection>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RefOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  refPrefix: Scalars['String']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryReleaseArgs = {\n  tagName: Scalars['String']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryReleasesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReleaseOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRepositoryTopicsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRulesetArgs = {\n  databaseId: Scalars['Int']['input'];\n  includeParents?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryRulesetsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includeParents?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryStargazersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositorySubmodulesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryVulnerabilityAlertArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryVulnerabilityAlertsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  dependencyScopes?: InputMaybe<Array<RepositoryVulnerabilityAlertDependencyScope>>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  states?: InputMaybe<Array<RepositoryVulnerabilityAlertState>>;\n};\n\n\n/** A repository contains the content for a project. */\nexport type RepositoryWatchersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The affiliation of a user to a repository */\nexport enum RepositoryAffiliation {\n  /** Repositories that the user has been added to as a collaborator. */\n  Collaborator = 'COLLABORATOR',\n  /**\n   * Repositories that the user has access to through being a member of an\n   * organization. This includes every repository on every team that the user is on.\n   */\n  OrganizationMember = 'ORGANIZATION_MEMBER',\n  /** Repositories that are owned by the authenticated user. */\n  Owner = 'OWNER'\n}\n\n/** Metadata for an audit entry with action repo.* */\nexport type RepositoryAuditEntryData = {\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Information extracted from a repository's `CODEOWNERS` file. */\nexport type RepositoryCodeowners = {\n  /** Any problems that were encountered while parsing the `CODEOWNERS` file. */\n  errors: Array<RepositoryCodeownersError>;\n};\n\n/** An error in a `CODEOWNERS` file. */\nexport type RepositoryCodeownersError = {\n  /** The column number where the error occurs. */\n  column: Scalars['Int']['output'];\n  /** A short string describing the type of error. */\n  kind: Scalars['String']['output'];\n  /** The line number where the error occurs. */\n  line: Scalars['Int']['output'];\n  /** A complete description of the error, combining information from other fields. */\n  message: Scalars['String']['output'];\n  /** The path to the file when the error occurs. */\n  path: Scalars['String']['output'];\n  /** The content of the line where the error occurs. */\n  source: Scalars['String']['output'];\n  /** A suggestion of how to fix the error. */\n  suggestion?: Maybe<Scalars['String']['output']>;\n};\n\n/** The connection type for User. */\nexport type RepositoryCollaboratorConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryCollaboratorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a user who is a collaborator of a repository. */\nexport type RepositoryCollaboratorEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  node: User;\n  /** The permission the user has on the repository. */\n  permission: RepositoryPermission;\n  /** A list of sources for the user's access to the repository. */\n  permissionSources?: Maybe<Array<PermissionSource>>;\n};\n\n/** A list of repositories owned by the subject. */\nexport type RepositoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n  /**\n   * The total size in kilobytes of all repositories in the connection. Value will\n   * never be larger than max 32-bit signed integer.\n   */\n  totalDiskUsage: Scalars['Int']['output'];\n};\n\n/** A repository contact link. */\nexport type RepositoryContactLink = {\n  /** The contact link purpose. */\n  about: Scalars['String']['output'];\n  /** The contact link name. */\n  name: Scalars['String']['output'];\n  /** The contact link URL. */\n  url: Scalars['URI']['output'];\n};\n\n/** The reason a repository is listed as 'contributed'. */\nexport enum RepositoryContributionType {\n  /** Created a commit */\n  Commit = 'COMMIT',\n  /** Created an issue */\n  Issue = 'ISSUE',\n  /** Created a pull request */\n  PullRequest = 'PULL_REQUEST',\n  /** Reviewed a pull request */\n  PullRequestReview = 'PULL_REQUEST_REVIEW',\n  /** Created the repository */\n  Repository = 'REPOSITORY'\n}\n\n/** Represents an author of discussions in repositories. */\nexport type RepositoryDiscussionAuthor = {\n  /** Discussions this user has started. */\n  repositoryDiscussions: DiscussionConnection;\n};\n\n\n/** Represents an author of discussions in repositories. */\nexport type RepositoryDiscussionAuthorRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  answered?: InputMaybe<Scalars['Boolean']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n  states?: InputMaybe<Array<DiscussionState>>;\n};\n\n/** Represents an author of discussion comments in repositories. */\nexport type RepositoryDiscussionCommentAuthor = {\n  /** Discussion comments this user has authored. */\n  repositoryDiscussionComments: DiscussionCommentConnection;\n};\n\n\n/** Represents an author of discussion comments in repositories. */\nexport type RepositoryDiscussionCommentAuthorRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  onlyAnswers?: InputMaybe<Scalars['Boolean']['input']>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** An edge in a connection. */\nexport type RepositoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Repository>;\n};\n\n/** Parameters to be used for the repository_id condition */\nexport type RepositoryIdConditionTarget = {\n  /** One of these repo IDs must match the repo. */\n  repositoryIds: Array<Scalars['ID']['output']>;\n};\n\n/** Parameters to be used for the repository_id condition */\nexport type RepositoryIdConditionTargetInput = {\n  /** One of these repo IDs must match the repo. */\n  repositoryIds: Array<Scalars['ID']['input']>;\n};\n\n/** A subset of repository info. */\nexport type RepositoryInfo = {\n  /** Identifies the date and time when the repository was archived. */\n  archivedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The description of the repository. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The description of the repository rendered to HTML. */\n  descriptionHTML: Scalars['HTML']['output'];\n  /** Returns how many forks there are of this repository in the whole network. */\n  forkCount: Scalars['Int']['output'];\n  /** Indicates if the repository has the Discussions feature enabled. */\n  hasDiscussionsEnabled: Scalars['Boolean']['output'];\n  /** Indicates if the repository has issues feature enabled. */\n  hasIssuesEnabled: Scalars['Boolean']['output'];\n  /** Indicates if the repository has the Projects feature enabled. */\n  hasProjectsEnabled: Scalars['Boolean']['output'];\n  /** Indicates if the repository displays a Sponsor button for financial contributions. */\n  hasSponsorshipsEnabled: Scalars['Boolean']['output'];\n  /** Indicates if the repository has wiki feature enabled. */\n  hasWikiEnabled: Scalars['Boolean']['output'];\n  /** The repository's URL. */\n  homepageUrl?: Maybe<Scalars['URI']['output']>;\n  /** Indicates if the repository is unmaintained. */\n  isArchived: Scalars['Boolean']['output'];\n  /** Identifies if the repository is a fork. */\n  isFork: Scalars['Boolean']['output'];\n  /** Indicates if a repository is either owned by an organization, or is a private fork of an organization repository. */\n  isInOrganization: Scalars['Boolean']['output'];\n  /** Indicates if the repository has been locked or not. */\n  isLocked: Scalars['Boolean']['output'];\n  /** Identifies if the repository is a mirror. */\n  isMirror: Scalars['Boolean']['output'];\n  /** Identifies if the repository is private or internal. */\n  isPrivate: Scalars['Boolean']['output'];\n  /** Identifies if the repository is a template that can be used to generate new repositories. */\n  isTemplate: Scalars['Boolean']['output'];\n  /** The license associated with the repository */\n  licenseInfo?: Maybe<License>;\n  /** The reason the repository has been locked. */\n  lockReason?: Maybe<RepositoryLockReason>;\n  /** The repository's original mirror URL. */\n  mirrorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The name of the repository. */\n  name: Scalars['String']['output'];\n  /** The repository's name with owner. */\n  nameWithOwner: Scalars['String']['output'];\n  /** The image used to represent this repository in Open Graph data. */\n  openGraphImageUrl: Scalars['URI']['output'];\n  /** The User owner of the repository. */\n  owner: RepositoryOwner;\n  /** Identifies the date and time when the repository was last pushed to. */\n  pushedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The HTTP path for this repository */\n  resourcePath: Scalars['URI']['output'];\n  /** A description of the repository, rendered to HTML without any links in it. */\n  shortDescriptionHTML: Scalars['HTML']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this repository */\n  url: Scalars['URI']['output'];\n  /** Whether this repository has a custom image to use with Open Graph as opposed to being represented by the owner's avatar. */\n  usesCustomOpenGraphImage: Scalars['Boolean']['output'];\n  /** Indicates the repository's visibility level. */\n  visibility: RepositoryVisibility;\n};\n\n\n/** A subset of repository info. */\nexport type RepositoryInfoShortDescriptionHtmlArgs = {\n  limit?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Repository interaction limit that applies to this object. */\nexport type RepositoryInteractionAbility = {\n  /** The time the currently active limit expires. */\n  expiresAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The current limit that is enabled on this object. */\n  limit: RepositoryInteractionLimit;\n  /** The origin of the currently active interaction limit. */\n  origin: RepositoryInteractionLimitOrigin;\n};\n\n/** A repository interaction limit. */\nexport enum RepositoryInteractionLimit {\n  /** Users that are not collaborators will not be able to interact with the repository. */\n  CollaboratorsOnly = 'COLLABORATORS_ONLY',\n  /** Users that have not previously committed to a repository\u2019s default branch will be unable to interact with the repository. */\n  ContributorsOnly = 'CONTRIBUTORS_ONLY',\n  /** Users that have recently created their account will be unable to interact with the repository. */\n  ExistingUsers = 'EXISTING_USERS',\n  /** No interaction limits are enabled. */\n  NoLimit = 'NO_LIMIT'\n}\n\n/** The length for a repository interaction limit to be enabled for. */\nexport enum RepositoryInteractionLimitExpiry {\n  /** The interaction limit will expire after 1 day. */\n  OneDay = 'ONE_DAY',\n  /** The interaction limit will expire after 1 month. */\n  OneMonth = 'ONE_MONTH',\n  /** The interaction limit will expire after 1 week. */\n  OneWeek = 'ONE_WEEK',\n  /** The interaction limit will expire after 6 months. */\n  SixMonths = 'SIX_MONTHS',\n  /** The interaction limit will expire after 3 days. */\n  ThreeDays = 'THREE_DAYS'\n}\n\n/** Indicates where an interaction limit is configured. */\nexport enum RepositoryInteractionLimitOrigin {\n  /** A limit that is configured at the organization level. */\n  Organization = 'ORGANIZATION',\n  /** A limit that is configured at the repository level. */\n  Repository = 'REPOSITORY',\n  /** A limit that is configured at the user-wide level. */\n  User = 'USER'\n}\n\n/** An invitation for a user to be added to a repository. */\nexport type RepositoryInvitation = Node & {\n  /** The email address that received the invitation. */\n  email?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the RepositoryInvitation object */\n  id: Scalars['ID']['output'];\n  /** The user who received the invitation. */\n  invitee?: Maybe<User>;\n  /** The user who created the invitation. */\n  inviter: User;\n  /** The permalink for this repository invitation. */\n  permalink: Scalars['URI']['output'];\n  /** The permission granted on this repository by this invitation. */\n  permission: RepositoryPermission;\n  /** The Repository the user is invited to. */\n  repository?: Maybe<RepositoryInfo>;\n};\n\n/** A list of repository invitations. */\nexport type RepositoryInvitationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryInvitationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryInvitation>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type RepositoryInvitationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryInvitation>;\n};\n\n/** Ordering options for repository invitation connections. */\nexport type RepositoryInvitationOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repository invitations by. */\n  field: RepositoryInvitationOrderField;\n};\n\n/** Properties by which repository invitation connections can be ordered. */\nexport enum RepositoryInvitationOrderField {\n  /** Order repository invitations by creation time */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The possible reasons a given repository could be in a locked state. */\nexport enum RepositoryLockReason {\n  /** The repository is locked due to a billing related reason. */\n  Billing = 'BILLING',\n  /** The repository is locked due to a migration. */\n  Migrating = 'MIGRATING',\n  /** The repository is locked due to a move. */\n  Moving = 'MOVING',\n  /** The repository is locked due to a rename. */\n  Rename = 'RENAME',\n  /** The repository is locked due to a trade controls related reason. */\n  TradeRestriction = 'TRADE_RESTRICTION',\n  /** The repository is locked due to an ownership transfer. */\n  TransferringOwnership = 'TRANSFERRING_OWNERSHIP'\n}\n\n/** A GitHub Enterprise Importer (GEI) repository migration. */\nexport type RepositoryMigration = Migration & Node & {\n  /** The migration flag to continue on error. */\n  continueOnError: Scalars['Boolean']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['String']['output']>;\n  /** The reason the migration failed. */\n  failureReason?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the RepositoryMigration object */\n  id: Scalars['ID']['output'];\n  /** The URL for the migration log (expires 1 day after migration completes). */\n  migrationLogUrl?: Maybe<Scalars['URI']['output']>;\n  /** The migration source. */\n  migrationSource: MigrationSource;\n  /** The target repository name. */\n  repositoryName: Scalars['String']['output'];\n  /** The migration source URL, for example `https://github.com` or `https://monalisa.ghe.com`. */\n  sourceUrl: Scalars['URI']['output'];\n  /** The migration state. */\n  state: MigrationState;\n  /**\n   * The number of warnings encountered for this migration. To review the warnings,\n   * check the [Migration Log](https://docs.github.com/migrations/using-github-enterprise-importer/completing-your-migration-with-github-enterprise-importer/accessing-your-migration-logs-for-github-enterprise-importer).\n   */\n  warningsCount: Scalars['Int']['output'];\n};\n\n/** A list of migrations. */\nexport type RepositoryMigrationConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryMigrationEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryMigration>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a repository migration. */\nexport type RepositoryMigrationEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryMigration>;\n};\n\n/** Ordering options for repository migrations. */\nexport type RepositoryMigrationOrder = {\n  /** The ordering direction. */\n  direction: RepositoryMigrationOrderDirection;\n  /** The field to order repository migrations by. */\n  field: RepositoryMigrationOrderField;\n};\n\n/** Possible directions in which to order a list of repository migrations when provided an `orderBy` argument. */\nexport enum RepositoryMigrationOrderDirection {\n  /** Specifies an ascending order for a given `orderBy` argument. */\n  Asc = 'ASC',\n  /** Specifies a descending order for a given `orderBy` argument. */\n  Desc = 'DESC'\n}\n\n/** Properties by which repository migrations can be ordered. */\nexport enum RepositoryMigrationOrderField {\n  /** Order mannequins why when they were created. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Parameters to be used for the repository_name condition */\nexport type RepositoryNameConditionTarget = {\n  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */\n  exclude: Array<Scalars['String']['output']>;\n  /**\n   * Array of repository names or patterns to include. One of these patterns must\n   * match for the condition to pass. Also accepts `~ALL` to include all repositories.\n   */\n  include: Array<Scalars['String']['output']>;\n  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */\n  protected: Scalars['Boolean']['output'];\n};\n\n/** Parameters to be used for the repository_name condition */\nexport type RepositoryNameConditionTargetInput = {\n  /** Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match. */\n  exclude: Array<Scalars['String']['input']>;\n  /**\n   * Array of repository names or patterns to include. One of these patterns must\n   * match for the condition to pass. Also accepts `~ALL` to include all repositories.\n   */\n  include: Array<Scalars['String']['input']>;\n  /** Target changes that match these patterns will be prevented except by those with bypass permissions. */\n  protected?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Represents a object that belongs to a repository. */\nexport type RepositoryNode = {\n  /** The repository associated with this node. */\n  repository: Repository;\n};\n\n/** Ordering options for repository connections */\nexport type RepositoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: RepositoryOrderField;\n};\n\n/** Properties by which repository connections can be ordered. */\nexport enum RepositoryOrderField {\n  /** Order repositories by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order repositories by name */\n  Name = 'NAME',\n  /** Order repositories by push time */\n  PushedAt = 'PUSHED_AT',\n  /** Order repositories by number of stargazers */\n  Stargazers = 'STARGAZERS',\n  /** Order repositories by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwner = {\n  /** A URL pointing to the owner's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** The Node ID of the RepositoryOwner object */\n  id: Scalars['ID']['output'];\n  /** The username used to login. */\n  login: Scalars['String']['output'];\n  /** A list of repositories that the user owns. */\n  repositories: RepositoryConnection;\n  /** Find Repository. */\n  repository?: Maybe<Repository>;\n  /** The HTTP URL for the owner. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for the owner. */\n  url: Scalars['URI']['output'];\n};\n\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  isArchived?: InputMaybe<Scalars['Boolean']['input']>;\n  isFork?: InputMaybe<Scalars['Boolean']['input']>;\n  isLocked?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n\n/** Represents an owner of a Repository. */\nexport type RepositoryOwnerRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars['Boolean']['input']>;\n  name: Scalars['String']['input'];\n};\n\n/** The access level to a repository */\nexport enum RepositoryPermission {\n  /**\n   * Can read, clone, and push to this repository. Can also manage issues, pull\n   * requests, and repository settings, including adding collaborators\n   */\n  Admin = 'ADMIN',\n  /** Can read, clone, and push to this repository. They can also manage issues, pull requests, and some repository settings */\n  Maintain = 'MAINTAIN',\n  /** Can read and clone this repository. Can also open and comment on issues and pull requests */\n  Read = 'READ',\n  /** Can read and clone this repository. Can also manage issues and pull requests */\n  Triage = 'TRIAGE',\n  /** Can read, clone, and push to this repository. Can also manage issues and pull requests */\n  Write = 'WRITE'\n}\n\n/** Information about the availability of features and limits for a repository based on its billing plan. */\nexport type RepositoryPlanFeatures = {\n  /** Whether reviews can be automatically requested and enforced with a CODEOWNERS file */\n  codeowners: Scalars['Boolean']['output'];\n  /** Whether pull requests can be created as or converted to draft */\n  draftPullRequests: Scalars['Boolean']['output'];\n  /** Maximum number of users that can be assigned to an issue or pull request */\n  maximumAssignees: Scalars['Int']['output'];\n  /** Maximum number of manually-requested reviews on a pull request */\n  maximumManualReviewRequests: Scalars['Int']['output'];\n  /** Whether teams can be requested to review pull requests */\n  teamReviewRequests: Scalars['Boolean']['output'];\n};\n\n/** The privacy of a repository */\nexport enum RepositoryPrivacy {\n  /** Private */\n  Private = 'PRIVATE',\n  /** Public */\n  Public = 'PUBLIC'\n}\n\n/** Parameters to be used for the repository_property condition */\nexport type RepositoryPropertyConditionTarget = {\n  /** Array of repository properties that must not match. */\n  exclude: Array<PropertyTargetDefinition>;\n  /** Array of repository properties that must match */\n  include: Array<PropertyTargetDefinition>;\n};\n\n/** Parameters to be used for the repository_property condition */\nexport type RepositoryPropertyConditionTargetInput = {\n  /** Array of repository properties that must not match. */\n  exclude: Array<PropertyTargetDefinitionInput>;\n  /** Array of repository properties that must match */\n  include: Array<PropertyTargetDefinitionInput>;\n};\n\n/** A repository rule. */\nexport type RepositoryRule = Node & {\n  /** The Node ID of the RepositoryRule object */\n  id: Scalars['ID']['output'];\n  /** The parameters for this rule. */\n  parameters?: Maybe<RuleParameters>;\n  /** The repository ruleset associated with this rule configuration */\n  repositoryRuleset?: Maybe<RepositoryRuleset>;\n  /** The type of rule. */\n  type: RepositoryRuleType;\n};\n\n/** Set of conditions that determine if a ruleset will evaluate */\nexport type RepositoryRuleConditions = {\n  /** Configuration for the ref_name condition */\n  refName?: Maybe<RefNameConditionTarget>;\n  /** Configuration for the repository_id condition */\n  repositoryId?: Maybe<RepositoryIdConditionTarget>;\n  /** Configuration for the repository_name condition */\n  repositoryName?: Maybe<RepositoryNameConditionTarget>;\n  /** Configuration for the repository_property condition */\n  repositoryProperty?: Maybe<RepositoryPropertyConditionTarget>;\n};\n\n/** Specifies the conditions required for a ruleset to evaluate */\nexport type RepositoryRuleConditionsInput = {\n  /** Configuration for the ref_name condition */\n  refName?: InputMaybe<RefNameConditionTargetInput>;\n  /** Configuration for the repository_id condition */\n  repositoryId?: InputMaybe<RepositoryIdConditionTargetInput>;\n  /** Configuration for the repository_name condition */\n  repositoryName?: InputMaybe<RepositoryNameConditionTargetInput>;\n  /** Configuration for the repository_property condition */\n  repositoryProperty?: InputMaybe<RepositoryPropertyConditionTargetInput>;\n};\n\n/** The connection type for RepositoryRule. */\nexport type RepositoryRuleConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryRuleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryRule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type RepositoryRuleEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryRule>;\n};\n\n/** Specifies the attributes for a new or updated rule. */\nexport type RepositoryRuleInput = {\n  /** Optional ID of this rule when updating */\n  id?: InputMaybe<Scalars['ID']['input']>;\n  /** The parameters for the rule. */\n  parameters?: InputMaybe<RuleParametersInput>;\n  /** The type of rule to create. */\n  type: RepositoryRuleType;\n};\n\n/** Ordering options for repository rules. */\nexport type RepositoryRuleOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repository rules by. */\n  field: RepositoryRuleOrderField;\n};\n\n/** Properties by which repository rule connections can be ordered. */\nexport enum RepositoryRuleOrderField {\n  /** Order repository rules by created time */\n  CreatedAt = 'CREATED_AT',\n  /** Order repository rules by type */\n  Type = 'TYPE',\n  /** Order repository rules by updated time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The rule types supported in rulesets */\nexport enum RepositoryRuleType {\n  /** Authorization */\n  Authorization = 'AUTHORIZATION',\n  /** Branch name pattern */\n  BranchNamePattern = 'BRANCH_NAME_PATTERN',\n  /**\n   * Choose which tools must provide code scanning results before the reference is\n   * updated. When configured, code scanning must be enabled and have results for\n   * both the commit and the reference being updated.\n   */\n  CodeScanning = 'CODE_SCANNING',\n  /** Committer email pattern */\n  CommitterEmailPattern = 'COMMITTER_EMAIL_PATTERN',\n  /** Commit author email pattern */\n  CommitAuthorEmailPattern = 'COMMIT_AUTHOR_EMAIL_PATTERN',\n  /** Commit message pattern */\n  CommitMessagePattern = 'COMMIT_MESSAGE_PATTERN',\n  /** Only allow users with bypass permission to create matching refs. */\n  Creation = 'CREATION',\n  /** Only allow users with bypass permissions to delete matching refs. */\n  Deletion = 'DELETION',\n  /**\n   * Prevent commits that include files with specified file extensions from being\n   * pushed to the commit graph. NOTE: Thie rule is in beta and subject to change\n   */\n  FileExtensionRestriction = 'FILE_EXTENSION_RESTRICTION',\n  /**\n   * Prevent commits that include changes in specified file paths from being pushed\n   * to the commit graph. NOTE: Thie rule is in beta and subject to change\n   */\n  FilePathRestriction = 'FILE_PATH_RESTRICTION',\n  /** Branch is read-only. Users cannot push to the branch. */\n  LockBranch = 'LOCK_BRANCH',\n  /**\n   * Prevent commits that include file paths that exceed a specified character\n   * limit from being pushed to the commit graph. NOTE: Thie rule is in beta and\n   * subject to change\n   */\n  MaxFilePathLength = 'MAX_FILE_PATH_LENGTH',\n  /**\n   * Prevent commits that exceed a specified file size limit from being pushed to\n   * the commit. NOTE: Thie rule is in beta and subject to change\n   */\n  MaxFileSize = 'MAX_FILE_SIZE',\n  /** Max ref updates */\n  MaxRefUpdates = 'MAX_REF_UPDATES',\n  /** Merges must be performed via a merge queue. */\n  MergeQueue = 'MERGE_QUEUE',\n  /** Merge queue locked ref */\n  MergeQueueLockedRef = 'MERGE_QUEUE_LOCKED_REF',\n  /** Prevent users with push access from force pushing to refs. */\n  NonFastForward = 'NON_FAST_FORWARD',\n  /** Require all commits be made to a non-target branch and submitted via a pull request before they can be merged. */\n  PullRequest = 'PULL_REQUEST',\n  /** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */\n  RequiredDeployments = 'REQUIRED_DEPLOYMENTS',\n  /** Prevent merge commits from being pushed to matching refs. */\n  RequiredLinearHistory = 'REQUIRED_LINEAR_HISTORY',\n  /**\n   * When enabled, all conversations on code must be resolved before a pull request\n   * can be merged into a branch that matches this rule.\n   */\n  RequiredReviewThreadResolution = 'REQUIRED_REVIEW_THREAD_RESOLUTION',\n  /** Commits pushed to matching refs must have verified signatures. */\n  RequiredSignatures = 'REQUIRED_SIGNATURES',\n  /**\n   * Choose which status checks must pass before the ref is updated. When enabled,\n   * commits must first be pushed to another ref where the checks pass.\n   */\n  RequiredStatusChecks = 'REQUIRED_STATUS_CHECKS',\n  /**\n   * Require all commits be made to a non-target branch and submitted via a pull\n   * request and required workflow checks to pass before they can be merged.\n   */\n  RequiredWorkflowStatusChecks = 'REQUIRED_WORKFLOW_STATUS_CHECKS',\n  /** Secret scanning */\n  SecretScanning = 'SECRET_SCANNING',\n  /** Tag */\n  Tag = 'TAG',\n  /** Tag name pattern */\n  TagNamePattern = 'TAG_NAME_PATTERN',\n  /** Only allow users with bypass permission to update matching refs. */\n  Update = 'UPDATE',\n  /** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */\n  Workflows = 'WORKFLOWS',\n  /** Workflow files cannot be modified. */\n  WorkflowUpdates = 'WORKFLOW_UPDATES'\n}\n\n/** A repository ruleset. */\nexport type RepositoryRuleset = Node & {\n  /** The actors that can bypass this ruleset */\n  bypassActors?: Maybe<RepositoryRulesetBypassActorConnection>;\n  /** The set of conditions that must evaluate to true for this ruleset to apply */\n  conditions: RepositoryRuleConditions;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The enforcement level of this ruleset */\n  enforcement: RuleEnforcement;\n  /** The Node ID of the RepositoryRuleset object */\n  id: Scalars['ID']['output'];\n  /** Name of the ruleset. */\n  name: Scalars['String']['output'];\n  /** List of rules. */\n  rules?: Maybe<RepositoryRuleConnection>;\n  /** Source of ruleset. */\n  source: RuleSource;\n  /** Target of the ruleset. */\n  target?: Maybe<RepositoryRulesetTarget>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n\n/** A repository ruleset. */\nexport type RepositoryRulesetBypassActorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A repository ruleset. */\nexport type RepositoryRulesetRulesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  type?: InputMaybe<RepositoryRuleType>;\n};\n\n/** A team or app that has the ability to bypass a rules defined on a ruleset */\nexport type RepositoryRulesetBypassActor = Node & {\n  /** The actor that can bypass rules. */\n  actor?: Maybe<BypassActor>;\n  /** The mode for the bypass actor */\n  bypassMode?: Maybe<RepositoryRulesetBypassActorBypassMode>;\n  /** This actor represents the ability for a deploy key to bypass */\n  deployKey: Scalars['Boolean']['output'];\n  /** The Node ID of the RepositoryRulesetBypassActor object */\n  id: Scalars['ID']['output'];\n  /** This actor represents the ability for an organization owner to bypass */\n  organizationAdmin: Scalars['Boolean']['output'];\n  /** If the actor is a repository role, the repository role's ID that can bypass */\n  repositoryRoleDatabaseId?: Maybe<Scalars['Int']['output']>;\n  /** If the actor is a repository role, the repository role's name that can bypass */\n  repositoryRoleName?: Maybe<Scalars['String']['output']>;\n  /** Identifies the ruleset associated with the allowed actor */\n  repositoryRuleset?: Maybe<RepositoryRuleset>;\n};\n\n/** The bypass mode for a specific actor on a ruleset. */\nexport enum RepositoryRulesetBypassActorBypassMode {\n  /** The actor can always bypass rules */\n  Always = 'ALWAYS',\n  /** The actor can only bypass rules via a pull request */\n  PullRequest = 'PULL_REQUEST'\n}\n\n/** The connection type for RepositoryRulesetBypassActor. */\nexport type RepositoryRulesetBypassActorConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryRulesetBypassActorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryRulesetBypassActor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type RepositoryRulesetBypassActorEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryRulesetBypassActor>;\n};\n\n/**\n * Specifies the attributes for a new or updated ruleset bypass actor. Only one of\n * `actor_id`, `repository_role_database_id`, `organization_admin`, or `deploy_key`\n * should be specified.\n */\nexport type RepositoryRulesetBypassActorInput = {\n  /** For Team and Integration bypasses, the Team or Integration ID */\n  actorId?: InputMaybe<Scalars['ID']['input']>;\n  /** The bypass mode for this actor. */\n  bypassMode: RepositoryRulesetBypassActorBypassMode;\n  /** For deploy key bypasses, true. Can only use ALWAYS as the bypass mode */\n  deployKey?: InputMaybe<Scalars['Boolean']['input']>;\n  /** For organization owner bypasses, true */\n  organizationAdmin?: InputMaybe<Scalars['Boolean']['input']>;\n  /** For role bypasses, the role database ID */\n  repositoryRoleDatabaseId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for RepositoryRuleset. */\nexport type RepositoryRulesetConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryRulesetEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryRuleset>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type RepositoryRulesetEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryRuleset>;\n};\n\n/** The targets supported for rulesets. NOTE: The push target is in beta and subject to change. */\nexport enum RepositoryRulesetTarget {\n  /** Branch */\n  Branch = 'BRANCH',\n  /** Push */\n  Push = 'PUSH',\n  /** Tag */\n  Tag = 'TAG'\n}\n\n/** A repository-topic connects a repository to a topic. */\nexport type RepositoryTopic = Node & UniformResourceLocatable & {\n  /** The Node ID of the RepositoryTopic object */\n  id: Scalars['ID']['output'];\n  /** The HTTP path for this repository-topic. */\n  resourcePath: Scalars['URI']['output'];\n  /** The topic. */\n  topic: Topic;\n  /** The HTTP URL for this repository-topic. */\n  url: Scalars['URI']['output'];\n};\n\n/** The connection type for RepositoryTopic. */\nexport type RepositoryTopicConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryTopicEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryTopic>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type RepositoryTopicEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryTopic>;\n};\n\n/** The repository's visibility level. */\nexport enum RepositoryVisibility {\n  /** The repository is visible only to users in the same business. */\n  Internal = 'INTERNAL',\n  /** The repository is visible only to those with explicit access. */\n  Private = 'PRIVATE',\n  /** The repository is visible to everyone. */\n  Public = 'PUBLIC'\n}\n\n/** Audit log entry for a repository_visibility_change.disable event. */\nexport type RepositoryVisibilityChangeDisableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the RepositoryVisibilityChangeDisableAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a repository_visibility_change.enable event. */\nexport type RepositoryVisibilityChangeEnableAuditEntry = AuditEntry & EnterpriseAuditEntryData & Node & OrganizationAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The HTTP path for this enterprise. */\n  enterpriseResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The slug of the enterprise. */\n  enterpriseSlug?: Maybe<Scalars['String']['output']>;\n  /** The HTTP URL for this enterprise. */\n  enterpriseUrl?: Maybe<Scalars['URI']['output']>;\n  /** The Node ID of the RepositoryVisibilityChangeEnableAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** A Dependabot alert for a repository with a dependency affected by a security vulnerability. */\nexport type RepositoryVulnerabilityAlert = Node & RepositoryNode & {\n  /** When was the alert auto-dismissed? */\n  autoDismissedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** When was the alert created? */\n  createdAt: Scalars['DateTime']['output'];\n  /** The associated Dependabot update */\n  dependabotUpdate?: Maybe<DependabotUpdate>;\n  /** The scope of an alert's dependency */\n  dependencyScope?: Maybe<RepositoryVulnerabilityAlertDependencyScope>;\n  /** Comment explaining the reason the alert was dismissed */\n  dismissComment?: Maybe<Scalars['String']['output']>;\n  /** The reason the alert was dismissed */\n  dismissReason?: Maybe<Scalars['String']['output']>;\n  /** When was the alert dismissed? */\n  dismissedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The user who dismissed the alert */\n  dismisser?: Maybe<User>;\n  /** When was the alert fixed? */\n  fixedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The Node ID of the RepositoryVulnerabilityAlert object */\n  id: Scalars['ID']['output'];\n  /** Identifies the alert number. */\n  number: Scalars['Int']['output'];\n  /** The associated repository */\n  repository: Repository;\n  /** The associated security advisory */\n  securityAdvisory?: Maybe<SecurityAdvisory>;\n  /** The associated security vulnerability */\n  securityVulnerability?: Maybe<SecurityVulnerability>;\n  /** Identifies the state of the alert. */\n  state: RepositoryVulnerabilityAlertState;\n  /** The vulnerable manifest filename */\n  vulnerableManifestFilename: Scalars['String']['output'];\n  /** The vulnerable manifest path */\n  vulnerableManifestPath: Scalars['String']['output'];\n  /** The vulnerable requirements */\n  vulnerableRequirements?: Maybe<Scalars['String']['output']>;\n};\n\n/** The connection type for RepositoryVulnerabilityAlert. */\nexport type RepositoryVulnerabilityAlertConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RepositoryVulnerabilityAlertEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RepositoryVulnerabilityAlert>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** The possible scopes of an alert's dependency. */\nexport enum RepositoryVulnerabilityAlertDependencyScope {\n  /** A dependency that is only used in development */\n  Development = 'DEVELOPMENT',\n  /** A dependency that is leveraged during application runtime */\n  Runtime = 'RUNTIME'\n}\n\n/** An edge in a connection. */\nexport type RepositoryVulnerabilityAlertEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RepositoryVulnerabilityAlert>;\n};\n\n/** The possible states of an alert */\nexport enum RepositoryVulnerabilityAlertState {\n  /** An alert that has been automatically closed by Dependabot. */\n  AutoDismissed = 'AUTO_DISMISSED',\n  /** An alert that has been manually closed by a user. */\n  Dismissed = 'DISMISSED',\n  /** An alert that has been resolved by a code change. */\n  Fixed = 'FIXED',\n  /** An alert that is still open. */\n  Open = 'OPEN'\n}\n\n/** Autogenerated input type of RequestReviews */\nexport type RequestReviewsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the pull request to modify. */\n  pullRequestId: Scalars['ID']['input'];\n  /** The Node IDs of the team to request. */\n  teamIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** Add users to the set rather than replace. */\n  union?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The Node IDs of the user to request. */\n  userIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n};\n\n/** Autogenerated return type of RequestReviews. */\nexport type RequestReviewsPayload = {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request that is getting requests. */\n  pullRequest?: Maybe<PullRequest>;\n  /** The edge from the pull request to the requested reviewers. */\n  requestedReviewersEdge?: Maybe<UserEdge>;\n};\n\n/** The possible states that can be requested when creating a check run. */\nexport enum RequestableCheckStatusState {\n  /** The check suite or run has been completed. */\n  Completed = 'COMPLETED',\n  /** The check suite or run is in progress. */\n  InProgress = 'IN_PROGRESS',\n  /** The check suite or run is in pending state. */\n  Pending = 'PENDING',\n  /** The check suite or run has been queued. */\n  Queued = 'QUEUED',\n  /** The check suite or run is in waiting state. */\n  Waiting = 'WAITING'\n}\n\n/** Types that can be requested reviewers. */\nexport type RequestedReviewer = Bot | Mannequin | Team | User;\n\n/** The connection type for RequestedReviewer. */\nexport type RequestedReviewerConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<RequestedReviewerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<RequestedReviewer>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type RequestedReviewerEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<RequestedReviewer>;\n};\n\n/** Represents a type that can be required by a pull request for merging. */\nexport type RequirableByPullRequest = {\n  /** Whether this is required to pass before merging for a specific pull request. */\n  isRequired: Scalars['Boolean']['output'];\n};\n\n\n/** Represents a type that can be required by a pull request for merging. */\nexport type RequirableByPullRequestIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars['ID']['input']>;\n  pullRequestNumber?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */\nexport type RequiredDeploymentsParameters = {\n  /** The environments that must be successfully deployed to before branches can be merged. */\n  requiredDeploymentEnvironments: Array<Scalars['String']['output']>;\n};\n\n/** Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule. */\nexport type RequiredDeploymentsParametersInput = {\n  /** The environments that must be successfully deployed to before branches can be merged. */\n  requiredDeploymentEnvironments: Array<Scalars['String']['input']>;\n};\n\n/** Represents a required status check for a protected branch, but not any specific run of that check. */\nexport type RequiredStatusCheckDescription = {\n  /** The App that must provide this status in order for it to be accepted. */\n  app?: Maybe<App>;\n  /** The name of this status. */\n  context: Scalars['String']['output'];\n};\n\n/** Specifies the attributes for a new or updated required status check. */\nexport type RequiredStatusCheckInput = {\n  /**\n   * The ID of the App that must set the status in order for it to be accepted.\n   * Omit this value to use whichever app has recently been setting this status, or\n   * use \"any\" to allow any app to set the status.\n   */\n  appId?: InputMaybe<Scalars['ID']['input']>;\n  /** Status check context that must pass for commits to be accepted to the matching branch. */\n  context: Scalars['String']['input'];\n};\n\n/**\n * Choose which status checks must pass before the ref is updated. When enabled,\n * commits must first be pushed to another ref where the checks pass.\n */\nexport type RequiredStatusChecksParameters = {\n  /** Status checks that are required. */\n  requiredStatusChecks: Array<StatusCheckConfiguration>;\n  /**\n   * Whether pull requests targeting a matching branch must be tested with the\n   * latest code. This setting will not take effect unless at least one status\n   * check is enabled.\n   */\n  strictRequiredStatusChecksPolicy: Scalars['Boolean']['output'];\n};\n\n/**\n * Choose which status checks must pass before the ref is updated. When enabled,\n * commits must first be pushed to another ref where the checks pass.\n */\nexport type RequiredStatusChecksParametersInput = {\n  /** Status checks that are required. */\n  requiredStatusChecks: Array<StatusCheckConfigurationInput>;\n  /**\n   * Whether pull requests targeting a matching branch must be tested with the\n   * latest code. This setting will not take effect unless at least one status\n   * check is enabled.\n   */\n  strictRequiredStatusChecksPolicy: Scalars['Boolean']['input'];\n};\n\n/** Autogenerated input type of RerequestCheckSuite */\nexport type RerequestCheckSuiteInput = {\n  /** The Node ID of the check suite. */\n  checkSuiteId: Scalars['ID']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RerequestCheckSuite. */\nexport type RerequestCheckSuitePayload = {\n  /** The requested check suite. */\n  checkSuite?: Maybe<CheckSuite>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of ResolveReviewThread */\nexport type ResolveReviewThreadInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the thread to resolve */\n  threadId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of ResolveReviewThread. */\nexport type ResolveReviewThreadPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The thread to resolve. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Represents a private contribution a user made on GitHub. */\nexport type RestrictedContribution = Contribution & {\n  /**\n   * Whether this contribution is associated with a record you do not have access to. For\n   * example, your own 'first issue' contribution may have been made on a repository you can no\n   * longer access.\n   */\n  isRestricted: Scalars['Boolean']['output'];\n  /** When this contribution was made. */\n  occurredAt: Scalars['DateTime']['output'];\n  /** The HTTP path for this contribution. */\n  resourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this contribution. */\n  url: Scalars['URI']['output'];\n  /** The user who made this contribution. */\n  user: User;\n};\n\n/** Autogenerated input type of RetireSponsorsTier */\nexport type RetireSponsorsTierInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the published tier to retire. */\n  tierId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RetireSponsorsTier. */\nexport type RetireSponsorsTierPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The tier that was retired. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n};\n\n/** Autogenerated input type of RevertPullRequest */\nexport type RevertPullRequestInput = {\n  /** The description of the revert pull request. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Indicates whether the revert pull request should be a draft. */\n  draft?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the pull request to revert. */\n  pullRequestId: Scalars['ID']['input'];\n  /** The title of the revert pull request. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of RevertPullRequest. */\nexport type RevertPullRequestPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The pull request that was reverted. */\n  pullRequest?: Maybe<PullRequest>;\n  /** The new pull request that reverts the input pull request. */\n  revertPullRequest?: Maybe<PullRequest>;\n};\n\n/** A user, team, or app who has the ability to dismiss a review on a protected branch. */\nexport type ReviewDismissalAllowance = Node & {\n  /** The actor that can dismiss. */\n  actor?: Maybe<ReviewDismissalAllowanceActor>;\n  /** Identifies the branch protection rule associated with the allowed user, team, or app. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** The Node ID of the ReviewDismissalAllowance object */\n  id: Scalars['ID']['output'];\n};\n\n/** Types that can be an actor. */\nexport type ReviewDismissalAllowanceActor = App | Team | User;\n\n/** The connection type for ReviewDismissalAllowance. */\nexport type ReviewDismissalAllowanceConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReviewDismissalAllowanceEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReviewDismissalAllowance>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ReviewDismissalAllowanceEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReviewDismissalAllowance>;\n};\n\n/** Represents a 'review_dismissed' event on a given issue or pull request. */\nexport type ReviewDismissedEvent = Node & UniformResourceLocatable & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** Identifies the optional message associated with the 'review_dismissed' event. */\n  dismissalMessage?: Maybe<Scalars['String']['output']>;\n  /** Identifies the optional message associated with the event, rendered to HTML. */\n  dismissalMessageHTML?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the ReviewDismissedEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the previous state of the review with the 'review_dismissed' event. */\n  previousReviewState: PullRequestReviewState;\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the commit which caused the review to become stale. */\n  pullRequestCommit?: Maybe<PullRequestCommit>;\n  /** The HTTP path for this review dismissed event. */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the review associated with the 'review_dismissed' event. */\n  review?: Maybe<PullRequestReview>;\n  /** The HTTP URL for this review dismissed event. */\n  url: Scalars['URI']['output'];\n};\n\n/** A request for a user to review a pull request. */\nexport type ReviewRequest = Node & {\n  /** Whether this request was created for a code owner */\n  asCodeOwner: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the ReviewRequest object */\n  id: Scalars['ID']['output'];\n  /** Identifies the pull request associated with this review request. */\n  pullRequest: PullRequest;\n  /** The reviewer that is requested. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/** The connection type for ReviewRequest. */\nexport type ReviewRequestConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ReviewRequestEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<ReviewRequest>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type ReviewRequestEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<ReviewRequest>;\n};\n\n/** Represents an 'review_request_removed' event on a given pull request. */\nexport type ReviewRequestRemovedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the ReviewRequestRemovedEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the reviewer whose review request was removed. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/** Represents an 'review_requested' event on a given pull request. */\nexport type ReviewRequestedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the ReviewRequestedEvent object */\n  id: Scalars['ID']['output'];\n  /** PullRequest referenced by event. */\n  pullRequest: PullRequest;\n  /** Identifies the reviewer whose review was requested. */\n  requestedReviewer?: Maybe<RequestedReviewer>;\n};\n\n/**\n * A hovercard context with a message describing the current code review state of the pull\n * request.\n */\nexport type ReviewStatusHovercardContext = HovercardContext & {\n  /** A string describing this context */\n  message: Scalars['String']['output'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String']['output'];\n  /** The current status of the pull request with respect to code review. */\n  reviewDecision?: Maybe<PullRequestReviewDecision>;\n};\n\n/** Autogenerated input type of RevokeEnterpriseOrganizationsMigratorRole */\nexport type RevokeEnterpriseOrganizationsMigratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise to which all organizations managed by it will be granted the migrator role. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of the user to revoke the migrator role */\n  login: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole. */\nexport type RevokeEnterpriseOrganizationsMigratorRolePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The organizations that had the migrator role revoked for the given user. */\n  organizations?: Maybe<OrganizationConnection>;\n};\n\n\n/** Autogenerated return type of RevokeEnterpriseOrganizationsMigratorRole. */\nexport type RevokeEnterpriseOrganizationsMigratorRolePayloadOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Autogenerated input type of RevokeMigratorRole */\nexport type RevokeMigratorRoleInput = {\n  /** The user login or Team slug to revoke the migrator role from. */\n  actor: Scalars['String']['input'];\n  /** Specifies the type of the actor, can be either USER or TEAM. */\n  actorType: ActorType;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the organization that the user/team belongs to. */\n  organizationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of RevokeMigratorRole. */\nexport type RevokeMigratorRolePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Possible roles a user may have in relation to an organization. */\nexport enum RoleInOrganization {\n  /** A user who is a direct member of the organization. */\n  DirectMember = 'DIRECT_MEMBER',\n  /** A user with full administrative access to the organization. */\n  Owner = 'OWNER',\n  /** A user who is unaffiliated with the organization. */\n  Unaffiliated = 'UNAFFILIATED'\n}\n\n/** The level of enforcement for a rule or ruleset. */\nexport enum RuleEnforcement {\n  /** Rules will be enforced */\n  Active = 'ACTIVE',\n  /** Do not evaluate or enforce rules */\n  Disabled = 'DISABLED',\n  /**\n   * Allow admins to test rules before enforcing them. Admins can view insights on\n   * the Rule Insights page (`evaluate` is only available with GitHub Enterprise).\n   */\n  Evaluate = 'EVALUATE'\n}\n\n/** Types which can be parameters for `RepositoryRule` objects. */\nexport type RuleParameters = BranchNamePatternParameters | CodeScanningParameters | CommitAuthorEmailPatternParameters | CommitMessagePatternParameters | CommitterEmailPatternParameters | FileExtensionRestrictionParameters | FilePathRestrictionParameters | MaxFilePathLengthParameters | MaxFileSizeParameters | PullRequestParameters | RequiredDeploymentsParameters | RequiredStatusChecksParameters | TagNamePatternParameters | UpdateParameters | WorkflowsParameters;\n\n/** Specifies the parameters for a `RepositoryRule` object. Only one of the fields should be specified. */\nexport type RuleParametersInput = {\n  /** Parameters used for the `branch_name_pattern` rule type */\n  branchNamePattern?: InputMaybe<BranchNamePatternParametersInput>;\n  /** Parameters used for the `code_scanning` rule type */\n  codeScanning?: InputMaybe<CodeScanningParametersInput>;\n  /** Parameters used for the `commit_author_email_pattern` rule type */\n  commitAuthorEmailPattern?: InputMaybe<CommitAuthorEmailPatternParametersInput>;\n  /** Parameters used for the `commit_message_pattern` rule type */\n  commitMessagePattern?: InputMaybe<CommitMessagePatternParametersInput>;\n  /** Parameters used for the `committer_email_pattern` rule type */\n  committerEmailPattern?: InputMaybe<CommitterEmailPatternParametersInput>;\n  /** Parameters used for the `file_extension_restriction` rule type */\n  fileExtensionRestriction?: InputMaybe<FileExtensionRestrictionParametersInput>;\n  /** Parameters used for the `file_path_restriction` rule type */\n  filePathRestriction?: InputMaybe<FilePathRestrictionParametersInput>;\n  /** Parameters used for the `max_file_path_length` rule type */\n  maxFilePathLength?: InputMaybe<MaxFilePathLengthParametersInput>;\n  /** Parameters used for the `max_file_size` rule type */\n  maxFileSize?: InputMaybe<MaxFileSizeParametersInput>;\n  /** Parameters used for the `pull_request` rule type */\n  pullRequest?: InputMaybe<PullRequestParametersInput>;\n  /** Parameters used for the `required_deployments` rule type */\n  requiredDeployments?: InputMaybe<RequiredDeploymentsParametersInput>;\n  /** Parameters used for the `required_status_checks` rule type */\n  requiredStatusChecks?: InputMaybe<RequiredStatusChecksParametersInput>;\n  /** Parameters used for the `tag_name_pattern` rule type */\n  tagNamePattern?: InputMaybe<TagNamePatternParametersInput>;\n  /** Parameters used for the `update` rule type */\n  update?: InputMaybe<UpdateParametersInput>;\n  /** Parameters used for the `workflows` rule type */\n  workflows?: InputMaybe<WorkflowsParametersInput>;\n};\n\n/** Types which can have `RepositoryRule` objects. */\nexport type RuleSource = Organization | Repository;\n\n/** The possible digest algorithms used to sign SAML requests for an identity provider. */\nexport enum SamlDigestAlgorithm {\n  /** SHA1 */\n  Sha1 = 'SHA1',\n  /** SHA256 */\n  Sha256 = 'SHA256',\n  /** SHA384 */\n  Sha384 = 'SHA384',\n  /** SHA512 */\n  Sha512 = 'SHA512'\n}\n\n/** The possible signature algorithms used to sign SAML requests for a Identity Provider. */\nexport enum SamlSignatureAlgorithm {\n  /** RSA-SHA1 */\n  RsaSha1 = 'RSA_SHA1',\n  /** RSA-SHA256 */\n  RsaSha256 = 'RSA_SHA256',\n  /** RSA-SHA384 */\n  RsaSha384 = 'RSA_SHA384',\n  /** RSA-SHA512 */\n  RsaSha512 = 'RSA_SHA512'\n}\n\n/** A Saved Reply is text a user can use to reply quickly. */\nexport type SavedReply = Node & {\n  /** The body of the saved reply. */\n  body: Scalars['String']['output'];\n  /** The saved reply body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the SavedReply object */\n  id: Scalars['ID']['output'];\n  /** The title of the saved reply. */\n  title: Scalars['String']['output'];\n  /** The user that saved this reply. */\n  user?: Maybe<Actor>;\n};\n\n/** The connection type for SavedReply. */\nexport type SavedReplyConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SavedReplyEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SavedReply>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SavedReplyEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SavedReply>;\n};\n\n/** Ordering options for saved reply connections. */\nexport type SavedReplyOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order saved replies by. */\n  field: SavedReplyOrderField;\n};\n\n/** Properties by which saved reply connections can be ordered. */\nexport enum SavedReplyOrderField {\n  /** Order saved reply by when they were updated. */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The results of a search. */\nexport type SearchResultItem = App | Discussion | Issue | MarketplaceListing | Organization | PullRequest | Repository | User;\n\n/**\n * A list of results that matched against a search query. Regardless of the number\n * of matches, a maximum of 1,000 results will be available across all types,\n * potentially split across many pages.\n */\nexport type SearchResultItemConnection = {\n  /**\n   * The total number of pieces of code that matched the search query. Regardless\n   * of the total number of matches, a maximum of 1,000 results will be available\n   * across all types.\n   */\n  codeCount: Scalars['Int']['output'];\n  /**\n   * The total number of discussions that matched the search query. Regardless of\n   * the total number of matches, a maximum of 1,000 results will be available\n   * across all types.\n   */\n  discussionCount: Scalars['Int']['output'];\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SearchResultItemEdge>>>;\n  /**\n   * The total number of issues that matched the search query. Regardless of the\n   * total number of matches, a maximum of 1,000 results will be available across all types.\n   */\n  issueCount: Scalars['Int']['output'];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SearchResultItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * The total number of repositories that matched the search query. Regardless of\n   * the total number of matches, a maximum of 1,000 results will be available\n   * across all types.\n   */\n  repositoryCount: Scalars['Int']['output'];\n  /**\n   * The total number of users that matched the search query. Regardless of the\n   * total number of matches, a maximum of 1,000 results will be available across all types.\n   */\n  userCount: Scalars['Int']['output'];\n  /**\n   * The total number of wiki pages that matched the search query. Regardless of\n   * the total number of matches, a maximum of 1,000 results will be available\n   * across all types.\n   */\n  wikiCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SearchResultItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SearchResultItem>;\n  /** Text matches on the result found. */\n  textMatches?: Maybe<Array<Maybe<TextMatch>>>;\n};\n\n/** Represents the individual results of a search. */\nexport enum SearchType {\n  /** Returns matching discussions in repositories. */\n  Discussion = 'DISCUSSION',\n  /** Returns results matching issues in repositories. */\n  Issue = 'ISSUE',\n  /** Returns results matching repositories. */\n  Repository = 'REPOSITORY',\n  /** Returns results matching users and organizations on GitHub. */\n  User = 'USER'\n}\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisory = Node & {\n  /** The classification of the advisory */\n  classification: SecurityAdvisoryClassification;\n  /** The CVSS associated with this advisory */\n  cvss: Cvss;\n  /** CWEs associated with this Advisory */\n  cwes: CweConnection;\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** This is a long plaintext description of the advisory */\n  description: Scalars['String']['output'];\n  /** The GitHub Security Advisory ID */\n  ghsaId: Scalars['String']['output'];\n  /** The Node ID of the SecurityAdvisory object */\n  id: Scalars['ID']['output'];\n  /** A list of identifiers for this advisory */\n  identifiers: Array<SecurityAdvisoryIdentifier>;\n  /** The permalink for the advisory's dependabot alerts page */\n  notificationsPermalink?: Maybe<Scalars['URI']['output']>;\n  /** The organization that originated the advisory */\n  origin: Scalars['String']['output'];\n  /** The permalink for the advisory */\n  permalink?: Maybe<Scalars['URI']['output']>;\n  /** When the advisory was published */\n  publishedAt: Scalars['DateTime']['output'];\n  /** A list of references for this advisory */\n  references: Array<SecurityAdvisoryReference>;\n  /** The severity of the advisory */\n  severity: SecurityAdvisorySeverity;\n  /** A short plaintext summary of the advisory */\n  summary: Scalars['String']['output'];\n  /** When the advisory was last updated */\n  updatedAt: Scalars['DateTime']['output'];\n  /** Vulnerabilities associated with this Advisory */\n  vulnerabilities: SecurityVulnerabilityConnection;\n  /** When the advisory was withdrawn, if it has been withdrawn */\n  withdrawnAt?: Maybe<Scalars['DateTime']['output']>;\n};\n\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisoryCwesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A GitHub Security Advisory */\nexport type SecurityAdvisoryVulnerabilitiesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  classifications?: InputMaybe<Array<SecurityAdvisoryClassification>>;\n  ecosystem?: InputMaybe<SecurityAdvisoryEcosystem>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SecurityVulnerabilityOrder>;\n  package?: InputMaybe<Scalars['String']['input']>;\n  severities?: InputMaybe<Array<SecurityAdvisorySeverity>>;\n};\n\n/** Classification of the advisory. */\nexport enum SecurityAdvisoryClassification {\n  /** Classification of general advisories. */\n  General = 'GENERAL',\n  /** Classification of malware advisories. */\n  Malware = 'MALWARE'\n}\n\n/** The connection type for SecurityAdvisory. */\nexport type SecurityAdvisoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SecurityAdvisoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SecurityAdvisory>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** The possible ecosystems of a security vulnerability's package. */\nexport enum SecurityAdvisoryEcosystem {\n  /** GitHub Actions */\n  Actions = 'ACTIONS',\n  /** PHP packages hosted at packagist.org */\n  Composer = 'COMPOSER',\n  /** Erlang/Elixir packages hosted at hex.pm */\n  Erlang = 'ERLANG',\n  /** Go modules */\n  Go = 'GO',\n  /** Java artifacts hosted at the Maven central repository */\n  Maven = 'MAVEN',\n  /** JavaScript packages hosted at npmjs.com */\n  Npm = 'NPM',\n  /** .NET packages hosted at the NuGet Gallery */\n  Nuget = 'NUGET',\n  /** Python packages hosted at PyPI.org */\n  Pip = 'PIP',\n  /** Dart packages hosted at pub.dev */\n  Pub = 'PUB',\n  /** Ruby gems hosted at RubyGems.org */\n  Rubygems = 'RUBYGEMS',\n  /** Rust crates */\n  Rust = 'RUST',\n  /** Swift packages */\n  Swift = 'SWIFT'\n}\n\n/** An edge in a connection. */\nexport type SecurityAdvisoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SecurityAdvisory>;\n};\n\n/** A GitHub Security Advisory Identifier */\nexport type SecurityAdvisoryIdentifier = {\n  /** The identifier type, e.g. GHSA, CVE */\n  type: Scalars['String']['output'];\n  /** The identifier */\n  value: Scalars['String']['output'];\n};\n\n/** An advisory identifier to filter results on. */\nexport type SecurityAdvisoryIdentifierFilter = {\n  /** The identifier type. */\n  type: SecurityAdvisoryIdentifierType;\n  /** The identifier string. Supports exact or partial matching. */\n  value: Scalars['String']['input'];\n};\n\n/** Identifier formats available for advisories. */\nexport enum SecurityAdvisoryIdentifierType {\n  /** Common Vulnerabilities and Exposures Identifier. */\n  Cve = 'CVE',\n  /** GitHub Security Advisory ID. */\n  Ghsa = 'GHSA'\n}\n\n/** Ordering options for security advisory connections */\nexport type SecurityAdvisoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order security advisories by. */\n  field: SecurityAdvisoryOrderField;\n};\n\n/** Properties by which security advisory connections can be ordered. */\nexport enum SecurityAdvisoryOrderField {\n  /** Order advisories by publication time */\n  PublishedAt = 'PUBLISHED_AT',\n  /** Order advisories by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** An individual package */\nexport type SecurityAdvisoryPackage = {\n  /** The ecosystem the package belongs to, e.g. RUBYGEMS, NPM */\n  ecosystem: SecurityAdvisoryEcosystem;\n  /** The package name */\n  name: Scalars['String']['output'];\n};\n\n/** An individual package version */\nexport type SecurityAdvisoryPackageVersion = {\n  /** The package name or version */\n  identifier: Scalars['String']['output'];\n};\n\n/** A GitHub Security Advisory Reference */\nexport type SecurityAdvisoryReference = {\n  /** A publicly accessible reference */\n  url: Scalars['URI']['output'];\n};\n\n/** Severity of the vulnerability. */\nexport enum SecurityAdvisorySeverity {\n  /** Critical. */\n  Critical = 'CRITICAL',\n  /** High. */\n  High = 'HIGH',\n  /** Low. */\n  Low = 'LOW',\n  /** Moderate. */\n  Moderate = 'MODERATE'\n}\n\n/** An individual vulnerability within an Advisory */\nexport type SecurityVulnerability = {\n  /** The Advisory associated with this Vulnerability */\n  advisory: SecurityAdvisory;\n  /** The first version containing a fix for the vulnerability */\n  firstPatchedVersion?: Maybe<SecurityAdvisoryPackageVersion>;\n  /** A description of the vulnerable package */\n  package: SecurityAdvisoryPackage;\n  /** The severity of the vulnerability within this package */\n  severity: SecurityAdvisorySeverity;\n  /** When the vulnerability was last updated */\n  updatedAt: Scalars['DateTime']['output'];\n  /**\n   * A string that describes the vulnerable package versions.\n   * This string follows a basic syntax with a few forms.\n   * + `= 0.2.0` denotes a single vulnerable version.\n   * + `<= 1.0.8` denotes a version range up to and including the specified version\n   * + `< 0.1.11` denotes a version range up to, but excluding, the specified version\n   * + `>= 4.3.0, < 4.3.5` denotes a version range with a known minimum and maximum version.\n   * + `>= 0.0.1` denotes a version range with a known minimum, but no known maximum\n   */\n  vulnerableVersionRange: Scalars['String']['output'];\n};\n\n/** The connection type for SecurityVulnerability. */\nexport type SecurityVulnerabilityConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SecurityVulnerabilityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SecurityVulnerability>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SecurityVulnerabilityEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SecurityVulnerability>;\n};\n\n/** Ordering options for security vulnerability connections */\nexport type SecurityVulnerabilityOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order security vulnerabilities by. */\n  field: SecurityVulnerabilityOrderField;\n};\n\n/** Properties by which security vulnerability connections can be ordered. */\nexport enum SecurityVulnerabilityOrderField {\n  /** Order vulnerability by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** Autogenerated input type of SetEnterpriseIdentityProvider */\nexport type SetEnterpriseIdentityProviderInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The digest algorithm used to sign SAML requests for the identity provider. */\n  digestMethod: SamlDigestAlgorithm;\n  /** The ID of the enterprise on which to set an identity provider. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The x509 certificate used by the identity provider to sign assertions and responses. */\n  idpCertificate: Scalars['String']['input'];\n  /** The Issuer Entity ID for the SAML identity provider */\n  issuer?: InputMaybe<Scalars['String']['input']>;\n  /** The signature algorithm used to sign SAML requests for the identity provider. */\n  signatureMethod: SamlSignatureAlgorithm;\n  /** The URL endpoint for the identity provider's SAML SSO. */\n  ssoUrl: Scalars['URI']['input'];\n};\n\n/** Autogenerated return type of SetEnterpriseIdentityProvider. */\nexport type SetEnterpriseIdentityProviderPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The identity provider for the enterprise. */\n  identityProvider?: Maybe<EnterpriseIdentityProvider>;\n};\n\n/** Autogenerated input type of SetOrganizationInteractionLimit */\nexport type SetOrganizationInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the organization to set a limit for. */\n  organizationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of SetOrganizationInteractionLimit. */\nexport type SetOrganizationInteractionLimitPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The organization that the interaction limit was set for. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of SetRepositoryInteractionLimit */\nexport type SetRepositoryInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the repository to set a limit for. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of SetRepositoryInteractionLimit. */\nexport type SetRepositoryInteractionLimitPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The repository that the interaction limit was set for. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of SetUserInteractionLimit */\nexport type SetUserInteractionLimitInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** When this limit should expire. */\n  expiry?: InputMaybe<RepositoryInteractionLimitExpiry>;\n  /** The limit to set. */\n  limit: RepositoryInteractionLimit;\n  /** The ID of the user to set a limit for. */\n  userId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of SetUserInteractionLimit. */\nexport type SetUserInteractionLimitPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The user that the interaction limit was set for. */\n  user?: Maybe<User>;\n};\n\n/** Represents an S/MIME signature on a Commit or Tag. */\nexport type SmimeSignature = GitSignature & {\n  /** Email used to sign this object. */\n  email: Scalars['String']['output'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean']['output'];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String']['output'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String']['output'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean']['output'];\n};\n\n/** Social media profile associated with a user. */\nexport type SocialAccount = {\n  /** Name of the social media account as it appears on the profile. */\n  displayName: Scalars['String']['output'];\n  /** Software or company that hosts the social media account. */\n  provider: SocialAccountProvider;\n  /** URL of the social media account. */\n  url: Scalars['URI']['output'];\n};\n\n/** The connection type for SocialAccount. */\nexport type SocialAccountConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SocialAccountEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SocialAccount>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SocialAccountEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SocialAccount>;\n};\n\n/** Software or company that hosts social media accounts. */\nexport enum SocialAccountProvider {\n  /** Social media and networking website. */\n  Facebook = 'FACEBOOK',\n  /** Catch-all for social media providers that do not yet have specific handling. */\n  Generic = 'GENERIC',\n  /** Fork of Mastodon with a greater focus on local posting. */\n  Hometown = 'HOMETOWN',\n  /** Social media website with a focus on photo and video sharing. */\n  Instagram = 'INSTAGRAM',\n  /** Professional networking website. */\n  Linkedin = 'LINKEDIN',\n  /** Open-source federated microblogging service. */\n  Mastodon = 'MASTODON',\n  /** JavaScript package registry. */\n  Npm = 'NPM',\n  /** Social news aggregation and discussion website. */\n  Reddit = 'REDDIT',\n  /** Live-streaming service. */\n  Twitch = 'TWITCH',\n  /** Microblogging website. */\n  Twitter = 'TWITTER',\n  /** Online video platform. */\n  Youtube = 'YOUTUBE'\n}\n\n/** Entities that can sponsor others via GitHub Sponsors */\nexport type Sponsor = Organization | User;\n\n/**\n * A GitHub account and the total amount in USD they've paid for sponsorships to a\n * particular maintainer. Does not include payments made via Patreon.\n */\nexport type SponsorAndLifetimeValue = {\n  /** The amount in cents. */\n  amountInCents: Scalars['Int']['output'];\n  /** The amount in USD, formatted as a string. */\n  formattedAmount: Scalars['String']['output'];\n  /** The sponsor's GitHub account. */\n  sponsor: Sponsorable;\n  /** The maintainer's GitHub account. */\n  sponsorable: Sponsorable;\n};\n\n/** The connection type for SponsorAndLifetimeValue. */\nexport type SponsorAndLifetimeValueConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorAndLifetimeValueEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorAndLifetimeValue>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SponsorAndLifetimeValueEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorAndLifetimeValue>;\n};\n\n/** Ordering options for connections to get sponsor entities and associated USD amounts for GitHub Sponsors. */\nexport type SponsorAndLifetimeValueOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order results by. */\n  field: SponsorAndLifetimeValueOrderField;\n};\n\n/** Properties by which sponsor and lifetime value connections can be ordered. */\nexport enum SponsorAndLifetimeValueOrderField {\n  /** Order results by how much money the sponsor has paid in total. */\n  LifetimeValue = 'LIFETIME_VALUE',\n  /** Order results by the sponsor's login (username). */\n  SponsorLogin = 'SPONSOR_LOGIN',\n  /** Order results by the sponsor's relevance to the viewer. */\n  SponsorRelevance = 'SPONSOR_RELEVANCE'\n}\n\n/** A list of users and organizations sponsoring someone via GitHub Sponsors. */\nexport type SponsorConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Sponsor>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a user or organization who is sponsoring someone in GitHub Sponsors. */\nexport type SponsorEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Sponsor>;\n};\n\n/** Ordering options for connections to get sponsor entities for GitHub Sponsors. */\nexport type SponsorOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsor entities by. */\n  field: SponsorOrderField;\n};\n\n/** Properties by which sponsor connections can be ordered. */\nexport enum SponsorOrderField {\n  /** Order sponsorable entities by login (username). */\n  Login = 'LOGIN',\n  /** Order sponsors by their relevance to the viewer. */\n  Relevance = 'RELEVANCE'\n}\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type Sponsorable = {\n  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n  estimatedNextSponsorsPayoutInCents: Scalars['Int']['output'];\n  /** True if this user/organization has a GitHub Sponsors listing. */\n  hasSponsorsListing: Scalars['Boolean']['output'];\n  /** Whether the given account is sponsoring this user/organization. */\n  isSponsoredBy: Scalars['Boolean']['output'];\n  /** True if the viewer is sponsored by this user/organization. */\n  isSponsoringViewer: Scalars['Boolean']['output'];\n  /**\n   * Calculate how much each sponsor has ever paid total to this maintainer via\n   * GitHub Sponsors. Does not include sponsorships paid via Patreon.\n   */\n  lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection;\n  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int']['output'];\n  /** List of users and organizations this entity is sponsoring. */\n  sponsoring: SponsorConnection;\n  /** List of sponsors for this user or organization. */\n  sponsors: SponsorConnection;\n  /** Events involving this sponsorable, such as new sponsorships. */\n  sponsorsActivities: SponsorsActivityConnection;\n  /** The GitHub Sponsors listing for this user or organization. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */\n  sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */\n  sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n  /** List of sponsorship updates sent from this sponsorable to sponsors. */\n  sponsorshipNewsletters: SponsorshipNewsletterConnection;\n  /** The sponsorships where this user or organization is the maintainer receiving the funds. */\n  sponsorshipsAsMaintainer: SponsorshipConnection;\n  /** The sponsorships where this user or organization is the funder. */\n  sponsorshipsAsSponsor: SponsorshipConnection;\n  /**\n   * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has\n   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the\n   * user themselves or by a user who can manage sponsorships for the requested organization.\n   */\n  totalSponsorshipAmountAsSponsorInCents?: Maybe<Scalars['Int']['output']>;\n  /** Whether or not the viewer is able to sponsor this user/organization. */\n  viewerCanSponsor: Scalars['Boolean']['output'];\n  /** True if the viewer is sponsoring this user/organization. */\n  viewerIsSponsoring: Scalars['Boolean']['output'];\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableIsSponsoredByArgs = {\n  accountLogin: Scalars['String']['input'];\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableLifetimeReceivedSponsorshipValuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorAndLifetimeValueOrder>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableSponsoringArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableSponsorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableSponsorsActivitiesArgs = {\n  actions?: InputMaybe<Array<SponsorsActivityAction>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includeAsSponsor?: InputMaybe<Scalars['Boolean']['input']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  until?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableSponsorshipForViewerAsSponsorArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableSponsorshipForViewerAsSponsorableArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableSponsorshipsAsMaintainerArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableSponsorshipsAsSponsorArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  maintainerLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** Entities that can sponsor or be sponsored through GitHub Sponsors. */\nexport type SponsorableTotalSponsorshipAmountAsSponsorInCentsArgs = {\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  sponsorableLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  until?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n/** Entities that can be sponsored via GitHub Sponsors */\nexport type SponsorableItem = Organization | User;\n\n/** The connection type for SponsorableItem. */\nexport type SponsorableItemConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorableItemEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorableItem>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SponsorableItemEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorableItem>;\n};\n\n/** Ordering options for connections to get sponsorable entities for GitHub Sponsors. */\nexport type SponsorableOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorable entities by. */\n  field: SponsorableOrderField;\n};\n\n/** Properties by which sponsorable connections can be ordered. */\nexport enum SponsorableOrderField {\n  /** Order sponsorable entities by login (username). */\n  Login = 'LOGIN'\n}\n\n/** An event related to sponsorship activity. */\nexport type SponsorsActivity = Node & {\n  /** What action this activity indicates took place. */\n  action: SponsorsActivityAction;\n  /** The sponsor's current privacy level. */\n  currentPrivacyLevel?: Maybe<SponsorshipPrivacy>;\n  /** The Node ID of the SponsorsActivity object */\n  id: Scalars['ID']['output'];\n  /** The platform that was used to pay for the sponsorship. */\n  paymentSource?: Maybe<SponsorshipPaymentSource>;\n  /** The tier that the sponsorship used to use, for tier change events. */\n  previousSponsorsTier?: Maybe<SponsorsTier>;\n  /** The user or organization who triggered this activity and was/is sponsoring the sponsorable. */\n  sponsor?: Maybe<Sponsor>;\n  /** The user or organization that is being sponsored, the maintainer. */\n  sponsorable: Sponsorable;\n  /** The associated sponsorship tier. */\n  sponsorsTier?: Maybe<SponsorsTier>;\n  /** The timestamp of this event. */\n  timestamp?: Maybe<Scalars['DateTime']['output']>;\n  /** Was this sponsorship made alongside other sponsorships at the same time from the same sponsor? */\n  viaBulkSponsorship: Scalars['Boolean']['output'];\n};\n\n/** The possible actions that GitHub Sponsors activities can represent. */\nexport enum SponsorsActivityAction {\n  /** The activity was cancelling a sponsorship. */\n  CancelledSponsorship = 'CANCELLED_SPONSORSHIP',\n  /** The activity was starting a sponsorship. */\n  NewSponsorship = 'NEW_SPONSORSHIP',\n  /** The activity was scheduling a downgrade or cancellation. */\n  PendingChange = 'PENDING_CHANGE',\n  /** The activity was funds being refunded to the sponsor or GitHub. */\n  Refund = 'REFUND',\n  /** The activity was disabling matching for a previously matched sponsorship. */\n  SponsorMatchDisabled = 'SPONSOR_MATCH_DISABLED',\n  /** The activity was changing the sponsorship tier, either directly by the sponsor or by a scheduled/pending change. */\n  TierChange = 'TIER_CHANGE'\n}\n\n/** The connection type for SponsorsActivity. */\nexport type SponsorsActivityConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorsActivityEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorsActivity>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SponsorsActivityEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorsActivity>;\n};\n\n/** Ordering options for GitHub Sponsors activity connections. */\nexport type SponsorsActivityOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order activity by. */\n  field: SponsorsActivityOrderField;\n};\n\n/** Properties by which GitHub Sponsors activity connections can be ordered. */\nexport enum SponsorsActivityOrderField {\n  /** Order activities by when they happened. */\n  Timestamp = 'TIMESTAMP'\n}\n\n/** The possible time periods for which Sponsors activities can be requested. */\nexport enum SponsorsActivityPeriod {\n  /** Don't restrict the activity to any date range, include all activity. */\n  All = 'ALL',\n  /** The previous calendar day. */\n  Day = 'DAY',\n  /** The previous thirty days. */\n  Month = 'MONTH',\n  /** The previous seven days. */\n  Week = 'WEEK'\n}\n\n/** Represents countries or regions for billing and residence for a GitHub Sponsors profile. */\nexport enum SponsorsCountryOrRegionCode {\n  /** Andorra */\n  Ad = 'AD',\n  /** United Arab Emirates */\n  Ae = 'AE',\n  /** Afghanistan */\n  Af = 'AF',\n  /** Antigua and Barbuda */\n  Ag = 'AG',\n  /** Anguilla */\n  Ai = 'AI',\n  /** Albania */\n  Al = 'AL',\n  /** Armenia */\n  Am = 'AM',\n  /** Angola */\n  Ao = 'AO',\n  /** Antarctica */\n  Aq = 'AQ',\n  /** Argentina */\n  Ar = 'AR',\n  /** American Samoa */\n  As = 'AS',\n  /** Austria */\n  At = 'AT',\n  /** Australia */\n  Au = 'AU',\n  /** Aruba */\n  Aw = 'AW',\n  /** \u00C5land */\n  Ax = 'AX',\n  /** Azerbaijan */\n  Az = 'AZ',\n  /** Bosnia and Herzegovina */\n  Ba = 'BA',\n  /** Barbados */\n  Bb = 'BB',\n  /** Bangladesh */\n  Bd = 'BD',\n  /** Belgium */\n  Be = 'BE',\n  /** Burkina Faso */\n  Bf = 'BF',\n  /** Bulgaria */\n  Bg = 'BG',\n  /** Bahrain */\n  Bh = 'BH',\n  /** Burundi */\n  Bi = 'BI',\n  /** Benin */\n  Bj = 'BJ',\n  /** Saint Barth\u00E9lemy */\n  Bl = 'BL',\n  /** Bermuda */\n  Bm = 'BM',\n  /** Brunei Darussalam */\n  Bn = 'BN',\n  /** Bolivia */\n  Bo = 'BO',\n  /** Bonaire, Sint Eustatius and Saba */\n  Bq = 'BQ',\n  /** Brazil */\n  Br = 'BR',\n  /** Bahamas */\n  Bs = 'BS',\n  /** Bhutan */\n  Bt = 'BT',\n  /** Bouvet Island */\n  Bv = 'BV',\n  /** Botswana */\n  Bw = 'BW',\n  /** Belarus */\n  By = 'BY',\n  /** Belize */\n  Bz = 'BZ',\n  /** Canada */\n  Ca = 'CA',\n  /** Cocos (Keeling) Islands */\n  Cc = 'CC',\n  /** Congo (Kinshasa) */\n  Cd = 'CD',\n  /** Central African Republic */\n  Cf = 'CF',\n  /** Congo (Brazzaville) */\n  Cg = 'CG',\n  /** Switzerland */\n  Ch = 'CH',\n  /** C\u00F4te d'Ivoire */\n  Ci = 'CI',\n  /** Cook Islands */\n  Ck = 'CK',\n  /** Chile */\n  Cl = 'CL',\n  /** Cameroon */\n  Cm = 'CM',\n  /** China */\n  Cn = 'CN',\n  /** Colombia */\n  Co = 'CO',\n  /** Costa Rica */\n  Cr = 'CR',\n  /** Cape Verde */\n  Cv = 'CV',\n  /** Cura\u00E7ao */\n  Cw = 'CW',\n  /** Christmas Island */\n  Cx = 'CX',\n  /** Cyprus */\n  Cy = 'CY',\n  /** Czech Republic */\n  Cz = 'CZ',\n  /** Germany */\n  De = 'DE',\n  /** Djibouti */\n  Dj = 'DJ',\n  /** Denmark */\n  Dk = 'DK',\n  /** Dominica */\n  Dm = 'DM',\n  /** Dominican Republic */\n  Do = 'DO',\n  /** Algeria */\n  Dz = 'DZ',\n  /** Ecuador */\n  Ec = 'EC',\n  /** Estonia */\n  Ee = 'EE',\n  /** Egypt */\n  Eg = 'EG',\n  /** Western Sahara */\n  Eh = 'EH',\n  /** Eritrea */\n  Er = 'ER',\n  /** Spain */\n  Es = 'ES',\n  /** Ethiopia */\n  Et = 'ET',\n  /** Finland */\n  Fi = 'FI',\n  /** Fiji */\n  Fj = 'FJ',\n  /** Falkland Islands */\n  Fk = 'FK',\n  /** Micronesia */\n  Fm = 'FM',\n  /** Faroe Islands */\n  Fo = 'FO',\n  /** France */\n  Fr = 'FR',\n  /** Gabon */\n  Ga = 'GA',\n  /** United Kingdom */\n  Gb = 'GB',\n  /** Grenada */\n  Gd = 'GD',\n  /** Georgia */\n  Ge = 'GE',\n  /** French Guiana */\n  Gf = 'GF',\n  /** Guernsey */\n  Gg = 'GG',\n  /** Ghana */\n  Gh = 'GH',\n  /** Gibraltar */\n  Gi = 'GI',\n  /** Greenland */\n  Gl = 'GL',\n  /** Gambia */\n  Gm = 'GM',\n  /** Guinea */\n  Gn = 'GN',\n  /** Guadeloupe */\n  Gp = 'GP',\n  /** Equatorial Guinea */\n  Gq = 'GQ',\n  /** Greece */\n  Gr = 'GR',\n  /** South Georgia and South Sandwich Islands */\n  Gs = 'GS',\n  /** Guatemala */\n  Gt = 'GT',\n  /** Guam */\n  Gu = 'GU',\n  /** Guinea-Bissau */\n  Gw = 'GW',\n  /** Guyana */\n  Gy = 'GY',\n  /** Hong Kong */\n  Hk = 'HK',\n  /** Heard and McDonald Islands */\n  Hm = 'HM',\n  /** Honduras */\n  Hn = 'HN',\n  /** Croatia */\n  Hr = 'HR',\n  /** Haiti */\n  Ht = 'HT',\n  /** Hungary */\n  Hu = 'HU',\n  /** Indonesia */\n  Id = 'ID',\n  /** Ireland */\n  Ie = 'IE',\n  /** Israel */\n  Il = 'IL',\n  /** Isle of Man */\n  Im = 'IM',\n  /** India */\n  In = 'IN',\n  /** British Indian Ocean Territory */\n  Io = 'IO',\n  /** Iraq */\n  Iq = 'IQ',\n  /** Iran */\n  Ir = 'IR',\n  /** Iceland */\n  Is = 'IS',\n  /** Italy */\n  It = 'IT',\n  /** Jersey */\n  Je = 'JE',\n  /** Jamaica */\n  Jm = 'JM',\n  /** Jordan */\n  Jo = 'JO',\n  /** Japan */\n  Jp = 'JP',\n  /** Kenya */\n  Ke = 'KE',\n  /** Kyrgyzstan */\n  Kg = 'KG',\n  /** Cambodia */\n  Kh = 'KH',\n  /** Kiribati */\n  Ki = 'KI',\n  /** Comoros */\n  Km = 'KM',\n  /** Saint Kitts and Nevis */\n  Kn = 'KN',\n  /** Korea, South */\n  Kr = 'KR',\n  /** Kuwait */\n  Kw = 'KW',\n  /** Cayman Islands */\n  Ky = 'KY',\n  /** Kazakhstan */\n  Kz = 'KZ',\n  /** Laos */\n  La = 'LA',\n  /** Lebanon */\n  Lb = 'LB',\n  /** Saint Lucia */\n  Lc = 'LC',\n  /** Liechtenstein */\n  Li = 'LI',\n  /** Sri Lanka */\n  Lk = 'LK',\n  /** Liberia */\n  Lr = 'LR',\n  /** Lesotho */\n  Ls = 'LS',\n  /** Lithuania */\n  Lt = 'LT',\n  /** Luxembourg */\n  Lu = 'LU',\n  /** Latvia */\n  Lv = 'LV',\n  /** Libya */\n  Ly = 'LY',\n  /** Morocco */\n  Ma = 'MA',\n  /** Monaco */\n  Mc = 'MC',\n  /** Moldova */\n  Md = 'MD',\n  /** Montenegro */\n  Me = 'ME',\n  /** Saint Martin (French part) */\n  Mf = 'MF',\n  /** Madagascar */\n  Mg = 'MG',\n  /** Marshall Islands */\n  Mh = 'MH',\n  /** Macedonia */\n  Mk = 'MK',\n  /** Mali */\n  Ml = 'ML',\n  /** Myanmar */\n  Mm = 'MM',\n  /** Mongolia */\n  Mn = 'MN',\n  /** Macau */\n  Mo = 'MO',\n  /** Northern Mariana Islands */\n  Mp = 'MP',\n  /** Martinique */\n  Mq = 'MQ',\n  /** Mauritania */\n  Mr = 'MR',\n  /** Montserrat */\n  Ms = 'MS',\n  /** Malta */\n  Mt = 'MT',\n  /** Mauritius */\n  Mu = 'MU',\n  /** Maldives */\n  Mv = 'MV',\n  /** Malawi */\n  Mw = 'MW',\n  /** Mexico */\n  Mx = 'MX',\n  /** Malaysia */\n  My = 'MY',\n  /** Mozambique */\n  Mz = 'MZ',\n  /** Namibia */\n  Na = 'NA',\n  /** New Caledonia */\n  Nc = 'NC',\n  /** Niger */\n  Ne = 'NE',\n  /** Norfolk Island */\n  Nf = 'NF',\n  /** Nigeria */\n  Ng = 'NG',\n  /** Nicaragua */\n  Ni = 'NI',\n  /** Netherlands */\n  Nl = 'NL',\n  /** Norway */\n  No = 'NO',\n  /** Nepal */\n  Np = 'NP',\n  /** Nauru */\n  Nr = 'NR',\n  /** Niue */\n  Nu = 'NU',\n  /** New Zealand */\n  Nz = 'NZ',\n  /** Oman */\n  Om = 'OM',\n  /** Panama */\n  Pa = 'PA',\n  /** Peru */\n  Pe = 'PE',\n  /** French Polynesia */\n  Pf = 'PF',\n  /** Papua New Guinea */\n  Pg = 'PG',\n  /** Philippines */\n  Ph = 'PH',\n  /** Pakistan */\n  Pk = 'PK',\n  /** Poland */\n  Pl = 'PL',\n  /** Saint Pierre and Miquelon */\n  Pm = 'PM',\n  /** Pitcairn */\n  Pn = 'PN',\n  /** Puerto Rico */\n  Pr = 'PR',\n  /** Palestine */\n  Ps = 'PS',\n  /** Portugal */\n  Pt = 'PT',\n  /** Palau */\n  Pw = 'PW',\n  /** Paraguay */\n  Py = 'PY',\n  /** Qatar */\n  Qa = 'QA',\n  /** Reunion */\n  Re = 'RE',\n  /** Romania */\n  Ro = 'RO',\n  /** Serbia */\n  Rs = 'RS',\n  /** Russian Federation */\n  Ru = 'RU',\n  /** Rwanda */\n  Rw = 'RW',\n  /** Saudi Arabia */\n  Sa = 'SA',\n  /** Solomon Islands */\n  Sb = 'SB',\n  /** Seychelles */\n  Sc = 'SC',\n  /** Sudan */\n  Sd = 'SD',\n  /** Sweden */\n  Se = 'SE',\n  /** Singapore */\n  Sg = 'SG',\n  /** Saint Helena */\n  Sh = 'SH',\n  /** Slovenia */\n  Si = 'SI',\n  /** Svalbard and Jan Mayen Islands */\n  Sj = 'SJ',\n  /** Slovakia */\n  Sk = 'SK',\n  /** Sierra Leone */\n  Sl = 'SL',\n  /** San Marino */\n  Sm = 'SM',\n  /** Senegal */\n  Sn = 'SN',\n  /** Somalia */\n  So = 'SO',\n  /** Suriname */\n  Sr = 'SR',\n  /** South Sudan */\n  Ss = 'SS',\n  /** Sao Tome and Principe */\n  St = 'ST',\n  /** El Salvador */\n  Sv = 'SV',\n  /** Sint Maarten (Dutch part) */\n  Sx = 'SX',\n  /** Swaziland */\n  Sz = 'SZ',\n  /** Turks and Caicos Islands */\n  Tc = 'TC',\n  /** Chad */\n  Td = 'TD',\n  /** French Southern Lands */\n  Tf = 'TF',\n  /** Togo */\n  Tg = 'TG',\n  /** Thailand */\n  Th = 'TH',\n  /** Tajikistan */\n  Tj = 'TJ',\n  /** Tokelau */\n  Tk = 'TK',\n  /** Timor-Leste */\n  Tl = 'TL',\n  /** Turkmenistan */\n  Tm = 'TM',\n  /** Tunisia */\n  Tn = 'TN',\n  /** Tonga */\n  To = 'TO',\n  /** T\u00FCrkiye */\n  Tr = 'TR',\n  /** Trinidad and Tobago */\n  Tt = 'TT',\n  /** Tuvalu */\n  Tv = 'TV',\n  /** Taiwan */\n  Tw = 'TW',\n  /** Tanzania */\n  Tz = 'TZ',\n  /** Ukraine */\n  Ua = 'UA',\n  /** Uganda */\n  Ug = 'UG',\n  /** United States Minor Outlying Islands */\n  Um = 'UM',\n  /** United States of America */\n  Us = 'US',\n  /** Uruguay */\n  Uy = 'UY',\n  /** Uzbekistan */\n  Uz = 'UZ',\n  /** Vatican City */\n  Va = 'VA',\n  /** Saint Vincent and the Grenadines */\n  Vc = 'VC',\n  /** Venezuela */\n  Ve = 'VE',\n  /** Virgin Islands, British */\n  Vg = 'VG',\n  /** Virgin Islands, U.S. */\n  Vi = 'VI',\n  /** Vietnam */\n  Vn = 'VN',\n  /** Vanuatu */\n  Vu = 'VU',\n  /** Wallis and Futuna Islands */\n  Wf = 'WF',\n  /** Samoa */\n  Ws = 'WS',\n  /** Yemen */\n  Ye = 'YE',\n  /** Mayotte */\n  Yt = 'YT',\n  /** South Africa */\n  Za = 'ZA',\n  /** Zambia */\n  Zm = 'ZM',\n  /** Zimbabwe */\n  Zw = 'ZW'\n}\n\n/** A goal associated with a GitHub Sponsors listing, representing a target the sponsored maintainer would like to attain. */\nexport type SponsorsGoal = {\n  /** A description of the goal from the maintainer. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** What the objective of this goal is. */\n  kind: SponsorsGoalKind;\n  /** The percentage representing how complete this goal is, between 0-100. */\n  percentComplete: Scalars['Int']['output'];\n  /**\n   * What the goal amount is. Represents an amount in USD for monthly sponsorship\n   * amount goals. Represents a count of unique sponsors for total sponsors count goals.\n   */\n  targetValue: Scalars['Int']['output'];\n  /** A brief summary of the kind and target value of this goal. */\n  title: Scalars['String']['output'];\n};\n\n/** The different kinds of goals a GitHub Sponsors member can have. */\nexport enum SponsorsGoalKind {\n  /** The goal is about getting a certain amount in USD from sponsorships each month. */\n  MonthlySponsorshipAmount = 'MONTHLY_SPONSORSHIP_AMOUNT',\n  /** The goal is about reaching a certain number of sponsors. */\n  TotalSponsorsCount = 'TOTAL_SPONSORS_COUNT'\n}\n\n/** A GitHub Sponsors listing. */\nexport type SponsorsListing = Node & {\n  /** The current goal the maintainer is trying to reach with GitHub Sponsors, if any. */\n  activeGoal?: Maybe<SponsorsGoal>;\n  /**\n   * The Stripe Connect account currently in use for payouts for this Sponsors\n   * listing, if any. Will only return a value when queried by the maintainer\n   * themselves, or by an admin of the sponsorable organization.\n   */\n  activeStripeConnectAccount?: Maybe<StripeConnectAccount>;\n  /**\n   * The name of the country or region with the maintainer's bank account or fiscal\n   * host. Will only return a value when queried by the maintainer themselves, or\n   * by an admin of the sponsorable organization.\n   */\n  billingCountryOrRegion?: Maybe<Scalars['String']['output']>;\n  /**\n   * The email address used by GitHub to contact the sponsorable about their GitHub\n   * Sponsors profile. Will only return a value when queried by the maintainer\n   * themselves, or by an admin of the sponsorable organization.\n   */\n  contactEmailAddress?: Maybe<Scalars['String']['output']>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The HTTP path for the Sponsors dashboard for this Sponsors listing. */\n  dashboardResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for the Sponsors dashboard for this Sponsors listing. */\n  dashboardUrl: Scalars['URI']['output'];\n  /** The records featured on the GitHub Sponsors profile. */\n  featuredItems: Array<SponsorsListingFeaturedItem>;\n  /**\n   * The fiscal host used for payments, if any. Will only return a value when\n   * queried by the maintainer themselves, or by an admin of the sponsorable organization.\n   */\n  fiscalHost?: Maybe<Organization>;\n  /** The full description of the listing. */\n  fullDescription: Scalars['String']['output'];\n  /** The full description of the listing rendered to HTML. */\n  fullDescriptionHTML: Scalars['HTML']['output'];\n  /** The Node ID of the SponsorsListing object */\n  id: Scalars['ID']['output'];\n  /** Whether this listing is publicly visible. */\n  isPublic: Scalars['Boolean']['output'];\n  /** The listing's full name. */\n  name: Scalars['String']['output'];\n  /** A future date on which this listing is eligible to receive a payout. */\n  nextPayoutDate?: Maybe<Scalars['Date']['output']>;\n  /**\n   * The name of the country or region where the maintainer resides. Will only\n   * return a value when queried by the maintainer themselves, or by an admin of\n   * the sponsorable organization.\n   */\n  residenceCountryOrRegion?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for this Sponsors listing. */\n  resourcePath: Scalars['URI']['output'];\n  /** The short description of the listing. */\n  shortDescription: Scalars['String']['output'];\n  /** The short name of the listing. */\n  slug: Scalars['String']['output'];\n  /** The entity this listing represents who can be sponsored on GitHub Sponsors. */\n  sponsorable: Sponsorable;\n  /** The tiers for this GitHub Sponsors profile. */\n  tiers?: Maybe<SponsorsTierConnection>;\n  /** The HTTP URL for this Sponsors listing. */\n  url: Scalars['URI']['output'];\n};\n\n\n/** A GitHub Sponsors listing. */\nexport type SponsorsListingFeaturedItemsArgs = {\n  featureableTypes?: InputMaybe<Array<SponsorsListingFeaturedItemFeatureableType>>;\n};\n\n\n/** A GitHub Sponsors listing. */\nexport type SponsorsListingTiersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includeUnpublished?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorsTierOrder>;\n};\n\n/** A record that can be featured on a GitHub Sponsors profile. */\nexport type SponsorsListingFeatureableItem = Repository | User;\n\n/** A record that is promoted on a GitHub Sponsors profile. */\nexport type SponsorsListingFeaturedItem = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /**\n   * Will either be a description from the sponsorable maintainer about why they\n   * featured this item, or the item's description itself, such as a user's bio\n   * from their GitHub profile page.\n   */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The record that is featured on the GitHub Sponsors profile. */\n  featureable: SponsorsListingFeatureableItem;\n  /** The Node ID of the SponsorsListingFeaturedItem object */\n  id: Scalars['ID']['output'];\n  /**\n   * The position of this featured item on the GitHub Sponsors profile with a lower\n   * position indicating higher precedence. Starts at 1.\n   */\n  position: Scalars['Int']['output'];\n  /** The GitHub Sponsors profile that features this record. */\n  sponsorsListing: SponsorsListing;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The different kinds of records that can be featured on a GitHub Sponsors profile page. */\nexport enum SponsorsListingFeaturedItemFeatureableType {\n  /** A repository owned by the user or organization with the GitHub Sponsors profile. */\n  Repository = 'REPOSITORY',\n  /** A user who belongs to the organization with the GitHub Sponsors profile. */\n  User = 'USER'\n}\n\n/** A GitHub Sponsors tier associated with a GitHub Sponsors listing. */\nexport type SponsorsTier = Node & {\n  /** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\n  adminInfo?: Maybe<SponsorsTierAdminInfo>;\n  /**\n   * Get a different tier for this tier's maintainer that is at the same frequency\n   * as this tier but with an equal or lesser cost. Returns the published tier with\n   * the monthly price closest to this tier's without going over.\n   */\n  closestLesserValueTier?: Maybe<SponsorsTier>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The description of the tier. */\n  description: Scalars['String']['output'];\n  /** The tier description rendered to HTML */\n  descriptionHTML: Scalars['HTML']['output'];\n  /** The Node ID of the SponsorsTier object */\n  id: Scalars['ID']['output'];\n  /**\n   * Whether this tier was chosen at checkout time by the sponsor rather than\n   * defined ahead of time by the maintainer who manages the Sponsors listing.\n   */\n  isCustomAmount: Scalars['Boolean']['output'];\n  /** Whether this tier is only for use with one-time sponsorships. */\n  isOneTime: Scalars['Boolean']['output'];\n  /** How much this tier costs per month in cents. */\n  monthlyPriceInCents: Scalars['Int']['output'];\n  /** How much this tier costs per month in USD. */\n  monthlyPriceInDollars: Scalars['Int']['output'];\n  /** The name of the tier. */\n  name: Scalars['String']['output'];\n  /** The sponsors listing that this tier belongs to. */\n  sponsorsListing: SponsorsListing;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\nexport type SponsorsTierAdminInfo = {\n  /**\n   * Indicates whether this tier is still a work in progress by the sponsorable and\n   * not yet published to the associated GitHub Sponsors profile. Draft tiers\n   * cannot be used for new sponsorships and will not be in use on existing\n   * sponsorships. Draft tiers cannot be seen by anyone but the admins of the\n   * GitHub Sponsors profile.\n   */\n  isDraft: Scalars['Boolean']['output'];\n  /**\n   * Indicates whether this tier is published to the associated GitHub Sponsors\n   * profile. Published tiers are visible to anyone who can see the GitHub Sponsors\n   * profile, and are available for use in sponsorships if the GitHub Sponsors\n   * profile is publicly visible.\n   */\n  isPublished: Scalars['Boolean']['output'];\n  /**\n   * Indicates whether this tier has been retired from the associated GitHub\n   * Sponsors profile. Retired tiers are no longer shown on the GitHub Sponsors\n   * profile and cannot be chosen for new sponsorships. Existing sponsorships may\n   * still use retired tiers if the sponsor selected the tier before it was retired.\n   */\n  isRetired: Scalars['Boolean']['output'];\n  /** The sponsorships using this tier. */\n  sponsorships: SponsorshipConnection;\n};\n\n\n/** SponsorsTier information only visible to users that can administer the associated Sponsors listing. */\nexport type SponsorsTierAdminInfoSponsorshipsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n/** The connection type for SponsorsTier. */\nexport type SponsorsTierConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorsTierEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorsTier>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SponsorsTierEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorsTier>;\n};\n\n/** Ordering options for Sponsors tiers connections. */\nexport type SponsorsTierOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order tiers by. */\n  field: SponsorsTierOrderField;\n};\n\n/** Properties by which Sponsors tiers connections can be ordered. */\nexport enum SponsorsTierOrderField {\n  /** Order tiers by creation time. */\n  CreatedAt = 'CREATED_AT',\n  /** Order tiers by their monthly price in cents */\n  MonthlyPriceInCents = 'MONTHLY_PRICE_IN_CENTS'\n}\n\n/** A sponsorship relationship between a sponsor and a maintainer */\nexport type Sponsorship = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the Sponsorship object */\n  id: Scalars['ID']['output'];\n  /**\n   * Whether the sponsorship is active. False implies the sponsor is a past sponsor\n   * of the maintainer, while true implies they are a current sponsor.\n   */\n  isActive: Scalars['Boolean']['output'];\n  /** Whether this sponsorship represents a one-time payment versus a recurring sponsorship. */\n  isOneTimePayment: Scalars['Boolean']['output'];\n  /**\n   * Whether the sponsor has chosen to receive sponsorship update emails sent from\n   * the sponsorable. Only returns a non-null value when the viewer has permission to know this.\n   */\n  isSponsorOptedIntoEmail?: Maybe<Scalars['Boolean']['output']>;\n  /**\n   * The entity that is being sponsored\n   * @deprecated `Sponsorship.maintainer` will be removed. Use `Sponsorship.sponsorable` instead. Removal on 2020-04-01 UTC.\n   */\n  maintainer: User;\n  /** The platform that was most recently used to pay for the sponsorship. */\n  paymentSource?: Maybe<SponsorshipPaymentSource>;\n  /** The privacy level for this sponsorship. */\n  privacyLevel: SponsorshipPrivacy;\n  /**\n   * The user that is sponsoring. Returns null if the sponsorship is private or if sponsor is not a user.\n   * @deprecated `Sponsorship.sponsor` will be removed. Use `Sponsorship.sponsorEntity` instead. Removal on 2020-10-01 UTC.\n   */\n  sponsor?: Maybe<User>;\n  /** The user or organization that is sponsoring, if you have permission to view them. */\n  sponsorEntity?: Maybe<Sponsor>;\n  /** The entity that is being sponsored */\n  sponsorable: Sponsorable;\n  /** The associated sponsorship tier */\n  tier?: Maybe<SponsorsTier>;\n  /** Identifies the date and time when the current tier was chosen for this sponsorship. */\n  tierSelectedAt?: Maybe<Scalars['DateTime']['output']>;\n};\n\n/** A list of sponsorships either from the subject or received by the subject. */\nexport type SponsorshipConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorshipEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Sponsorship>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n  /**\n   * The total amount in cents of all recurring sponsorships in the connection\n   * whose amount you can view. Does not include one-time sponsorships.\n   */\n  totalRecurringMonthlyPriceInCents: Scalars['Int']['output'];\n  /**\n   * The total amount in USD of all recurring sponsorships in the connection whose\n   * amount you can view. Does not include one-time sponsorships.\n   */\n  totalRecurringMonthlyPriceInDollars: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SponsorshipEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Sponsorship>;\n};\n\n/** An update sent to sponsors of a user or organization on GitHub Sponsors. */\nexport type SponsorshipNewsletter = Node & {\n  /** The author of the newsletter. */\n  author?: Maybe<User>;\n  /** The contents of the newsletter, the message the sponsorable wanted to give. */\n  body: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the SponsorshipNewsletter object */\n  id: Scalars['ID']['output'];\n  /** Indicates if the newsletter has been made available to sponsors. */\n  isPublished: Scalars['Boolean']['output'];\n  /** The user or organization this newsletter is from. */\n  sponsorable: Sponsorable;\n  /** The subject of the newsletter, what it's about. */\n  subject: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** The connection type for SponsorshipNewsletter. */\nexport type SponsorshipNewsletterConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SponsorshipNewsletterEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SponsorshipNewsletter>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SponsorshipNewsletterEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SponsorshipNewsletter>;\n};\n\n/** Ordering options for sponsorship newsletter connections. */\nexport type SponsorshipNewsletterOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorship newsletters by. */\n  field: SponsorshipNewsletterOrderField;\n};\n\n/** Properties by which sponsorship update connections can be ordered. */\nexport enum SponsorshipNewsletterOrderField {\n  /** Order sponsorship newsletters by when they were created. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** Ordering options for sponsorship connections. */\nexport type SponsorshipOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order sponsorship by. */\n  field: SponsorshipOrderField;\n};\n\n/** Properties by which sponsorship connections can be ordered. */\nexport enum SponsorshipOrderField {\n  /** Order sponsorship by creation time. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** How payment was made for funding a GitHub Sponsors sponsorship. */\nexport enum SponsorshipPaymentSource {\n  /** Payment was made through GitHub. */\n  Github = 'GITHUB',\n  /** Payment was made through Patreon. */\n  Patreon = 'PATREON'\n}\n\n/** The privacy of a sponsorship */\nexport enum SponsorshipPrivacy {\n  /** Private */\n  Private = 'PRIVATE',\n  /** Public */\n  Public = 'PUBLIC'\n}\n\n/** The possible default commit messages for squash merges. */\nexport enum SquashMergeCommitMessage {\n  /** Default to a blank commit message. */\n  Blank = 'BLANK',\n  /** Default to the branch's commit messages. */\n  CommitMessages = 'COMMIT_MESSAGES',\n  /** Default to the pull request's body. */\n  PrBody = 'PR_BODY'\n}\n\n/** The possible default commit titles for squash merges. */\nexport enum SquashMergeCommitTitle {\n  /** Default to the commit's title (if only one commit) or the pull request's title (when more than one commit). */\n  CommitOrPrTitle = 'COMMIT_OR_PR_TITLE',\n  /** Default to the pull request's title. */\n  PrTitle = 'PR_TITLE'\n}\n\n/** Represents an SSH signature on a Commit or Tag. */\nexport type SshSignature = GitSignature & {\n  /** Email used to sign this object. */\n  email: Scalars['String']['output'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean']['output'];\n  /** Hex-encoded fingerprint of the key that signed this object. */\n  keyFingerprint?: Maybe<Scalars['String']['output']>;\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String']['output'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String']['output'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean']['output'];\n};\n\n/** Ways in which star connections can be ordered. */\nexport type StarOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field in which to order nodes by. */\n  field: StarOrderField;\n};\n\n/** Properties by which star connections can be ordered. */\nexport enum StarOrderField {\n  /** Allows ordering a list of stars by when they were created. */\n  StarredAt = 'STARRED_AT'\n}\n\n/** The connection type for User. */\nexport type StargazerConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StargazerEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a user that's starred a repository. */\nexport type StargazerEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  node: User;\n  /** Identifies when the item was starred. */\n  starredAt: Scalars['DateTime']['output'];\n};\n\n/** Things that can be starred. */\nexport type Starrable = {\n  /** The Node ID of the Starrable object */\n  id: Scalars['ID']['output'];\n  /** Returns a count of how many stargazers there are on this object */\n  stargazerCount: Scalars['Int']['output'];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars['Boolean']['output'];\n};\n\n\n/** Things that can be starred. */\nexport type StarrableStargazersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** The connection type for Repository. */\nexport type StarredRepositoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarredRepositoryEdge>>>;\n  /** Is the list of stars for this user truncated? This is true for users that have many stars. */\n  isOverLimit: Scalars['Boolean']['output'];\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a starred repository. */\nexport type StarredRepositoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  node: Repository;\n  /** Identifies when the item was starred. */\n  starredAt: Scalars['DateTime']['output'];\n};\n\n/** Autogenerated input type of StartOrganizationMigration */\nexport type StartOrganizationMigrationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The migration source access token. */\n  sourceAccessToken: Scalars['String']['input'];\n  /** The URL of the organization to migrate. */\n  sourceOrgUrl: Scalars['URI']['input'];\n  /** The ID of the enterprise the target organization belongs to. */\n  targetEnterpriseId: Scalars['ID']['input'];\n  /** The name of the target organization. */\n  targetOrgName: Scalars['String']['input'];\n};\n\n/** Autogenerated return type of StartOrganizationMigration. */\nexport type StartOrganizationMigrationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new organization migration. */\n  orgMigration?: Maybe<OrganizationMigration>;\n};\n\n/** Autogenerated input type of StartRepositoryMigration */\nexport type StartRepositoryMigrationInput = {\n  /** The migration source access token. */\n  accessToken?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether to continue the migration on error. Defaults to `true`. */\n  continueOnError?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The signed URL to access the user-uploaded git archive. */\n  gitArchiveUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The GitHub personal access token of the user importing to the target repository. */\n  githubPat?: InputMaybe<Scalars['String']['input']>;\n  /** Whether to lock the source repository. */\n  lockSource?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The signed URL to access the user-uploaded metadata archive. */\n  metadataArchiveUrl?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the organization that will own the imported repository. */\n  ownerId: Scalars['ID']['input'];\n  /** The name of the imported repository. */\n  repositoryName: Scalars['String']['input'];\n  /** Whether to skip migrating releases for the repository. */\n  skipReleases?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the migration source. */\n  sourceId: Scalars['ID']['input'];\n  /** The URL of the source repository. */\n  sourceRepositoryUrl: Scalars['URI']['input'];\n  /** The visibility of the imported repository. */\n  targetRepoVisibility?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of StartRepositoryMigration. */\nexport type StartRepositoryMigrationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The new repository migration. */\n  repositoryMigration?: Maybe<RepositoryMigration>;\n};\n\n/** Represents a commit status. */\nexport type Status = Node & {\n  /** A list of status contexts and check runs for this commit. */\n  combinedContexts: StatusCheckRollupContextConnection;\n  /** The commit this status is attached to. */\n  commit?: Maybe<Commit>;\n  /** Looks up an individual status context by context name. */\n  context?: Maybe<StatusContext>;\n  /** The individual status contexts for this commit. */\n  contexts: Array<StatusContext>;\n  /** The Node ID of the Status object */\n  id: Scalars['ID']['output'];\n  /** The combined commit status. */\n  state: StatusState;\n};\n\n\n/** Represents a commit status. */\nexport type StatusCombinedContextsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Represents a commit status. */\nexport type StatusContextArgs = {\n  name: Scalars['String']['input'];\n};\n\n/** Required status check */\nexport type StatusCheckConfiguration = {\n  /** The status check context name that must be present on the commit. */\n  context: Scalars['String']['output'];\n  /** The optional integration ID that this status check must originate from. */\n  integrationId?: Maybe<Scalars['Int']['output']>;\n};\n\n/** Required status check */\nexport type StatusCheckConfigurationInput = {\n  /** The status check context name that must be present on the commit. */\n  context: Scalars['String']['input'];\n  /** The optional integration ID that this status check must originate from. */\n  integrationId?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Represents the rollup for both the check runs and status for a commit. */\nexport type StatusCheckRollup = Node & {\n  /** The commit the status and check runs are attached to. */\n  commit?: Maybe<Commit>;\n  /** A list of status contexts and check runs for this commit. */\n  contexts: StatusCheckRollupContextConnection;\n  /** The Node ID of the StatusCheckRollup object */\n  id: Scalars['ID']['output'];\n  /** The combined status for the commit. */\n  state: StatusState;\n};\n\n\n/** Represents the rollup for both the check runs and status for a commit. */\nexport type StatusCheckRollupContextsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Types that can be inside a StatusCheckRollup context. */\nexport type StatusCheckRollupContext = CheckRun | StatusContext;\n\n/** The connection type for StatusCheckRollupContext. */\nexport type StatusCheckRollupContextConnection = {\n  /** The number of check runs in this rollup. */\n  checkRunCount: Scalars['Int']['output'];\n  /** Counts of check runs by state. */\n  checkRunCountsByState?: Maybe<Array<CheckRunStateCount>>;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StatusCheckRollupContextEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<StatusCheckRollupContext>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** The number of status contexts in this rollup. */\n  statusContextCount: Scalars['Int']['output'];\n  /** Counts of status contexts by state. */\n  statusContextCountsByState?: Maybe<Array<StatusContextStateCount>>;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type StatusCheckRollupContextEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<StatusCheckRollupContext>;\n};\n\n/** Represents an individual commit status context */\nexport type StatusContext = Node & RequirableByPullRequest & {\n  /** The avatar of the OAuth application or the user that created the status */\n  avatarUrl?: Maybe<Scalars['URI']['output']>;\n  /** This commit this status context is attached to. */\n  commit?: Maybe<Commit>;\n  /** The name of this status context. */\n  context: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The actor who created this status context. */\n  creator?: Maybe<Actor>;\n  /** The description for this status context. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the StatusContext object */\n  id: Scalars['ID']['output'];\n  /** Whether this is required to pass before merging for a specific pull request. */\n  isRequired: Scalars['Boolean']['output'];\n  /** The state of this status context. */\n  state: StatusState;\n  /** The URL for this status context. */\n  targetUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n\n/** Represents an individual commit status context */\nexport type StatusContextAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** Represents an individual commit status context */\nexport type StatusContextIsRequiredArgs = {\n  pullRequestId?: InputMaybe<Scalars['ID']['input']>;\n  pullRequestNumber?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Represents a count of the state of a status context. */\nexport type StatusContextStateCount = {\n  /** The number of statuses with this state. */\n  count: Scalars['Int']['output'];\n  /** The state of a status context. */\n  state: StatusState;\n};\n\n/** The possible commit status states. */\nexport enum StatusState {\n  /** Status is errored. */\n  Error = 'ERROR',\n  /** Status is expected. */\n  Expected = 'EXPECTED',\n  /** Status is failing. */\n  Failure = 'FAILURE',\n  /** Status is pending. */\n  Pending = 'PENDING',\n  /** Status is successful. */\n  Success = 'SUCCESS'\n}\n\n/** A Stripe Connect account for receiving sponsorship funds from GitHub Sponsors. */\nexport type StripeConnectAccount = {\n  /** The account number used to identify this Stripe Connect account. */\n  accountId: Scalars['String']['output'];\n  /**\n   * The name of the country or region of an external account, such as a bank\n   * account, tied to the Stripe Connect account. Will only return a value when\n   * queried by the maintainer of the associated GitHub Sponsors profile\n   * themselves, or by an admin of the sponsorable organization.\n   */\n  billingCountryOrRegion?: Maybe<Scalars['String']['output']>;\n  /**\n   * The name of the country or region of the Stripe Connect account. Will only\n   * return a value when queried by the maintainer of the associated GitHub\n   * Sponsors profile themselves, or by an admin of the sponsorable organization.\n   */\n  countryOrRegion?: Maybe<Scalars['String']['output']>;\n  /** Whether this Stripe Connect account is currently in use for the associated GitHub Sponsors profile. */\n  isActive: Scalars['Boolean']['output'];\n  /** The GitHub Sponsors profile associated with this Stripe Connect account. */\n  sponsorsListing: SponsorsListing;\n  /** The URL to access this Stripe Connect account on Stripe's website. */\n  stripeDashboardUrl: Scalars['URI']['output'];\n};\n\n/** Autogenerated input type of SubmitPullRequestReview */\nexport type SubmitPullRequestReviewInput = {\n  /** The text field to set on the Pull Request Review. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The event to send to the Pull Request Review. */\n  event: PullRequestReviewEvent;\n  /** The Pull Request ID to submit any pending reviews. */\n  pullRequestId?: InputMaybe<Scalars['ID']['input']>;\n  /** The Pull Request Review ID to submit. */\n  pullRequestReviewId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of SubmitPullRequestReview. */\nexport type SubmitPullRequestReviewPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The submitted pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** A pointer to a repository at a specific revision embedded inside another repository. */\nexport type Submodule = {\n  /** The branch of the upstream submodule for tracking updates */\n  branch?: Maybe<Scalars['String']['output']>;\n  /** The git URL of the submodule repository */\n  gitUrl: Scalars['URI']['output'];\n  /** The name of the submodule in .gitmodules */\n  name: Scalars['String']['output'];\n  /** The name of the submodule in .gitmodules (Base64-encoded) */\n  nameRaw: Scalars['Base64String']['output'];\n  /** The path in the superproject that this submodule is located in */\n  path: Scalars['String']['output'];\n  /** The path in the superproject that this submodule is located in (Base64-encoded) */\n  pathRaw: Scalars['Base64String']['output'];\n  /** The commit revision of the subproject repository being tracked by the submodule */\n  subprojectCommitOid?: Maybe<Scalars['GitObjectID']['output']>;\n};\n\n/** The connection type for Submodule. */\nexport type SubmoduleConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SubmoduleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Submodule>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type SubmoduleEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Submodule>;\n};\n\n/** Entities that can be subscribed to for web and email notifications. */\nexport type Subscribable = {\n  /** The Node ID of the Subscribable object */\n  id: Scalars['ID']['output'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean']['output'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n/** Entities that can be subscribed to for web and email notifications. */\nexport type SubscribableThread = {\n  /** The Node ID of the SubscribableThread object */\n  id: Scalars['ID']['output'];\n  /** Identifies the viewer's thread subscription form action. */\n  viewerThreadSubscriptionFormAction?: Maybe<ThreadSubscriptionFormAction>;\n  /** Identifies the viewer's thread subscription status. */\n  viewerThreadSubscriptionStatus?: Maybe<ThreadSubscriptionState>;\n};\n\n/** Represents a 'subscribed' event on a given `Subscribable`. */\nexport type SubscribedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the SubscribedEvent object */\n  id: Scalars['ID']['output'];\n  /** Object referenced by event. */\n  subscribable: Subscribable;\n};\n\n/** The possible states of a subscription. */\nexport enum SubscriptionState {\n  /** The User is never notified. */\n  Ignored = 'IGNORED',\n  /** The User is notified of all conversations. */\n  Subscribed = 'SUBSCRIBED',\n  /** The User is only notified when participating or @mentioned. */\n  Unsubscribed = 'UNSUBSCRIBED'\n}\n\n/** A suggestion to review a pull request based on a user's commit history and review comments. */\nexport type SuggestedReviewer = {\n  /** Is this suggestion based on past commits? */\n  isAuthor: Scalars['Boolean']['output'];\n  /** Is this suggestion based on past review comments? */\n  isCommenter: Scalars['Boolean']['output'];\n  /** Identifies the user suggested to review the pull request. */\n  reviewer: User;\n};\n\n/** Represents a Git tag. */\nexport type Tag = GitObject & Node & {\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String']['output'];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI']['output'];\n  /** The Node ID of the Tag object */\n  id: Scalars['ID']['output'];\n  /** The Git tag message. */\n  message?: Maybe<Scalars['String']['output']>;\n  /** The Git tag name. */\n  name: Scalars['String']['output'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID']['output'];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n  /** Details about the tag author. */\n  tagger?: Maybe<GitActor>;\n  /** The Git object the tag points to. */\n  target: GitObject;\n};\n\n/** Parameters to be used for the tag_name_pattern rule */\nexport type TagNamePatternParameters = {\n  /** How this rule will appear to users. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate: Scalars['Boolean']['output'];\n  /** The operator to use for matching. */\n  operator: Scalars['String']['output'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['output'];\n};\n\n/** Parameters to be used for the tag_name_pattern rule */\nexport type TagNamePatternParametersInput = {\n  /** How this rule will appear to users. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** If true, the rule will fail if the pattern matches. */\n  negate?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The operator to use for matching. */\n  operator: Scalars['String']['input'];\n  /** The pattern to match with. */\n  pattern: Scalars['String']['input'];\n};\n\n/** A team of users in an organization. */\nexport type Team = MemberStatusable & Node & Subscribable & {\n  /** A list of teams that are ancestors of this team. */\n  ancestors: TeamConnection;\n  /** A URL pointing to the team's avatar. */\n  avatarUrl?: Maybe<Scalars['URI']['output']>;\n  /** List of child teams belonging to this team */\n  childTeams: TeamConnection;\n  /** The slug corresponding to the organization and team. */\n  combinedSlug: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The description of the team. */\n  description?: Maybe<Scalars['String']['output']>;\n  /** Find a team discussion by its number. */\n  discussion?: Maybe<TeamDiscussion>;\n  /** A list of team discussions. */\n  discussions: TeamDiscussionConnection;\n  /** The HTTP path for team discussions */\n  discussionsResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for team discussions */\n  discussionsUrl: Scalars['URI']['output'];\n  /** The HTTP path for editing this team */\n  editTeamResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for editing this team */\n  editTeamUrl: Scalars['URI']['output'];\n  /** The Node ID of the Team object */\n  id: Scalars['ID']['output'];\n  /** A list of pending invitations for users to this team */\n  invitations?: Maybe<OrganizationInvitationConnection>;\n  /** Get the status messages members of this entity have set that are either public or visible only to the organization. */\n  memberStatuses: UserStatusConnection;\n  /** A list of users who are members of this team. */\n  members: TeamMemberConnection;\n  /** The HTTP path for the team' members */\n  membersResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for the team' members */\n  membersUrl: Scalars['URI']['output'];\n  /** The name of the team. */\n  name: Scalars['String']['output'];\n  /** The HTTP path creating a new team */\n  newTeamResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL creating a new team */\n  newTeamUrl: Scalars['URI']['output'];\n  /** The notification setting that the team has set. */\n  notificationSetting: TeamNotificationSetting;\n  /** The organization that owns this team. */\n  organization: Organization;\n  /** The parent team of the team. */\n  parentTeam?: Maybe<Team>;\n  /** The level of privacy the team has. */\n  privacy: TeamPrivacy;\n  /** Finds and returns the project according to the provided project number. */\n  projectV2?: Maybe<ProjectV2>;\n  /** List of projects this team has collaborator access to. */\n  projectsV2: ProjectV2Connection;\n  /** A list of repositories this team has access to. */\n  repositories: TeamRepositoryConnection;\n  /** The HTTP path for this team's repositories */\n  repositoriesResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this team's repositories */\n  repositoriesUrl: Scalars['URI']['output'];\n  /** The HTTP path for this team */\n  resourcePath: Scalars['URI']['output'];\n  /** What algorithm is used for review assignment for this team */\n  reviewRequestDelegationAlgorithm?: Maybe<TeamReviewAssignmentAlgorithm>;\n  /** True if review assignment is enabled for this team */\n  reviewRequestDelegationEnabled: Scalars['Boolean']['output'];\n  /** How many team members are required for review assignment for this team */\n  reviewRequestDelegationMemberCount?: Maybe<Scalars['Int']['output']>;\n  /** When assigning team members via delegation, whether the entire team should be notified as well. */\n  reviewRequestDelegationNotifyTeam: Scalars['Boolean']['output'];\n  /** The slug corresponding to the team. */\n  slug: Scalars['String']['output'];\n  /** The HTTP path for this team's teams */\n  teamsResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this team's teams */\n  teamsUrl: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this team */\n  url: Scalars['URI']['output'];\n  /** Team is adminable by the viewer. */\n  viewerCanAdminister: Scalars['Boolean']['output'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean']['output'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamAncestorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamChildTeamsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  immediateOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<TeamOrder>;\n  userLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamDiscussionArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A team of users in an organization. */\nexport type TeamDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  isPinned?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<TeamDiscussionOrder>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamInvitationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamMemberStatusesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<UserStatusOrder>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamMembersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  membership?: InputMaybe<TeamMembershipType>;\n  orderBy?: InputMaybe<TeamMemberOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n  role?: InputMaybe<TeamMemberRole>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamProjectV2Args = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A team of users in an organization. */\nexport type TeamProjectsV2Args = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filterBy?: InputMaybe<ProjectV2Filters>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  minPermissionLevel?: InputMaybe<ProjectV2PermissionLevel>;\n  orderBy?: InputMaybe<ProjectV2Order>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A team of users in an organization. */\nexport type TeamRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<TeamRepositoryOrder>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Audit log entry for a team.add_member event. */\nexport type TeamAddMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the TeamAddMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a team.add_repository event. */\nexport type TeamAddRepositoryAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the TeamAddRepositoryAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Metadata for an audit entry with action team.* */\nexport type TeamAuditEntryData = {\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a team.change_parent_team event. */\nexport type TeamChangeParentTeamAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the TeamChangeParentTeamAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The new parent team. */\n  parentTeam?: Maybe<Team>;\n  /** The name of the new parent team */\n  parentTeamName?: Maybe<Scalars['String']['output']>;\n  /** The name of the former parent team */\n  parentTeamNameWas?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the parent team */\n  parentTeamResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the parent team */\n  parentTeamUrl?: Maybe<Scalars['URI']['output']>;\n  /** The former parent team. */\n  parentTeamWas?: Maybe<Team>;\n  /** The HTTP path for the previous parent team */\n  parentTeamWasResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the previous parent team */\n  parentTeamWasUrl?: Maybe<Scalars['URI']['output']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The connection type for Team. */\nexport type TeamConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Team>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** A team discussion. */\nexport type TeamDiscussion = Comment & Deletable & Node & Reactable & Subscribable & UniformResourceLocatable & Updatable & UpdatableComment & {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /**\n   * Author's association with the discussion's team.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /**\n   * Identifies the discussion body hash.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  bodyVersion: Scalars['String']['output'];\n  /**\n   * A list of comments on this discussion.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  comments: TeamDiscussionCommentConnection;\n  /**\n   * The HTTP path for discussion comments\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  commentsResourcePath: Scalars['URI']['output'];\n  /**\n   * The HTTP URL for discussion comments\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  commentsUrl: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The Node ID of the TeamDiscussion object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /**\n   * Whether or not the discussion is pinned.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  isPinned: Scalars['Boolean']['output'];\n  /**\n   * Whether or not the discussion is only visible to team members and organization owners.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  isPrivate: Scalars['Boolean']['output'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Identifies the discussion within its team.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  number: Scalars['Int']['output'];\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /**\n   * The HTTP path for this discussion\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  resourcePath: Scalars['URI']['output'];\n  /**\n   * The team that defines the context of this discussion.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  team: Team;\n  /**\n   * The title of the discussion\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  title: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /**\n   * The HTTP URL for this discussion\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /**\n   * Whether or not the current viewer can pin this discussion.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  viewerCanPin: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Check if the viewer is able to change their subscription status for the repository. */\n  viewerCanSubscribe: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n  /** Identifies if the viewer is watching, not watching, or ignoring the subscribable entity. */\n  viewerSubscription?: Maybe<SubscriptionState>;\n};\n\n\n/** A team discussion. */\nexport type TeamDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  fromComment?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<TeamDiscussionCommentOrder>;\n};\n\n\n/** A team discussion. */\nexport type TeamDiscussionReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A team discussion. */\nexport type TeamDiscussionUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionComment = Comment & Deletable & Node & Reactable & UniformResourceLocatable & Updatable & UpdatableComment & {\n  /** The actor who authored the comment. */\n  author?: Maybe<Actor>;\n  /**\n   * Author's association with the comment's team.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  authorAssociation: CommentAuthorAssociation;\n  /** The body as Markdown. */\n  body: Scalars['String']['output'];\n  /** The body rendered to HTML. */\n  bodyHTML: Scalars['HTML']['output'];\n  /** The body rendered to text. */\n  bodyText: Scalars['String']['output'];\n  /**\n   * The current version of the body content.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  bodyVersion: Scalars['String']['output'];\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Check if this comment was created via an email reply. */\n  createdViaEmail: Scalars['Boolean']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /**\n   * The discussion this comment is about.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  discussion: TeamDiscussion;\n  /** The actor who edited the comment. */\n  editor?: Maybe<Actor>;\n  /** The Node ID of the TeamDiscussionComment object */\n  id: Scalars['ID']['output'];\n  /** Check if this comment was edited and includes an edit with the creation data */\n  includesCreatedEdit: Scalars['Boolean']['output'];\n  /** The moment the editor made the last edit */\n  lastEditedAt?: Maybe<Scalars['DateTime']['output']>;\n  /**\n   * Identifies the comment number.\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  number: Scalars['Int']['output'];\n  /** Identifies when the comment was published at. */\n  publishedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** A list of reactions grouped by content left on the subject. */\n  reactionGroups?: Maybe<Array<ReactionGroup>>;\n  /** A list of Reactions left on the Issue. */\n  reactions: ReactionConnection;\n  /**\n   * The HTTP path for this comment\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  resourcePath: Scalars['URI']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /**\n   * The HTTP URL for this comment\n   * @deprecated The Team Discussions feature is deprecated in favor of Organization Discussions. Follow the guide at https://github.blog/changelog/2023-02-08-sunset-notice-team-discussions/ to find a suitable replacement. Removal on 2024-07-01 UTC.\n   */\n  url: Scalars['URI']['output'];\n  /** A list of edits to this content. */\n  userContentEdits?: Maybe<UserContentEditConnection>;\n  /** Check if the current viewer can delete this object. */\n  viewerCanDelete: Scalars['Boolean']['output'];\n  /** Can user react to this subject */\n  viewerCanReact: Scalars['Boolean']['output'];\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n  /** Did the viewer author this comment. */\n  viewerDidAuthor: Scalars['Boolean']['output'];\n};\n\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionCommentReactionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  content?: InputMaybe<ReactionContent>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ReactionOrder>;\n};\n\n\n/** A comment on a team discussion. */\nexport type TeamDiscussionCommentUserContentEditsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for TeamDiscussionComment. */\nexport type TeamDiscussionCommentConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamDiscussionCommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TeamDiscussionComment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type TeamDiscussionCommentEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TeamDiscussionComment>;\n};\n\n/** Ways in which team discussion comment connections can be ordered. */\nexport type TeamDiscussionCommentOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field by which to order nodes. */\n  field: TeamDiscussionCommentOrderField;\n};\n\n/** Properties by which team discussion comment connections can be ordered. */\nexport enum TeamDiscussionCommentOrderField {\n  /** Allows sequential ordering of team discussion comments (which is equivalent to chronological ordering). */\n  Number = 'NUMBER'\n}\n\n/** The connection type for TeamDiscussion. */\nexport type TeamDiscussionConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamDiscussionEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<TeamDiscussion>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type TeamDiscussionEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<TeamDiscussion>;\n};\n\n/** Ways in which team discussion connections can be ordered. */\nexport type TeamDiscussionOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field by which to order nodes. */\n  field: TeamDiscussionOrderField;\n};\n\n/** Properties by which team discussion connections can be ordered. */\nexport enum TeamDiscussionOrderField {\n  /** Allows chronological ordering of team discussions. */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** An edge in a connection. */\nexport type TeamEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Team>;\n};\n\n/** The connection type for User. */\nexport type TeamMemberConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamMemberEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a user who is a member of a team. */\nexport type TeamMemberEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The HTTP path to the organization's member access page. */\n  memberAccessResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL to the organization's member access page. */\n  memberAccessUrl: Scalars['URI']['output'];\n  node: User;\n  /** The role the member has on the team. */\n  role: TeamMemberRole;\n};\n\n/** Ordering options for team member connections */\nexport type TeamMemberOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order team members by. */\n  field: TeamMemberOrderField;\n};\n\n/** Properties by which team member connections can be ordered. */\nexport enum TeamMemberOrderField {\n  /** Order team members by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order team members by login */\n  Login = 'LOGIN'\n}\n\n/** The possible team member roles; either 'maintainer' or 'member'. */\nexport enum TeamMemberRole {\n  /** A team maintainer has permission to add and remove team members. */\n  Maintainer = 'MAINTAINER',\n  /** A team member has no administrative permissions on the team. */\n  Member = 'MEMBER'\n}\n\n/** Defines which types of team members are included in the returned list. Can be one of IMMEDIATE, CHILD_TEAM or ALL. */\nexport enum TeamMembershipType {\n  /** Includes immediate and child team members for the team. */\n  All = 'ALL',\n  /** Includes only child team members for the team. */\n  ChildTeam = 'CHILD_TEAM',\n  /** Includes only immediate members of the team. */\n  Immediate = 'IMMEDIATE'\n}\n\n/** The possible team notification values. */\nexport enum TeamNotificationSetting {\n  /** No one will receive notifications. */\n  NotificationsDisabled = 'NOTIFICATIONS_DISABLED',\n  /** Everyone will receive notifications when the team is @mentioned. */\n  NotificationsEnabled = 'NOTIFICATIONS_ENABLED'\n}\n\n/** Ways in which team connections can be ordered. */\nexport type TeamOrder = {\n  /** The direction in which to order nodes. */\n  direction: OrderDirection;\n  /** The field in which to order nodes by. */\n  field: TeamOrderField;\n};\n\n/** Properties by which team connections can be ordered. */\nexport enum TeamOrderField {\n  /** Allows ordering a list of teams by name. */\n  Name = 'NAME'\n}\n\n/** The possible team privacy values. */\nexport enum TeamPrivacy {\n  /** A secret team can only be seen by its members. */\n  Secret = 'SECRET',\n  /** A visible team can be seen and @mentioned by every member of the organization. */\n  Visible = 'VISIBLE'\n}\n\n/** Audit log entry for a team.remove_member event. */\nexport type TeamRemoveMemberAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & TeamAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the TeamRemoveMemberAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** Audit log entry for a team.remove_repository event. */\nexport type TeamRemoveRepositoryAuditEntry = AuditEntry & Node & OrganizationAuditEntryData & RepositoryAuditEntryData & TeamAuditEntryData & {\n  /** The action name */\n  action: Scalars['String']['output'];\n  /** The user who initiated the action */\n  actor?: Maybe<AuditEntryActor>;\n  /** The IP address of the actor */\n  actorIp?: Maybe<Scalars['String']['output']>;\n  /** A readable representation of the actor's location */\n  actorLocation?: Maybe<ActorLocation>;\n  /** The username of the user who initiated the action */\n  actorLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the actor. */\n  actorResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the actor. */\n  actorUrl?: Maybe<Scalars['URI']['output']>;\n  /** The time the action was initiated */\n  createdAt: Scalars['PreciseDateTime']['output'];\n  /** The Node ID of the TeamRemoveRepositoryAuditEntry object */\n  id: Scalars['ID']['output'];\n  /** Whether the team was mapped to an LDAP Group. */\n  isLdapMapped?: Maybe<Scalars['Boolean']['output']>;\n  /** The corresponding operation type for the action */\n  operationType?: Maybe<OperationType>;\n  /** The Organization associated with the Audit Entry. */\n  organization?: Maybe<Organization>;\n  /** The name of the Organization. */\n  organizationName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the organization */\n  organizationResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the organization */\n  organizationUrl?: Maybe<Scalars['URI']['output']>;\n  /** The repository associated with the action */\n  repository?: Maybe<Repository>;\n  /** The name of the repository */\n  repositoryName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the repository */\n  repositoryResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the repository */\n  repositoryUrl?: Maybe<Scalars['URI']['output']>;\n  /** The team associated with the action */\n  team?: Maybe<Team>;\n  /** The name of the team */\n  teamName?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for this team */\n  teamResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for this team */\n  teamUrl?: Maybe<Scalars['URI']['output']>;\n  /** The user affected by the action */\n  user?: Maybe<User>;\n  /** For actions involving two users, the actor is the initiator and the user is the affected user. */\n  userLogin?: Maybe<Scalars['String']['output']>;\n  /** The HTTP path for the user. */\n  userResourcePath?: Maybe<Scalars['URI']['output']>;\n  /** The HTTP URL for the user. */\n  userUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n/** The connection type for Repository. */\nexport type TeamRepositoryConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TeamRepositoryEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Repository>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** Represents a team repository. */\nexport type TeamRepositoryEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  node: Repository;\n  /** The permission level the team has on the repository */\n  permission: RepositoryPermission;\n};\n\n/** Ordering options for team repository connections */\nexport type TeamRepositoryOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order repositories by. */\n  field: TeamRepositoryOrderField;\n};\n\n/** Properties by which team repository connections can be ordered. */\nexport enum TeamRepositoryOrderField {\n  /** Order repositories by creation time */\n  CreatedAt = 'CREATED_AT',\n  /** Order repositories by name */\n  Name = 'NAME',\n  /** Order repositories by permission */\n  Permission = 'PERMISSION',\n  /** Order repositories by push time */\n  PushedAt = 'PUSHED_AT',\n  /** Order repositories by number of stargazers */\n  Stargazers = 'STARGAZERS',\n  /** Order repositories by update time */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** The possible team review assignment algorithms */\nexport enum TeamReviewAssignmentAlgorithm {\n  /** Balance review load across the entire team */\n  LoadBalance = 'LOAD_BALANCE',\n  /** Alternate reviews between each team member */\n  RoundRobin = 'ROUND_ROBIN'\n}\n\n/** The role of a user on a team. */\nexport enum TeamRole {\n  /** User has admin rights on the team. */\n  Admin = 'ADMIN',\n  /** User is a member of the team. */\n  Member = 'MEMBER'\n}\n\n/** A text match within a search result. */\nexport type TextMatch = {\n  /** The specific text fragment within the property matched on. */\n  fragment: Scalars['String']['output'];\n  /** Highlights within the matched fragment. */\n  highlights: Array<TextMatchHighlight>;\n  /** The property matched on. */\n  property: Scalars['String']['output'];\n};\n\n/** Represents a single highlight in a search result match. */\nexport type TextMatchHighlight = {\n  /** The indice in the fragment where the matched text begins. */\n  beginIndice: Scalars['Int']['output'];\n  /** The indice in the fragment where the matched text ends. */\n  endIndice: Scalars['Int']['output'];\n  /** The text matched. */\n  text: Scalars['String']['output'];\n};\n\n/** The possible states of a thread subscription form action */\nexport enum ThreadSubscriptionFormAction {\n  /** The User cannot subscribe or unsubscribe to the thread */\n  None = 'NONE',\n  /** The User can subscribe to the thread */\n  Subscribe = 'SUBSCRIBE',\n  /** The User can unsubscribe to the thread */\n  Unsubscribe = 'UNSUBSCRIBE'\n}\n\n/** The possible states of a subscription. */\nexport enum ThreadSubscriptionState {\n  /** The subscription status is currently disabled. */\n  Disabled = 'DISABLED',\n  /** The User is never notified because they are ignoring the list */\n  IgnoringList = 'IGNORING_LIST',\n  /** The User is never notified because they are ignoring the thread */\n  IgnoringThread = 'IGNORING_THREAD',\n  /** The User is not recieving notifications from this thread */\n  None = 'NONE',\n  /** The User is notified becuase they are watching the list */\n  SubscribedToList = 'SUBSCRIBED_TO_LIST',\n  /** The User is notified because they are subscribed to the thread */\n  SubscribedToThread = 'SUBSCRIBED_TO_THREAD',\n  /** The User is notified because they chose custom settings for this thread. */\n  SubscribedToThreadEvents = 'SUBSCRIBED_TO_THREAD_EVENTS',\n  /** The User is notified because they chose custom settings for this thread. */\n  SubscribedToThreadType = 'SUBSCRIBED_TO_THREAD_TYPE',\n  /** The subscription status is currently unavailable. */\n  Unavailable = 'UNAVAILABLE'\n}\n\n/** A topic aggregates entities that are related to a subject. */\nexport type Topic = Node & Starrable & {\n  /** The Node ID of the Topic object */\n  id: Scalars['ID']['output'];\n  /** The topic's name. */\n  name: Scalars['String']['output'];\n  /**\n   * A list of related topics, including aliases of this topic, sorted with the most relevant\n   * first. Returns up to 10 Topics.\n   */\n  relatedTopics: Array<Topic>;\n  /** A list of repositories. */\n  repositories: RepositoryConnection;\n  /** Returns a count of how many stargazers there are on this object */\n  stargazerCount: Scalars['Int']['output'];\n  /** A list of users who have starred this starrable. */\n  stargazers: StargazerConnection;\n  /** Returns a boolean indicating whether the viewing user has starred this starrable. */\n  viewerHasStarred: Scalars['Boolean']['output'];\n};\n\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicRelatedTopicsArgs = {\n  first?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  isLocked?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n  sponsorableOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n\n/** A topic aggregates entities that are related to a subject. */\nexport type TopicStargazersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<StarOrder>;\n};\n\n/** Metadata for an audit entry with a topic. */\nexport type TopicAuditEntryData = {\n  /** The name of the topic added to the repository */\n  topic?: Maybe<Topic>;\n  /** The name of the topic added to the repository */\n  topicName?: Maybe<Scalars['String']['output']>;\n};\n\n/** Reason that the suggested topic is declined. */\nexport enum TopicSuggestionDeclineReason {\n  /**\n   * The suggested topic is not relevant to the repository.\n   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC.\n   */\n  NotRelevant = 'NOT_RELEVANT',\n  /**\n   * The viewer does not like the suggested topic.\n   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC.\n   */\n  PersonalPreference = 'PERSONAL_PREFERENCE',\n  /**\n   * The suggested topic is too general for the repository.\n   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC.\n   */\n  TooGeneral = 'TOO_GENERAL',\n  /**\n   * The suggested topic is too specific for the repository (e.g. #ruby-on-rails-version-4-2-1).\n   * @deprecated Suggested topics are no longer supported Removal on 2024-04-01 UTC.\n   */\n  TooSpecific = 'TOO_SPECIFIC'\n}\n\n/** The possible states of a tracked issue. */\nexport enum TrackedIssueStates {\n  /** The tracked issue is closed */\n  Closed = 'CLOSED',\n  /** The tracked issue is open */\n  Open = 'OPEN'\n}\n\n/** Autogenerated input type of TransferEnterpriseOrganization */\nexport type TransferEnterpriseOrganizationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise where the organization should be transferred. */\n  destinationEnterpriseId: Scalars['ID']['input'];\n  /** The ID of the organization to transfer. */\n  organizationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of TransferEnterpriseOrganization. */\nexport type TransferEnterpriseOrganizationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The organization for which a transfer was initiated. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of TransferIssue */\nexport type TransferIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether to create labels if they don't exist in the target repository (matched by name) */\n  createLabelsIfMissing?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The Node ID of the issue to be transferred */\n  issueId: Scalars['ID']['input'];\n  /** The Node ID of the repository the issue should be transferred to */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of TransferIssue. */\nexport type TransferIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The issue that was transferred */\n  issue?: Maybe<Issue>;\n};\n\n/** Represents a 'transferred' event on a given issue or pull request. */\nexport type TransferredEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The repository this came from */\n  fromRepository?: Maybe<Repository>;\n  /** The Node ID of the TransferredEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** Represents a Git tree. */\nexport type Tree = GitObject & Node & {\n  /** An abbreviated version of the Git object ID */\n  abbreviatedOid: Scalars['String']['output'];\n  /** The HTTP path for this Git object */\n  commitResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL for this Git object */\n  commitUrl: Scalars['URI']['output'];\n  /** A list of tree entries. */\n  entries?: Maybe<Array<TreeEntry>>;\n  /** The Node ID of the Tree object */\n  id: Scalars['ID']['output'];\n  /** The Git object ID */\n  oid: Scalars['GitObjectID']['output'];\n  /** The Repository the Git object belongs to */\n  repository: Repository;\n};\n\n/** Represents a Git tree entry. */\nexport type TreeEntry = {\n  /** The extension of the file */\n  extension?: Maybe<Scalars['String']['output']>;\n  /** Whether or not this tree entry is generated */\n  isGenerated: Scalars['Boolean']['output'];\n  /** The programming language this file is written in. */\n  language?: Maybe<Language>;\n  /** Number of lines in the file. */\n  lineCount?: Maybe<Scalars['Int']['output']>;\n  /** Entry file mode. */\n  mode: Scalars['Int']['output'];\n  /** Entry file name. */\n  name: Scalars['String']['output'];\n  /** Entry file name. (Base64-encoded) */\n  nameRaw: Scalars['Base64String']['output'];\n  /** Entry file object. */\n  object?: Maybe<GitObject>;\n  /** Entry file Git object ID. */\n  oid: Scalars['GitObjectID']['output'];\n  /** The full path of the file. */\n  path?: Maybe<Scalars['String']['output']>;\n  /** The full path of the file. (Base64-encoded) */\n  pathRaw?: Maybe<Scalars['Base64String']['output']>;\n  /** The Repository the tree entry belongs to */\n  repository: Repository;\n  /** Entry byte size */\n  size: Scalars['Int']['output'];\n  /** If the TreeEntry is for a directory occupied by a submodule project, this returns the corresponding submodule */\n  submodule?: Maybe<Submodule>;\n  /** Entry file type. */\n  type: Scalars['String']['output'];\n};\n\n/** Autogenerated input type of UnarchiveProjectV2Item */\nexport type UnarchiveProjectV2ItemInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the ProjectV2Item to unarchive. */\n  itemId: Scalars['ID']['input'];\n  /** The ID of the Project to archive the item from. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnarchiveProjectV2Item. */\nexport type UnarchiveProjectV2ItemPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The item unarchived from the project. */\n  item?: Maybe<ProjectV2Item>;\n};\n\n/** Autogenerated input type of UnarchiveRepository */\nexport type UnarchiveRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the repository to unarchive. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnarchiveRepository. */\nexport type UnarchiveRepositoryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The repository that was unarchived. */\n  repository?: Maybe<Repository>;\n};\n\n/** Represents an 'unassigned' event on any assignable object. */\nexport type UnassignedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the assignable associated with the event. */\n  assignable: Assignable;\n  /** Identifies the user or mannequin that was unassigned. */\n  assignee?: Maybe<Assignee>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the UnassignedEvent object */\n  id: Scalars['ID']['output'];\n  /**\n   * Identifies the subject (user) who was unassigned.\n   * @deprecated Assignees can now be mannequins. Use the `assignee` field instead. Removal on 2020-01-01 UTC.\n   */\n  user?: Maybe<User>;\n};\n\n/** Autogenerated input type of UnfollowOrganization */\nexport type UnfollowOrganizationInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the organization to unfollow. */\n  organizationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnfollowOrganization. */\nexport type UnfollowOrganizationPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The organization that was unfollowed. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of UnfollowUser */\nexport type UnfollowUserInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the user to unfollow. */\n  userId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnfollowUser. */\nexport type UnfollowUserPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The user that was unfollowed. */\n  user?: Maybe<User>;\n};\n\n/** Represents a type that can be retrieved by a URL. */\nexport type UniformResourceLocatable = {\n  /** The HTML path to this resource. */\n  resourcePath: Scalars['URI']['output'];\n  /** The URL to this resource. */\n  url: Scalars['URI']['output'];\n};\n\n/** Represents an unknown signature on a Commit or Tag. */\nexport type UnknownSignature = GitSignature & {\n  /** Email used to sign this object. */\n  email: Scalars['String']['output'];\n  /** True if the signature is valid and verified by GitHub. */\n  isValid: Scalars['Boolean']['output'];\n  /** Payload for GPG signing object. Raw ODB object without the signature header. */\n  payload: Scalars['String']['output'];\n  /** ASCII-armored signature header from object. */\n  signature: Scalars['String']['output'];\n  /** GitHub user corresponding to the email signing this commit. */\n  signer?: Maybe<User>;\n  /**\n   * The state of this signature. `VALID` if signature is valid and verified by\n   * GitHub, otherwise represents reason why signature is considered invalid.\n   */\n  state: GitSignatureState;\n  /** True if the signature was made with GitHub's signing key. */\n  wasSignedByGitHub: Scalars['Boolean']['output'];\n};\n\n/** Represents an 'unlabeled' event on a given issue or pull request. */\nexport type UnlabeledEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the UnlabeledEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the label associated with the 'unlabeled' event. */\n  label: Label;\n  /** Identifies the `Labelable` associated with the event. */\n  labelable: Labelable;\n};\n\n/** Autogenerated input type of UnlinkProjectV2FromRepository */\nexport type UnlinkProjectV2FromRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the project to unlink from the repository. */\n  projectId: Scalars['ID']['input'];\n  /** The ID of the repository to unlink from the project. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnlinkProjectV2FromRepository. */\nexport type UnlinkProjectV2FromRepositoryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The repository the project is no longer linked to. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UnlinkProjectV2FromTeam */\nexport type UnlinkProjectV2FromTeamInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the project to unlink from the team. */\n  projectId: Scalars['ID']['input'];\n  /** The ID of the team to unlink from the project. */\n  teamId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnlinkProjectV2FromTeam. */\nexport type UnlinkProjectV2FromTeamPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The team the project is unlinked from */\n  team?: Maybe<Team>;\n};\n\n/** Autogenerated input type of UnlinkRepositoryFromProject */\nexport type UnlinkRepositoryFromProjectInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Project linked to the Repository. */\n  projectId: Scalars['ID']['input'];\n  /** The ID of the Repository linked to the Project. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnlinkRepositoryFromProject. */\nexport type UnlinkRepositoryFromProjectPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The linked Project. */\n  project?: Maybe<Project>;\n  /** The linked Repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UnlockLockable */\nexport type UnlockLockableInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the item to be unlocked. */\n  lockableId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnlockLockable. */\nexport type UnlockLockablePayload = {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The item that was unlocked. */\n  unlockedRecord?: Maybe<Lockable>;\n};\n\n/** Represents an 'unlocked' event on a given issue or pull request. */\nexport type UnlockedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the UnlockedEvent object */\n  id: Scalars['ID']['output'];\n  /** Object that was unlocked. */\n  lockable: Lockable;\n};\n\n/** Autogenerated input type of UnmarkDiscussionCommentAsAnswer */\nexport type UnmarkDiscussionCommentAsAnswerInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion comment to unmark as an answer. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnmarkDiscussionCommentAsAnswer. */\nexport type UnmarkDiscussionCommentAsAnswerPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The discussion that includes the comment. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of UnmarkFileAsViewed */\nexport type UnmarkFileAsViewedInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The path of the file to mark as unviewed */\n  path: Scalars['String']['input'];\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnmarkFileAsViewed. */\nexport type UnmarkFileAsViewedPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UnmarkIssueAsDuplicate */\nexport type UnmarkIssueAsDuplicateInput = {\n  /** ID of the issue or pull request currently considered canonical/authoritative/original. */\n  canonicalId: Scalars['ID']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** ID of the issue or pull request currently marked as a duplicate. */\n  duplicateId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnmarkIssueAsDuplicate. */\nexport type UnmarkIssueAsDuplicatePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The issue or pull request that was marked as a duplicate. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n};\n\n/** Autogenerated input type of UnmarkProjectV2AsTemplate */\nexport type UnmarkProjectV2AsTemplateInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Project to unmark as a template. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnmarkProjectV2AsTemplate. */\nexport type UnmarkProjectV2AsTemplatePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The project. */\n  projectV2?: Maybe<ProjectV2>;\n};\n\n/** Represents an 'unmarked_as_duplicate' event on a given issue or pull request. */\nexport type UnmarkedAsDuplicateEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** The authoritative issue or pull request which has been duplicated by another. */\n  canonical?: Maybe<IssueOrPullRequest>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The issue or pull request which has been marked as a duplicate of another. */\n  duplicate?: Maybe<IssueOrPullRequest>;\n  /** The Node ID of the UnmarkedAsDuplicateEvent object */\n  id: Scalars['ID']['output'];\n  /** Canonical and duplicate belong to different repositories. */\n  isCrossRepository: Scalars['Boolean']['output'];\n};\n\n/** Autogenerated input type of UnminimizeComment */\nexport type UnminimizeCommentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the subject to modify. */\n  subjectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnminimizeComment. */\nexport type UnminimizeCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The comment that was unminimized. */\n  unminimizedComment?: Maybe<Minimizable>;\n};\n\n/** Autogenerated input type of UnpinIssue */\nexport type UnpinIssueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the issue to be unpinned */\n  issueId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnpinIssue. */\nexport type UnpinIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The id of the pinned issue that was unpinned */\n  id?: Maybe<Scalars['ID']['output']>;\n  /** The issue that was unpinned */\n  issue?: Maybe<Issue>;\n};\n\n/** Represents an 'unpinned' event on a given issue or pull request. */\nexport type UnpinnedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the UnpinnedEvent object */\n  id: Scalars['ID']['output'];\n  /** Identifies the issue associated with the event. */\n  issue: Issue;\n};\n\n/** Autogenerated input type of UnresolveReviewThread */\nexport type UnresolveReviewThreadInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the thread to unresolve */\n  threadId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UnresolveReviewThread. */\nexport type UnresolveReviewThreadPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The thread to resolve. */\n  thread?: Maybe<PullRequestReviewThread>;\n};\n\n/** Autogenerated input type of UnsubscribeFromNotifications */\nexport type UnsubscribeFromNotificationsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The NotificationThread IDs of the objects to unsubscribe from. */\n  ids: Array<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of UnsubscribeFromNotifications. */\nexport type UnsubscribeFromNotificationsPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Did the operation succeed? */\n  success?: Maybe<Scalars['Boolean']['output']>;\n};\n\n/** Represents an 'unsubscribed' event on a given `Subscribable`. */\nexport type UnsubscribedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the UnsubscribedEvent object */\n  id: Scalars['ID']['output'];\n  /** Object referenced by event. */\n  subscribable: Subscribable;\n};\n\n/** Entities that can be updated. */\nexport type Updatable = {\n  /** Check if the current viewer can update this object. */\n  viewerCanUpdate: Scalars['Boolean']['output'];\n};\n\n/** Comments that can be updated. */\nexport type UpdatableComment = {\n  /** Reasons why the current viewer can not update this comment. */\n  viewerCannotUpdateReasons: Array<CommentCannotUpdateReason>;\n};\n\n/** Autogenerated input type of UpdateBranchProtectionRule */\nexport type UpdateBranchProtectionRuleInput = {\n  /** Can this branch be deleted. */\n  allowsDeletions?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are force pushes allowed on this branch. */\n  allowsForcePushes?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Is branch creation a protected operation. */\n  blocksCreations?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The global relay id of the branch protection rule to be updated. */\n  branchProtectionRuleId: Scalars['ID']['input'];\n  /** A list of User, Team, or App IDs allowed to bypass force push targeting matching branches. */\n  bypassForcePushActorIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** A list of User, Team, or App IDs allowed to bypass pull requests targeting matching branches. */\n  bypassPullRequestActorIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Will new commits pushed to matching branches dismiss pull request review approvals. */\n  dismissesStaleReviews?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Can admins override branch protection. */\n  isAdminEnforced?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * Whether users can pull changes from upstream when the branch is locked. Set to\n   * `true` to allow fork syncing. Set to `false` to prevent fork syncing.\n   */\n  lockAllowsFetchAndMerge?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. */\n  lockBranch?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The glob-like pattern used to determine matching branches. */\n  pattern?: InputMaybe<Scalars['String']['input']>;\n  /** A list of User, Team, or App IDs allowed to push to matching branches. */\n  pushActorIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** Whether the most recent push must be approved by someone other than the person who pushed it */\n  requireLastPushApproval?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Number of approving reviews required to update matching branches. */\n  requiredApprovingReviewCount?: InputMaybe<Scalars['Int']['input']>;\n  /** The list of required deployment environments */\n  requiredDeploymentEnvironments?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** List of required status check contexts that must pass for commits to be accepted to matching branches. */\n  requiredStatusCheckContexts?: InputMaybe<Array<Scalars['String']['input']>>;\n  /** The list of required status checks */\n  requiredStatusChecks?: InputMaybe<Array<RequiredStatusCheckInput>>;\n  /** Are approving reviews required to update matching branches. */\n  requiresApprovingReviews?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are reviews from code owners required to update matching branches. */\n  requiresCodeOwnerReviews?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are commits required to be signed. */\n  requiresCommitSignatures?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are conversations required to be resolved before merging. */\n  requiresConversationResolution?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are successful deployments required before merging. */\n  requiresDeployments?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are merge commits prohibited from being pushed to this branch. */\n  requiresLinearHistory?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are status checks required to update matching branches. */\n  requiresStatusChecks?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Are branches required to be up to date before merging. */\n  requiresStrictStatusChecks?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Is pushing to matching branches restricted. */\n  restrictsPushes?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Is dismissal of pull request reviews restricted. */\n  restrictsReviewDismissals?: InputMaybe<Scalars['Boolean']['input']>;\n  /** A list of User, Team, or App IDs allowed to dismiss reviews on pull requests targeting matching branches. */\n  reviewDismissalActorIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n};\n\n/** Autogenerated return type of UpdateBranchProtectionRule. */\nexport type UpdateBranchProtectionRulePayload = {\n  /** The newly created BranchProtectionRule. */\n  branchProtectionRule?: Maybe<BranchProtectionRule>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateCheckRun */\nexport type UpdateCheckRunInput = {\n  /** Possible further actions the integrator can perform, which a user may trigger. */\n  actions?: InputMaybe<Array<CheckRunAction>>;\n  /** The node of the check. */\n  checkRunId: Scalars['ID']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The time that the check run finished. */\n  completedAt?: InputMaybe<Scalars['DateTime']['input']>;\n  /** The final conclusion of the check. */\n  conclusion?: InputMaybe<CheckConclusionState>;\n  /** The URL of the integrator's site that has the full details of the check. */\n  detailsUrl?: InputMaybe<Scalars['URI']['input']>;\n  /** A reference for the run on the integrator's system. */\n  externalId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the check. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** Descriptive details about the run. */\n  output?: InputMaybe<CheckRunOutput>;\n  /** The node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n  /** The time that the check run began. */\n  startedAt?: InputMaybe<Scalars['DateTime']['input']>;\n  /** The current status. */\n  status?: InputMaybe<RequestableCheckStatusState>;\n};\n\n/** Autogenerated return type of UpdateCheckRun. */\nexport type UpdateCheckRunPayload = {\n  /** The updated check run. */\n  checkRun?: Maybe<CheckRun>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateCheckSuitePreferences */\nexport type UpdateCheckSuitePreferencesInput = {\n  /** The check suite preferences to modify. */\n  autoTriggerPreferences: Array<CheckSuiteAutoTriggerPreference>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateCheckSuitePreferences. */\nexport type UpdateCheckSuitePreferencesPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UpdateDiscussionComment */\nexport type UpdateDiscussionCommentInput = {\n  /** The new contents of the comment body. */\n  body: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion comment to update. */\n  commentId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateDiscussionComment. */\nexport type UpdateDiscussionCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The modified discussion comment. */\n  comment?: Maybe<DiscussionComment>;\n};\n\n/** Autogenerated input type of UpdateDiscussion */\nexport type UpdateDiscussionInput = {\n  /** The new contents of the discussion body. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of a discussion category within the same repository to change this discussion to. */\n  categoryId?: InputMaybe<Scalars['ID']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion to update. */\n  discussionId: Scalars['ID']['input'];\n  /** The new discussion title. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateDiscussion. */\nexport type UpdateDiscussionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The modified discussion. */\n  discussion?: Maybe<Discussion>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseAdministratorRole */\nexport type UpdateEnterpriseAdministratorRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Enterprise which the admin belongs to. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The login of a administrator whose role is being changed. */\n  login: Scalars['String']['input'];\n  /** The new role for the Enterprise administrator. */\n  role: EnterpriseAdministratorRole;\n};\n\n/** Autogenerated return type of UpdateEnterpriseAdministratorRole. */\nexport type UpdateEnterpriseAdministratorRolePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** A message confirming the result of changing the administrator's role. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting */\nexport type UpdateEnterpriseAllowPrivateRepositoryForkingSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the allow private repository forking setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the allow private repository forking policy on the enterprise. */\n  policyValue?: InputMaybe<EnterpriseAllowPrivateRepositoryForkingPolicyValue>;\n  /** The value for the allow private repository forking setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseAllowPrivateRepositoryForkingSetting. */\nexport type UpdateEnterpriseAllowPrivateRepositoryForkingSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated allow private repository forking setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the allow private repository forking setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseDefaultRepositoryPermissionSetting */\nexport type UpdateEnterpriseDefaultRepositoryPermissionSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the base repository permission setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the base repository permission setting on the enterprise. */\n  settingValue: EnterpriseDefaultRepositoryPermissionSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseDefaultRepositoryPermissionSetting. */\nexport type UpdateEnterpriseDefaultRepositoryPermissionSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated base repository permission setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the base repository permission setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting */\nexport type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the members can change repository visibility setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the members can change repository visibility setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanChangeRepositoryVisibilitySetting. */\nexport type UpdateEnterpriseMembersCanChangeRepositoryVisibilitySettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated members can change repository visibility setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can change repository visibility setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanCreateRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanCreateRepositoriesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the members can create repositories setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** Allow members to create internal repositories. Defaults to current value. */\n  membersCanCreateInternalRepositories?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Allow members to create private repositories. Defaults to current value. */\n  membersCanCreatePrivateRepositories?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Allow members to create public repositories. Defaults to current value. */\n  membersCanCreatePublicRepositories?: InputMaybe<Scalars['Boolean']['input']>;\n  /** When false, allow member organizations to set their own repository creation member privileges. */\n  membersCanCreateRepositoriesPolicyEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * Value for the members can create repositories setting on the enterprise. This\n   * or the granular public/private/internal allowed fields (but not both) must be provided.\n   */\n  settingValue?: InputMaybe<EnterpriseMembersCanCreateRepositoriesSettingValue>;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanCreateRepositoriesSetting. */\nexport type UpdateEnterpriseMembersCanCreateRepositoriesSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated members can create repositories setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can create repositories setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteIssuesSetting */\nexport type UpdateEnterpriseMembersCanDeleteIssuesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the members can delete issues setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the members can delete issues setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteIssuesSetting. */\nexport type UpdateEnterpriseMembersCanDeleteIssuesSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated members can delete issues setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can delete issues setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting */\nexport type UpdateEnterpriseMembersCanDeleteRepositoriesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the members can delete repositories setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the members can delete repositories setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanDeleteRepositoriesSetting. */\nexport type UpdateEnterpriseMembersCanDeleteRepositoriesSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated members can delete repositories setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can delete repositories setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting */\nexport type UpdateEnterpriseMembersCanInviteCollaboratorsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the members can invite collaborators setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the members can invite collaborators setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanInviteCollaboratorsSetting. */\nexport type UpdateEnterpriseMembersCanInviteCollaboratorsSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated members can invite collaborators setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can invite collaborators setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanMakePurchasesSetting */\nexport type UpdateEnterpriseMembersCanMakePurchasesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the members can make purchases setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the members can make purchases setting on the enterprise. */\n  settingValue: EnterpriseMembersCanMakePurchasesSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanMakePurchasesSetting. */\nexport type UpdateEnterpriseMembersCanMakePurchasesSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated members can make purchases setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can make purchases setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting */\nexport type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the members can update protected branches setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the members can update protected branches setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanUpdateProtectedBranchesSetting. */\nexport type UpdateEnterpriseMembersCanUpdateProtectedBranchesSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated members can update protected branches setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can update protected branches setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting */\nexport type UpdateEnterpriseMembersCanViewDependencyInsightsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the members can view dependency insights setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the members can view dependency insights setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseMembersCanViewDependencyInsightsSetting. */\nexport type UpdateEnterpriseMembersCanViewDependencyInsightsSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated members can view dependency insights setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the members can view dependency insights setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseOrganizationProjectsSetting */\nexport type UpdateEnterpriseOrganizationProjectsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the organization projects setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the organization projects setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseOrganizationProjectsSetting. */\nexport type UpdateEnterpriseOrganizationProjectsSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated organization projects setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the organization projects setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseOwnerOrganizationRole */\nexport type UpdateEnterpriseOwnerOrganizationRoleInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Enterprise which the owner belongs to. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The ID of the organization for membership change. */\n  organizationId: Scalars['ID']['input'];\n  /** The role to assume in the organization. */\n  organizationRole: RoleInOrganization;\n};\n\n/** Autogenerated return type of UpdateEnterpriseOwnerOrganizationRole. */\nexport type UpdateEnterpriseOwnerOrganizationRolePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** A message confirming the result of changing the owner's organization role. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseProfile */\nexport type UpdateEnterpriseProfileInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The description of the enterprise. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The Enterprise ID to update. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The location of the enterprise. */\n  location?: InputMaybe<Scalars['String']['input']>;\n  /** The name of the enterprise. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The URL of the enterprise's website. */\n  websiteUrl?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateEnterpriseProfile. */\nexport type UpdateEnterpriseProfilePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated enterprise. */\n  enterprise?: Maybe<Enterprise>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseRepositoryProjectsSetting */\nexport type UpdateEnterpriseRepositoryProjectsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the repository projects setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the repository projects setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseRepositoryProjectsSetting. */\nexport type UpdateEnterpriseRepositoryProjectsSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated repository projects setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the repository projects setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseTeamDiscussionsSetting */\nexport type UpdateEnterpriseTeamDiscussionsSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the team discussions setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the team discussions setting on the enterprise. */\n  settingValue: EnterpriseEnabledDisabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseTeamDiscussionsSetting. */\nexport type UpdateEnterpriseTeamDiscussionsSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated team discussions setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the team discussions setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting */\nexport type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the enterprise on which to set the two factor authentication required setting. */\n  enterpriseId: Scalars['ID']['input'];\n  /** The value for the two factor authentication required setting on the enterprise. */\n  settingValue: EnterpriseEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateEnterpriseTwoFactorAuthenticationRequiredSetting. */\nexport type UpdateEnterpriseTwoFactorAuthenticationRequiredSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The enterprise with the updated two factor authentication required setting. */\n  enterprise?: Maybe<Enterprise>;\n  /** A message confirming the result of updating the two factor authentication required setting. */\n  message?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateEnvironment */\nexport type UpdateEnvironmentInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The node ID of the environment. */\n  environmentId: Scalars['ID']['input'];\n  /** Whether deployments to this environment can be approved by the user who created the deployment. */\n  preventSelfReview?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ids of users or teams that can approve deployments to this environment */\n  reviewers?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The wait timer in minutes. */\n  waitTimer?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Autogenerated return type of UpdateEnvironment. */\nexport type UpdateEnvironmentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated environment. */\n  environment?: Maybe<Environment>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListEnabledSetting */\nexport type UpdateIpAllowListEnabledSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the owner on which to set the IP allow list enabled setting. */\n  ownerId: Scalars['ID']['input'];\n  /** The value for the IP allow list enabled setting. */\n  settingValue: IpAllowListEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateIpAllowListEnabledSetting. */\nexport type UpdateIpAllowListEnabledSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The IP allow list owner on which the setting was updated. */\n  owner?: Maybe<IpAllowListOwner>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListEntry */\nexport type UpdateIpAllowListEntryInput = {\n  /** An IP address or range of addresses in CIDR notation. */\n  allowListValue: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the IP allow list entry to update. */\n  ipAllowListEntryId: Scalars['ID']['input'];\n  /** Whether the IP allow list entry is active when an IP allow list is enabled. */\n  isActive: Scalars['Boolean']['input'];\n  /** An optional name for the IP allow list entry. */\n  name?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateIpAllowListEntry. */\nexport type UpdateIpAllowListEntryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The IP allow list entry that was updated. */\n  ipAllowListEntry?: Maybe<IpAllowListEntry>;\n};\n\n/** Autogenerated input type of UpdateIpAllowListForInstalledAppsEnabledSetting */\nexport type UpdateIpAllowListForInstalledAppsEnabledSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the owner. */\n  ownerId: Scalars['ID']['input'];\n  /** The value for the IP allow list configuration for installed GitHub Apps setting. */\n  settingValue: IpAllowListForInstalledAppsEnabledSettingValue;\n};\n\n/** Autogenerated return type of UpdateIpAllowListForInstalledAppsEnabledSetting. */\nexport type UpdateIpAllowListForInstalledAppsEnabledSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The IP allow list owner on which the setting was updated. */\n  owner?: Maybe<IpAllowListOwner>;\n};\n\n/** Autogenerated input type of UpdateIssueComment */\nexport type UpdateIssueCommentInput = {\n  /** The updated text of the comment. */\n  body: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the IssueComment to modify. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateIssueComment. */\nexport type UpdateIssueCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated comment. */\n  issueComment?: Maybe<IssueComment>;\n};\n\n/** Autogenerated input type of UpdateIssue */\nexport type UpdateIssueInput = {\n  /** An array of Node IDs of users for this issue. */\n  assigneeIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The body for the issue description. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the Issue to modify. */\n  id: Scalars['ID']['input'];\n  /** An array of Node IDs of labels for this issue. */\n  labelIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The Node ID of the milestone for this issue. */\n  milestoneId?: InputMaybe<Scalars['ID']['input']>;\n  /** An array of Node IDs for projects associated with this issue. */\n  projectIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The desired issue state. */\n  state?: InputMaybe<IssueState>;\n  /** The title for the issue. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateIssue. */\nexport type UpdateIssuePayload = {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The issue. */\n  issue?: Maybe<Issue>;\n};\n\n/** Autogenerated input type of UpdateLabel */\nexport type UpdateLabelInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A 6 character hex code, without the leading #, identifying the updated color of the label. */\n  color?: InputMaybe<Scalars['String']['input']>;\n  /** A brief description of the label, such as its purpose. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the label to be updated. */\n  id: Scalars['ID']['input'];\n  /** The updated name of the label. */\n  name?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateLabel. */\nexport type UpdateLabelPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated label. */\n  label?: Maybe<Label>;\n};\n\n/** Autogenerated input type of UpdateNotificationRestrictionSetting */\nexport type UpdateNotificationRestrictionSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the owner on which to set the restrict notifications setting. */\n  ownerId: Scalars['ID']['input'];\n  /** The value for the restrict notifications setting. */\n  settingValue: NotificationRestrictionSettingValue;\n};\n\n/** Autogenerated return type of UpdateNotificationRestrictionSetting. */\nexport type UpdateNotificationRestrictionSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The owner on which the setting was updated. */\n  owner?: Maybe<VerifiableDomainOwner>;\n};\n\n/** Autogenerated input type of UpdateOrganizationAllowPrivateRepositoryForkingSetting */\nexport type UpdateOrganizationAllowPrivateRepositoryForkingSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Enable forking of private repositories in the organization? */\n  forkingEnabled: Scalars['Boolean']['input'];\n  /** The ID of the organization on which to set the allow private repository forking setting. */\n  organizationId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateOrganizationAllowPrivateRepositoryForkingSetting. */\nexport type UpdateOrganizationAllowPrivateRepositoryForkingSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** A message confirming the result of updating the allow private repository forking setting. */\n  message?: Maybe<Scalars['String']['output']>;\n  /** The organization with the updated allow private repository forking setting. */\n  organization?: Maybe<Organization>;\n};\n\n/** Autogenerated input type of UpdateOrganizationWebCommitSignoffSetting */\nexport type UpdateOrganizationWebCommitSignoffSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the organization on which to set the web commit signoff setting. */\n  organizationId: Scalars['ID']['input'];\n  /** Enable signoff on web-based commits for repositories in the organization? */\n  webCommitSignoffRequired: Scalars['Boolean']['input'];\n};\n\n/** Autogenerated return type of UpdateOrganizationWebCommitSignoffSetting. */\nexport type UpdateOrganizationWebCommitSignoffSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** A message confirming the result of updating the web commit signoff setting. */\n  message?: Maybe<Scalars['String']['output']>;\n  /** The organization with the updated web commit signoff setting. */\n  organization?: Maybe<Organization>;\n};\n\n/** Only allow users with bypass permission to update matching refs. */\nexport type UpdateParameters = {\n  /** Branch can pull changes from its upstream repository */\n  updateAllowsFetchAndMerge: Scalars['Boolean']['output'];\n};\n\n/** Only allow users with bypass permission to update matching refs. */\nexport type UpdateParametersInput = {\n  /** Branch can pull changes from its upstream repository */\n  updateAllowsFetchAndMerge: Scalars['Boolean']['input'];\n};\n\n/** Autogenerated input type of UpdatePatreonSponsorability */\nexport type UpdatePatreonSponsorabilityInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * Whether Patreon tiers should be shown on the GitHub Sponsors profile page,\n   * allowing potential sponsors to make their payment through Patreon instead of GitHub.\n   */\n  enablePatreonSponsorships: Scalars['Boolean']['input'];\n  /**\n   * The username of the organization with the GitHub Sponsors profile, if any.\n   * Defaults to the GitHub Sponsors profile for the authenticated user if omitted.\n   */\n  sponsorableLogin?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdatePatreonSponsorability. */\nexport type UpdatePatreonSponsorabilityPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The GitHub Sponsors profile. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n};\n\n/** Autogenerated input type of UpdateProjectCard */\nexport type UpdateProjectCardInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Whether or not the ProjectCard should be archived */\n  isArchived?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The note of ProjectCard. */\n  note?: InputMaybe<Scalars['String']['input']>;\n  /** The ProjectCard ID to update. */\n  projectCardId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateProjectCard. */\nexport type UpdateProjectCardPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated ProjectCard. */\n  projectCard?: Maybe<ProjectCard>;\n};\n\n/** Autogenerated input type of UpdateProjectColumn */\nexport type UpdateProjectColumnInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of project column. */\n  name: Scalars['String']['input'];\n  /** The ProjectColumn ID to update. */\n  projectColumnId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateProjectColumn. */\nexport type UpdateProjectColumnPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated project column. */\n  projectColumn?: Maybe<ProjectColumn>;\n};\n\n/** Autogenerated input type of UpdateProject */\nexport type UpdateProjectInput = {\n  /** The description of project. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The name of project. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The Project ID to update. */\n  projectId: Scalars['ID']['input'];\n  /** Whether the project is public or not. */\n  public?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Whether the project is open or closed. */\n  state?: InputMaybe<ProjectState>;\n};\n\n/** Autogenerated return type of UpdateProject. */\nexport type UpdateProjectPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated project. */\n  project?: Maybe<Project>;\n};\n\n/** Autogenerated input type of UpdateProjectV2Collaborators */\nexport type UpdateProjectV2CollaboratorsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The collaborators to update. */\n  collaborators: Array<ProjectV2Collaborator>;\n  /** The ID of the project to update the collaborators for. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateProjectV2Collaborators. */\nexport type UpdateProjectV2CollaboratorsPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The collaborators granted a role */\n  collaborators?: Maybe<ProjectV2ActorConnection>;\n};\n\n\n/** Autogenerated return type of UpdateProjectV2Collaborators. */\nexport type UpdateProjectV2CollaboratorsPayloadCollaboratorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Autogenerated input type of UpdateProjectV2DraftIssue */\nexport type UpdateProjectV2DraftIssueInput = {\n  /** The IDs of the assignees of the draft issue. */\n  assigneeIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The body of the draft issue. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the draft issue to update. */\n  draftIssueId: Scalars['ID']['input'];\n  /** The title of the draft issue. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateProjectV2DraftIssue. */\nexport type UpdateProjectV2DraftIssuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The draft issue updated in the project. */\n  draftIssue?: Maybe<DraftIssue>;\n};\n\n/** Autogenerated input type of UpdateProjectV2 */\nexport type UpdateProjectV2Input = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Set the project to closed or open. */\n  closed?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the Project to update. */\n  projectId: Scalars['ID']['input'];\n  /** Set the project to public or private. */\n  public?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Set the readme description of the project. */\n  readme?: InputMaybe<Scalars['String']['input']>;\n  /** Set the short description of the project. */\n  shortDescription?: InputMaybe<Scalars['String']['input']>;\n  /** Set the title of the project. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated input type of UpdateProjectV2ItemFieldValue */\nexport type UpdateProjectV2ItemFieldValueInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the field to be updated. */\n  fieldId: Scalars['ID']['input'];\n  /** The ID of the item to be updated. */\n  itemId: Scalars['ID']['input'];\n  /** The ID of the Project. */\n  projectId: Scalars['ID']['input'];\n  /** The value which will be set on the field. */\n  value: ProjectV2FieldValue;\n};\n\n/** Autogenerated return type of UpdateProjectV2ItemFieldValue. */\nexport type UpdateProjectV2ItemFieldValuePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated item. */\n  projectV2Item?: Maybe<ProjectV2Item>;\n};\n\n/** Autogenerated input type of UpdateProjectV2ItemPosition */\nexport type UpdateProjectV2ItemPositionInput = {\n  /** The ID of the item to position this item after. If omitted or set to null the item will be moved to top. */\n  afterId?: InputMaybe<Scalars['ID']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the item to be moved. */\n  itemId: Scalars['ID']['input'];\n  /** The ID of the Project. */\n  projectId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateProjectV2ItemPosition. */\nexport type UpdateProjectV2ItemPositionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The items in the new order */\n  items?: Maybe<ProjectV2ItemConnection>;\n};\n\n\n/** Autogenerated return type of UpdateProjectV2ItemPosition. */\nexport type UpdateProjectV2ItemPositionPayloadItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Autogenerated return type of UpdateProjectV2. */\nexport type UpdateProjectV2Payload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated Project. */\n  projectV2?: Maybe<ProjectV2>;\n};\n\n/** Autogenerated input type of UpdateProjectV2StatusUpdate */\nexport type UpdateProjectV2StatusUpdateInput = {\n  /** The body of the status update. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The start date of the status update. */\n  startDate?: InputMaybe<Scalars['Date']['input']>;\n  /** The status of the status update. */\n  status?: InputMaybe<ProjectV2StatusUpdateStatus>;\n  /** The ID of the status update to be updated. */\n  statusUpdateId: Scalars['ID']['input'];\n  /** The target date of the status update. */\n  targetDate?: InputMaybe<Scalars['Date']['input']>;\n};\n\n/** Autogenerated return type of UpdateProjectV2StatusUpdate. */\nexport type UpdateProjectV2StatusUpdatePayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The status update updated in the project. */\n  statusUpdate?: Maybe<ProjectV2StatusUpdate>;\n};\n\n/** Autogenerated input type of UpdatePullRequestBranch */\nexport type UpdatePullRequestBranchInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The head ref oid for the upstream branch. */\n  expectedHeadOid?: InputMaybe<Scalars['GitObjectID']['input']>;\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars['ID']['input'];\n  /** The update branch method to use. If omitted, defaults to 'MERGE' */\n  updateMethod?: InputMaybe<PullRequestBranchUpdateMethod>;\n};\n\n/** Autogenerated return type of UpdatePullRequestBranch. */\nexport type UpdatePullRequestBranchPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UpdatePullRequest */\nexport type UpdatePullRequestInput = {\n  /** An array of Node IDs of users for this pull request. */\n  assigneeIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /**\n   * The name of the branch you want your changes pulled into. This should be an existing branch\n   * on the current repository.\n   */\n  baseRefName?: InputMaybe<Scalars['String']['input']>;\n  /** The contents of the pull request. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** An array of Node IDs of labels for this pull request. */\n  labelIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** Indicates whether maintainers can modify the pull request. */\n  maintainerCanModify?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The Node ID of the milestone for this pull request. */\n  milestoneId?: InputMaybe<Scalars['ID']['input']>;\n  /** An array of Node IDs for projects associated with this pull request. */\n  projectIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The Node ID of the pull request. */\n  pullRequestId: Scalars['ID']['input'];\n  /** The target state of the pull request. */\n  state?: InputMaybe<PullRequestUpdateState>;\n  /** The title of the pull request. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdatePullRequest. */\nexport type UpdatePullRequestPayload = {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated pull request. */\n  pullRequest?: Maybe<PullRequest>;\n};\n\n/** Autogenerated input type of UpdatePullRequestReviewComment */\nexport type UpdatePullRequestReviewCommentInput = {\n  /** The text of the comment. */\n  body: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the comment to modify. */\n  pullRequestReviewCommentId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdatePullRequestReviewComment. */\nexport type UpdatePullRequestReviewCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated comment. */\n  pullRequestReviewComment?: Maybe<PullRequestReviewComment>;\n};\n\n/** Autogenerated input type of UpdatePullRequestReview */\nexport type UpdatePullRequestReviewInput = {\n  /** The contents of the pull request review body. */\n  body: Scalars['String']['input'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the pull request review to modify. */\n  pullRequestReviewId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdatePullRequestReview. */\nexport type UpdatePullRequestReviewPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated pull request review. */\n  pullRequestReview?: Maybe<PullRequestReview>;\n};\n\n/** Autogenerated input type of UpdateRef */\nexport type UpdateRefInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Permit updates of branch Refs that are not fast-forwards? */\n  force?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The GitObjectID that the Ref shall be updated to target. */\n  oid: Scalars['GitObjectID']['input'];\n  /** The Node ID of the Ref to be updated. */\n  refId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateRef. */\nexport type UpdateRefPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated Ref. */\n  ref?: Maybe<Ref>;\n};\n\n/** Autogenerated input type of UpdateRefs */\nexport type UpdateRefsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A list of ref updates. */\n  refUpdates: Array<RefUpdate>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateRefs. */\nexport type UpdateRefsPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n};\n\n/** Autogenerated input type of UpdateRepository */\nexport type UpdateRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A new description for the repository. Pass an empty string to erase the existing description. */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Indicates if the repository should have the discussions feature enabled. */\n  hasDiscussionsEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Indicates if the repository should have the issues feature enabled. */\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Indicates if the repository should have the project boards feature enabled. */\n  hasProjectsEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Indicates if the repository displays a Sponsor button for financial contributions. */\n  hasSponsorshipsEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Indicates if the repository should have the wiki feature enabled. */\n  hasWikiEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The URL for a web page about this repository. Pass an empty string to erase the existing URL. */\n  homepageUrl?: InputMaybe<Scalars['URI']['input']>;\n  /** The new name of the repository. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the repository to update. */\n  repositoryId: Scalars['ID']['input'];\n  /**\n   * Whether this repository should be marked as a template such that anyone who\n   * can access it can create new repositories with the same files and directory structure.\n   */\n  template?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n/** Autogenerated return type of UpdateRepository. */\nexport type UpdateRepositoryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UpdateRepositoryRuleset */\nexport type UpdateRepositoryRulesetInput = {\n  /** A list of actors that are allowed to bypass rules in this ruleset. */\n  bypassActors?: InputMaybe<Array<RepositoryRulesetBypassActorInput>>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The list of conditions for this ruleset */\n  conditions?: InputMaybe<RepositoryRuleConditionsInput>;\n  /** The enforcement level for this ruleset */\n  enforcement?: InputMaybe<RuleEnforcement>;\n  /** The name of the ruleset. */\n  name?: InputMaybe<Scalars['String']['input']>;\n  /** The global relay id of the repository ruleset to be updated. */\n  repositoryRulesetId: Scalars['ID']['input'];\n  /** The list of rules for this ruleset */\n  rules?: InputMaybe<Array<RepositoryRuleInput>>;\n  /** The target of the ruleset. */\n  target?: InputMaybe<RepositoryRulesetTarget>;\n};\n\n/** Autogenerated return type of UpdateRepositoryRuleset. */\nexport type UpdateRepositoryRulesetPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The newly created Ruleset. */\n  ruleset?: Maybe<RepositoryRuleset>;\n};\n\n/** Autogenerated input type of UpdateRepositoryWebCommitSignoffSetting */\nexport type UpdateRepositoryWebCommitSignoffSettingInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the repository to update. */\n  repositoryId: Scalars['ID']['input'];\n  /** Indicates if the repository should require signoff on web-based commits. */\n  webCommitSignoffRequired: Scalars['Boolean']['input'];\n};\n\n/** Autogenerated return type of UpdateRepositoryWebCommitSignoffSetting. */\nexport type UpdateRepositoryWebCommitSignoffSettingPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** A message confirming the result of updating the web commit signoff setting. */\n  message?: Maybe<Scalars['String']['output']>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UpdateSponsorshipPreferences */\nexport type UpdateSponsorshipPreferencesInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * Specify whether others should be able to see that the sponsor is sponsoring\n   * the sponsorable. Public visibility still does not reveal which tier is used.\n   */\n  privacyLevel?: InputMaybe<SponsorshipPrivacy>;\n  /** Whether the sponsor should receive email updates from the sponsorable. */\n  receiveEmails?: InputMaybe<Scalars['Boolean']['input']>;\n  /**\n   * The ID of the user or organization who is acting as the sponsor, paying for\n   * the sponsorship. Required if sponsorLogin is not given.\n   */\n  sponsorId?: InputMaybe<Scalars['ID']['input']>;\n  /**\n   * The username of the user or organization who is acting as the sponsor, paying\n   * for the sponsorship. Required if sponsorId is not given.\n   */\n  sponsorLogin?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the user or organization who is receiving the sponsorship. Required if sponsorableLogin is not given. */\n  sponsorableId?: InputMaybe<Scalars['ID']['input']>;\n  /** The username of the user or organization who is receiving the sponsorship. Required if sponsorableId is not given. */\n  sponsorableLogin?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateSponsorshipPreferences. */\nexport type UpdateSponsorshipPreferencesPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The sponsorship that was updated. */\n  sponsorship?: Maybe<Sponsorship>;\n};\n\n/** Autogenerated input type of UpdateSubscription */\nexport type UpdateSubscriptionInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The new state of the subscription. */\n  state: SubscriptionState;\n  /** The Node ID of the subscribable object to modify. */\n  subscribableId: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateSubscription. */\nexport type UpdateSubscriptionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The input subscribable entity. */\n  subscribable?: Maybe<Subscribable>;\n};\n\n/** Autogenerated input type of UpdateTeamDiscussionComment */\nexport type UpdateTeamDiscussionCommentInput = {\n  /** The updated text of the comment. */\n  body: Scalars['String']['input'];\n  /** The current version of the body content. */\n  bodyVersion?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the comment to modify. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of UpdateTeamDiscussionComment. */\nexport type UpdateTeamDiscussionCommentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated comment. */\n  teamDiscussionComment?: Maybe<TeamDiscussionComment>;\n};\n\n/** Autogenerated input type of UpdateTeamDiscussion */\nexport type UpdateTeamDiscussionInput = {\n  /** The updated text of the discussion. */\n  body?: InputMaybe<Scalars['String']['input']>;\n  /**\n   * The current version of the body content. If provided, this update operation\n   * will be rejected if the given version does not match the latest version on the server.\n   */\n  bodyVersion?: InputMaybe<Scalars['String']['input']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the discussion to modify. */\n  id: Scalars['ID']['input'];\n  /** If provided, sets the pinned state of the updated discussion. */\n  pinned?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The updated title of the discussion. */\n  title?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateTeamDiscussion. */\nexport type UpdateTeamDiscussionPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The updated discussion. */\n  teamDiscussion?: Maybe<TeamDiscussion>;\n};\n\n/** Autogenerated input type of UpdateTeamReviewAssignment */\nexport type UpdateTeamReviewAssignmentInput = {\n  /** The algorithm to use for review assignment */\n  algorithm?: InputMaybe<TeamReviewAssignmentAlgorithm>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Count any members whose review has already been requested against the required number of members assigned to review */\n  countMembersAlreadyRequested?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Turn on or off review assignment */\n  enabled: Scalars['Boolean']['input'];\n  /** An array of team member IDs to exclude */\n  excludedTeamMemberIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n  /** The Node ID of the team to update review assignments of */\n  id: Scalars['ID']['input'];\n  /** Include the members of any child teams when assigning */\n  includeChildTeamMembers?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Notify the entire team of the PR if it is delegated */\n  notifyTeam?: InputMaybe<Scalars['Boolean']['input']>;\n  /** Remove the team review request when assigning */\n  removeTeamRequest?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The number of team members to assign */\n  teamMemberCount?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** Autogenerated return type of UpdateTeamReviewAssignment. */\nexport type UpdateTeamReviewAssignmentPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The team that was modified */\n  team?: Maybe<Team>;\n};\n\n/** Autogenerated input type of UpdateTeamsRepository */\nexport type UpdateTeamsRepositoryInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** Permission that should be granted to the teams. */\n  permission: RepositoryPermission;\n  /** Repository ID being granted access to. */\n  repositoryId: Scalars['ID']['input'];\n  /** A list of teams being granted access. Limit: 10 */\n  teamIds: Array<Scalars['ID']['input']>;\n};\n\n/** Autogenerated return type of UpdateTeamsRepository. */\nexport type UpdateTeamsRepositoryPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The repository that was updated. */\n  repository?: Maybe<Repository>;\n  /** The teams granted permission on the repository. */\n  teams?: Maybe<Array<Team>>;\n};\n\n/** Autogenerated input type of UpdateTopics */\nexport type UpdateTopicsInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The Node ID of the repository. */\n  repositoryId: Scalars['ID']['input'];\n  /** An array of topic names. */\n  topicNames: Array<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateTopics. */\nexport type UpdateTopicsPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** Names of the provided topics that are not valid. */\n  invalidTopicNames?: Maybe<Array<Scalars['String']['output']>>;\n  /** The updated repository. */\n  repository?: Maybe<Repository>;\n};\n\n/** Autogenerated input type of UpdateUserList */\nexport type UpdateUserListInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** A description of the list */\n  description?: InputMaybe<Scalars['String']['input']>;\n  /** Whether or not the list is private */\n  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  /** The ID of the list to update. */\n  listId: Scalars['ID']['input'];\n  /** The name of the list */\n  name?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** Autogenerated return type of UpdateUserList. */\nexport type UpdateUserListPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The list that was just updated */\n  list?: Maybe<UserList>;\n};\n\n/** Autogenerated input type of UpdateUserListsForItem */\nexport type UpdateUserListsForItemInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The item to add to the list */\n  itemId: Scalars['ID']['input'];\n  /** The lists to which this item should belong */\n  listIds: Array<Scalars['ID']['input']>;\n  /** The suggested lists to create and add this item to */\n  suggestedListIds?: InputMaybe<Array<Scalars['ID']['input']>>;\n};\n\n/** Autogenerated return type of UpdateUserListsForItem. */\nexport type UpdateUserListsForItemPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The item that was added */\n  item?: Maybe<UserListItems>;\n  /** The lists to which this item belongs */\n  lists?: Maybe<Array<UserList>>;\n  /** The user who owns the lists */\n  user?: Maybe<User>;\n};\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type User = Actor & Node & PackageOwner & ProfileOwner & ProjectOwner & ProjectV2Owner & ProjectV2Recent & RepositoryDiscussionAuthor & RepositoryDiscussionCommentAuthor & RepositoryOwner & Sponsorable & UniformResourceLocatable & {\n  /** Determine if this repository owner has any items that can be pinned to their profile. */\n  anyPinnableItems: Scalars['Boolean']['output'];\n  /** A URL pointing to the user's public avatar. */\n  avatarUrl: Scalars['URI']['output'];\n  /** The user's public profile bio. */\n  bio?: Maybe<Scalars['String']['output']>;\n  /** The user's public profile bio as HTML. */\n  bioHTML: Scalars['HTML']['output'];\n  /** Could this user receive email notifications, if the organization had notification restrictions enabled? */\n  canReceiveOrganizationEmailsWhenNotificationsRestricted: Scalars['Boolean']['output'];\n  /** A list of commit comments made by this user. */\n  commitComments: CommitCommentConnection;\n  /** The user's public profile company. */\n  company?: Maybe<Scalars['String']['output']>;\n  /** The user's public profile company as HTML. */\n  companyHTML: Scalars['HTML']['output'];\n  /** The collection of contributions this user has made to different repositories. */\n  contributionsCollection: ContributionsCollection;\n  /** The user's Copilot endpoint information */\n  copilotEndpoints?: Maybe<CopilotEndpoints>;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The user's publicly visible profile email. */\n  email: Scalars['String']['output'];\n  /** A list of enterprises that the user belongs to. */\n  enterprises?: Maybe<EnterpriseConnection>;\n  /** The estimated next GitHub Sponsors payout for this user/organization in cents (USD). */\n  estimatedNextSponsorsPayoutInCents: Scalars['Int']['output'];\n  /** A list of users the given user is followed by. */\n  followers: FollowerConnection;\n  /** A list of users the given user is following. */\n  following: FollowingConnection;\n  /** Find gist by repo name. */\n  gist?: Maybe<Gist>;\n  /** A list of gist comments made by this user. */\n  gistComments: GistCommentConnection;\n  /** A list of the Gists the user has created. */\n  gists: GistConnection;\n  /** True if this user/organization has a GitHub Sponsors listing. */\n  hasSponsorsListing: Scalars['Boolean']['output'];\n  /** The hovercard information for this user in a given context */\n  hovercard: Hovercard;\n  /** The Node ID of the User object */\n  id: Scalars['ID']['output'];\n  /** The interaction ability settings for this user. */\n  interactionAbility?: Maybe<RepositoryInteractionAbility>;\n  /** Whether or not this user is a participant in the GitHub Security Bug Bounty. */\n  isBountyHunter: Scalars['Boolean']['output'];\n  /** Whether or not this user is a participant in the GitHub Campus Experts Program. */\n  isCampusExpert: Scalars['Boolean']['output'];\n  /** Whether or not this user is a GitHub Developer Program member. */\n  isDeveloperProgramMember: Scalars['Boolean']['output'];\n  /** Whether or not this user is a GitHub employee. */\n  isEmployee: Scalars['Boolean']['output'];\n  /** Whether or not this user is following the viewer. Inverse of viewerIsFollowing */\n  isFollowingViewer: Scalars['Boolean']['output'];\n  /** Whether or not this user is a member of the GitHub Stars Program. */\n  isGitHubStar: Scalars['Boolean']['output'];\n  /** Whether or not the user has marked themselves as for hire. */\n  isHireable: Scalars['Boolean']['output'];\n  /** Whether or not this user is a site administrator. */\n  isSiteAdmin: Scalars['Boolean']['output'];\n  /** Whether the given account is sponsoring this user/organization. */\n  isSponsoredBy: Scalars['Boolean']['output'];\n  /** True if the viewer is sponsored by this user/organization. */\n  isSponsoringViewer: Scalars['Boolean']['output'];\n  /** Whether or not this user is the viewing user. */\n  isViewer: Scalars['Boolean']['output'];\n  /** A list of issue comments made by this user. */\n  issueComments: IssueCommentConnection;\n  /** A list of issues associated with this user. */\n  issues: IssueConnection;\n  /**\n   * Showcases a selection of repositories and gists that the profile owner has\n   * either curated or that have been selected automatically based on popularity.\n   */\n  itemShowcase: ProfileItemShowcase;\n  /**\n   * Calculate how much each sponsor has ever paid total to this maintainer via\n   * GitHub Sponsors. Does not include sponsorships paid via Patreon.\n   */\n  lifetimeReceivedSponsorshipValues: SponsorAndLifetimeValueConnection;\n  /** A user-curated list of repositories */\n  lists: UserListConnection;\n  /** The user's public profile location. */\n  location?: Maybe<Scalars['String']['output']>;\n  /** The username used to login. */\n  login: Scalars['String']['output'];\n  /** The estimated monthly GitHub Sponsors income for this user/organization in cents (USD). */\n  monthlyEstimatedSponsorsIncomeInCents: Scalars['Int']['output'];\n  /** The user's public profile name. */\n  name?: Maybe<Scalars['String']['output']>;\n  /** Find an organization by its login that the user belongs to. */\n  organization?: Maybe<Organization>;\n  /** Verified email addresses that match verified domains for a specified organization the user is a member of. */\n  organizationVerifiedDomainEmails: Array<Scalars['String']['output']>;\n  /** A list of organizations the user belongs to. */\n  organizations: OrganizationConnection;\n  /** A list of packages under the owner. */\n  packages: PackageConnection;\n  /** A list of repositories and gists this profile owner can pin to their profile. */\n  pinnableItems: PinnableItemConnection;\n  /** A list of repositories and gists this profile owner has pinned to their profile */\n  pinnedItems: PinnableItemConnection;\n  /** Returns how many more items this profile owner can pin to their profile. */\n  pinnedItemsRemaining: Scalars['Int']['output'];\n  /** Find project by number. */\n  project?: Maybe<Project>;\n  /** Find a project by number. */\n  projectV2?: Maybe<ProjectV2>;\n  /** A list of projects under the owner. */\n  projects: ProjectConnection;\n  /** The HTTP path listing user's projects */\n  projectsResourcePath: Scalars['URI']['output'];\n  /** The HTTP URL listing user's projects */\n  projectsUrl: Scalars['URI']['output'];\n  /** A list of projects under the owner. */\n  projectsV2: ProjectV2Connection;\n  /** The user's profile pronouns */\n  pronouns?: Maybe<Scalars['String']['output']>;\n  /** A list of public keys associated with this user. */\n  publicKeys: PublicKeyConnection;\n  /** A list of pull requests associated with this user. */\n  pullRequests: PullRequestConnection;\n  /** Recent projects that this user has modified in the context of the owner. */\n  recentProjects: ProjectV2Connection;\n  /** A list of repositories that the user owns. */\n  repositories: RepositoryConnection;\n  /** A list of repositories that the user recently contributed to. */\n  repositoriesContributedTo: RepositoryConnection;\n  /** Find Repository. */\n  repository?: Maybe<Repository>;\n  /** Discussion comments this user has authored. */\n  repositoryDiscussionComments: DiscussionCommentConnection;\n  /** Discussions this user has started. */\n  repositoryDiscussions: DiscussionConnection;\n  /** The HTTP path for this user */\n  resourcePath: Scalars['URI']['output'];\n  /** Replies this user has saved */\n  savedReplies?: Maybe<SavedReplyConnection>;\n  /** The user's social media accounts, ordered as they appear on the user's profile. */\n  socialAccounts: SocialAccountConnection;\n  /** List of users and organizations this entity is sponsoring. */\n  sponsoring: SponsorConnection;\n  /** List of sponsors for this user or organization. */\n  sponsors: SponsorConnection;\n  /** Events involving this sponsorable, such as new sponsorships. */\n  sponsorsActivities: SponsorsActivityConnection;\n  /** The GitHub Sponsors listing for this user or organization. */\n  sponsorsListing?: Maybe<SponsorsListing>;\n  /** The sponsorship from the viewer to this user/organization; that is, the sponsorship where you're the sponsor. */\n  sponsorshipForViewerAsSponsor?: Maybe<Sponsorship>;\n  /** The sponsorship from this user/organization to the viewer; that is, the sponsorship you're receiving. */\n  sponsorshipForViewerAsSponsorable?: Maybe<Sponsorship>;\n  /** List of sponsorship updates sent from this sponsorable to sponsors. */\n  sponsorshipNewsletters: SponsorshipNewsletterConnection;\n  /** The sponsorships where this user or organization is the maintainer receiving the funds. */\n  sponsorshipsAsMaintainer: SponsorshipConnection;\n  /** The sponsorships where this user or organization is the funder. */\n  sponsorshipsAsSponsor: SponsorshipConnection;\n  /** Repositories the user has starred. */\n  starredRepositories: StarredRepositoryConnection;\n  /** The user's description of what they're currently doing. */\n  status?: Maybe<UserStatus>;\n  /** Suggested names for user lists */\n  suggestedListNames: Array<UserListSuggestion>;\n  /** Repositories the user has contributed to, ordered by contribution rank, plus repositories the user has created */\n  topRepositories: RepositoryConnection;\n  /**\n   * The amount in United States cents (e.g., 500 = $5.00 USD) that this entity has\n   * spent on GitHub to fund sponsorships. Only returns a value when viewed by the\n   * user themselves or by a user who can manage sponsorships for the requested organization.\n   */\n  totalSponsorshipAmountAsSponsorInCents?: Maybe<Scalars['Int']['output']>;\n  /** The user's Twitter username. */\n  twitterUsername?: Maybe<Scalars['String']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this user */\n  url: Scalars['URI']['output'];\n  /** Can the viewer pin repositories and gists to the profile? */\n  viewerCanChangePinnedItems: Scalars['Boolean']['output'];\n  /** Can the current viewer create new projects on this owner. */\n  viewerCanCreateProjects: Scalars['Boolean']['output'];\n  /** Whether or not the viewer is able to follow the user. */\n  viewerCanFollow: Scalars['Boolean']['output'];\n  /** Whether or not the viewer is able to sponsor this user/organization. */\n  viewerCanSponsor: Scalars['Boolean']['output'];\n  /** Whether or not this user is followed by the viewer. Inverse of isFollowingViewer. */\n  viewerIsFollowing: Scalars['Boolean']['output'];\n  /** True if the viewer is sponsoring this user/organization. */\n  viewerIsSponsoring: Scalars['Boolean']['output'];\n  /** A list of repositories the given user is watching. */\n  watching: RepositoryConnection;\n  /** A URL pointing to the user's public website/blog. */\n  websiteUrl?: Maybe<Scalars['URI']['output']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserAnyPinnableItemsArgs = {\n  type?: InputMaybe<PinnableItemType>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserAvatarUrlArgs = {\n  size?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserCanReceiveOrganizationEmailsWhenNotificationsRestrictedArgs = {\n  login: Scalars['String']['input'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserCommitCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserContributionsCollectionArgs = {\n  from?: InputMaybe<Scalars['DateTime']['input']>;\n  organizationID?: InputMaybe<Scalars['ID']['input']>;\n  to?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserEnterprisesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  membershipType?: InputMaybe<EnterpriseMembershipType>;\n  orderBy?: InputMaybe<EnterpriseOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserFollowersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserFollowingArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistArgs = {\n  name: Scalars['String']['input'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserGistsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<GistOrder>;\n  privacy?: InputMaybe<GistPrivacy>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserHovercardArgs = {\n  primarySubjectId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIsSponsoredByArgs = {\n  accountLogin: Scalars['String']['input'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIssueCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueCommentOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserIssuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  filterBy?: InputMaybe<IssueFilters>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<IssueState>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserLifetimeReceivedSponsorshipValuesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorAndLifetimeValueOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserListsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationArgs = {\n  login: Scalars['String']['input'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationVerifiedDomainEmailsArgs = {\n  login: Scalars['String']['input'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserOrganizationsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<OrganizationOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPackagesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  names?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;\n  orderBy?: InputMaybe<PackageOrder>;\n  packageType?: InputMaybe<PackageType>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPinnableItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPinnedItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  types?: InputMaybe<Array<PinnableItemType>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectArgs = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectV2Args = {\n  number: Scalars['Int']['input'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<ProjectOrder>;\n  search?: InputMaybe<Scalars['String']['input']>;\n  states?: InputMaybe<Array<ProjectState>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserProjectsV2Args = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  minPermissionLevel?: InputMaybe<ProjectV2PermissionLevel>;\n  orderBy?: InputMaybe<ProjectV2Order>;\n  query?: InputMaybe<Scalars['String']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPublicKeysArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserPullRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  baseRefName?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  headRefName?: InputMaybe<Scalars['String']['input']>;\n  labels?: InputMaybe<Array<Scalars['String']['input']>>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<IssueOrder>;\n  states?: InputMaybe<Array<PullRequestState>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRecentProjectsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoriesArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  isArchived?: InputMaybe<Scalars['Boolean']['input']>;\n  isFork?: InputMaybe<Scalars['Boolean']['input']>;\n  isLocked?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoriesContributedToArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  contributionTypes?: InputMaybe<Array<InputMaybe<RepositoryContributionType>>>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasIssues?: InputMaybe<Scalars['Boolean']['input']>;\n  includeUserRepositories?: InputMaybe<Scalars['Boolean']['input']>;\n  isLocked?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryArgs = {\n  followRenames?: InputMaybe<Scalars['Boolean']['input']>;\n  name: Scalars['String']['input'];\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryDiscussionCommentsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  onlyAnswers?: InputMaybe<Scalars['Boolean']['input']>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserRepositoryDiscussionsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  answered?: InputMaybe<Scalars['Boolean']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<DiscussionOrder>;\n  repositoryId?: InputMaybe<Scalars['ID']['input']>;\n  states?: InputMaybe<Array<DiscussionState>>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSavedRepliesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SavedReplyOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSocialAccountsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsoringArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorOrder>;\n  tierId?: InputMaybe<Scalars['ID']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorsActivitiesArgs = {\n  actions?: InputMaybe<Array<SponsorsActivityAction>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includeAsSponsor?: InputMaybe<Scalars['Boolean']['input']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorsActivityOrder>;\n  period?: InputMaybe<SponsorsActivityPeriod>;\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  until?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipForViewerAsSponsorArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipForViewerAsSponsorableArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipNewslettersArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorshipNewsletterOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipsAsMaintainerArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  includePrivate?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserSponsorshipsAsSponsorArgs = {\n  activeOnly?: InputMaybe<Scalars['Boolean']['input']>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  maintainerLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  orderBy?: InputMaybe<SponsorshipOrder>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserStarredRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<StarOrder>;\n  ownedByViewer?: InputMaybe<Scalars['Boolean']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserTopRepositoriesArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy: RepositoryOrder;\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserTotalSponsorshipAmountAsSponsorInCentsArgs = {\n  since?: InputMaybe<Scalars['DateTime']['input']>;\n  sponsorableLogins?: InputMaybe<Array<Scalars['String']['input']>>;\n  until?: InputMaybe<Scalars['DateTime']['input']>;\n};\n\n\n/** A user is an individual's account on GitHub that owns repositories and can make new content. */\nexport type UserWatchingArgs = {\n  affiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  hasIssuesEnabled?: InputMaybe<Scalars['Boolean']['input']>;\n  isLocked?: InputMaybe<Scalars['Boolean']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<RepositoryOrder>;\n  ownerAffiliations?: InputMaybe<Array<InputMaybe<RepositoryAffiliation>>>;\n  privacy?: InputMaybe<RepositoryPrivacy>;\n  visibility?: InputMaybe<RepositoryVisibility>;\n};\n\n/** The possible durations that a user can be blocked for. */\nexport enum UserBlockDuration {\n  /** The user was blocked for 1 day */\n  OneDay = 'ONE_DAY',\n  /** The user was blocked for 30 days */\n  OneMonth = 'ONE_MONTH',\n  /** The user was blocked for 7 days */\n  OneWeek = 'ONE_WEEK',\n  /** The user was blocked permanently */\n  Permanent = 'PERMANENT',\n  /** The user was blocked for 3 days */\n  ThreeDays = 'THREE_DAYS'\n}\n\n/** Represents a 'user_blocked' event on a given user. */\nexport type UserBlockedEvent = Node & {\n  /** Identifies the actor who performed the event. */\n  actor?: Maybe<Actor>;\n  /** Number of days that the user was blocked for. */\n  blockDuration: UserBlockDuration;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The Node ID of the UserBlockedEvent object */\n  id: Scalars['ID']['output'];\n  /** The user who was blocked. */\n  subject?: Maybe<User>;\n};\n\n/** A list of users. */\nexport type UserConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edit on user content */\nexport type UserContentEdit = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the date and time when the object was deleted. */\n  deletedAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The actor who deleted this content */\n  deletedBy?: Maybe<Actor>;\n  /** A summary of the changes for this edit */\n  diff?: Maybe<Scalars['String']['output']>;\n  /** When this content was edited */\n  editedAt: Scalars['DateTime']['output'];\n  /** The actor who edited this content */\n  editor?: Maybe<Actor>;\n  /** The Node ID of the UserContentEdit object */\n  id: Scalars['ID']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n};\n\n/** A list of edits to content. */\nexport type UserContentEditConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserContentEditEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<UserContentEdit>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type UserContentEditEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<UserContentEdit>;\n};\n\n/** Represents a user. */\nexport type UserEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n};\n\n/** Email attributes from External Identity */\nexport type UserEmailMetadata = {\n  /** Boolean to identify primary emails */\n  primary?: Maybe<Scalars['Boolean']['output']>;\n  /** Type of email */\n  type?: Maybe<Scalars['String']['output']>;\n  /** Email id */\n  value: Scalars['String']['output'];\n};\n\n/** A user-curated list of repositories */\nexport type UserList = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** The description of this list */\n  description?: Maybe<Scalars['String']['output']>;\n  /** The Node ID of the UserList object */\n  id: Scalars['ID']['output'];\n  /** Whether or not this list is private */\n  isPrivate: Scalars['Boolean']['output'];\n  /** The items associated with this list */\n  items: UserListItemsConnection;\n  /** The date and time at which this list was created or last had items added to it */\n  lastAddedAt: Scalars['DateTime']['output'];\n  /** The name of this list */\n  name: Scalars['String']['output'];\n  /** The slug of this list */\n  slug: Scalars['String']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The user to which this list belongs */\n  user: User;\n};\n\n\n/** A user-curated list of repositories */\nexport type UserListItemsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for UserList. */\nexport type UserListConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserListEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<UserList>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type UserListEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<UserList>;\n};\n\n/** Types that can be added to a user list. */\nexport type UserListItems = Repository;\n\n/** The connection type for UserListItems. */\nexport type UserListItemsConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserListItemsEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<UserListItems>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type UserListItemsEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<UserListItems>;\n};\n\n/** Represents a suggested user list. */\nexport type UserListSuggestion = {\n  /** The ID of the suggested user list */\n  id?: Maybe<Scalars['ID']['output']>;\n  /** The name of the suggested user list */\n  name?: Maybe<Scalars['String']['output']>;\n};\n\n/** The user's description of what they're currently doing. */\nexport type UserStatus = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** An emoji summarizing the user's status. */\n  emoji?: Maybe<Scalars['String']['output']>;\n  /** The status emoji as HTML. */\n  emojiHTML?: Maybe<Scalars['HTML']['output']>;\n  /** If set, the status will not be shown after this date. */\n  expiresAt?: Maybe<Scalars['DateTime']['output']>;\n  /** The Node ID of the UserStatus object */\n  id: Scalars['ID']['output'];\n  /** Whether this status indicates the user is not fully available on GitHub. */\n  indicatesLimitedAvailability: Scalars['Boolean']['output'];\n  /** A brief message describing what the user is doing. */\n  message?: Maybe<Scalars['String']['output']>;\n  /** The organization whose members can see this status. If null, this status is publicly visible. */\n  organization?: Maybe<Organization>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The user who has this status. */\n  user: User;\n};\n\n/** The connection type for UserStatus. */\nexport type UserStatusConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserStatusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<UserStatus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type UserStatusEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<UserStatus>;\n};\n\n/** Ordering options for user status connections. */\nexport type UserStatusOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order user statuses by. */\n  field: UserStatusOrderField;\n};\n\n/** Properties by which user status connections can be ordered. */\nexport enum UserStatusOrderField {\n  /** Order user statuses by when they were updated. */\n  UpdatedAt = 'UPDATED_AT'\n}\n\n/** A domain that can be verified or approved for an organization or an enterprise. */\nexport type VerifiableDomain = Node & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The DNS host name that should be used for verification. */\n  dnsHostName?: Maybe<Scalars['URI']['output']>;\n  /** The unicode encoded domain. */\n  domain: Scalars['URI']['output'];\n  /** Whether a TXT record for verification with the expected host name was found. */\n  hasFoundHostName: Scalars['Boolean']['output'];\n  /** Whether a TXT record for verification with the expected verification token was found. */\n  hasFoundVerificationToken: Scalars['Boolean']['output'];\n  /** The Node ID of the VerifiableDomain object */\n  id: Scalars['ID']['output'];\n  /** Whether or not the domain is approved. */\n  isApproved: Scalars['Boolean']['output'];\n  /** Whether this domain is required to exist for an organization or enterprise policy to be enforced. */\n  isRequiredForPolicyEnforcement: Scalars['Boolean']['output'];\n  /** Whether or not the domain is verified. */\n  isVerified: Scalars['Boolean']['output'];\n  /** The owner of the domain. */\n  owner: VerifiableDomainOwner;\n  /** The punycode encoded domain. */\n  punycodeEncodedDomain: Scalars['URI']['output'];\n  /** The time that the current verification token will expire. */\n  tokenExpirationTime?: Maybe<Scalars['DateTime']['output']>;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The current verification token for the domain. */\n  verificationToken?: Maybe<Scalars['String']['output']>;\n};\n\n/** The connection type for VerifiableDomain. */\nexport type VerifiableDomainConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VerifiableDomainEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<VerifiableDomain>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type VerifiableDomainEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<VerifiableDomain>;\n};\n\n/** Ordering options for verifiable domain connections. */\nexport type VerifiableDomainOrder = {\n  /** The ordering direction. */\n  direction: OrderDirection;\n  /** The field to order verifiable domains by. */\n  field: VerifiableDomainOrderField;\n};\n\n/** Properties by which verifiable domain connections can be ordered. */\nexport enum VerifiableDomainOrderField {\n  /** Order verifiable domains by their creation date. */\n  CreatedAt = 'CREATED_AT',\n  /** Order verifiable domains by the domain name. */\n  Domain = 'DOMAIN'\n}\n\n/** Types that can own a verifiable domain. */\nexport type VerifiableDomainOwner = Enterprise | Organization;\n\n/** Autogenerated input type of VerifyVerifiableDomain */\nexport type VerifyVerifiableDomainInput = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the verifiable domain to verify. */\n  id: Scalars['ID']['input'];\n};\n\n/** Autogenerated return type of VerifyVerifiableDomain. */\nexport type VerifyVerifiableDomainPayload = {\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']['output']>;\n  /** The verifiable domain that was verified. */\n  domain?: Maybe<VerifiableDomain>;\n};\n\n/** A hovercard context with a message describing how the viewer is related. */\nexport type ViewerHovercardContext = HovercardContext & {\n  /** A string describing this context */\n  message: Scalars['String']['output'];\n  /** An octicon to accompany this context */\n  octicon: Scalars['String']['output'];\n  /** Identifies the user who is related to this context. */\n  viewer: User;\n};\n\n/** A subject that may be upvoted. */\nexport type Votable = {\n  /** Number of upvotes that this subject has received. */\n  upvoteCount: Scalars['Int']['output'];\n  /** Whether or not the current user can add or remove an upvote on this subject. */\n  viewerCanUpvote: Scalars['Boolean']['output'];\n  /** Whether or not the current user has already upvoted this subject. */\n  viewerHasUpvoted: Scalars['Boolean']['output'];\n};\n\n/** A workflow contains meta information about an Actions workflow file. */\nexport type Workflow = Node & UniformResourceLocatable & {\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The Node ID of the Workflow object */\n  id: Scalars['ID']['output'];\n  /** The name of the workflow. */\n  name: Scalars['String']['output'];\n  /** The HTTP path for this workflow */\n  resourcePath: Scalars['URI']['output'];\n  /** The runs of the workflow. */\n  runs: WorkflowRunConnection;\n  /** The state of the workflow. */\n  state: WorkflowState;\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this workflow */\n  url: Scalars['URI']['output'];\n};\n\n\n/** A workflow contains meta information about an Actions workflow file. */\nexport type WorkflowRunsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n  orderBy?: InputMaybe<WorkflowRunOrder>;\n};\n\n/** A workflow that must run for this rule to pass */\nexport type WorkflowFileReference = {\n  /** The path to the workflow file */\n  path: Scalars['String']['output'];\n  /** The ref (branch or tag) of the workflow file to use */\n  ref?: Maybe<Scalars['String']['output']>;\n  /** The ID of the repository where the workflow is defined */\n  repositoryId: Scalars['Int']['output'];\n  /** The commit SHA of the workflow file to use */\n  sha?: Maybe<Scalars['String']['output']>;\n};\n\n/** A workflow that must run for this rule to pass */\nexport type WorkflowFileReferenceInput = {\n  /** The path to the workflow file */\n  path: Scalars['String']['input'];\n  /** The ref (branch or tag) of the workflow file to use */\n  ref?: InputMaybe<Scalars['String']['input']>;\n  /** The ID of the repository where the workflow is defined */\n  repositoryId: Scalars['Int']['input'];\n  /** The commit SHA of the workflow file to use */\n  sha?: InputMaybe<Scalars['String']['input']>;\n};\n\n/** A workflow run. */\nexport type WorkflowRun = Node & UniformResourceLocatable & {\n  /** The check suite this workflow run belongs to. */\n  checkSuite: CheckSuite;\n  /** Identifies the date and time when the object was created. */\n  createdAt: Scalars['DateTime']['output'];\n  /** Identifies the primary key from the database. */\n  databaseId?: Maybe<Scalars['Int']['output']>;\n  /** The log of deployment reviews */\n  deploymentReviews: DeploymentReviewConnection;\n  /** The event that triggered the workflow run */\n  event: Scalars['String']['output'];\n  /** The workflow file */\n  file?: Maybe<WorkflowRunFile>;\n  /** The Node ID of the WorkflowRun object */\n  id: Scalars['ID']['output'];\n  /** The pending deployment requests of all check runs in this workflow run */\n  pendingDeploymentRequests: DeploymentRequestConnection;\n  /** The HTTP path for this workflow run */\n  resourcePath: Scalars['URI']['output'];\n  /** A number that uniquely identifies this workflow run in its parent workflow. */\n  runNumber: Scalars['Int']['output'];\n  /** Identifies the date and time when the object was last updated. */\n  updatedAt: Scalars['DateTime']['output'];\n  /** The HTTP URL for this workflow run */\n  url: Scalars['URI']['output'];\n  /** The workflow executed in this workflow run. */\n  workflow: Workflow;\n};\n\n\n/** A workflow run. */\nexport type WorkflowRunDeploymentReviewsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n\n/** A workflow run. */\nexport type WorkflowRunPendingDeploymentRequestsArgs = {\n  after?: InputMaybe<Scalars['String']['input']>;\n  before?: InputMaybe<Scalars['String']['input']>;\n  first?: InputMaybe<Scalars['Int']['input']>;\n  last?: InputMaybe<Scalars['Int']['input']>;\n};\n\n/** The connection type for WorkflowRun. */\nexport type WorkflowRunConnection = {\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<WorkflowRunEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<WorkflowRun>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Identifies the total count of items in the connection. */\n  totalCount: Scalars['Int']['output'];\n};\n\n/** An edge in a connection. */\nexport type WorkflowRunEdge = {\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String']['output'];\n  /** The item at the end of the edge. */\n  node?: Maybe<WorkflowRun>;\n};\n\n/** An executed workflow file for a workflow run. */\nexport type WorkflowRunFile = Node & UniformResourceLocatable & {\n  /** The Node ID of the WorkflowRunFile object */\n  id: Scalars['ID']['output'];\n  /** The path of the workflow file relative to its repository. */\n  path: Scalars['String']['output'];\n  /** The direct link to the file in the repository which stores the workflow file. */\n  repositoryFileUrl: Scalars['URI']['output'];\n  /** The repository name and owner which stores the workflow file. */\n  repositoryName: Scalars['URI']['output'];\n  /** The HTTP path for this workflow run file */\n  resourcePath: Scalars['URI']['output'];\n  /** The parent workflow run execution for this file. */\n  run: WorkflowRun;\n  /** The HTTP URL for this workflow run file */\n  url: Scalars['URI']['output'];\n  /** If the viewer has permissions to push to the repository which stores the workflow. */\n  viewerCanPushRepository: Scalars['Boolean']['output'];\n  /** If the viewer has permissions to read the repository which stores the workflow. */\n  viewerCanReadRepository: Scalars['Boolean']['output'];\n};\n\n/** Ways in which lists of workflow runs can be ordered upon return. */\nexport type WorkflowRunOrder = {\n  /** The direction in which to order workflow runs by the specified field. */\n  direction: OrderDirection;\n  /** The field by which to order workflows. */\n  field: WorkflowRunOrderField;\n};\n\n/** Properties by which workflow run connections can be ordered. */\nexport enum WorkflowRunOrderField {\n  /** Order workflow runs by most recently created */\n  CreatedAt = 'CREATED_AT'\n}\n\n/** The possible states for a workflow. */\nexport enum WorkflowState {\n  /** The workflow is active. */\n  Active = 'ACTIVE',\n  /** The workflow was deleted from the git repository. */\n  Deleted = 'DELETED',\n  /** The workflow was disabled by default on a fork. */\n  DisabledFork = 'DISABLED_FORK',\n  /** The workflow was disabled for inactivity in the repository. */\n  DisabledInactivity = 'DISABLED_INACTIVITY',\n  /** The workflow was disabled manually. */\n  DisabledManually = 'DISABLED_MANUALLY'\n}\n\n/** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */\nexport type WorkflowsParameters = {\n  /** Workflows that must pass for this rule to pass. */\n  workflows: Array<WorkflowFileReference>;\n};\n\n/** Require all changes made to a targeted branch to pass the specified workflows before they can be merged. */\nexport type WorkflowsParametersInput = {\n  /** Workflows that must pass for this rule to pass. */\n  workflows: Array<WorkflowFileReferenceInput>;\n};\n\nexport type FilesQueryVariables = Exact<{\n  owner: Scalars['String']['input'];\n  repo: Scalars['String']['input'];\n  path: Scalars['String']['input'];\n}>;\n\n\nexport type FilesQuery = { repository?: { object?: { __typename: 'Blob' } | { __typename: 'Commit' } | { __typename: 'Tag' } | { __typename: 'Tree', entries?: Array<{ name: string, type: string, language?: { name: string } | null, object?: { __typename: 'Blob', text?: string | null } | { __typename: 'Commit' } | { __typename: 'Tag' } | { __typename: 'Tree' } | null }> | null } | null } | null };\n\nexport type AddCommentMutationVariables = Exact<{\n  subjectId: Scalars['ID']['input'];\n  body: Scalars['String']['input'];\n}>;\n\n\nexport type AddCommentMutation = { addComment?: { commentEdge?: { node?: { id: string } | null } | null } | null };\n\nexport type CreateGitHubDeploymentMutationVariables = Exact<{\n  repositoryId: Scalars['ID']['input'];\n  environmentName: Scalars['String']['input'];\n  refId: Scalars['ID']['input'];\n  payload: Scalars['String']['input'];\n  description?: InputMaybe<Scalars['String']['input']>;\n}>;\n\n\nexport type CreateGitHubDeploymentMutation = { createDeployment?: { deployment?: { id: string, environment?: string | null, state?: DeploymentState | null } | null } | null };\n\nexport type DeleteGitHubDeploymentMutationVariables = Exact<{\n  deploymentId: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteGitHubDeploymentMutation = { deleteDeployment?: { clientMutationId?: string | null } | null };\n\nexport type DeleteGitHubDeploymentAndCommentMutationVariables = Exact<{\n  deploymentId: Scalars['ID']['input'];\n  commentId: Scalars['ID']['input'];\n}>;\n\n\nexport type DeleteGitHubDeploymentAndCommentMutation = { deleteDeployment?: { clientMutationId?: string | null } | null, deleteIssueComment?: { clientMutationId?: string | null } | null };\n\nexport type DeploymentFragmentFragment = { id: string, environment?: string | null, state?: DeploymentState | null };\n\nexport type CreateGitHubDeploymentStatusMutationVariables = Exact<{\n  deploymentId: Scalars['ID']['input'];\n  environment?: InputMaybe<Scalars['String']['input']>;\n  environmentUrl: Scalars['String']['input'];\n  logUrl: Scalars['String']['input'];\n  state: DeploymentStatusState;\n}>;\n\n\nexport type CreateGitHubDeploymentStatusMutation = { createDeploymentStatus?: { deploymentStatus?: { deployment: { id: string, environment?: string | null, state?: DeploymentState | null } } | null } | null };\n\nexport type EnvironmentFragmentFragment = { name: string, id: string };\n\nexport type CreateEnvironmentMutationVariables = Exact<{\n  repositoryId: Scalars['ID']['input'];\n  name: Scalars['String']['input'];\n}>;\n\n\nexport type CreateEnvironmentMutation = { createEnvironment?: { environment?: { name: string, id: string } | null } | null };\n\nexport type GetEnvironmentQueryVariables = Exact<{\n  owner: Scalars['String']['input'];\n  repo: Scalars['String']['input'];\n  environment_name: Scalars['String']['input'];\n  qualifiedName: Scalars['String']['input'];\n}>;\n\n\nexport type GetEnvironmentQuery = { repository?: { environment?: { name: string, id: string } | null, ref?: { id: string, name: string, prefix: string } | null } | null };\n\nexport class TypedDocumentString<TResult, TVariables>\n  extends String\n  implements DocumentTypeDecoration<TResult, TVariables>\n{\n  __apiType?: DocumentTypeDecoration<TResult, TVariables>['__apiType'];\n\n  constructor(private value: string, public __meta__?: Record<string, any> | undefined) {\n    super(value);\n  }\n\n  toString(): string & DocumentTypeDecoration<TResult, TVariables> {\n    return this.value;\n  }\n}\nexport const DeploymentFragmentFragmentDoc = new TypedDocumentString(`\n    fragment DeploymentFragment on Deployment {\n  id\n  environment\n  state\n}\n    `, {\"fragmentName\":\"DeploymentFragment\"}) as unknown as TypedDocumentString<DeploymentFragmentFragment, unknown>;\nexport const EnvironmentFragmentFragmentDoc = new TypedDocumentString(`\n    fragment EnvironmentFragment on Environment {\n  name\n  id\n}\n    `, {\"fragmentName\":\"EnvironmentFragment\"}) as unknown as TypedDocumentString<EnvironmentFragmentFragment, unknown>;\nexport const FilesDocument = new TypedDocumentString(`\n    query Files($owner: String!, $repo: String!, $path: String!) {\n  repository(owner: $owner, name: $repo) {\n    object(expression: $path) {\n      __typename\n      ... on Tree {\n        entries {\n          name\n          type\n          language {\n            name\n          }\n          object {\n            __typename\n            ... on Blob {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `) as unknown as TypedDocumentString<FilesQuery, FilesQueryVariables>;\nexport const AddCommentDocument = new TypedDocumentString(`\n    mutation AddComment($subjectId: ID!, $body: String!) {\n  addComment(input: {subjectId: $subjectId, body: $body}) {\n    commentEdge {\n      node {\n        id\n      }\n    }\n  }\n}\n    `) as unknown as TypedDocumentString<AddCommentMutation, AddCommentMutationVariables>;\nexport const CreateGitHubDeploymentDocument = new TypedDocumentString(`\n    mutation CreateGitHubDeployment($repositoryId: ID!, $environmentName: String!, $refId: ID!, $payload: String!, $description: String) {\n  createDeployment(\n    input: {autoMerge: false, description: $description, environment: $environmentName, refId: $refId, repositoryId: $repositoryId, requiredContexts: [], payload: $payload}\n  ) {\n    deployment {\n      ...DeploymentFragment\n    }\n  }\n}\n    fragment DeploymentFragment on Deployment {\n  id\n  environment\n  state\n}`) as unknown as TypedDocumentString<CreateGitHubDeploymentMutation, CreateGitHubDeploymentMutationVariables>;\nexport const DeleteGitHubDeploymentDocument = new TypedDocumentString(`\n    mutation DeleteGitHubDeployment($deploymentId: ID!) {\n  deleteDeployment(input: {id: $deploymentId}) {\n    clientMutationId\n  }\n}\n    `) as unknown as TypedDocumentString<DeleteGitHubDeploymentMutation, DeleteGitHubDeploymentMutationVariables>;\nexport const DeleteGitHubDeploymentAndCommentDocument = new TypedDocumentString(`\n    mutation DeleteGitHubDeploymentAndComment($deploymentId: ID!, $commentId: ID!) {\n  deleteDeployment(input: {id: $deploymentId}) {\n    clientMutationId\n  }\n  deleteIssueComment(input: {id: $commentId}) {\n    clientMutationId\n  }\n}\n    `) as unknown as TypedDocumentString<DeleteGitHubDeploymentAndCommentMutation, DeleteGitHubDeploymentAndCommentMutationVariables>;\nexport const CreateGitHubDeploymentStatusDocument = new TypedDocumentString(`\n    mutation CreateGitHubDeploymentStatus($deploymentId: ID!, $environment: String, $environmentUrl: String!, $logUrl: String!, $state: DeploymentStatusState!) {\n  createDeploymentStatus(\n    input: {autoInactive: false, deploymentId: $deploymentId, environment: $environment, environmentUrl: $environmentUrl, logUrl: $logUrl, state: $state}\n  ) {\n    deploymentStatus {\n      deployment {\n        ...DeploymentFragment\n      }\n    }\n  }\n}\n    fragment DeploymentFragment on Deployment {\n  id\n  environment\n  state\n}`) as unknown as TypedDocumentString<CreateGitHubDeploymentStatusMutation, CreateGitHubDeploymentStatusMutationVariables>;\nexport const CreateEnvironmentDocument = new TypedDocumentString(`\n    mutation CreateEnvironment($repositoryId: ID!, $name: String!) {\n  createEnvironment(input: {repositoryId: $repositoryId, name: $name}) {\n    environment {\n      ...EnvironmentFragment\n    }\n  }\n}\n    fragment EnvironmentFragment on Environment {\n  name\n  id\n}`) as unknown as TypedDocumentString<CreateEnvironmentMutation, CreateEnvironmentMutationVariables>;\nexport const GetEnvironmentDocument = new TypedDocumentString(`\n    query GetEnvironment($owner: String!, $repo: String!, $environment_name: String!, $qualifiedName: String!) {\n  repository(owner: $owner, name: $repo) {\n    environment(name: $environment_name) {\n      ...EnvironmentFragment\n    }\n    ref(qualifiedName: $qualifiedName) {\n      id\n      name\n      prefix\n    }\n  }\n}\n    fragment EnvironmentFragment on Environment {\n  name\n  id\n}`) as unknown as TypedDocumentString<GetEnvironmentQuery, GetEnvironmentQueryVariables>;", "const API_ENDPOINT = `https://api.cloudflare.com`\n\nexport type CloudflareApiEndpoint = {\n  accountId: string\n  projectName: string\n}\n\nexport const getCloudflareApiEndpoint = ({\n  path,\n  accountId,\n  projectName\n}: {\n  path?: string\n} & CloudflareApiEndpoint): string => {\n  const input: string = [\n    `/client/v4/accounts/${accountId}/pages/projects/${projectName}`,\n    path\n  ]\n    .filter(Boolean)\n    .join('/')\n\n  return new URL(input, API_ENDPOINT).toString()\n}\n\nexport const getCloudflareLogEndpoint = ({\n  id,\n  accountId,\n  projectName\n}: {\n  id: string\n} & CloudflareApiEndpoint): string => {\n  return new URL(\n    `${accountId}/pages/view/${projectName}/${id}`,\n    `https://dash.cloudflare.com`\n  ).toString()\n}\n", "import {error, info, warning} from '@actions/core'\n\nimport {getCloudflareApiEndpoint} from '../api/endpoints.js'\nimport {fetchSuccess} from '../api/fetch-result.js'\nimport {ParseError} from '../api/parse-error.js'\n\nexport const deleteCloudflareDeployment = async ({\n  id,\n  accountId,\n  projectName\n}: {\n  /** deploymentIdentifier */\n  id: string\n  accountId: string\n  projectName: string\n}): Promise<boolean> => {\n  const url = getCloudflareApiEndpoint({\n    path: `deployments/${id}?force=true`,\n    accountId,\n    projectName\n  })\n\n  try {\n    const success = await fetchSuccess(url, {\n      method: 'DELETE'\n    })\n\n    if (success === true) {\n      info(`Cloudflare Deployment Deleted: ${id}`)\n      return true\n    }\n    throw new Error('Cloudflare Delete Deployment: fail')\n  } catch (successError) {\n    if (successError instanceof ParseError && successError.code === 8_000_009) {\n      /**\n       * The cloudflare deployment might have been deleted manually. So return true.\n       * Error response example\n       * {\n       *   \"code\": 8000009,\n       *   \"message\": \"The deployment ID you have specified does not exist. Update the deployment ID and try again. \"\n       * }\n       */\n      warning(`Cloudflare Deployment might have been deleted already: ${id}`)\n      return true\n    }\n    error(`Cloudflare Error deleting deployment: ${id}`)\n    return false\n  }\n}\n", "import {getInput} from '@actions/core'\n\nimport {\n  INPUT_KEY_CLOUDFLARE_API_TOKEN,\n  INPUT_KEY_GITHUB_ENVIRONMENT,\n  INPUT_KEY_GITHUB_TOKEN,\n  INPUT_KEY_WRANGLER_VERSION\n} from '@/input-keys'\n\ntype Inputs = {\n  /** Cloudflare API token */\n  cloudflareApiToken: string\n  /** GitHub API Token */\n  gitHubApiToken: string\n  /** GitHub Environment to use for deployment */\n  gitHubEnvironment?: string\n  /** Wrangler version to use. */\n  wranglerVersion: string\n}\n\nconst getInputs = (): Inputs => {\n  return {\n    cloudflareApiToken: getInput(INPUT_KEY_CLOUDFLARE_API_TOKEN, {\n      required: true\n    }),\n    gitHubApiToken: getInput(INPUT_KEY_GITHUB_TOKEN, {required: true}),\n    gitHubEnvironment:\n      getInput(INPUT_KEY_GITHUB_ENVIRONMENT, {required: false}) || undefined,\n    wranglerVersion: getInput(INPUT_KEY_WRANGLER_VERSION) || '^3.107.2'\n  }\n}\n\ntype UseCommonInputs = ReturnType<typeof getInputs>\n\nlet _inputs: UseCommonInputs\n\nexport const useCommonInputs = (): UseCommonInputs => {\n  return _inputs ?? (_inputs = getInputs())\n}\n", "export const INPUT_KEY_CLOUDFLARE_ACCOUNT_ID = 'cloudflare-account-id'\nexport const INPUT_KEY_CLOUDFLARE_API_TOKEN = 'cloudflare-api-token'\nexport const INPUT_KEY_CLOUDFLARE_PROJECT_NAME = 'cloudflare-project-name'\nexport const INPUT_KEY_DIRECTORY = 'directory'\nexport const INPUT_KEY_GITHUB_ENVIRONMENT = 'github-environment'\nexport const INPUT_KEY_GITHUB_TOKEN = 'github-token'\nexport const INPUT_KEY_WORKING_DIRECTORY = 'working-directory'\nexport const INPUT_KEYS_KEEP_LATEST = 'keep-latest'\nexport const INPUT_KEY_WRANGLER_VERSION = 'wrangler-version'\n\nexport const INPUT_KEYS_REQUIRED = [\n  INPUT_KEY_CLOUDFLARE_ACCOUNT_ID,\n  INPUT_KEY_CLOUDFLARE_API_TOKEN,\n  INPUT_KEY_CLOUDFLARE_PROJECT_NAME,\n  INPUT_KEY_DIRECTORY,\n  INPUT_KEY_GITHUB_ENVIRONMENT,\n  INPUT_KEY_GITHUB_TOKEN,\n  INPUT_KEYS_KEEP_LATEST\n] as const\n", "import {error as coreError} from '@actions/core'\n\nimport type {FetchError, FetchResult} from '../types.js'\n\nimport {ParseError} from './parse-error.js'\n\n/**\n * Source: https://github.com/cloudflare/workers-sdk/blob/55703e52da35b15f5c11f9e3936cc5b1ad5836dc/packages/wrangler/src/cfetch/index.ts#L83-L101\n */\nexport const throwFetchError = (\n  resource: string,\n  response: FetchResult<unknown>\n): never => {\n  const error = new ParseError({\n    text: `A request to the Cloudflare API (${resource}) failed.`,\n    notes: response.errors.map(err => ({\n      text: renderError(err)\n    }))\n  })\n  const code = response.errors[0]?.code\n  if (code) {\n    error.code = code\n  }\n  if (error.notes?.length > 0) {\n    error.notes.map(note => {\n      // GitHub Action annotation\n      coreError(`Cloudflare API: ${note.text}`)\n    })\n  }\n  throw error\n}\n\n/**\n * Source: https://github.com/cloudflare/workers-sdk/blob/55703e52da35b15f5c11f9e3936cc5b1ad5836dc/packages/wrangler/src/cfetch/index.ts#L108-L120\n */\nconst renderError = (err: FetchError, level = 0): string => {\n  const chainedMessages =\n    err.error_chain\n      ?.map(\n        chainedError =>\n          `\\n${'  '.repeat(level)}- ${renderError(chainedError, level + 1)}`\n      )\n      .join('\\n') ?? ''\n  return (\n    (err.code ? `${err.message} [code: ${err.code}]` : err.message) +\n    chainedMessages\n  )\n}\n", "/**\n * Fork of\n * https://github.com/cloudflare/workers-sdk/blob/55703e52da35b15f5c11f9e3936cc5b1ad5836dc/packages/wrangler/src/parse.ts\n */\n\nexport type Message = {\n  text: string\n  location?: Location\n  notes?: Message[]\n  kind?: 'warning' | 'error'\n}\n\nexport type Location = File & {\n  line: number\n  column: number\n  length?: number\n  lineText?: string\n  suggestion?: string\n}\n\nexport type File = {\n  file?: string\n  fileText?: string\n}\n\n/**\n * An error that's thrown when something fails to parse.\n */\nexport class ParseError extends Error implements Message {\n  readonly text: string\n  readonly notes: Message[]\n  readonly location?: Location\n  readonly kind: 'warning' | 'error'\n  code: number | undefined\n\n  constructor({text, notes, location, kind}: Message) {\n    super(text)\n    // eslint-disable-next-line unicorn/custom-error-definition\n    this.name = this.constructor.name\n    this.text = text\n    this.notes = notes ?? []\n    this.location = location\n    this.kind = kind ?? 'error'\n  }\n}\n", "import {useCommonInputs} from '@/common/inputs.js'\n\nimport type {FetchResult} from '../types.js'\n\nimport {throwFetchError} from './fetch-error.js'\n\nexport const fetchResult = async <ResponseType>(\n  resource: string,\n  init: RequestInit = {},\n  queryParams?: URLSearchParams,\n  abortSignal?: AbortSignal\n): Promise<ResponseType> => {\n  const method = init.method ?? 'GET'\n  const {cloudflareApiToken} = useCommonInputs()\n\n  const initFetch = {\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8',\n      Authorization: `Bearer ${cloudflareApiToken}`\n    }\n  }\n\n  const response = (await fetch(resource, {\n    method,\n    ...initFetch,\n    signal: abortSignal\n  }).then(response => response.json())) as FetchResult<ResponseType>\n\n  if (response.success) {\n    if (response.result === null || response.result === undefined) {\n      throw new Error(`Cloudflare API: response missing 'result'`)\n    }\n    return response.result\n  }\n  return throwFetchError(resource, response)\n}\n\nexport const fetchSuccess = async (\n  resource: string,\n  init: RequestInit = {}\n): Promise<boolean> => {\n  const method = init.method ?? 'GET'\n  const {cloudflareApiToken} = useCommonInputs()\n\n  const initFetch = {\n    headers: {\n      'Content-Type': 'application/json;charset=UTF-8',\n      Authorization: `Bearer ${cloudflareApiToken}`\n    }\n  }\n\n  const response = (await fetch(resource, {\n    method,\n    ...initFetch\n  }).then(response => response.json())) as FetchResult<null>\n\n  if (!response.success && response.errors.length > 0) {\n    throwFetchError(resource, response)\n  }\n\n  return response.success\n}\n", "import {debug, isDebug} from '@actions/core'\n\nimport {raise} from '../utils.js'\nimport {getWorkflowEvent} from './workflow-event/workflow-event.js'\n\ninterface Repo {\n  owner: string\n  repo: string\n  /**\n   * The GraphQL identifier of the repository.\n   */\n  node_id: string\n}\n\ninterface Context {\n  /**\n   * The event that triggered the workflow run.\n   */\n  event: ReturnType<typeof getWorkflowEvent>\n  repo: Repo\n  /**\n   * The branch or tag ref that triggered the workflow run.\n   */\n  branch?: string\n  /**\n   * The commit SHA that triggered the workflow. The value of this commit SHA\n   * depends on the event that triggered the workflow.\n   * For more information, see \"Events that trigger workflows.\"\n   *\n   * Example: `ffac537e6cbbf934b08745a378932722df287a53`.\n   */\n  sha: string\n  /**\n   * Returns the GraphQL API URL. For example: https://api.github.com/graphql.\n   */\n  graphqlEndpoint: string\n\n  /**\n   * refs/heads/feature-branch-1.\n   */\n  ref: string\n}\n\nconst getGitHubContext = (): Context => {\n  const event = getWorkflowEvent()\n\n  const repo = ((): Repo => {\n    const [owner, repo] = process.env.GITHUB_REPOSITORY\n      ? process.env.GITHUB_REPOSITORY.split('/')\n      : raise(\n          \"context.repo: requires a GITHUB_REPOSITORY environment variable like 'owner/repo'\"\n        )\n\n    const node_id =\n      'repository' in event.payload\n        ? event.payload.repository?.node_id ||\n          raise('context.repo: no repo node_id in payload')\n        : raise('context.repo: no repo node_id in payload')\n\n    return {owner, repo, node_id}\n  })()\n\n  /**\n   * Depending on what event triggers the action.\n   * The GITHUB_HEAD_REF may be undefined so we fallback to GITHUB_REF_NAME.\n   */\n  const branch = process.env.GITHUB_HEAD_REF || process.env.GITHUB_REF_NAME\n\n  const sha = process.env.GITHUB_SHA\n\n  const graphqlEndpoint = process.env.GITHUB_GRAPHQL_URL\n\n  const ref = ((): Context['ref'] => {\n    let ref = process.env.GITHUB_HEAD_REF\n    if (!ref) {\n      if ('ref' in event.payload) {\n        ref = event.payload.ref // refs/heads/feature-branch-1\n      } else if (event.eventName === 'pull_request') {\n        ref = event.payload.pull_request.head.ref // andykenward/issue18\n      }\n      if (!ref) return raise('context: no ref')\n    }\n    return ref\n  })()\n\n  const context = {\n    event,\n    repo,\n    branch,\n    sha,\n    graphqlEndpoint,\n    ref\n  }\n\n  if (isDebug()) {\n    const debugContext = {\n      ...context,\n      event: 'will debug itself as output is large'\n    }\n\n    debug(`context: ${JSON.stringify(debugContext)}`)\n  }\n\n  return context\n}\n\ntype UseContext = ReturnType<typeof getGitHubContext>\n\nlet _context: UseContext\nexport const useContext = (): UseContext => {\n  return _context ?? (_context = getGitHubContext())\n}\n\nexport const useContextEvent = (): UseContext['event'] => useContext().event\n", "import {exec} from 'node:child_process'\nimport {existsSync} from 'node:fs'\nimport path from 'node:path'\nimport {promisify} from 'node:util'\n\nimport {setFailed} from '@actions/core'\n\nexport const raise = (message: string): never => {\n  throw new Error(message)\n}\n\nexport const raiseFail = (message: string): never => {\n  setFailed(message)\n  throw new Error(message)\n}\n\nexport const execAsync = promisify(exec)\n\nexport const checkWorkingDirectory = (directory = '.'): string => {\n  const p = path.normalize(directory)\n  if (existsSync(p)) {\n    return p\n  }\n  throw new Error(`Directory not found: ${directory}`)\n}\n", "import {strict as assert} from 'node:assert'\nimport {existsSync, readFileSync} from 'node:fs'\nimport {EOL} from 'node:os'\n\nimport {debug, isDebug} from '@actions/core'\n\nimport type {EventName} from '@/types/github/workflow-events.js'\n\nimport {EVENT_NAMES} from '@/types/github/workflow-events.js'\n\nimport type {WorkflowEventExtract, WorkflowEventPayload} from './types.js'\n\n/**\n * Loads the file from the runner that contains the full event webhook payload.\n */\nconst getPayload = (): unknown => {\n  if (process.env.GITHUB_EVENT_PATH) {\n    if (existsSync(process.env.GITHUB_EVENT_PATH)) {\n      return JSON.parse(\n        readFileSync(process.env.GITHUB_EVENT_PATH, {encoding: 'utf8'})\n      )\n    } else {\n      const path = process.env.GITHUB_EVENT_PATH\n      process.stdout.write(`GITHUB_EVENT_PATH ${path} does not exist${EOL}`)\n    }\n  }\n}\n\nexport const getWorkflowEvent = () => {\n  const eventName = process.env.GITHUB_EVENT_NAME as EventName\n\n  assert(\n    EVENT_NAMES.includes(eventName),\n    `eventName ${eventName} is not supported`\n  )\n  /** Assume that the payload matches the eventName */\n  const payload = getPayload() as WorkflowEventPayload<typeof eventName>\n\n  if (isDebug()) {\n    debug(`eventName: ${eventName}`)\n    debug(`payload: ${JSON.stringify(payload)}`)\n  }\n\n  return {\n    eventName,\n    payload\n  } as Readonly<WorkflowEventExtract<typeof eventName>>\n}\n", "import type {\n  BranchProtectionConfigurationEvent,\n  BranchProtectionRuleEvent,\n  CheckRunEvent,\n  CheckSuiteEvent,\n  CodeScanningAlertEvent,\n  CommitCommentEvent,\n  CreateEvent,\n  CustomPropertyEvent,\n  CustomPropertyValuesEvent,\n  DeleteEvent,\n  DependabotAlertEvent,\n  DeployKeyEvent,\n  DeploymentEvent,\n  DeploymentProtectionRuleEvent,\n  DeploymentReviewEvent,\n  DeploymentStatusEvent,\n  DiscussionCommentEvent,\n  DiscussionEvent,\n  ForkEvent,\n  GithubAppAuthorizationEvent,\n  GollumEvent,\n  InstallationEvent,\n  InstallationRepositoriesEvent,\n  InstallationTargetEvent,\n  IssueCommentEvent,\n  IssuesEvent,\n  LabelEvent,\n  MarketplacePurchaseEvent,\n  MemberEvent,\n  MembershipEvent,\n  MergeGroupEvent,\n  MetaEvent,\n  MilestoneEvent,\n  OrganizationEvent,\n  OrgBlockEvent,\n  PackageEvent,\n  PageBuildEvent,\n  PingEvent,\n  ProjectCardEvent,\n  ProjectColumnEvent,\n  ProjectEvent,\n  ProjectsV2ItemEvent,\n  PublicEvent,\n  PullRequestEvent,\n  PullRequestReviewCommentEvent,\n  PullRequestReviewEvent,\n  PullRequestReviewThreadEvent,\n  PushEvent,\n  RegistryPackageEvent,\n  ReleaseEvent,\n  RepositoryDispatchEvent,\n  RepositoryEvent,\n  RepositoryImportEvent,\n  RepositoryVulnerabilityAlertEvent,\n  Schema,\n  SecretScanningAlertEvent,\n  SecretScanningAlertLocationEvent,\n  SecurityAdvisoryEvent,\n  SponsorshipEvent,\n  StarEvent,\n  StatusEvent,\n  TeamAddEvent,\n  TeamEvent,\n  WatchEvent,\n  WebhookEventName,\n  WorkflowDispatchEvent,\n  WorkflowJobEvent,\n  WorkflowRunEvent\n} from '@octokit/webhooks-types'\n\nexport const EVENT_NAMES = [\n  'branch_protection_configuration',\n  'branch_protection_rule',\n  'check_run',\n  'check_suite',\n  'code_scanning_alert',\n  'commit_comment',\n  'create',\n  'custom_property',\n  'custom_property_values',\n  'delete',\n  'dependabot_alert',\n  'deploy_key',\n  'deployment',\n  'deployment_protection_rule',\n  'deployment_review',\n  'deployment_status',\n  'discussion',\n  'discussion_comment',\n  'fork',\n  'github_app_authorization',\n  'gollum',\n  'installation',\n  'installation_repositories',\n  'installation_target',\n  'issue_comment',\n  'issues',\n  'label',\n  'marketplace_purchase',\n  'member',\n  'membership',\n  'merge_group',\n  'meta',\n  'milestone',\n  'org_block',\n  'organization',\n  'package',\n  'page_build',\n  'ping',\n  'project',\n  'project_card',\n  'project_column',\n  'projects_v2_item',\n  'public',\n  'pull_request',\n  'pull_request_review',\n  'pull_request_review_comment',\n  'pull_request_review_thread',\n  'push',\n  'registry_package',\n  'release',\n  'repository',\n  'repository_dispatch',\n  'repository_import',\n  'repository_vulnerability_alert',\n  'secret_scanning_alert',\n  'secret_scanning_alert_location',\n  'security_advisory',\n  'sponsorship',\n  'star',\n  'status',\n  'team',\n  'team_add',\n  'watch',\n  'workflow_dispatch',\n  'workflow_job',\n  'workflow_run'\n] satisfies Array<WebhookEventName>\nexport type EventName = (typeof EVENT_NAMES)[number]\nexport interface WorkflowEventBase {\n  eventName: WebhookEventName\n  payload: Schema\n}\nexport type WorkflowEvent =\n  | {\n      eventName: 'branch_protection_configuration'\n      payload: BranchProtectionConfigurationEvent\n    }\n  | {\n      eventName: 'branch_protection_rule'\n      payload: BranchProtectionRuleEvent\n    }\n  | {\n      eventName: 'check_run'\n      payload: CheckRunEvent\n    }\n  | {\n      eventName: 'check_suite'\n      payload: CheckSuiteEvent\n    }\n  | {\n      eventName: 'code_scanning_alert'\n      payload: CodeScanningAlertEvent\n    }\n  | {\n      eventName: 'commit_comment'\n      payload: CommitCommentEvent\n    }\n  | {\n      eventName: 'create'\n      payload: CreateEvent\n    }\n  | {\n      eventName: 'custom_property'\n      payload: CustomPropertyEvent\n    }\n  | {\n      eventName: 'custom_property_values'\n      payload: CustomPropertyValuesEvent\n    }\n  | {\n      eventName: 'delete'\n      payload: DeleteEvent\n    }\n  | {\n      eventName: 'dependabot_alert'\n      payload: DependabotAlertEvent\n    }\n  | {\n      eventName: 'deploy_key'\n      payload: DeployKeyEvent\n    }\n  | {\n      eventName: 'deployment'\n      payload: DeploymentEvent\n    }\n  | {\n      eventName: 'deployment_protection_rule'\n      payload: DeploymentProtectionRuleEvent\n    }\n  | {\n      eventName: 'deployment_review'\n      payload: DeploymentReviewEvent\n    }\n  | {\n      eventName: 'deployment_status'\n      payload: DeploymentStatusEvent\n    }\n  | {\n      eventName: 'discussion'\n      payload: DiscussionEvent\n    }\n  | {\n      eventName: 'discussion_comment'\n      payload: DiscussionCommentEvent\n    }\n  | {\n      eventName: 'fork'\n      payload: ForkEvent\n    }\n  | {\n      eventName: 'github_app_authorization'\n      payload: GithubAppAuthorizationEvent\n    }\n  | {\n      eventName: 'gollum'\n      payload: GollumEvent\n    }\n  | {\n      eventName: 'installation'\n      payload: InstallationEvent\n    }\n  | {\n      eventName: 'installation_repositories'\n      payload: InstallationRepositoriesEvent\n    }\n  | {\n      eventName: 'installation_target'\n      payload: InstallationTargetEvent\n    }\n  | {\n      eventName: 'issue_comment'\n      payload: IssueCommentEvent\n    }\n  | {\n      eventName: 'issues'\n      payload: IssuesEvent\n    }\n  | {\n      eventName: 'label'\n      payload: LabelEvent\n    }\n  | {\n      eventName: 'marketplace_purchase'\n      payload: MarketplacePurchaseEvent\n    }\n  | {\n      eventName: 'member'\n      payload: MemberEvent\n    }\n  | {\n      eventName: 'membership'\n      payload: MembershipEvent\n    }\n  | {\n      eventName: 'merge_group'\n      payload: MergeGroupEvent\n    }\n  | {\n      eventName: 'meta'\n      payload: MetaEvent\n    }\n  | {\n      eventName: 'milestone'\n      payload: MilestoneEvent\n    }\n  | {\n      eventName: 'org_block'\n      payload: OrgBlockEvent\n    }\n  | {\n      eventName: 'organization'\n      payload: OrganizationEvent\n    }\n  | {\n      eventName: 'package'\n      payload: PackageEvent\n    }\n  | {\n      eventName: 'page_build'\n      payload: PageBuildEvent\n    }\n  | {\n      eventName: 'ping'\n      payload: PingEvent\n    }\n  | {\n      eventName: 'project'\n      payload: ProjectEvent\n    }\n  | {\n      eventName: 'project_card'\n      payload: ProjectCardEvent\n    }\n  | {\n      eventName: 'project_column'\n      payload: ProjectColumnEvent\n    }\n  | {\n      eventName: 'projects_v2_item'\n      payload: ProjectsV2ItemEvent\n    }\n  | {\n      eventName: 'public'\n      payload: PublicEvent\n    }\n  | {\n      eventName: 'pull_request'\n      payload: PullRequestEvent\n    }\n  | {\n      eventName: 'pull_request_review'\n      payload: PullRequestReviewEvent\n    }\n  | {\n      eventName: 'pull_request_review_comment'\n      payload: PullRequestReviewCommentEvent\n    }\n  | {\n      eventName: 'pull_request_review_thread'\n      payload: PullRequestReviewThreadEvent\n    }\n  | {\n      eventName: 'push'\n      payload: PushEvent\n    }\n  | {\n      eventName: 'registry_package'\n      payload: RegistryPackageEvent\n    }\n  | {\n      eventName: 'release'\n      payload: ReleaseEvent\n    }\n  | {\n      eventName: 'repository'\n      payload: RepositoryEvent\n    }\n  | {\n      eventName: 'repository_dispatch'\n      payload: RepositoryDispatchEvent\n    }\n  | {\n      eventName: 'repository_import'\n      payload: RepositoryImportEvent\n    }\n  | {\n      eventName: 'repository_vulnerability_alert'\n      payload: RepositoryVulnerabilityAlertEvent\n    }\n  | {\n      eventName: 'secret_scanning_alert'\n      payload: SecretScanningAlertEvent\n    }\n  | {\n      eventName: 'secret_scanning_alert_location'\n      payload: SecretScanningAlertLocationEvent\n    }\n  | {\n      eventName: 'security_advisory'\n      payload: SecurityAdvisoryEvent\n    }\n  | {\n      eventName: 'sponsorship'\n      payload: SponsorshipEvent\n    }\n  | {\n      eventName: 'star'\n      payload: StarEvent\n    }\n  | {\n      eventName: 'status'\n      payload: StatusEvent\n    }\n  | {\n      eventName: 'team'\n      payload: TeamEvent\n    }\n  | {\n      eventName: 'team_add'\n      payload: TeamAddEvent\n    }\n  | {\n      eventName: 'watch'\n      payload: WatchEvent\n    }\n  | {\n      eventName: 'workflow_dispatch'\n      payload: WorkflowDispatchEvent\n    }\n  | {\n      eventName: 'workflow_job'\n      payload: WorkflowJobEvent\n    }\n  | {\n      eventName: 'workflow_run'\n      payload: WorkflowRunEvent\n    }\n", "import type {GraphQLError} from 'graphql'\n\nimport type {TypedDocumentString} from '@/gql/graphql.js'\n\nimport {useCommonInputs} from '@/common/inputs.js'\n\nimport {useContext} from '../context.js'\n\n/**\n * https://github.com/octokit/graphql.js/blob/c067d9c5da27e0147d25fa215192f1d8be7e1b72/src/types.ts#L55C1-L72C3\n */\nexport type GitHubGraphQLError = Partial<GraphQLError> & {\n  /**\n   * NOT_FOUND\n   */\n  type: string\n}\n\nexport type GraphqlResponse<T = unknown> = {\n  data: T\n  errors?: GitHubGraphQLError[]\n}\nexport type Variables = Record<string, unknown>\n\ntype Options = {\n  /**\n   * Should request throw error when graphql returns errors\n   * Default is true\n   */\n  errorThrows?: boolean\n}\n\n// | string\n// | DocumentNode\n// | TypedDocumentNode<TData, TVariables>\n\nexport type RequestParams<TData, TVariables> = {\n  query: string | TypedDocumentString<TData, TVariables>\n  variables?: TVariables\n  options?: Options\n}\n\nexport const request = async <\n  TData = unknown,\n  TVariables extends Variables = Variables\n>(\n  params: RequestParams<TData, TVariables>\n): Promise<GraphqlResponse<TData>> => {\n  const {query, variables, options} = params\n  const {errorThrows} = options || {errorThrows: true}\n  const {gitHubApiToken} = useCommonInputs()\n  const {graphqlEndpoint} = useContext()\n\n  return fetch(graphqlEndpoint, {\n    method: 'POST',\n    headers: {\n      authorization: `bearer ${gitHubApiToken}`,\n      'Content-Type': 'application/json',\n      Accept: 'application/vnd.github.flash-preview+json'\n    },\n    body: JSON.stringify({query: query.toString(), variables})\n  })\n    .then(res => res.json() as Promise<GraphqlResponse<TData>>)\n    .then(res => {\n      if (res.errors && errorThrows) {\n        throw new Error(JSON.stringify(res.errors))\n      }\n      return res\n    })\n}\n", "/* eslint-disable */\nimport * as types from './graphql.js';\n\n\n\n/**\n * Map of all GraphQL operations in the project.\n *\n * This map has several performance disadvantages:\n * 1. It is not tree-shakeable, so it will include all operations in the project.\n * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.\n * 3. It does not support dead code elimination, so it will add unused operations.\n *\n * Therefore it is highly recommended to use the babel or swc plugin for production.\n * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size\n */\ntype Documents = {\n    \"\\n      query Files($owner: String!, $repo: String!, $path: String!) {\\n        repository(owner: $owner, name: $repo) {\\n          object(expression: $path) {\\n            __typename\\n            ... on Tree {\\n              entries {\\n                name\\n                type\\n                language {\\n                  name\\n                }\\n                object {\\n                  __typename\\n                  ... on Blob {\\n                    text\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    \": typeof types.FilesDocument,\n    \"\\n  mutation AddComment($subjectId: ID!, $body: String!) {\\n    addComment(input: {subjectId: $subjectId, body: $body}) {\\n      commentEdge {\\n        node {\\n          id\\n        }\\n      }\\n    }\\n  }\\n\": typeof types.AddCommentDocument,\n    \"\\n  mutation CreateGitHubDeployment(\\n    $repositoryId: ID!\\n    $environmentName: String!\\n    $refId: ID!\\n    $payload: String!\\n    $description: String\\n  ) {\\n    createDeployment(\\n      input: {\\n        autoMerge: false\\n        description: $description\\n        environment: $environmentName\\n        refId: $refId\\n        repositoryId: $repositoryId\\n        requiredContexts: []\\n        payload: $payload\\n      }\\n    ) {\\n      deployment {\\n        ...DeploymentFragment\\n      }\\n    }\\n  }\\n\": typeof types.CreateGitHubDeploymentDocument,\n    \"\\n  mutation DeleteGitHubDeployment($deploymentId: ID!) {\\n    deleteDeployment(input: {id: $deploymentId}) {\\n      clientMutationId\\n    }\\n  }\\n\": typeof types.DeleteGitHubDeploymentDocument,\n    \"\\n  mutation DeleteGitHubDeploymentAndComment(\\n    $deploymentId: ID!\\n    $commentId: ID!\\n  ) {\\n    deleteDeployment(input: {id: $deploymentId}) {\\n      clientMutationId\\n    }\\n    deleteIssueComment(input: {id: $commentId}) {\\n      clientMutationId\\n    }\\n  }\\n\": typeof types.DeleteGitHubDeploymentAndCommentDocument,\n    \"\\n  fragment DeploymentFragment on Deployment {\\n    id\\n    environment\\n    state\\n  }\\n\": typeof types.DeploymentFragmentFragmentDoc,\n    \"\\n  mutation CreateGitHubDeploymentStatus(\\n    $deploymentId: ID!\\n    $environment: String\\n    $environmentUrl: String!\\n    $logUrl: String!\\n    $state: DeploymentStatusState!\\n  ) {\\n    createDeploymentStatus(\\n      input: {\\n        autoInactive: false\\n        deploymentId: $deploymentId\\n        environment: $environment\\n        environmentUrl: $environmentUrl\\n        logUrl: $logUrl\\n        state: $state\\n      }\\n    ) {\\n      deploymentStatus {\\n        deployment {\\n          ...DeploymentFragment\\n        }\\n      }\\n    }\\n  }\\n\": typeof types.CreateGitHubDeploymentStatusDocument,\n    \"\\n  fragment EnvironmentFragment on Environment {\\n    name\\n    id\\n  }\\n\": typeof types.EnvironmentFragmentFragmentDoc,\n    \"\\n  mutation CreateEnvironment($repositoryId: ID!, $name: String!) {\\n    createEnvironment(input: {repositoryId: $repositoryId, name: $name}) {\\n      environment {\\n        ...EnvironmentFragment\\n      }\\n    }\\n  }\\n\": typeof types.CreateEnvironmentDocument,\n    \"\\n  query GetEnvironment(\\n    $owner: String!\\n    $repo: String!\\n    $environment_name: String!\\n    $qualifiedName: String!\\n  ) {\\n    repository(owner: $owner, name: $repo) {\\n      environment(name: $environment_name) {\\n        ...EnvironmentFragment\\n      }\\n      ref(qualifiedName: $qualifiedName) {\\n        id\\n        name\\n        prefix\\n      }\\n    }\\n  }\\n\": typeof types.GetEnvironmentDocument,\n};\nconst documents: Documents = {\n    \"\\n      query Files($owner: String!, $repo: String!, $path: String!) {\\n        repository(owner: $owner, name: $repo) {\\n          object(expression: $path) {\\n            __typename\\n            ... on Tree {\\n              entries {\\n                name\\n                type\\n                language {\\n                  name\\n                }\\n                object {\\n                  __typename\\n                  ... on Blob {\\n                    text\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    \": types.FilesDocument,\n    \"\\n  mutation AddComment($subjectId: ID!, $body: String!) {\\n    addComment(input: {subjectId: $subjectId, body: $body}) {\\n      commentEdge {\\n        node {\\n          id\\n        }\\n      }\\n    }\\n  }\\n\": types.AddCommentDocument,\n    \"\\n  mutation CreateGitHubDeployment(\\n    $repositoryId: ID!\\n    $environmentName: String!\\n    $refId: ID!\\n    $payload: String!\\n    $description: String\\n  ) {\\n    createDeployment(\\n      input: {\\n        autoMerge: false\\n        description: $description\\n        environment: $environmentName\\n        refId: $refId\\n        repositoryId: $repositoryId\\n        requiredContexts: []\\n        payload: $payload\\n      }\\n    ) {\\n      deployment {\\n        ...DeploymentFragment\\n      }\\n    }\\n  }\\n\": types.CreateGitHubDeploymentDocument,\n    \"\\n  mutation DeleteGitHubDeployment($deploymentId: ID!) {\\n    deleteDeployment(input: {id: $deploymentId}) {\\n      clientMutationId\\n    }\\n  }\\n\": types.DeleteGitHubDeploymentDocument,\n    \"\\n  mutation DeleteGitHubDeploymentAndComment(\\n    $deploymentId: ID!\\n    $commentId: ID!\\n  ) {\\n    deleteDeployment(input: {id: $deploymentId}) {\\n      clientMutationId\\n    }\\n    deleteIssueComment(input: {id: $commentId}) {\\n      clientMutationId\\n    }\\n  }\\n\": types.DeleteGitHubDeploymentAndCommentDocument,\n    \"\\n  fragment DeploymentFragment on Deployment {\\n    id\\n    environment\\n    state\\n  }\\n\": types.DeploymentFragmentFragmentDoc,\n    \"\\n  mutation CreateGitHubDeploymentStatus(\\n    $deploymentId: ID!\\n    $environment: String\\n    $environmentUrl: String!\\n    $logUrl: String!\\n    $state: DeploymentStatusState!\\n  ) {\\n    createDeploymentStatus(\\n      input: {\\n        autoInactive: false\\n        deploymentId: $deploymentId\\n        environment: $environment\\n        environmentUrl: $environmentUrl\\n        logUrl: $logUrl\\n        state: $state\\n      }\\n    ) {\\n      deploymentStatus {\\n        deployment {\\n          ...DeploymentFragment\\n        }\\n      }\\n    }\\n  }\\n\": types.CreateGitHubDeploymentStatusDocument,\n    \"\\n  fragment EnvironmentFragment on Environment {\\n    name\\n    id\\n  }\\n\": types.EnvironmentFragmentFragmentDoc,\n    \"\\n  mutation CreateEnvironment($repositoryId: ID!, $name: String!) {\\n    createEnvironment(input: {repositoryId: $repositoryId, name: $name}) {\\n      environment {\\n        ...EnvironmentFragment\\n      }\\n    }\\n  }\\n\": types.CreateEnvironmentDocument,\n    \"\\n  query GetEnvironment(\\n    $owner: String!\\n    $repo: String!\\n    $environment_name: String!\\n    $qualifiedName: String!\\n  ) {\\n    repository(owner: $owner, name: $repo) {\\n      environment(name: $environment_name) {\\n        ...EnvironmentFragment\\n      }\\n      ref(qualifiedName: $qualifiedName) {\\n        id\\n        name\\n        prefix\\n      }\\n    }\\n  }\\n\": types.GetEnvironmentDocument,\n};\n\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n      query Files($owner: String!, $repo: String!, $path: String!) {\\n        repository(owner: $owner, name: $repo) {\\n          object(expression: $path) {\\n            __typename\\n            ... on Tree {\\n              entries {\\n                name\\n                type\\n                language {\\n                  name\\n                }\\n                object {\\n                  __typename\\n                  ... on Blob {\\n                    text\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    \"): typeof import('./graphql.js').FilesDocument;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  mutation AddComment($subjectId: ID!, $body: String!) {\\n    addComment(input: {subjectId: $subjectId, body: $body}) {\\n      commentEdge {\\n        node {\\n          id\\n        }\\n      }\\n    }\\n  }\\n\"): typeof import('./graphql.js').AddCommentDocument;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  mutation CreateGitHubDeployment(\\n    $repositoryId: ID!\\n    $environmentName: String!\\n    $refId: ID!\\n    $payload: String!\\n    $description: String\\n  ) {\\n    createDeployment(\\n      input: {\\n        autoMerge: false\\n        description: $description\\n        environment: $environmentName\\n        refId: $refId\\n        repositoryId: $repositoryId\\n        requiredContexts: []\\n        payload: $payload\\n      }\\n    ) {\\n      deployment {\\n        ...DeploymentFragment\\n      }\\n    }\\n  }\\n\"): typeof import('./graphql.js').CreateGitHubDeploymentDocument;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  mutation DeleteGitHubDeployment($deploymentId: ID!) {\\n    deleteDeployment(input: {id: $deploymentId}) {\\n      clientMutationId\\n    }\\n  }\\n\"): typeof import('./graphql.js').DeleteGitHubDeploymentDocument;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  mutation DeleteGitHubDeploymentAndComment(\\n    $deploymentId: ID!\\n    $commentId: ID!\\n  ) {\\n    deleteDeployment(input: {id: $deploymentId}) {\\n      clientMutationId\\n    }\\n    deleteIssueComment(input: {id: $commentId}) {\\n      clientMutationId\\n    }\\n  }\\n\"): typeof import('./graphql.js').DeleteGitHubDeploymentAndCommentDocument;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  fragment DeploymentFragment on Deployment {\\n    id\\n    environment\\n    state\\n  }\\n\"): typeof import('./graphql.js').DeploymentFragmentFragmentDoc;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  mutation CreateGitHubDeploymentStatus(\\n    $deploymentId: ID!\\n    $environment: String\\n    $environmentUrl: String!\\n    $logUrl: String!\\n    $state: DeploymentStatusState!\\n  ) {\\n    createDeploymentStatus(\\n      input: {\\n        autoInactive: false\\n        deploymentId: $deploymentId\\n        environment: $environment\\n        environmentUrl: $environmentUrl\\n        logUrl: $logUrl\\n        state: $state\\n      }\\n    ) {\\n      deploymentStatus {\\n        deployment {\\n          ...DeploymentFragment\\n        }\\n      }\\n    }\\n  }\\n\"): typeof import('./graphql.js').CreateGitHubDeploymentStatusDocument;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  fragment EnvironmentFragment on Environment {\\n    name\\n    id\\n  }\\n\"): typeof import('./graphql.js').EnvironmentFragmentFragmentDoc;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  mutation CreateEnvironment($repositoryId: ID!, $name: String!) {\\n    createEnvironment(input: {repositoryId: $repositoryId, name: $name}) {\\n      environment {\\n        ...EnvironmentFragment\\n      }\\n    }\\n  }\\n\"): typeof import('./graphql.js').CreateEnvironmentDocument;\n/**\n * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.\n */\nexport function graphql(source: \"\\n  query GetEnvironment(\\n    $owner: String!\\n    $repo: String!\\n    $environment_name: String!\\n    $qualifiedName: String!\\n  ) {\\n    repository(owner: $owner, name: $repo) {\\n      environment(name: $environment_name) {\\n        ...EnvironmentFragment\\n      }\\n      ref(qualifiedName: $qualifiedName) {\\n        id\\n        name\\n        prefix\\n      }\\n    }\\n  }\\n\"): typeof import('./graphql.js').GetEnvironmentDocument;\n\n\nexport function graphql(source: string) {\n  return (documents as any)[source] ?? {};\n}\n", "import {graphql} from '@/gql/gql.js'\n\nexport const MutationDeleteGitHubDeployment = graphql(/* GraphQL */ `\n  mutation DeleteGitHubDeployment($deploymentId: ID!) {\n    deleteDeployment(input: {id: $deploymentId}) {\n      clientMutationId\n    }\n  }\n`)\n\nexport const MutationDeleteGitHubDeploymentAndComment = graphql(/* GraphQL */ `\n  mutation DeleteGitHubDeploymentAndComment(\n    $deploymentId: ID!\n    $commentId: ID!\n  ) {\n    deleteDeployment(input: {id: $deploymentId}) {\n      clientMutationId\n    }\n    deleteIssueComment(input: {id: $commentId}) {\n      clientMutationId\n    }\n  }\n`)\n", "import {getInput} from '@actions/core'\n\nimport {\n  INPUT_KEY_CLOUDFLARE_ACCOUNT_ID,\n  INPUT_KEY_CLOUDFLARE_PROJECT_NAME\n} from '@/input-keys'\n\nimport type {getGitHubDeployments} from './get.js'\nimport type {\n  PayloadGithubDeployment,\n  PayloadGithubDeploymentV2\n} from './types.js'\n\nexport type Payload = Awaited<\n  ReturnType<typeof getGitHubDeployments>\n>[0]['payload']\n\nfunction isObject(obj: unknown): obj is {[key: string]: unknown} {\n  return typeof obj === 'object' && obj !== null\n}\n\nexport const isPayload = (\n  payload: Payload\n): payload is PayloadGithubDeployment => {\n  const parsedPayload =\n    typeof payload === 'string' ? JSON.parse(payload) : payload\n\n  if (!isObject(parsedPayload)) return false\n\n  const requiredKeys: Array<keyof PayloadGithubDeployment> = [\n    'cloudflareId',\n    'url'\n  ]\n\n  return requiredKeys.every(key => key in parsedPayload)\n}\n\nexport const isPayloadV2 = (\n  payload: Payload\n): payload is PayloadGithubDeploymentV2 => {\n  const parsedPayload =\n    typeof payload === 'string' ? JSON.parse(payload) : payload\n\n  if (!isObject(parsedPayload)) return false\n\n  const requiredKeys: Array<keyof PayloadGithubDeploymentV2> = [\n    'url',\n    'cloudflare'\n  ]\n\n  if (requiredKeys.every(key => key in parsedPayload)) {\n    const cloudflare = parsedPayload.cloudflare\n    if (!isObject(cloudflare)) return false\n\n    const requiredKeys: Array<keyof PayloadGithubDeploymentV2['cloudflare']> = [\n      'id',\n      'accountId',\n      'projectName'\n    ]\n\n    return requiredKeys.every(key => key in cloudflare)\n  }\n\n  return false\n}\n\nexport const getPayload = (payload: Payload): PayloadGithubDeploymentV2 => {\n  if (isPayloadV2(payload)) {\n    return payload\n  }\n\n  if (isPayload(payload)) {\n    /**\n     * To support old payloads we need to get the Cloudflare Account Id and Cloudflare Project Name.\n     */\n    const accountId = getInput(INPUT_KEY_CLOUDFLARE_ACCOUNT_ID, {\n      required: true\n    })\n    const projectName = getInput(INPUT_KEY_CLOUDFLARE_PROJECT_NAME, {\n      required: true\n    })\n\n    const {cloudflareId, ...others} = payload\n\n    return {\n      cloudflare: {\n        id: cloudflareId,\n        accountId,\n        projectName\n      },\n      ...others\n    }\n  }\n\n  throw new Error('Payload is not valid')\n}\n", "import {graphql} from '@/gql/gql.js'\n\n/**\n * GitHub GraphQL Schema doesn't have Deployment Preview yet.\n * @see {@link ../../../schema/github-preview/schema.graphql}\n * @see {@link https://docs.github.com/en/graphql/overview/schema-previews#deployments-preview | Deployments Preview}\n * @see {@link https://docs.github.com/en/graphql/reference/mutations#createdeploymentstatus | createdeploymentstatus}\n */\nexport const MutationCreateGitHubDeploymentStatus = graphql(/* GraphQL */ `\n  mutation CreateGitHubDeploymentStatus(\n    $deploymentId: ID!\n    $environment: String\n    $environmentUrl: String!\n    $logUrl: String!\n    $state: DeploymentStatusState!\n  ) {\n    createDeploymentStatus(\n      input: {\n        autoInactive: false\n        deploymentId: $deploymentId\n        environment: $environment\n        environmentUrl: $environmentUrl\n        logUrl: $logUrl\n        state: $state\n      }\n    ) {\n      deploymentStatus {\n        deployment {\n          ...DeploymentFragment\n        }\n      }\n    }\n  }\n`)\n", "export function lowercaseKeys(object) {\n  if (!object) {\n    return {};\n  }\n\n  return Object.keys(object).reduce((newObj, key) => {\n    newObj[key.toLowerCase()] = object[key];\n    return newObj;\n  }, {});\n}\n", "export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n", "import isPlainObject from \"is-plain-obj\";\n\nexport function mergeDeep(defaults, options) {\n  const result = Object.assign({}, defaults);\n\n  Object.keys(options).forEach((key) => {\n    if (isPlainObject(options[key])) {\n      if (!(key in defaults)) Object.assign(result, { [key]: options[key] });\n      else result[key] = mergeDeep(defaults[key], options[key]);\n    } else {\n      Object.assign(result, { [key]: options[key] });\n    }\n  });\n\n  return result;\n}\n", "export function removeUndefinedProperties(obj) {\n  for (const key in obj) {\n    if (obj[key] === undefined) {\n      delete obj[key];\n    }\n  }\n  return obj;\n}\n", "import { lowercaseKeys } from \"./util/lowercase-keys.js\";\nimport { mergeDeep } from \"./util/merge-deep.js\";\nimport { removeUndefinedProperties } from \"./util/remove-undefined-properties.js\";\n\nexport function merge(defaults, route, options) {\n  if (typeof route === \"string\") {\n    let [method, url] = route.split(\" \");\n    options = Object.assign(url ? { method, url } : { url: method }, options);\n  } else {\n    options = Object.assign({}, route);\n  }\n\n  // lowercase header names before merging with defaults to avoid duplicates\n  options.headers = lowercaseKeys(options.headers);\n\n  // remove properties with undefined values before merging\n  removeUndefinedProperties(options);\n  removeUndefinedProperties(options.headers);\n\n  const mergedOptions = mergeDeep(defaults || {}, options);\n\n  // mediaType.previews arrays are merged, instead of overwritten\n  if (defaults && defaults.mediaType.previews.length) {\n    mergedOptions.mediaType.previews = defaults.mediaType.previews\n      .filter((preview) => !mergedOptions.mediaType.previews.includes(preview))\n      .concat(mergedOptions.mediaType.previews);\n  }\n\n  mergedOptions.mediaType.previews = mergedOptions.mediaType.previews.map(\n    (preview) => preview.replace(/-preview/, \"\")\n  );\n\n  return mergedOptions;\n}\n", "export function addQueryParameters(url, parameters) {\n  const separator = /\\?/.test(url) ? \"&\" : \"?\";\n  const names = Object.keys(parameters);\n\n  if (names.length === 0) {\n    return url;\n  }\n\n  const query = names\n    .map((name) => {\n      if (name === \"q\") {\n        return \"q=\" + parameters.q.split(\"+\").map(encodeURIComponent).join(\"+\");\n      }\n\n      return `${name}=${encodeURIComponent(parameters[name])}`;\n    })\n    .join(\"&\");\n\n  return url + separator + query;\n}\n", "const urlVariableRegex = /\\{[^}]+\\}/g;\n\nfunction removeNonChars(variableName) {\n  return variableName.replace(/^\\W+|\\W+$/g, \"\").split(/,/);\n}\n\nexport function extractUrlVariableNames(url) {\n  const matches = url.match(urlVariableRegex);\n\n  if (!matches) {\n    return [];\n  }\n\n  return matches.map(removeNonChars).reduce((a, b) => a.concat(b), []);\n}\n", "export function omit(object, keysToOmit) {\n  return Object.keys(object)\n    .filter((option) => !keysToOmit.includes(option))\n    .reduce((obj, key) => {\n      obj[key] = object[key];\n      return obj;\n    }, {});\n}\n", "// Based on https://github.com/bramstein/url-template, licensed under BSD\n// TODO: create separate package.\n//\n// Copyright (c) 2012-2014, Bram Stein\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions\n// are met:\n\n//  1. Redistributions of source code must retain the above copyright\n//     notice, this list of conditions and the following disclaimer.\n//  2. Redistributions in binary form must reproduce the above copyright\n//     notice, this list of conditions and the following disclaimer in the\n//     documentation and/or other materials provided with the distribution.\n//  3. The name of the author may not be used to endorse or promote products\n//     derived from this software without specific prior written permission.\n\n// THIS SOFTWARE IS PROVIDED BY THE AUTHOR \"AS IS\" AND ANY EXPRESS OR IMPLIED\n// WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n// MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n// EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* c8 ignore start */\n\nfunction encodeReserved(str) {\n  return str\n    .split(/(%[0-9A-Fa-f]{2})/g)\n    .map(function (part) {\n      if (!/%[0-9A-Fa-f]/.test(part)) {\n        part = encodeURI(part).replace(/%5B/g, \"[\").replace(/%5D/g, \"]\");\n      }\n      return part;\n    })\n    .join(\"\");\n}\n\nfunction encodeUnreserved(str) {\n  return encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n    return \"%\" + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n}\n\nfunction encodeValue(operator, value, key) {\n  value =\n    operator === \"+\" || operator === \"#\"\n      ? encodeReserved(value)\n      : encodeUnreserved(value);\n\n  if (key) {\n    return encodeUnreserved(key) + \"=\" + value;\n  } else {\n    return value;\n  }\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isKeyOperator(operator) {\n  return operator === \";\" || operator === \"&\" || operator === \"?\";\n}\n\nfunction getValues(context, operator, key, modifier) {\n  var value = context[key],\n    result = [];\n\n  if (isDefined(value) && value !== \"\") {\n    if (\n      typeof value === \"string\" ||\n      typeof value === \"number\" ||\n      typeof value === \"boolean\"\n    ) {\n      value = value.toString();\n\n      if (modifier && modifier !== \"*\") {\n        value = value.substring(0, parseInt(modifier, 10));\n      }\n\n      result.push(\n        encodeValue(operator, value, isKeyOperator(operator) ? key : \"\")\n      );\n    } else {\n      if (modifier === \"*\") {\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function (value) {\n            result.push(\n              encodeValue(operator, value, isKeyOperator(operator) ? key : \"\")\n            );\n          });\n        } else {\n          Object.keys(value).forEach(function (k) {\n            if (isDefined(value[k])) {\n              result.push(encodeValue(operator, value[k], k));\n            }\n          });\n        }\n      } else {\n        const tmp = [];\n\n        if (Array.isArray(value)) {\n          value.filter(isDefined).forEach(function (value) {\n            tmp.push(encodeValue(operator, value));\n          });\n        } else {\n          Object.keys(value).forEach(function (k) {\n            if (isDefined(value[k])) {\n              tmp.push(encodeUnreserved(k));\n              tmp.push(encodeValue(operator, value[k].toString()));\n            }\n          });\n        }\n\n        if (isKeyOperator(operator)) {\n          result.push(encodeUnreserved(key) + \"=\" + tmp.join(\",\"));\n        } else if (tmp.length !== 0) {\n          result.push(tmp.join(\",\"));\n        }\n      }\n    }\n  } else {\n    if (operator === \";\") {\n      if (isDefined(value)) {\n        result.push(encodeUnreserved(key));\n      }\n    } else if (value === \"\" && (operator === \"&\" || operator === \"?\")) {\n      result.push(encodeUnreserved(key) + \"=\");\n    } else if (value === \"\") {\n      result.push(\"\");\n    }\n  }\n  return result;\n}\n\nexport function parseUrl(template) {\n  return {\n    expand: expand.bind(null, template),\n  };\n}\n\nfunction expand(template, context) {\n  var operators = [\"+\", \"#\", \".\", \"/\", \";\", \"?\", \"&\"];\n\n  return template.replace(\n    /\\{([^\\{\\}]+)\\}|([^\\{\\}]+)/g,\n    function (_, expression, literal) {\n      if (expression) {\n        let operator = \"\";\n        const values = [];\n\n        if (operators.indexOf(expression.charAt(0)) !== -1) {\n          operator = expression.charAt(0);\n          expression = expression.substr(1);\n        }\n\n        expression.split(/,/g).forEach(function (variable) {\n          var tmp = /([^:\\*]*)(?::(\\d+)|(\\*))?/.exec(variable);\n          values.push(getValues(context, operator, tmp[1], tmp[2] || tmp[3]));\n        });\n\n        if (operator && operator !== \"+\") {\n          var separator = \",\";\n\n          if (operator === \"?\") {\n            separator = \"&\";\n          } else if (operator !== \"#\") {\n            separator = operator;\n          }\n          return (values.length !== 0 ? operator : \"\") + values.join(separator);\n        } else {\n          return values.join(\",\");\n        }\n      } else {\n        return encodeReserved(literal);\n      }\n    }\n  );\n}\n", "import { addQueryParameters } from \"./util/add-query-parameters.js\";\nimport { extractUrlVariableNames } from \"./util/extract-url-variable-names.js\";\nimport { omit } from \"./util/omit.js\";\nimport { parseUrl } from \"./util/url-template.js\";\n\nexport function parse(options) {\n  // https://fetch.spec.whatwg.org/#methods\n  let method = options.method.toUpperCase();\n\n  // replace :varname with {varname} to make it RFC 6570 compatible\n  let url = (options.url || \"/\").replace(/:([a-z]\\w+)/g, \"{$1}\");\n  let headers = Object.assign({}, options.headers);\n  let body;\n  let parameters = omit(options, [\n    \"method\",\n    \"baseUrl\",\n    \"url\",\n    \"headers\",\n    \"request\",\n    \"mediaType\",\n  ]);\n\n  // extract variable names from URL to calculate remaining variables later\n  const urlVariableNames = extractUrlVariableNames(url);\n\n  url = parseUrl(url).expand(parameters);\n\n  if (!/^http/.test(url)) {\n    url = options.baseUrl + url;\n  }\n\n  const omittedParameters = Object.keys(options)\n    .filter((option) => urlVariableNames.includes(option))\n    .concat(\"baseUrl\");\n  const remainingParameters = omit(parameters, omittedParameters);\n\n  const isBinaryRequest = /application\\/octet-stream/i.test(headers.accept);\n\n  if (!isBinaryRequest) {\n    if (options.mediaType.format) {\n      // e.g. application/vnd.github.v3+json => application/vnd.github.v3.raw\n      headers.accept = headers.accept\n        .split(/,/)\n        .map((preview) =>\n          preview.replace(\n            /application\\/vnd(\\.\\w+)(\\.v3)?(\\.\\w+)?(\\+json)?$/,\n            `application/vnd$1$2.${options.mediaType.format}`\n          )\n        )\n        .join(\",\");\n    }\n\n    if (options.mediaType.previews.length) {\n      const previewsFromAcceptHeader =\n        headers.accept.match(/[\\w-]+(?=-preview)/g) || [];\n      headers.accept = previewsFromAcceptHeader\n        .concat(options.mediaType.previews)\n        .map((preview) => {\n          const format = options.mediaType.format\n            ? `.${options.mediaType.format}`\n            : \"+json\";\n          return `application/vnd.github.${preview}-preview${format}`;\n        })\n        .join(\",\");\n    }\n  }\n\n  // for GET/HEAD requests, set URL query parameters from remaining parameters\n  // for PATCH/POST/PUT/DELETE requests, set request body from remaining parameters\n  if ([\"GET\", \"HEAD\"].includes(method)) {\n    url = addQueryParameters(url, remainingParameters);\n  } else {\n    if (\"data\" in remainingParameters) {\n      body = remainingParameters.data;\n    } else {\n      if (Object.keys(remainingParameters).length) {\n        body = remainingParameters;\n      }\n    }\n  }\n\n  // default content-type for JSON if body is set\n  if (!headers[\"content-type\"] && typeof body !== \"undefined\") {\n    headers[\"content-type\"] = \"application/json; charset=utf-8\";\n  }\n\n  // GitHub expects 'content-length: 0' header for PUT/PATCH requests without body.\n  // fetch does not allow to set `content-length` header, but we can set body to an empty string\n  if ([\"PATCH\", \"PUT\"].includes(method) && typeof body === \"undefined\") {\n    body = \"\";\n  }\n\n  // Only return body/request keys if present\n  return Object.assign(\n    { method, url, headers },\n    typeof body !== \"undefined\" ? { body } : null,\n    options.request ? { request: options.request } : null\n  );\n}\n", "import { merge } from \"./merge.js\";\nimport { parse } from \"./parse.js\";\n\nexport function endpointWithDefaults(defaults, route, options) {\n  return parse(merge(defaults, route, options));\n}\n", "import { endpointWithDefaults } from \"./endpoint-with-defaults.js\";\nimport { merge } from \"./merge.js\";\nimport { parse } from \"./parse.js\";\n\nexport function withDefaults(oldDefaults, newDefaults) {\n  const DEFAULTS = merge(oldDefaults, newDefaults);\n  const endpoint = endpointWithDefaults.bind(null, DEFAULTS);\n\n  return Object.assign(endpoint, {\n    DEFAULTS,\n    defaults: withDefaults.bind(null, DEFAULTS),\n    merge: merge.bind(null, DEFAULTS),\n    parse,\n  });\n}\n", "export function getUserAgent() {\n  if (typeof navigator === \"object\" && \"userAgent\" in navigator) {\n    return navigator.userAgent;\n  }\n\n  if (typeof process === \"object\" && process.version !== undefined) {\n    return `Node.js/${process.version.substr(1)} (${process.platform}; ${\n      process.arch\n    })`;\n  }\n\n  return \"<environment undetectable>\";\n}\n", "export const VERSION = \"2.8.0\";\n", "import { getUserAgent } from \"universal-user-agent\";\n\nimport { VERSION } from \"./version.js\";\n\nconst userAgent = `octokit-next-endpoint.js/${VERSION} ${getUserAgent()}`;\n\n// DEFAULTS has all properties set that EndpointOptions has, except url.\n// So we use RequestParameters and add method as additional required property.\nexport const DEFAULTS = {\n  method: \"GET\",\n  baseUrl: \"https://api.github.com\",\n  headers: {\n    accept: \"application/vnd.github.v3+json\",\n    \"user-agent\": userAgent,\n  },\n  mediaType: {\n    format: \"\",\n    previews: [],\n  },\n};\n", "import { withDefaults } from \"./lib/with-defaults.js\";\nimport { DEFAULTS } from \"./lib/defaults.js\";\nexport { VERSION } from \"./lib/version.js\";\n\nexport const endpoint = withDefaults(null, DEFAULTS);\n", "export const VERSION = \"2.8.0\";\n", "/*!\n * is-plain-object <https://github.com/jonschlinkert/is-plain-object>\n *\n * Copyright (c) 2014-2017, Jon Schlinkert.\n * Released under the MIT License.\n */\n\nfunction isObject(o) {\n  return Object.prototype.toString.call(o) === '[object Object]';\n}\n\nfunction isPlainObject(o) {\n  var ctor,prot;\n\n  if (isObject(o) === false) return false;\n\n  // If has modified constructor\n  ctor = o.constructor;\n  if (ctor === undefined) return true;\n\n  // If has modified prototype\n  prot = ctor.prototype;\n  if (isObject(prot) === false) return false;\n\n  // If constructor does not have an Object-specific method\n  if (prot.hasOwnProperty('isPrototypeOf') === false) {\n    return false;\n  }\n\n  // Most likely a plain Object\n  return true;\n}\n\nexport { isPlainObject };\n", "/**\n * Error with extra properties to help with debugging\n */\nexport class RequestError extends Error {\n  name;\n\n  /**\n   * http status code\n   */\n  status;\n\n  /**\n   * Request options that lead to the error.\n   */\n  request;\n\n  /**\n   * Response object if a response was received\n   */\n  response;\n\n  constructor(message, statusCode, options) {\n    super(message);\n\n    // Maintains proper stack trace (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n\n    this.name = \"HttpError\";\n    this.status = statusCode;\n\n    if (\"response\" in options) {\n      this.response = options.response;\n    }\n\n    // redact request credentials without mutating original request options\n    const requestCopy = { ...options.request };\n    if (options.request.headers.authorization) {\n      requestCopy.headers = {\n        ...options.request.headers,\n        authorization: options.request.headers.authorization.replace(\n          / .*$/,\n          \" [REDACTED]\"\n        ),\n      };\n    }\n\n    requestCopy.url = requestCopy.url\n      // client_id & client_secret can be passed as URL query parameters to increase rate limit\n      // see https://developer.github.com/v3/#increasing-the-unauthenticated-rate-limit-for-oauth-applications\n      .replace(/\\bclient_secret=\\w+/g, \"client_secret=[REDACTED]\")\n      // OAuth tokens can be passed as URL query parameters, although it is not recommended\n      // see https://developer.github.com/v3/#oauth2-token-sent-in-a-header\n      .replace(/\\baccess_token=\\w+/g, \"access_token=[REDACTED]\");\n\n    this.request = requestCopy;\n  }\n}\n", "/* c8 ignore next 4 */\n// TODO: figure out how to test buffers\nexport default function getBufferResponse(response) {\n  return response.arrayBuffer();\n}\n", "import { isPlainObject } from \"is-plain-object\";\nimport { RequestError } from \"@octokit-next/request-error\";\n\nimport getBuffer from \"./get-buffer-response.js\";\n\nexport default function fetchWrapper(requestOptions) {\n  const log = requestOptions.request?.log || console;\n\n  if (\n    isPlainObject(requestOptions.body) ||\n    Array.isArray(requestOptions.body)\n  ) {\n    requestOptions.body = JSON.stringify(requestOptions.body);\n  }\n\n  let responseHeaders = {};\n  let status;\n  let url;\n\n  const { redirect, fetch, ...remainingRequestOptions } =\n    requestOptions.request || {};\n\n  const fetchOptions = {\n    method: requestOptions.method,\n    body: requestOptions.body,\n    headers: requestOptions.headers,\n    redirect,\n    ...remainingRequestOptions,\n  };\n\n  const requestOrGlobalFetch = fetch || globalThis.fetch;\n\n  return requestOrGlobalFetch(requestOptions.url, fetchOptions)\n    .then(async (response) => {\n      url = response.url;\n      status = response.status;\n\n      for (const keyAndValue of response.headers) {\n        responseHeaders[keyAndValue[0]] = keyAndValue[1];\n      }\n\n      if (\"deprecation\" in responseHeaders) {\n        const matches =\n          responseHeaders.link &&\n          responseHeaders.link.match(/<([^>]+)>; rel=\"deprecation\"/);\n        const deprecationLink = matches && matches.pop();\n        log.warn(\n          `[@octokit/request] \"${requestOptions.method} ${\n            requestOptions.url\n          }\" is deprecated. It is scheduled to be removed on ${\n            responseHeaders.sunset\n          }${deprecationLink ? `. See ${deprecationLink}` : \"\"}`\n        );\n      }\n\n      if (status === 204 || status === 205) {\n        return;\n      }\n\n      // GitHub API returns 200 for HEAD requests\n      if (requestOptions.method === \"HEAD\") {\n        if (status < 400) {\n          return;\n        }\n        throw new RequestError(response.statusText, status, {\n          response: {\n            url,\n            status,\n            headers: responseHeaders,\n            data: undefined,\n          },\n          request: requestOptions,\n        });\n      }\n\n      if (status === 304) {\n        throw new RequestError(\"Not modified\", status, {\n          response: {\n            url,\n            status,\n            headers: responseHeaders,\n            data: await getResponseData(response),\n          },\n          request: requestOptions,\n        });\n      }\n\n      if (status >= 400) {\n        const data = await getResponseData(response);\n        const error = new RequestError(toErrorMessage(data), status, {\n          response: {\n            url,\n            status,\n            headers: responseHeaders,\n            data,\n          },\n          request: requestOptions,\n        });\n        throw error;\n      }\n\n      return getResponseData(response);\n    })\n\n    .then((data) => {\n      return {\n        status,\n        url,\n        headers: responseHeaders,\n        data,\n      };\n    })\n\n    .catch((error) => {\n      if (error instanceof RequestError) throw error;\n\n      if (error.name === \"AbortError\") throw error;\n\n      throw new RequestError(error.message, 500, {\n        request: requestOptions,\n      });\n    });\n}\n\nasync function getResponseData(response) {\n  const contentType = response.headers.get(\"content-type\");\n\n  if (/application\\/json/.test(contentType)) {\n    return response.json();\n  }\n\n  if (!contentType || /^text\\/|charset=utf-8$/.test(contentType)) {\n    return response.text();\n  }\n  /* c8 ignore next 2 */\n  // TODO: figure out how to test buffers\n  return getBuffer(response);\n}\n\nfunction toErrorMessage(data) {\n  if (typeof data === \"string\") return data;\n\n  if (\"message\" in data) {\n    if (Array.isArray(data.errors)) {\n      return `${data.message}: ${data.errors.map(JSON.stringify).join(\", \")}`;\n    }\n    return data.message;\n  }\n  /* c8 ignore next 2 */\n  // shouldn't happen, but just in case\n  return `Unknown error: ${JSON.stringify(data)}`;\n}\n", "import fetchWrapper from \"./fetch-wrapper.js\";\n\nexport default function withDefaults(oldEndpoint, newDefaults) {\n  const endpoint = oldEndpoint.defaults(newDefaults);\n  const newApi = function (route, parameters) {\n    const endpointOptions = endpoint.merge(route, parameters);\n\n    if (!endpointOptions.request || !endpointOptions.request.hook) {\n      return fetchWrapper(endpoint.parse(endpointOptions));\n    }\n\n    const request = (route, parameters) => {\n      return fetchWrapper(endpoint.parse(endpoint.merge(route, parameters)));\n    };\n\n    Object.assign(request, {\n      endpoint,\n      defaults: withDefaults.bind(null, endpoint),\n    });\n\n    return endpointOptions.request.hook(request, endpointOptions);\n  };\n\n  return Object.assign(newApi, {\n    endpoint,\n    defaults: withDefaults.bind(null, endpoint),\n  });\n}\n", "import { endpoint } from \"@octokit-next/endpoint\";\nimport { getUserAgent } from \"universal-user-agent\";\n\nimport { VERSION } from \"./lib/version.js\";\nexport { VERSION } from \"./lib/version.js\";\n\nimport withDefaults from \"./lib/with-defaults.js\";\n\nexport const request = withDefaults(endpoint, {\n  headers: {\n    \"user-agent\": `octokit-next-request.js/${VERSION} ${getUserAgent()}`,\n  },\n});\n", "// @ts-check\n\nconst REGEX_IS_INSTALLATION_LEGACY = /^v1\\./;\nconst REGEX_IS_INSTALLATION = /^ghs_/;\nconst REGEX_IS_USER_TO_SERVER = /^ghu_/;\n\nexport async function auth(token) {\n  const isApp = token.split(/\\./).length === 3;\n  const isInstallation =\n    REGEX_IS_INSTALLATION_LEGACY.test(token) ||\n    REGEX_IS_INSTALLATION.test(token);\n  const isUserToServer = REGEX_IS_USER_TO_SERVER.test(token);\n\n  const tokenType = isApp\n    ? \"app\"\n    : isInstallation\n    ? \"installation\"\n    : isUserToServer\n    ? \"user-to-server\"\n    : \"oauth\";\n\n  return {\n    type: \"token\",\n    token: token,\n    tokenType,\n  };\n}\n", "// @ts-check\n\n/**\n * Prefix token for usage in the Authorization header\n *\n * @param {string} token OAuth token or JSON Web Token\n */\nexport function withAuthorizationPrefix(token) {\n  if (token.split(/\\./).length === 3) {\n    return `bearer ${token}`;\n  }\n\n  return `token ${token}`;\n}\n", "// @ts-check\n\nimport { withAuthorizationPrefix } from \"./with-authorization-prefix.js\";\n\nexport async function hook(token, request, route, parameters) {\n  const endpoint = request.endpoint.merge(route, parameters);\n\n  endpoint.headers.authorization = withAuthorizationPrefix(token);\n\n  return request(endpoint);\n}\n", "// @ts-check\n\nimport { auth } from \"./lib/auth.js\";\nimport { hook } from \"./lib/hook.js\";\n\nexport function createTokenAuth(options) {\n  if (!options?.token) {\n    throw new Error(\n      \"[@octokit/auth-token] options.token not set for createTokenAuth(options)\"\n    );\n  }\n\n  if (typeof options?.token !== \"string\") {\n    throw new Error(\n      \"[@octokit/auth-token] options.token is not a string for createTokenAuth(options)\"\n    );\n  }\n\n  const token = options.token.replace(/^(token|bearer) +/i, \"\");\n\n  return Object.assign(auth.bind(null, token), {\n    hook: hook.bind(null, token),\n  });\n}\n", "export const VERSION = \"2.8.0\";\n", "function _buildMessageForResponseErrors(data) {\n  return (\n    `Request failed due to following response errors:\\n` +\n    data.errors.map((e) => ` - ${e.message}`).join(\"\\n\")\n  );\n}\n\nexport class GraphqlResponseError extends Error {\n  constructor(request, headers, response) {\n    super(_buildMessageForResponseErrors(response));\n\n    this.request = request;\n    this.headers = headers;\n    this.response = response;\n    this.name = \"GraphqlResponseError\";\n    // Expose the errors and response data in their shorthand properties.\n    this.errors = response.errors;\n    this.data = response.data;\n\n    // Maintains proper stack trace (only available on V8)\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor);\n    }\n  }\n}\n", "import { GraphqlResponseError } from \"./error.js\";\n\nconst NON_VARIABLE_OPTIONS = [\n  \"method\",\n  \"baseUrl\",\n  \"url\",\n  \"headers\",\n  \"request\",\n  \"query\",\n  \"mediaType\",\n];\n\nconst FORBIDDEN_VARIABLE_OPTIONS = [\"query\", \"method\", \"url\"];\n\nconst GHES_V3_SUFFIX_REGEX = /\\/api\\/v3\\/?$/;\n\nexport function graphql(request, query, options) {\n  if (options) {\n    if (typeof query === \"string\" && \"query\" in options) {\n      return Promise.reject(\n        new Error(`[@octokit/graphql] \"query\" cannot be used as variable name`)\n      );\n    }\n\n    for (const key in options) {\n      if (!FORBIDDEN_VARIABLE_OPTIONS.includes(key)) continue;\n\n      return Promise.reject(\n        new Error(`[@octokit/graphql] \"${key}\" cannot be used as variable name`)\n      );\n    }\n  }\n\n  const parsedOptions =\n    typeof query === \"string\" ? Object.assign({ query }, options) : query;\n\n  const requestOptions = Object.keys(parsedOptions).reduce((result, key) => {\n    if (NON_VARIABLE_OPTIONS.includes(key)) {\n      result[key] = parsedOptions[key];\n      return result;\n    }\n\n    if (!result.variables) {\n      result.variables = {};\n    }\n\n    result.variables[key] = parsedOptions[key];\n    return result;\n  }, {});\n\n  // workaround for GitHub Enterprise baseUrl set with /api/v3 suffix\n  // https://github.com/octokit/auth-app.js/issues/111#issuecomment-657610451\n  const baseUrl = parsedOptions.baseUrl || request.endpoint.DEFAULTS.baseUrl;\n  if (GHES_V3_SUFFIX_REGEX.test(baseUrl)) {\n    requestOptions.url = baseUrl.replace(GHES_V3_SUFFIX_REGEX, \"/api/graphql\");\n  }\n\n  return request(requestOptions).then((response) => {\n    if (response.data.errors) {\n      const headers = {};\n      for (const key of Object.keys(response.headers)) {\n        headers[key] = response.headers[key];\n      }\n\n      throw new GraphqlResponseError(requestOptions, headers, response.data);\n    }\n\n    return response.data.data;\n  });\n}\n", "import { graphql } from \"./graphql.js\";\n\nexport function withDefaults(oldRequest, newDefaults) {\n  const newRequest = oldRequest.defaults(newDefaults);\n  const newApi = (query, options) => {\n    return graphql(newRequest, query, options);\n  };\n\n  return Object.assign(newApi, {\n    defaults: withDefaults.bind(null, newRequest),\n    endpoint: newRequest.endpoint,\n  });\n}\n", "import { request } from \"@octokit-next/request\";\nimport { getUserAgent } from \"universal-user-agent\";\n\nimport { VERSION } from \"./lib/version.js\";\nexport { VERSION } from \"./lib/version.js\";\n\nimport { withDefaults } from \"./lib/with-defaults.js\";\n\nexport const graphql = withDefaults(request, {\n  headers: {\n    \"user-agent\": `octokit-next-graphql.js/${VERSION} ${getUserAgent()}`,\n  },\n  method: \"POST\",\n  url: \"/graphql\",\n});\n\nexport { GraphqlResponseError } from \"./lib/error.js\";\n\nexport function withCustomRequest(customRequest) {\n  return withDefaults(customRequest, {\n    method: \"POST\",\n    url: \"/graphql\",\n  });\n}\n", "// @ts-check\n\nexport function register(state, name, method, options) {\n  if (typeof method !== \"function\") {\n    throw new Error(\"method for before hook must be a function\");\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  if (Array.isArray(name)) {\n    return name.reverse().reduce((callback, name) => {\n      return register.bind(null, state, name, callback, options);\n    }, method)();\n  }\n\n  return Promise.resolve().then(() => {\n    if (!state.registry[name]) {\n      return method(options);\n    }\n\n    return state.registry[name].reduce((method, registered) => {\n      return registered.hook.bind(null, method, options);\n    }, method)();\n  });\n}\n", "// @ts-check\n\nexport function addHook(state, kind, name, hook) {\n  const orig = hook;\n  if (!state.registry[name]) {\n    state.registry[name] = [];\n  }\n\n  if (kind === \"before\") {\n    hook = (method, options) => {\n      return Promise.resolve()\n        .then(orig.bind(null, options))\n        .then(method.bind(null, options));\n    };\n  }\n\n  if (kind === \"after\") {\n    hook = (method, options) => {\n      let result;\n      return Promise.resolve()\n        .then(method.bind(null, options))\n        .then((result_) => {\n          result = result_;\n          return orig(result, options);\n        })\n        .then(() => {\n          return result;\n        });\n    };\n  }\n\n  if (kind === \"error\") {\n    hook = (method, options) => {\n      return Promise.resolve()\n        .then(method.bind(null, options))\n        .catch((error) => {\n          return orig(error, options);\n        });\n    };\n  }\n\n  state.registry[name].push({\n    hook: hook,\n    orig: orig,\n  });\n}\n", "// @ts-check\n\nexport function removeHook(state, name, method) {\n  if (!state.registry[name]) {\n    return;\n  }\n\n  const index = state.registry[name]\n    .map((registered) => {\n      return registered.orig;\n    })\n    .indexOf(method);\n\n  if (index === -1) {\n    return;\n  }\n\n  state.registry[name].splice(index, 1);\n}\n", "// @ts-check\n\nimport { register } from \"./lib/register.js\";\nimport { addHook } from \"./lib/add.js\";\nimport { removeHook } from \"./lib/remove.js\";\n\n// bind with array of arguments: https://stackoverflow.com/a/21792913\nconst bind = Function.bind;\nconst bindable = bind.bind(bind);\n\nfunction bindApi(hook, state, name) {\n  const removeHookRef = bindable(removeHook, null).apply(\n    null,\n    name ? [state, name] : [state]\n  );\n  hook.api = { remove: removeHookRef };\n  hook.remove = removeHookRef;\n  [\"before\", \"error\", \"after\", \"wrap\"].forEach((kind) => {\n    const args = name ? [state, kind, name] : [state, kind];\n    hook[kind] = hook.api[kind] = bindable(addHook, null).apply(null, args);\n  });\n}\n\nfunction Singular() {\n  const singularHookName = Symbol(\"Singular\");\n  const singularHookState = {\n    registry: {},\n  };\n  const singularHook = register.bind(null, singularHookState, singularHookName);\n  bindApi(singularHook, singularHookState, singularHookName);\n  return singularHook;\n}\n\nfunction Collection() {\n  const state = {\n    registry: {},\n  };\n\n  const hook = register.bind(null, state);\n  bindApi(hook, state);\n\n  return hook;\n}\n\nexport default { Singular, Collection };\n", "export const VERSION = \"2.8.0\";\n", "import { endpoint } from \"@octokit-next/endpoint\";\nimport { request } from \"@octokit-next/request\";\nimport { createTokenAuth } from \"@octokit-next/auth-token\";\nimport { withCustomRequest } from \"@octokit-next/graphql\";\nimport { getUserAgent } from \"universal-user-agent\";\nimport Hook from \"before-after-hook\";\n\nimport { VERSION } from \"./lib/version.js\";\n\nexport class Octokit {\n  static VERSION = VERSION;\n  static DEFAULTS = {\n    baseUrl: endpoint.DEFAULTS.baseUrl,\n    userAgent: `octokit-next-core.js/${VERSION} ${getUserAgent()}`,\n  };\n\n  static withPlugins(newPlugins) {\n    const currentPlugins = this.PLUGINS;\n    return class extends this {\n      static PLUGINS = currentPlugins.concat(\n        newPlugins.filter((plugin) => !currentPlugins.includes(plugin))\n      );\n    };\n  }\n\n  static withDefaults(defaults) {\n    const newDefaultUserAgent = [defaults?.userAgent, this.DEFAULTS.userAgent]\n      .filter(Boolean)\n      .join(\" \");\n\n    const newDefaults = {\n      ...this.DEFAULTS,\n      ...defaults,\n      userAgent: newDefaultUserAgent,\n      request: {\n        ...this.DEFAULTS.request,\n        ...defaults?.request,\n      },\n    };\n\n    return class extends this {\n      constructor(options) {\n        if (typeof defaults === \"function\") {\n          super(defaults(options, newDefaults));\n          return;\n        }\n\n        super(options);\n      }\n\n      static DEFAULTS = newDefaults;\n    };\n  }\n\n  static PLUGINS = [];\n\n  constructor(options = {}) {\n    this.options = {\n      ...this.constructor.DEFAULTS,\n      ...options,\n      request: {\n        ...this.constructor.DEFAULTS.request,\n        ...options?.request,\n      },\n    };\n\n    const hook = new Hook.Collection();\n\n    const requestDefaults = {\n      baseUrl: this.options.baseUrl,\n      headers: {},\n      request: {\n        ...this.options.request,\n        hook: hook.bind(null, \"request\"),\n      },\n      mediaType: {\n        previews: [],\n        format: \"\",\n      },\n    };\n\n    // prepend default user agent with `options.userAgent` if set\n    const userAgent = [options?.userAgent, this.constructor.DEFAULTS.userAgent]\n      .filter(Boolean)\n      .join(\" \");\n\n    requestDefaults.headers[\"user-agent\"] = userAgent;\n\n    if (this.options.previews) {\n      requestDefaults.mediaType.previews = this.options.previews;\n    }\n\n    if (this.options.timeZone) {\n      requestDefaults.headers[\"time-zone\"] = this.options.timeZone;\n    }\n\n    // Apply plugins\n    this.constructor.PLUGINS.forEach((plugin) => {\n      Object.assign(this, plugin(this, this.options));\n    });\n\n    // API\n    this.request = request.defaults(requestDefaults);\n    this.graphql = withCustomRequest(this.request).defaults(requestDefaults);\n    this.log = Object.assign(\n      {\n        debug: () => {},\n        info: () => {},\n        warn: console.warn.bind(console),\n        error: console.error.bind(console),\n      },\n      this.options.log\n    );\n    this.hook = hook;\n\n    // Auth\n    // (1) If neither `options.authStrategy` nor `options.auth` are set, the `octokit` instance\n    //     is unauthenticated. The `this.auth()` method is a no-op and no request hook is registered.\n    // (2) If only `options.auth` is set, use the default token authentication strategy.\n    // (3) If `options.authStrategy` is set then use it and pass in `options.auth`. Always pass own request as many strategies accept a custom request instance.\n    if (!this.options.authStrategy) {\n      if (!this.options.auth) {\n        // (1)\n        this.auth = async () => ({\n          type: \"unauthenticated\",\n        });\n      } else {\n        // (2)\n        const auth = createTokenAuth({ token: this.options.auth });\n        hook.wrap(\"request\", auth.hook);\n        this.auth = auth;\n      }\n    } else {\n      // (3)\n      const { authStrategy, ...otherOptions } = this.options;\n      const auth = authStrategy(\n        Object.assign(\n          {\n            request: this.request,\n            log: this.log,\n            // we pass the current octokit instance as well as its constructor options\n            // to allow for authentication strategies that return a new octokit instance\n            // that shares the same internal state as the current one. The original\n            // requirement for this was the \"event-octokit\" authentication strategy\n            // of https://github.com/probot/octokit-auth-probot.\n            octokit: this,\n            octokitOptions: otherOptions,\n          },\n          this.options.auth\n        )\n      );\n      hook.wrap(\"request\", auth.hook);\n      this.auth = auth;\n    }\n  }\n}\n", "// pkg/dist-src/version.js\nvar VERSION = \"0.0.0-development\";\n\n// pkg/dist-src/normalize-paginated-list-response.js\nfunction normalizePaginatedListResponse(response) {\n  if (!response.data) {\n    return {\n      ...response,\n      data: []\n    };\n  }\n  const responseNeedsNormalization = \"total_count\" in response.data && !(\"url\" in response.data);\n  if (!responseNeedsNormalization) return response;\n  const incompleteResults = response.data.incomplete_results;\n  const repositorySelection = response.data.repository_selection;\n  const totalCount = response.data.total_count;\n  delete response.data.incomplete_results;\n  delete response.data.repository_selection;\n  delete response.data.total_count;\n  const namespaceKey = Object.keys(response.data)[0];\n  const data = response.data[namespaceKey];\n  response.data = data;\n  if (typeof incompleteResults !== \"undefined\") {\n    response.data.incomplete_results = incompleteResults;\n  }\n  if (typeof repositorySelection !== \"undefined\") {\n    response.data.repository_selection = repositorySelection;\n  }\n  response.data.total_count = totalCount;\n  return response;\n}\n\n// pkg/dist-src/iterator.js\nfunction iterator(octokit, route, parameters) {\n  const options = typeof route === \"function\" ? route.endpoint(parameters) : octokit.request.endpoint(route, parameters);\n  const requestMethod = typeof route === \"function\" ? route : octokit.request;\n  const method = options.method;\n  const headers = options.headers;\n  let url = options.url;\n  return {\n    [Symbol.asyncIterator]: () => ({\n      async next() {\n        if (!url) return { done: true };\n        try {\n          const response = await requestMethod({ method, url, headers });\n          const normalizedResponse = normalizePaginatedListResponse(response);\n          url = ((normalizedResponse.headers.link || \"\").match(\n            /<([^<>]+)>;\\s*rel=\"next\"/\n          ) || [])[1];\n          return { value: normalizedResponse };\n        } catch (error) {\n          if (error.status !== 409) throw error;\n          url = \"\";\n          return {\n            value: {\n              status: 200,\n              headers: {},\n              data: []\n            }\n          };\n        }\n      }\n    })\n  };\n}\n\n// pkg/dist-src/paginate.js\nfunction paginate(octokit, route, parameters, mapFn) {\n  if (typeof parameters === \"function\") {\n    mapFn = parameters;\n    parameters = void 0;\n  }\n  return gather(\n    octokit,\n    [],\n    iterator(octokit, route, parameters)[Symbol.asyncIterator](),\n    mapFn\n  );\n}\nfunction gather(octokit, results, iterator2, mapFn) {\n  return iterator2.next().then((result) => {\n    if (result.done) {\n      return results;\n    }\n    let earlyExit = false;\n    function done() {\n      earlyExit = true;\n    }\n    results = results.concat(\n      mapFn ? mapFn(result.value, done) : result.value.data\n    );\n    if (earlyExit) {\n      return results;\n    }\n    return gather(octokit, results, iterator2, mapFn);\n  });\n}\n\n// pkg/dist-src/compose-paginate.js\nvar composePaginateRest = Object.assign(paginate, {\n  iterator\n});\n\n// pkg/dist-src/generated/paginating-endpoints.js\nvar paginatingEndpoints = [\n  \"GET /advisories\",\n  \"GET /app/hook/deliveries\",\n  \"GET /app/installation-requests\",\n  \"GET /app/installations\",\n  \"GET /assignments/{assignment_id}/accepted_assignments\",\n  \"GET /classrooms\",\n  \"GET /classrooms/{classroom_id}/assignments\",\n  \"GET /enterprises/{enterprise}/code-security/configurations\",\n  \"GET /enterprises/{enterprise}/code-security/configurations/{configuration_id}/repositories\",\n  \"GET /enterprises/{enterprise}/dependabot/alerts\",\n  \"GET /enterprises/{enterprise}/secret-scanning/alerts\",\n  \"GET /events\",\n  \"GET /gists\",\n  \"GET /gists/public\",\n  \"GET /gists/starred\",\n  \"GET /gists/{gist_id}/comments\",\n  \"GET /gists/{gist_id}/commits\",\n  \"GET /gists/{gist_id}/forks\",\n  \"GET /installation/repositories\",\n  \"GET /issues\",\n  \"GET /licenses\",\n  \"GET /marketplace_listing/plans\",\n  \"GET /marketplace_listing/plans/{plan_id}/accounts\",\n  \"GET /marketplace_listing/stubbed/plans\",\n  \"GET /marketplace_listing/stubbed/plans/{plan_id}/accounts\",\n  \"GET /networks/{owner}/{repo}/events\",\n  \"GET /notifications\",\n  \"GET /organizations\",\n  \"GET /orgs/{org}/actions/cache/usage-by-repository\",\n  \"GET /orgs/{org}/actions/permissions/repositories\",\n  \"GET /orgs/{org}/actions/runner-groups\",\n  \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/repositories\",\n  \"GET /orgs/{org}/actions/runner-groups/{runner_group_id}/runners\",\n  \"GET /orgs/{org}/actions/runners\",\n  \"GET /orgs/{org}/actions/secrets\",\n  \"GET /orgs/{org}/actions/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/actions/variables\",\n  \"GET /orgs/{org}/actions/variables/{name}/repositories\",\n  \"GET /orgs/{org}/attestations/{subject_digest}\",\n  \"GET /orgs/{org}/blocks\",\n  \"GET /orgs/{org}/code-scanning/alerts\",\n  \"GET /orgs/{org}/code-security/configurations\",\n  \"GET /orgs/{org}/code-security/configurations/{configuration_id}/repositories\",\n  \"GET /orgs/{org}/codespaces\",\n  \"GET /orgs/{org}/codespaces/secrets\",\n  \"GET /orgs/{org}/codespaces/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/copilot/billing/seats\",\n  \"GET /orgs/{org}/copilot/metrics\",\n  \"GET /orgs/{org}/copilot/usage\",\n  \"GET /orgs/{org}/dependabot/alerts\",\n  \"GET /orgs/{org}/dependabot/secrets\",\n  \"GET /orgs/{org}/dependabot/secrets/{secret_name}/repositories\",\n  \"GET /orgs/{org}/events\",\n  \"GET /orgs/{org}/failed_invitations\",\n  \"GET /orgs/{org}/hooks\",\n  \"GET /orgs/{org}/hooks/{hook_id}/deliveries\",\n  \"GET /orgs/{org}/insights/api/route-stats/{actor_type}/{actor_id}\",\n  \"GET /orgs/{org}/insights/api/subject-stats\",\n  \"GET /orgs/{org}/insights/api/user-stats/{user_id}\",\n  \"GET /orgs/{org}/installations\",\n  \"GET /orgs/{org}/invitations\",\n  \"GET /orgs/{org}/invitations/{invitation_id}/teams\",\n  \"GET /orgs/{org}/issues\",\n  \"GET /orgs/{org}/members\",\n  \"GET /orgs/{org}/members/{username}/codespaces\",\n  \"GET /orgs/{org}/migrations\",\n  \"GET /orgs/{org}/migrations/{migration_id}/repositories\",\n  \"GET /orgs/{org}/organization-roles/{role_id}/teams\",\n  \"GET /orgs/{org}/organization-roles/{role_id}/users\",\n  \"GET /orgs/{org}/outside_collaborators\",\n  \"GET /orgs/{org}/packages\",\n  \"GET /orgs/{org}/packages/{package_type}/{package_name}/versions\",\n  \"GET /orgs/{org}/personal-access-token-requests\",\n  \"GET /orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories\",\n  \"GET /orgs/{org}/personal-access-tokens\",\n  \"GET /orgs/{org}/personal-access-tokens/{pat_id}/repositories\",\n  \"GET /orgs/{org}/private-registries\",\n  \"GET /orgs/{org}/projects\",\n  \"GET /orgs/{org}/properties/values\",\n  \"GET /orgs/{org}/public_members\",\n  \"GET /orgs/{org}/repos\",\n  \"GET /orgs/{org}/rulesets\",\n  \"GET /orgs/{org}/rulesets/rule-suites\",\n  \"GET /orgs/{org}/secret-scanning/alerts\",\n  \"GET /orgs/{org}/security-advisories\",\n  \"GET /orgs/{org}/team/{team_slug}/copilot/metrics\",\n  \"GET /orgs/{org}/team/{team_slug}/copilot/usage\",\n  \"GET /orgs/{org}/teams\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n  \"GET /orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions\",\n  \"GET /orgs/{org}/teams/{team_slug}/invitations\",\n  \"GET /orgs/{org}/teams/{team_slug}/members\",\n  \"GET /orgs/{org}/teams/{team_slug}/projects\",\n  \"GET /orgs/{org}/teams/{team_slug}/repos\",\n  \"GET /orgs/{org}/teams/{team_slug}/teams\",\n  \"GET /projects/columns/{column_id}/cards\",\n  \"GET /projects/{project_id}/collaborators\",\n  \"GET /projects/{project_id}/columns\",\n  \"GET /repos/{owner}/{repo}/actions/artifacts\",\n  \"GET /repos/{owner}/{repo}/actions/caches\",\n  \"GET /repos/{owner}/{repo}/actions/organization-secrets\",\n  \"GET /repos/{owner}/{repo}/actions/organization-variables\",\n  \"GET /repos/{owner}/{repo}/actions/runners\",\n  \"GET /repos/{owner}/{repo}/actions/runs\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/artifacts\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs\",\n  \"GET /repos/{owner}/{repo}/actions/runs/{run_id}/jobs\",\n  \"GET /repos/{owner}/{repo}/actions/secrets\",\n  \"GET /repos/{owner}/{repo}/actions/variables\",\n  \"GET /repos/{owner}/{repo}/actions/workflows\",\n  \"GET /repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs\",\n  \"GET /repos/{owner}/{repo}/activity\",\n  \"GET /repos/{owner}/{repo}/assignees\",\n  \"GET /repos/{owner}/{repo}/attestations/{subject_digest}\",\n  \"GET /repos/{owner}/{repo}/branches\",\n  \"GET /repos/{owner}/{repo}/check-runs/{check_run_id}/annotations\",\n  \"GET /repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs\",\n  \"GET /repos/{owner}/{repo}/code-scanning/alerts\",\n  \"GET /repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances\",\n  \"GET /repos/{owner}/{repo}/code-scanning/analyses\",\n  \"GET /repos/{owner}/{repo}/codespaces\",\n  \"GET /repos/{owner}/{repo}/codespaces/devcontainers\",\n  \"GET /repos/{owner}/{repo}/codespaces/secrets\",\n  \"GET /repos/{owner}/{repo}/collaborators\",\n  \"GET /repos/{owner}/{repo}/comments\",\n  \"GET /repos/{owner}/{repo}/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/commits\",\n  \"GET /repos/{owner}/{repo}/commits/{commit_sha}/comments\",\n  \"GET /repos/{owner}/{repo}/commits/{commit_sha}/pulls\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/check-runs\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/check-suites\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/status\",\n  \"GET /repos/{owner}/{repo}/commits/{ref}/statuses\",\n  \"GET /repos/{owner}/{repo}/contributors\",\n  \"GET /repos/{owner}/{repo}/dependabot/alerts\",\n  \"GET /repos/{owner}/{repo}/dependabot/secrets\",\n  \"GET /repos/{owner}/{repo}/deployments\",\n  \"GET /repos/{owner}/{repo}/deployments/{deployment_id}/statuses\",\n  \"GET /repos/{owner}/{repo}/environments\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/secrets\",\n  \"GET /repos/{owner}/{repo}/environments/{environment_name}/variables\",\n  \"GET /repos/{owner}/{repo}/events\",\n  \"GET /repos/{owner}/{repo}/forks\",\n  \"GET /repos/{owner}/{repo}/hooks\",\n  \"GET /repos/{owner}/{repo}/hooks/{hook_id}/deliveries\",\n  \"GET /repos/{owner}/{repo}/invitations\",\n  \"GET /repos/{owner}/{repo}/issues\",\n  \"GET /repos/{owner}/{repo}/issues/comments\",\n  \"GET /repos/{owner}/{repo}/issues/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/issues/events\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/comments\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/events\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/labels\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/reactions\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/sub_issues\",\n  \"GET /repos/{owner}/{repo}/issues/{issue_number}/timeline\",\n  \"GET /repos/{owner}/{repo}/keys\",\n  \"GET /repos/{owner}/{repo}/labels\",\n  \"GET /repos/{owner}/{repo}/milestones\",\n  \"GET /repos/{owner}/{repo}/milestones/{milestone_number}/labels\",\n  \"GET /repos/{owner}/{repo}/notifications\",\n  \"GET /repos/{owner}/{repo}/pages/builds\",\n  \"GET /repos/{owner}/{repo}/projects\",\n  \"GET /repos/{owner}/{repo}/pulls\",\n  \"GET /repos/{owner}/{repo}/pulls/comments\",\n  \"GET /repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/comments\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/commits\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/files\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews\",\n  \"GET /repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments\",\n  \"GET /repos/{owner}/{repo}/releases\",\n  \"GET /repos/{owner}/{repo}/releases/{release_id}/assets\",\n  \"GET /repos/{owner}/{repo}/releases/{release_id}/reactions\",\n  \"GET /repos/{owner}/{repo}/rules/branches/{branch}\",\n  \"GET /repos/{owner}/{repo}/rulesets\",\n  \"GET /repos/{owner}/{repo}/rulesets/rule-suites\",\n  \"GET /repos/{owner}/{repo}/secret-scanning/alerts\",\n  \"GET /repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations\",\n  \"GET /repos/{owner}/{repo}/security-advisories\",\n  \"GET /repos/{owner}/{repo}/stargazers\",\n  \"GET /repos/{owner}/{repo}/subscribers\",\n  \"GET /repos/{owner}/{repo}/tags\",\n  \"GET /repos/{owner}/{repo}/teams\",\n  \"GET /repos/{owner}/{repo}/topics\",\n  \"GET /repositories\",\n  \"GET /search/code\",\n  \"GET /search/commits\",\n  \"GET /search/issues\",\n  \"GET /search/labels\",\n  \"GET /search/repositories\",\n  \"GET /search/topics\",\n  \"GET /search/users\",\n  \"GET /teams/{team_id}/discussions\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/comments\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions\",\n  \"GET /teams/{team_id}/discussions/{discussion_number}/reactions\",\n  \"GET /teams/{team_id}/invitations\",\n  \"GET /teams/{team_id}/members\",\n  \"GET /teams/{team_id}/projects\",\n  \"GET /teams/{team_id}/repos\",\n  \"GET /teams/{team_id}/teams\",\n  \"GET /user/blocks\",\n  \"GET /user/codespaces\",\n  \"GET /user/codespaces/secrets\",\n  \"GET /user/emails\",\n  \"GET /user/followers\",\n  \"GET /user/following\",\n  \"GET /user/gpg_keys\",\n  \"GET /user/installations\",\n  \"GET /user/installations/{installation_id}/repositories\",\n  \"GET /user/issues\",\n  \"GET /user/keys\",\n  \"GET /user/marketplace_purchases\",\n  \"GET /user/marketplace_purchases/stubbed\",\n  \"GET /user/memberships/orgs\",\n  \"GET /user/migrations\",\n  \"GET /user/migrations/{migration_id}/repositories\",\n  \"GET /user/orgs\",\n  \"GET /user/packages\",\n  \"GET /user/packages/{package_type}/{package_name}/versions\",\n  \"GET /user/public_emails\",\n  \"GET /user/repos\",\n  \"GET /user/repository_invitations\",\n  \"GET /user/social_accounts\",\n  \"GET /user/ssh_signing_keys\",\n  \"GET /user/starred\",\n  \"GET /user/subscriptions\",\n  \"GET /user/teams\",\n  \"GET /users\",\n  \"GET /users/{username}/attestations/{subject_digest}\",\n  \"GET /users/{username}/events\",\n  \"GET /users/{username}/events/orgs/{org}\",\n  \"GET /users/{username}/events/public\",\n  \"GET /users/{username}/followers\",\n  \"GET /users/{username}/following\",\n  \"GET /users/{username}/gists\",\n  \"GET /users/{username}/gpg_keys\",\n  \"GET /users/{username}/keys\",\n  \"GET /users/{username}/orgs\",\n  \"GET /users/{username}/packages\",\n  \"GET /users/{username}/projects\",\n  \"GET /users/{username}/received_events\",\n  \"GET /users/{username}/received_events/public\",\n  \"GET /users/{username}/repos\",\n  \"GET /users/{username}/social_accounts\",\n  \"GET /users/{username}/ssh_signing_keys\",\n  \"GET /users/{username}/starred\",\n  \"GET /users/{username}/subscriptions\"\n];\n\n// pkg/dist-src/paginating-endpoints.js\nfunction isPaginatingEndpoint(arg) {\n  if (typeof arg === \"string\") {\n    return paginatingEndpoints.includes(arg);\n  } else {\n    return false;\n  }\n}\n\n// pkg/dist-src/index.js\nfunction paginateRest(octokit) {\n  return {\n    paginate: Object.assign(paginate.bind(null, octokit), {\n      iterator: iterator.bind(null, octokit)\n    })\n  };\n}\npaginateRest.VERSION = VERSION;\nexport {\n  composePaginateRest,\n  isPaginatingEndpoint,\n  paginateRest,\n  paginatingEndpoints\n};\n", "import type {PaginatingEndpoints} from '@octokit/plugin-paginate-rest'\n\nimport {Octokit} from '@octokit-next/core'\nimport {paginateRest} from '@octokit/plugin-paginate-rest'\n\nimport {useCommonInputs} from '@/common/inputs.js'\n\n/**\n * @see {@link https://github.com/octokit/plugin-paginate-rest.js/blob/44d8b933b8fb495fb7b8d95661452f23b482ea55/src/types.ts#L55}\n */\ntype DataType<T> = 'data' extends keyof T ? T['data'] : unknown\n\nexport type PaginateResponse<T extends keyof PaginatingEndpoints> = DataType<\n  PaginatingEndpoints[T]['response']\n>\n\nexport const paginate = async <T extends keyof PaginatingEndpoints>(\n  endpoint: T,\n  options: PaginatingEndpoints[T]['parameters']\n): Promise<PaginateResponse<T>> => {\n  const {gitHubApiToken} = useCommonInputs()\n\n  // TODO:@andykenward #32 fix types in @octokit-next/core or @octokit/plugin-paginate-rest . Can then remove the ts-expect-error & as Promise<PaginateResponse<T>>\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-expect-error\n  return new (Octokit.withPlugins([paginateRest]))({\n    auth: gitHubApiToken\n  }).paginate(endpoint, options) as Promise<PaginateResponse<T>>\n}\n", "import {useCommonInputs} from '@/common/inputs.js'\n\nimport type {PaginateResponse} from '../api/paginate.js'\n\nimport {paginate} from '../api/paginate.js'\nimport {useContext} from '../context.js'\n\n/**\n * Get all github deployments from the current repo ref\n */\nexport const getGitHubDeployments = async (): Promise<\n  PaginateResponse<'GET /repos/{owner}/{repo}/deployments'>\n> => {\n  const {gitHubEnvironment} = useCommonInputs()\n  const {repo, branch} = useContext()\n\n  const deployments = await paginate('GET /repos/{owner}/{repo}/deployments', {\n    owner: repo.owner,\n    repo: repo.repo,\n    ref: branch,\n    per_page: 100,\n    environment: gitHubEnvironment\n  })\n\n  return deployments\n}\n", "import {getInput} from '@actions/core'\n\nimport {INPUT_KEYS_KEEP_LATEST} from '@/input-keys'\n\nexport interface Inputs {\n  /** How many deployments to keep. */\n  keepLatest: number\n}\n\nconst getInputs = (): Inputs => {\n  return {\n    keepLatest: Number(\n      getInput(INPUT_KEYS_KEEP_LATEST, {required: false, trimWhitespace: true})\n    )\n  }\n}\n\ntype UseInputs = ReturnType<typeof getInputs>\n\nlet _inputs: UseInputs\n\nexport const useInputs = (): UseInputs => {\n  return _inputs ?? (_inputs = getInputs())\n}\n"],
  "mappings": "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AAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,KACnE,MAAO,KAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IACnE,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,IAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,OACnE,MAAO,OAAQ,MAAO,OAAQ,MAAO,OAAQ,MAAO,O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kBACH,MAAO,aACT,IAAK,kBACL,IAAK,WACL,IAAK,WACL,IAAK,QACL,IAAK,SACL,IAAK,aACL,IAAK,aACL,IAAK,YACL,IAAK,WACL,IAAK,aACL,IAAK,kBACL,IAAK,eACH,MAAO,aACT,IAAK,cACL,IAAK,mBACL,IAAK,SACL,IAAK,aACL,IAAK,eACL,IAAK,aACL,IAAK,YACL,IAAK,WACL,IAAK,aACL,IAAK,kBACL,IAAK,SACH,MAAO,aACT,IAAK,cACL,IAAK,eACL,IAAK,UACH,MAAO,eACT,IAAK,cACL,IAAK,cACL,IAAK,aACL,IAAK,aACL,IAAK,YACL,IAAK,KACL,IAAK,SACH,MAAO,cACT,IAAK,cACL,IAAK,aACL,IAAK,YACH,MAAO,cACT,IAAK,cACL,IAAK,aACL,IAAK,YACH,MAAO,cACT,IAAK,cACL,IAAK,cACL,IAAK,aACL,IAAK,YACL,IAAK,cACL,IAAK,KACH,MAAO,cACT,IAAK,cACH,MAAO,cACT,IAAK,UACL,IAAK,MACL,IAAK,OACL,IAAK,SACL,IAAK,SACH,MAAO,SACT,IAAK,UACL,IAAK,SACH,MAAO,SACT,IAAK,cACL,IAAK,MACL,IAAK,YACL,IAAK,cACH,MAAO,YACT,IAAK,cACL,IAAK,aACL,IAAK,YACL,IAAK,UACL,IAAK,cACH,MAAO,cACT,IAAK,SACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,SACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,iBACL,IAAK,QACL,IAAK,SACL,IAAK,QACL,IAAK,cACL,IAAK,SACL,IAAK,aACL,IAAK,aACL,IAAK,YACL,IAAK,WACL,IAAK,aACL,IAAK,kBACL,IAAK,KACL,IAAK,SACL,IAAK,WACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,SACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,SACL,IAAK,cACL,IAAK,aACL,IAAK,aACL,IAAK,YACL,IAAK,WACL,IAAK,aACL,IAAK,kBACL,IAAK,KACL,IAAK,SACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,SACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,SACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,SACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,SACL,IAAK,eACL,IAAK,WACH,MAAO,eACT,IAAK,iBACL,IAAK,kBACH,MAAO,iBACT,IAAK,UACL,IAAK,WACL,IAAK,kBACL,IAAK,SACL,IAAK,UACL,IAAK,aACL,IAAK,MACL,IAAK,YACL,IAAK,QACH,MAAO,MACT,IAAK,UACH,MAAO,UACT,IAAK,OACL,IAAK,aACL,IAAK,UACL,IAAK,SACL,IAAK,WACH,MAAO,OACT,IAAK,sBACL,IAAK,SACL,IAAK,WACH,MAAO,SACT,IAAK,cACL,IAAK,cACH,MAAO,cACT,IAAK,aACL,IAAK,QACL,IAAK,WACL,IAAK,YACL,IAAK,YACL,IAAK,OACL,IAAK,cACL,IAAK,SACH,MAAO,YACT,IAAK,UACL,IAAK,gBACL,IAAK,SACL,IAAK,aACL,IAAK,SACL,IAAK,iBACL,IAAK,iBACL,IAAK,UACL,IAAK,WACL,IAAK,cACH,MAAO,SACT,IAAK,cACL,IAAK,aACL,IAAK,cACL,IAAK,kBACL,IAAK,cACL,IAAK,cACH,MAAO,cACT,IAAK,cACL,IAAK,WACH,MAAO,WACT,IAAK,YACL,IAAK,kBACL,IAAK,QACL,IAAK,UACL,IAAK,cACL,IAAK,SACL,IAAK,WACH,MAAO,WACT,IAAK,iBACH,MAAO,iBACT,QAAS,MAAO,SAClB,CACF,CAvRS,kCAyRT,OAAO,QAAU,CACf,WACF,KCjSA,IAAAC,cAAA,oHAEA,GAAM,CACJ,OACA,OACA,QACA,SACA,uBACF,EAAI,mBACE,CAAE,aAAc,EAAI,wBACpB,CAAE,WAAY,EAAI,mBAClB,CAAE,aAAAC,aAAa,EAAI,qBACnB,CAAE,mBAAoB,aAAc,EAAI,kBACxC,CAAE,KAAM,EAAI,UAAQ,MAAM,EAC1B,CAAE,aAAc,EAAI,UAAQ,gBAAgB,EAC5C,CAAE,IAAK,EAAI,UAAQ,QAAQ,EAG3B,0BAA4B,CAChC,WAAY,GACZ,SAAU,GACV,aAAc,EAChB,EASA,SAAS,cAAe,GAAI,KAAM,KAAM,aAAc,CAGpD,GAAI,GAAG,MAAM,IAAM,UACjB,MAAM,IAAIA,cAAa,gBAAiB,mBAAmB,EAI7D,GAAG,MAAM,EAAI,UAGb,GAAG,OAAO,EAAI,KAGd,GAAG,MAAM,EAAI,KAOb,IAAM,OAHS,KAAK,OAAO,EAGL,UAAU,EAI1B,MAAQ,CAAC,EAIX,aAAe,OAAO,KAAK,EAG3B,aAAe,IAOjB,SAAY,CACZ,KAAO,CAAC,GAAG,QAAQ,GAEjB,GAAI,CACF,GAAM,CAAE,KAAM,KAAM,EAAI,MAAM,aAiB9B,GAZI,cAAgB,CAAC,GAAG,QAAQ,GAC9B,eAAe,IAAM,CACnB,mBAAmB,YAAa,EAAE,CACpC,CAAC,EAIH,aAAe,GAKX,CAAC,MAAQ,MAAM,aAAa,KAAK,EAKnC,MAAM,KAAK,KAAK,GAOZ,GAAG,uBAAuB,IAAM,QAChC,KAAK,IAAI,EAAI,GAAG,uBAAuB,GAAK,KAE9C,CAAC,GAAG,QAAQ,IAEZ,GAAG,uBAAuB,EAAI,KAAK,IAAI,EACvC,eAAe,IAAM,CACnB,mBAAmB,WAAY,EAAE,CACnC,CAAC,GAKH,aAAe,OAAO,KAAK,UAClB,KAAM,CAIf,eAAe,IAAM,CAEnB,GAAG,MAAM,EAAI,OAIb,GAAI,CACF,IAAM,OAAS,YAAY,MAAO,KAAM,KAAK,KAAM,YAAY,EAI/D,GAAI,GAAG,QAAQ,EACb,OAIF,GAAG,OAAO,EAAI,OAGd,mBAAmB,OAAQ,EAAE,CAC/B,OAASC,OAAO,CAId,GAAG,MAAM,EAAIA,OAGb,mBAAmB,QAAS,EAAE,CAChC,CAII,GAAG,MAAM,IAAM,WACjB,mBAAmB,UAAW,EAAE,CAEpC,CAAC,EAED,KACF,CACF,OAASA,OAAO,CACd,GAAI,GAAG,QAAQ,EACb,OAMF,eAAe,IAAM,CAEnB,GAAG,MAAM,EAAI,OAGb,GAAG,MAAM,EAAIA,OAGb,mBAAmB,QAAS,EAAE,EAI1B,GAAG,MAAM,IAAM,WACjB,mBAAmB,UAAW,EAAE,CAEpC,CAAC,EAED,KACF,CAEJ,GAAG,CACL,CA9JS,sCAsKT,SAAS,mBAAoB,EAAG,OAAQ,CAGtC,IAAM,MAAQ,IAAI,cAAc,EAAG,CACjC,QAAS,GACT,WAAY,EACd,CAAC,EAED,OAAO,cAAc,KAAK,CAC5B,CATS,gDAkBT,SAAS,YAAa,MAAO,KAAM,SAAU,aAAc,CAMzD,OAAQ,KAAM,CACZ,IAAK,UAAW,CAcd,IAAI,QAAU,QAER,OAAS,cAAc,UAAY,0BAA0B,EAE/D,SAAW,YACb,SAAW,mBAAmB,MAAM,GAGtC,SAAW,WAEX,IAAM,QAAU,IAAI,cAAc,QAAQ,EAE1C,QAAW,SAAS,MAClB,SAAW,KAAK,QAAQ,MAAM,KAAK,CAAC,EAGtC,gBAAW,KAAK,QAAQ,IAAI,CAAC,EAEtB,OACT,CACA,IAAK,OAAQ,CAEX,IAAI,SAAW,UASf,GALI,eACF,SAAW,YAAY,YAAY,GAIjC,WAAa,WAAa,SAAU,CAGtC,IAAMC,MAAO,cAAc,QAAQ,EAI/BA,QAAS,YACX,SAAW,YAAYA,MAAK,WAAW,IAAI,SAAS,CAAC,EAEzD,CAGA,OAAI,WAAa,YACf,SAAW,SAKN,OAAO,MAAO,QAAQ,CAC/B,CACA,IAAK,cAIH,OAFiB,qBAAqB,KAAK,EAE3B,OAElB,IAAK,eAAgB,CAGnB,IAAI,aAAe,GAEb,QAAU,IAAI,cAAc,QAAQ,EAE1C,QAAW,SAAS,MAClB,cAAgB,QAAQ,MAAM,KAAK,EAGrC,qBAAgB,QAAQ,IAAI,EAErB,YACT,CACF,CACF,CA/FS,kCAsGT,SAAS,OAAQ,QAAS,SAAU,CAClC,IAAM,MAAQ,qBAAqB,OAAO,EAGpC,YAAc,YAAY,KAAK,EAEjC,MAAQ,EAGR,cAAgB,OAElB,SAAW,YAKX,MAAQ,cAAgB,QAAU,EAAI,GAQxC,IAAM,OAAS,MAAM,MAAM,KAAK,EAChC,OAAO,IAAI,YAAY,QAAQ,EAAE,OAAO,MAAM,CAChD,CA1BS,wBAgCT,SAAS,YAAa,QAAS,CAG7B,GAAM,CAAC,EAAG,EAAG,CAAC,EAAI,QAOlB,OAAI,IAAM,KAAQ,IAAM,KAAQ,IAAM,IAC7B,QACE,IAAM,KAAQ,IAAM,IACtB,WACE,IAAM,KAAQ,IAAM,IACtB,WAGF,IACT,CAnBS,kCAwBT,SAAS,qBAAsB,UAAW,CACxC,IAAM,KAAO,UAAU,OAAO,CAAC,EAAG,IACzB,EAAI,EAAE,WACZ,CAAC,EAEA,OAAS,EAEb,OAAO,UAAU,OAAO,CAAC,EAAG,KAC1B,EAAE,IAAI,EAAG,MAAM,EACf,QAAU,EAAE,WACL,GACN,IAAI,WAAW,IAAI,CAAC,CACzB,CAZS,oDAcT,OAAO,QAAU,CACf,0BACA,cACA,kBACF,KCvYA,iJAEA,GAAM,CACJ,0BACA,cACA,kBACF,EAAI,gBACE,CACJ,OACA,OACA,QACA,QACA,QACF,EAAI,mBACE,CAAE,MAAO,EAAI,iBACb,CAAE,mBAAoB,EAAI,eAE1B,WAAN,MAAM,oBAAmB,WAAY,CAjBrC,MAiBqC,2BACnC,aAAe,CACb,MAAM,EAEN,KAAK,MAAM,EAAI,QACf,KAAK,OAAO,EAAI,KAChB,KAAK,MAAM,EAAI,KACf,KAAK,OAAO,EAAI,CACd,QAAS,KACT,MAAO,KACP,MAAO,KACP,KAAM,KACN,SAAU,KACV,UAAW,IACb,CACF,CAMA,kBAAmB,KAAM,CACvB,OAAO,WAAW,KAAM,WAAU,EAElC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,8BAA+B,CAAC,EAEnF,KAAO,OAAO,WAAW,KAAK,KAAM,CAAE,OAAQ,EAAM,CAAC,EAIrD,cAAc,KAAM,KAAM,aAAa,CACzC,CAMA,mBAAoB,KAAM,CACxB,OAAO,WAAW,KAAM,WAAU,EAElC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,+BAAgC,CAAC,EAEpF,KAAO,OAAO,WAAW,KAAK,KAAM,CAAE,OAAQ,EAAM,CAAC,EAIrD,cAAc,KAAM,KAAM,cAAc,CAC1C,CAOA,WAAY,KAAM,SAAW,OAAW,CACtC,OAAO,WAAW,KAAM,WAAU,EAElC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,uBAAwB,CAAC,EAE5E,KAAO,OAAO,WAAW,KAAK,KAAM,CAAE,OAAQ,EAAM,CAAC,EAEjD,WAAa,SACf,SAAW,OAAO,WAAW,UAAU,QAAQ,GAKjD,cAAc,KAAM,KAAM,OAAQ,QAAQ,CAC5C,CAMA,cAAe,KAAM,CACnB,OAAO,WAAW,KAAM,WAAU,EAElC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,0BAA2B,CAAC,EAE/E,KAAO,OAAO,WAAW,KAAK,KAAM,CAAE,OAAQ,EAAM,CAAC,EAIrD,cAAc,KAAM,KAAM,SAAS,CACrC,CAKA,OAAS,CAIP,GAAI,KAAK,MAAM,IAAM,SAAW,KAAK,MAAM,IAAM,OAAQ,CACvD,KAAK,OAAO,EAAI,KAChB,MACF,CAII,KAAK,MAAM,IAAM,YACnB,KAAK,MAAM,EAAI,OACf,KAAK,OAAO,EAAI,MAMlB,KAAK,QAAQ,EAAI,GAMjB,mBAAmB,QAAS,IAAI,EAI5B,KAAK,MAAM,IAAM,WACnB,mBAAmB,UAAW,IAAI,CAEtC,CAKA,IAAI,YAAc,CAGhB,OAFA,OAAO,WAAW,KAAM,WAAU,EAE1B,KAAK,MAAM,EAAG,CACpB,IAAK,QAAS,OAAO,KAAK,MAC1B,IAAK,UAAW,OAAO,KAAK,QAC5B,IAAK,OAAQ,OAAO,KAAK,IAC3B,CACF,CAKA,IAAI,QAAU,CACZ,cAAO,WAAW,KAAM,WAAU,EAI3B,KAAK,OAAO,CACrB,CAKA,IAAI,OAAS,CACX,cAAO,WAAW,KAAM,WAAU,EAI3B,KAAK,MAAM,CACpB,CAEA,IAAI,WAAa,CACf,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,OAAO,EAAE,OACvB,CAEA,IAAI,UAAW,GAAI,CACjB,OAAO,WAAW,KAAM,WAAU,EAE9B,KAAK,OAAO,EAAE,SAChB,KAAK,oBAAoB,UAAW,KAAK,OAAO,EAAE,OAAO,EAGvD,OAAO,IAAO,YAChB,KAAK,OAAO,EAAE,QAAU,GACxB,KAAK,iBAAiB,UAAW,EAAE,GAEnC,KAAK,OAAO,EAAE,QAAU,IAE5B,CAEA,IAAI,SAAW,CACb,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,OAAO,EAAE,KACvB,CAEA,IAAI,QAAS,GAAI,CACf,OAAO,WAAW,KAAM,WAAU,EAE9B,KAAK,OAAO,EAAE,OAChB,KAAK,oBAAoB,QAAS,KAAK,OAAO,EAAE,KAAK,EAGnD,OAAO,IAAO,YAChB,KAAK,OAAO,EAAE,MAAQ,GACtB,KAAK,iBAAiB,QAAS,EAAE,GAEjC,KAAK,OAAO,EAAE,MAAQ,IAE1B,CAEA,IAAI,aAAe,CACjB,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,OAAO,EAAE,SACvB,CAEA,IAAI,YAAa,GAAI,CACnB,OAAO,WAAW,KAAM,WAAU,EAE9B,KAAK,OAAO,EAAE,WAChB,KAAK,oBAAoB,YAAa,KAAK,OAAO,EAAE,SAAS,EAG3D,OAAO,IAAO,YAChB,KAAK,OAAO,EAAE,UAAY,GAC1B,KAAK,iBAAiB,YAAa,EAAE,GAErC,KAAK,OAAO,EAAE,UAAY,IAE9B,CAEA,IAAI,YAAc,CAChB,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,OAAO,EAAE,QACvB,CAEA,IAAI,WAAY,GAAI,CAClB,OAAO,WAAW,KAAM,WAAU,EAE9B,KAAK,OAAO,EAAE,UAChB,KAAK,oBAAoB,WAAY,KAAK,OAAO,EAAE,QAAQ,EAGzD,OAAO,IAAO,YAChB,KAAK,OAAO,EAAE,SAAW,GACzB,KAAK,iBAAiB,WAAY,EAAE,GAEpC,KAAK,OAAO,EAAE,SAAW,IAE7B,CAEA,IAAI,QAAU,CACZ,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,OAAO,EAAE,IACvB,CAEA,IAAI,OAAQ,GAAI,CACd,OAAO,WAAW,KAAM,WAAU,EAE9B,KAAK,OAAO,EAAE,MAChB,KAAK,oBAAoB,OAAQ,KAAK,OAAO,EAAE,IAAI,EAGjD,OAAO,IAAO,YAChB,KAAK,OAAO,EAAE,KAAO,GACrB,KAAK,iBAAiB,OAAQ,EAAE,GAEhC,KAAK,OAAO,EAAE,KAAO,IAEzB,CAEA,IAAI,SAAW,CACb,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,OAAO,EAAE,KACvB,CAEA,IAAI,QAAS,GAAI,CACf,OAAO,WAAW,KAAM,WAAU,EAE9B,KAAK,OAAO,EAAE,OAChB,KAAK,oBAAoB,QAAS,KAAK,OAAO,EAAE,KAAK,EAGnD,OAAO,IAAO,YAChB,KAAK,OAAO,EAAE,MAAQ,GACtB,KAAK,iBAAiB,QAAS,EAAE,GAEjC,KAAK,OAAO,EAAE,MAAQ,IAE1B,CACF,EAGA,WAAW,MAAQ,WAAW,UAAU,MAAQ,EAEhD,WAAW,QAAU,WAAW,UAAU,QAAU,EAEpD,WAAW,KAAO,WAAW,UAAU,KAAO,EAE9C,OAAO,iBAAiB,WAAW,UAAW,CAC5C,MAAO,0BACP,QAAS,0BACT,KAAM,0BACN,kBAAmB,oBACnB,mBAAoB,oBACpB,WAAY,oBACZ,cAAe,oBACf,MAAO,oBACP,WAAY,oBACZ,OAAQ,oBACR,MAAO,oBACP,YAAa,oBACb,WAAY,oBACZ,OAAQ,oBACR,QAAS,oBACT,QAAS,oBACT,UAAW,oBACX,CAAC,OAAO,WAAW,EAAG,CACpB,MAAO,aACP,SAAU,GACV,WAAY,GACZ,aAAc,EAChB,CACF,CAAC,EAED,OAAO,iBAAiB,WAAY,CAClC,MAAO,0BACP,QAAS,0BACT,KAAM,yBACR,CAAC,EAED,OAAO,QAAU,CACf,UACF,KCvVA,IAAAC,iBAAA,qHAEA,OAAO,QAAU,CACf,WAAY,kBAA2B,UACzC,KCJA,IAAAC,cAAA,kHAEA,IAAMC,QAAS,UAAQ,QAAQ,EACzB,CAAE,aAAc,EAAI,kBACpB,CAAE,iBAAkB,EAAI,gBAS9B,SAAS,UAAW,EAAG,EAAG,gBAAkB,GAAO,CACjD,IAAM,YAAc,cAAc,EAAG,eAAe,EAE9C,YAAc,cAAc,EAAG,eAAe,EAEpD,OAAO,cAAgB,WACzB,CANS,8BAYT,SAAS,YAAa,OAAQ,CAC5BA,QAAO,SAAW,IAAI,EAEtB,IAAM,OAAS,CAAC,EAEhB,QAAS,SAAS,OAAO,MAAM,GAAG,EAAG,CAGnC,GAFA,MAAQ,MAAM,KAAK,EAEd,MAAM,QAEJ,GAAI,CAAC,kBAAkB,KAAK,EACjC,aAFA,UAKF,OAAO,KAAK,KAAK,CACnB,CAEA,OAAO,MACT,CAlBS,kCAoBT,OAAO,QAAU,CACf,UACA,WACF,KChDA,qIAEA,GAAM,CAAE,UAAW,EAAI,mBACjB,CAAE,UAAW,YAAa,cAAe,EAAI,gBAC7C,CAAE,oBAAqB,WAAY,EAAI,eACvC,CAAE,YAAa,EAAI,kBACnB,CAAE,MAAO,EAAI,iBACb,CAAE,SAAU,aAAc,EAAI,mBAC9B,CAAE,OAAQ,EAAI,mBACd,CAAE,OAAQ,SAAU,OAAQ,MAAO,EAAI,mBACvC,CAAE,QAAS,EAAI,gBACf,CAAE,qBAAsB,sBAAuB,YAAa,EAAI,gBAChEC,QAAS,UAAQ,QAAQ,EACzB,CAAE,mBAAoB,EAAI,kBAgB1B,MAAN,MAAM,MAAM,CA7BZ,MA6BY,sBAKV,6BAEA,aAAe,CACT,UAAU,CAAC,IAAM,YACnB,OAAO,mBAAmB,EAG5B,KAAK,6BAA+B,UAAU,CAAC,CACjD,CAEA,MAAM,MAAOC,SAAS,QAAU,CAAC,EAAG,CAClC,OAAO,WAAW,KAAM,MAAK,EAC7B,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,aAAc,CAAC,EAElEA,SAAU,OAAO,WAAW,YAAYA,QAAO,EAC/C,QAAU,OAAO,WAAW,kBAAkB,OAAO,EAErD,IAAM,EAAI,MAAM,KAAK,SAASA,SAAS,OAAO,EAE9C,GAAI,EAAE,SAAW,EAIjB,OAAO,EAAE,CAAC,CACZ,CAEA,MAAM,SAAUA,SAAU,OAAW,QAAU,CAAC,EAAG,CACjD,OAAO,WAAW,KAAM,MAAK,EAEzBA,WAAY,SAAWA,SAAU,OAAO,WAAW,YAAYA,QAAO,GAC1E,QAAU,OAAO,WAAW,kBAAkB,OAAO,EAGrD,IAAI,EAAI,KAGR,GAAIA,WAAY,OACd,GAAIA,oBAAmB,SAKrB,GAHA,EAAIA,SAAQ,MAAM,EAGd,EAAE,SAAW,OAAS,CAAC,QAAQ,aACjC,MAAO,CAAC,OAED,OAAOA,UAAY,WAE5B,EAAI,IAAI,QAAQA,QAAO,EAAE,MAAM,GAMnC,IAAM,UAAY,CAAC,EAGnB,GAAIA,WAAY,OAEd,QAAW,mBAAmB,KAAK,6BACjC,UAAU,KAAK,gBAAgB,CAAC,CAAC,MAE9B,CAEL,IAAM,iBAAmB,KAAK,YAAY,EAAG,OAAO,EAGpD,QAAW,mBAAmB,iBAC5B,UAAU,KAAK,gBAAgB,CAAC,CAAC,CAErC,CAMA,IAAM,aAAe,CAAC,EAGtB,QAAW,YAAY,UAAW,CAEhC,IAAM,eAAiB,IAAI,SAAS,SAAS,MAAM,QAAU,IAAI,EAC3D,KAAO,eAAe,MAAM,EAAE,KACpC,eAAe,MAAM,EAAI,SACzB,eAAe,MAAM,EAAE,KAAO,KAC9B,eAAe,QAAQ,EAAE,YAAY,EAAI,SAAS,YAClD,eAAe,QAAQ,EAAE,MAAM,EAAI,YAEnC,aAAa,KAAK,cAAc,CAClC,CAGA,OAAO,OAAO,OAAO,YAAY,CACnC,CAEA,MAAM,IAAKA,SAAS,CAClB,OAAO,WAAW,KAAM,MAAK,EAC7B,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,WAAY,CAAC,EAEhEA,SAAU,OAAO,WAAW,YAAYA,QAAO,EAG/C,IAAM,SAAW,CAACA,QAAO,EAMzB,OAAO,MAHsB,KAAK,OAAO,QAAQ,CAInD,CAEA,MAAM,OAAQ,SAAU,CACtB,OAAO,WAAW,KAAM,MAAK,EAC7B,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,cAAe,CAAC,EAEnE,SAAW,OAAO,WAAW,uBAAuB,EAAE,QAAQ,EAG9D,IAAM,iBAAmB,CAAC,EAGpB,YAAc,CAAC,EAGrB,QAAWA,YAAW,SAAU,CAC9B,GAAI,OAAOA,UAAY,SACrB,SAIF,IAAM,EAAIA,SAAQ,MAAM,EAGxB,GAAI,CAAC,qBAAqB,EAAE,GAAG,GAAK,EAAE,SAAW,MAC/C,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,eACR,QAAS,gDACX,CAAC,CAEL,CAIA,IAAM,iBAAmB,CAAC,EAG1B,QAAWA,YAAW,SAAU,CAE9B,IAAM,EAAI,IAAI,QAAQA,QAAO,EAAE,MAAM,EAGrC,GAAI,CAAC,qBAAqB,EAAE,GAAG,EAC7B,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,eACR,QAAS,yBACX,CAAC,EAIH,EAAE,UAAY,QACd,EAAE,YAAc,cAGhB,YAAY,KAAK,CAAC,EAGlB,IAAM,gBAAkB,sBAAsB,EAG9C,iBAAiB,KAAK,SAAS,CAC7B,QAAS,EACT,WAAY,oBAAoB,EAChC,gBAAiB,SAAU,CAEzB,GAAI,SAAS,OAAS,SAAW,SAAS,SAAW,KAAO,SAAS,OAAS,KAAO,SAAS,OAAS,IACrG,gBAAgB,OAAO,OAAO,OAAO,UAAU,CAC7C,OAAQ,eACR,QAAS,wDACX,CAAC,CAAC,UACO,SAAS,YAAY,SAAS,MAAM,EAAG,CAEhD,IAAM,YAAc,eAAe,SAAS,YAAY,IAAI,MAAM,CAAC,EAGnE,QAAW,cAAc,YAEvB,GAAI,aAAe,IAAK,CACtB,gBAAgB,OAAO,OAAO,OAAO,UAAU,CAC7C,OAAQ,eACR,QAAS,0BACX,CAAC,CAAC,EAEF,QAAW,cAAc,iBACvB,WAAW,MAAM,EAGnB,MACF,CAEJ,CACF,EACA,yBAA0B,SAAU,CAElC,GAAI,SAAS,QAAS,CACpB,gBAAgB,OAAO,IAAI,aAAa,UAAW,YAAY,CAAC,EAChE,MACF,CAGA,gBAAgB,QAAQ,QAAQ,CAClC,CACF,CAAC,CAAC,EAGF,iBAAiB,KAAK,gBAAgB,OAAO,CAC/C,CAMA,IAAM,UAAY,MAHR,QAAQ,IAAI,gBAAgB,EAMhC,WAAa,CAAC,EAGhB,MAAQ,EAGZ,QAAW,YAAY,UAAW,CAGhC,IAAM,UAAY,CAChB,KAAM,MACN,QAAS,YAAY,KAAK,EAC1B,QACF,EAEA,WAAW,KAAK,SAAS,EAEzB,OACF,CAGA,IAAM,gBAAkB,sBAAsB,EAG1C,UAAY,KAGhB,GAAI,CACF,KAAK,sBAAsB,UAAU,CACvC,OAAS,EAAG,CACV,UAAY,CACd,CAGA,sBAAe,IAAM,CAEf,YAAc,KAChB,gBAAgB,QAAQ,MAAS,EAGjC,gBAAgB,OAAO,SAAS,CAEpC,CAAC,EAGM,gBAAgB,OACzB,CAEA,MAAM,IAAKA,SAAS,SAAU,CAC5B,OAAO,WAAW,KAAM,MAAK,EAC7B,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,WAAY,CAAC,EAEhEA,SAAU,OAAO,WAAW,YAAYA,QAAO,EAC/C,SAAW,OAAO,WAAW,SAAS,QAAQ,EAG9C,IAAI,aAAe,KAUnB,GAPIA,oBAAmB,QACrB,aAAeA,SAAQ,MAAM,EAE7B,aAAe,IAAI,QAAQA,QAAO,EAAE,MAAM,EAIxC,CAAC,qBAAqB,aAAa,GAAG,GAAK,aAAa,SAAW,MACrE,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,YACR,QAAS,kDACX,CAAC,EAIH,IAAM,cAAgB,SAAS,MAAM,EAGrC,GAAI,cAAc,SAAW,IAC3B,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,YACR,QAAS,gBACX,CAAC,EAIH,GAAI,cAAc,YAAY,SAAS,MAAM,EAAG,CAE9C,IAAM,YAAc,eAAe,cAAc,YAAY,IAAI,MAAM,CAAC,EAGxE,QAAW,cAAc,YAEvB,GAAI,aAAe,IACjB,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,YACR,QAAS,wBACX,CAAC,CAGP,CAGA,GAAI,cAAc,OAAS,YAAY,cAAc,KAAK,MAAM,GAAK,cAAc,KAAK,OAAO,QAC7F,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,YACR,QAAS,sCACX,CAAC,EAIH,IAAM,eAAiB,cAAc,aAAa,EAG5C,gBAAkB,sBAAsB,EAG9C,GAAI,cAAc,MAAQ,KAAM,CAK9B,IAAM,OAHS,cAAc,KAAK,OAGZ,UAAU,EAGhC,aAAa,MAAM,EAAE,KAAK,gBAAgB,QAAS,gBAAgB,MAAM,CAC3E,MACE,gBAAgB,QAAQ,MAAS,EAKnC,IAAM,WAAa,CAAC,EAId,UAAY,CAChB,KAAM,MACN,QAAS,aACT,SAAU,cACZ,EAGA,WAAW,KAAK,SAAS,EAGzB,IAAM,MAAQ,MAAM,gBAAgB,QAEhC,eAAe,MAAQ,OACzB,eAAe,KAAK,OAAS,OAI/B,IAAM,gBAAkB,sBAAsB,EAG1C,UAAY,KAGhB,GAAI,CACF,KAAK,sBAAsB,UAAU,CACvC,OAAS,EAAG,CACV,UAAY,CACd,CAGA,sBAAe,IAAM,CAEf,YAAc,KAChB,gBAAgB,QAAQ,EAExB,gBAAgB,OAAO,SAAS,CAEpC,CAAC,EAEM,gBAAgB,OACzB,CAEA,MAAM,OAAQA,SAAS,QAAU,CAAC,EAAG,CACnC,OAAO,WAAW,KAAM,MAAK,EAC7B,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,cAAe,CAAC,EAEnEA,SAAU,OAAO,WAAW,YAAYA,QAAO,EAC/C,QAAU,OAAO,WAAW,kBAAkB,OAAO,EAKrD,IAAI,EAAI,KAER,GAAIA,oBAAmB,SAGrB,GAFA,EAAIA,SAAQ,MAAM,EAEd,EAAE,SAAW,OAAS,CAAC,QAAQ,aACjC,MAAO,QAGTD,QAAO,OAAOC,UAAY,QAAQ,EAElC,EAAI,IAAI,QAAQA,QAAO,EAAE,MAAM,EAIjC,IAAM,WAAa,CAAC,EAGd,UAAY,CAChB,KAAM,SACN,QAAS,EACT,OACF,EAEA,WAAW,KAAK,SAAS,EAEzB,IAAM,gBAAkB,sBAAsB,EAE1C,UAAY,KACZ,iBAEJ,GAAI,CACF,iBAAmB,KAAK,sBAAsB,UAAU,CAC1D,OAAS,EAAG,CACV,UAAY,CACd,CAEA,sBAAe,IAAM,CACf,YAAc,KAChB,gBAAgB,QAAQ,CAAC,CAAC,kBAAkB,MAAM,EAElD,gBAAgB,OAAO,SAAS,CAEpC,CAAC,EAEM,gBAAgB,OACzB,CAQA,MAAM,KAAMA,SAAU,OAAW,QAAU,CAAC,EAAG,CAC7C,OAAO,WAAW,KAAM,MAAK,EAEzBA,WAAY,SAAWA,SAAU,OAAO,WAAW,YAAYA,QAAO,GAC1E,QAAU,OAAO,WAAW,kBAAkB,OAAO,EAGrD,IAAI,EAAI,KAGR,GAAIA,WAAY,OAEd,GAAIA,oBAAmB,SAKrB,GAHA,EAAIA,SAAQ,MAAM,EAGd,EAAE,SAAW,OAAS,CAAC,QAAQ,aACjC,MAAO,CAAC,OAED,OAAOA,UAAY,WAC5B,EAAI,IAAI,QAAQA,QAAO,EAAE,MAAM,GAKnC,IAAM,QAAU,sBAAsB,EAIhC,SAAW,CAAC,EAGlB,GAAIA,WAAY,OAEd,QAAW,mBAAmB,KAAK,6BAEjC,SAAS,KAAK,gBAAgB,CAAC,CAAC,MAE7B,CAEL,IAAM,iBAAmB,KAAK,YAAY,EAAG,OAAO,EAGpD,QAAW,mBAAmB,iBAE5B,SAAS,KAAK,gBAAgB,CAAC,CAAC,CAEpC,CAGA,sBAAe,IAAM,CAEnB,IAAM,YAAc,CAAC,EAGrB,QAAWA,YAAW,SAAU,CAC9B,IAAM,cAAgB,IAAI,QAAQ,WAAW,EAC7C,cAAc,MAAM,EAAIA,SACxB,cAAc,QAAQ,EAAE,YAAY,EAAIA,SAAQ,YAChD,cAAc,QAAQ,EAAE,MAAM,EAAI,YAClC,cAAc,MAAM,EAAIA,SAAQ,OAGhC,YAAY,KAAK,aAAa,CAChC,CAGA,QAAQ,QAAQ,OAAO,OAAO,WAAW,CAAC,CAC5C,CAAC,EAEM,QAAQ,OACjB,CAOA,sBAAuB,WAAY,CAEjC,IAAM,MAAQ,KAAK,6BAGb,YAAc,CAAC,GAAG,KAAK,EAGvB,WAAa,CAAC,EAGd,WAAa,CAAC,EAEpB,GAAI,CAEF,QAAW,aAAa,WAAY,CAElC,GAAI,UAAU,OAAS,UAAY,UAAU,OAAS,MACpD,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,8BACR,QAAS,iDACX,CAAC,EAIH,GAAI,UAAU,OAAS,UAAY,UAAU,UAAY,KACvD,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,8BACR,QAAS,yDACX,CAAC,EAIH,GAAI,KAAK,YAAY,UAAU,QAAS,UAAU,QAAS,UAAU,EAAE,OACrE,MAAM,IAAI,aAAa,MAAO,mBAAmB,EAInD,IAAI,iBAGJ,GAAI,UAAU,OAAS,SAAU,CAK/B,GAHA,iBAAmB,KAAK,YAAY,UAAU,QAAS,UAAU,OAAO,EAGpE,iBAAiB,SAAW,EAC9B,MAAO,CAAC,EAIV,QAAW,mBAAmB,iBAAkB,CAC9C,IAAM,IAAM,MAAM,QAAQ,eAAe,EACzCD,QAAO,MAAQ,EAAE,EAGjB,MAAM,OAAO,IAAK,CAAC,CACrB,CACF,SAAW,UAAU,OAAS,MAAO,CAEnC,GAAI,UAAU,UAAY,KACxB,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,8BACR,QAAS,kDACX,CAAC,EAIH,IAAM,EAAI,UAAU,QAGpB,GAAI,CAAC,qBAAqB,EAAE,GAAG,EAC7B,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,8BACR,QAAS,+BACX,CAAC,EAIH,GAAI,EAAE,SAAW,MACf,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,8BACR,QAAS,gBACX,CAAC,EAIH,GAAI,UAAU,SAAW,KACvB,MAAM,OAAO,OAAO,UAAU,CAC5B,OAAQ,8BACR,QAAS,6BACX,CAAC,EAIH,iBAAmB,KAAK,YAAY,UAAU,OAAO,EAGrD,QAAW,mBAAmB,iBAAkB,CAC9C,IAAM,IAAM,MAAM,QAAQ,eAAe,EACzCA,QAAO,MAAQ,EAAE,EAGjB,MAAM,OAAO,IAAK,CAAC,CACrB,CAGA,MAAM,KAAK,CAAC,UAAU,QAAS,UAAU,QAAQ,CAAC,EAGlD,WAAW,KAAK,CAAC,UAAU,QAAS,UAAU,QAAQ,CAAC,CACzD,CAGA,WAAW,KAAK,CAAC,UAAU,QAAS,UAAU,QAAQ,CAAC,CACzD,CAGA,OAAO,UACT,OAAS,EAAG,CAEV,WAAK,6BAA6B,OAAS,EAG3C,KAAK,6BAA+B,YAG9B,CACR,CACF,CASA,YAAa,aAAc,QAAS,cAAe,CAEjD,IAAM,WAAa,CAAC,EAEd,QAAU,eAAiB,KAAK,6BAEtC,QAAW,mBAAmB,QAAS,CACrC,GAAM,CAAC,cAAe,cAAc,EAAI,gBACpC,KAAK,0BAA0B,aAAc,cAAe,eAAgB,OAAO,GACrF,WAAW,KAAK,eAAe,CAEnC,CAEA,OAAO,UACT,CAUA,0BAA2B,aAAcC,SAAS,SAAW,KAAM,QAAS,CAK1E,IAAM,SAAW,IAAI,IAAI,aAAa,GAAG,EAEnC,UAAY,IAAI,IAAIA,SAAQ,GAAG,EAQrC,GANI,SAAS,eACX,UAAU,OAAS,GAEnB,SAAS,OAAS,IAGhB,CAAC,UAAU,SAAU,UAAW,EAAI,EACtC,MAAO,GAGT,GACE,UAAY,MACZ,SAAS,YACT,CAAC,SAAS,YAAY,SAAS,MAAM,EAErC,MAAO,GAGT,IAAM,YAAc,eAAe,SAAS,YAAY,IAAI,MAAM,CAAC,EAEnE,QAAW,cAAc,YAAa,CACpC,GAAI,aAAe,IACjB,MAAO,GAGT,IAAM,aAAeA,SAAQ,YAAY,IAAI,UAAU,EACjD,WAAa,aAAa,YAAY,IAAI,UAAU,EAI1D,GAAI,eAAiB,WACnB,MAAO,EAEX,CAEA,MAAO,EACT,CACF,EAEA,OAAO,iBAAiB,MAAM,UAAW,CACvC,CAAC,OAAO,WAAW,EAAG,CACpB,MAAO,QACP,aAAc,EAChB,EACA,MAAO,oBACP,SAAU,oBACV,IAAK,oBACL,OAAQ,oBACR,IAAK,oBACL,OAAQ,oBACR,KAAM,mBACR,CAAC,EAED,IAAM,2BAA6B,CACjC,CACE,IAAK,eACL,UAAW,OAAO,WAAW,QAC7B,aAAc,EAChB,EACA,CACE,IAAK,eACL,UAAW,OAAO,WAAW,QAC7B,aAAc,EAChB,EACA,CACE,IAAK,aACL,UAAW,OAAO,WAAW,QAC7B,aAAc,EAChB,CACF,EAEA,OAAO,WAAW,kBAAoB,OAAO,oBAAoB,0BAA0B,EAE3F,OAAO,WAAW,uBAAyB,OAAO,oBAAoB,CACpE,GAAG,2BACH,CACE,IAAK,YACL,UAAW,OAAO,WAAW,SAC/B,CACF,CAAC,EAED,OAAO,WAAW,SAAW,OAAO,mBAAmB,QAAQ,EAE/D,OAAO,WAAW,uBAAuB,EAAI,OAAO,kBAClD,OAAO,WAAW,WACpB,EAEA,OAAO,QAAU,CACf,KACF,KCr0BA,mJAEA,GAAM,CAAE,UAAW,EAAI,mBACjB,CAAE,KAAM,EAAI,gBACZ,CAAE,MAAO,EAAI,iBACb,CAAE,mBAAoB,EAAI,eAE1B,aAAN,MAAM,aAAa,CAPnB,MAOmB,6BAKjB,QAAU,IAAI,IAEd,aAAe,CACT,UAAU,CAAC,IAAM,YACnB,OAAO,mBAAmB,CAE9B,CAEA,MAAM,MAAOC,SAAS,QAAU,CAAC,EAAG,CAQlC,GAPA,OAAO,WAAW,KAAM,aAAY,EACpC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,oBAAqB,CAAC,EAEzEA,SAAU,OAAO,WAAW,YAAYA,QAAO,EAC/C,QAAU,OAAO,WAAW,uBAAuB,OAAO,EAGtD,QAAQ,WAAa,MAEvB,GAAI,KAAK,QAAQ,IAAI,QAAQ,SAAS,EAAG,CAEvC,IAAM,UAAY,KAAK,QAAQ,IAAI,QAAQ,SAAS,EAGpD,OAAO,MAFO,IAAI,MAAM,WAAY,SAAS,EAE1B,MAAMA,SAAS,OAAO,CAC3C,MAGA,SAAW,aAAa,KAAK,QAAQ,OAAO,EAAG,CAI7C,IAAM,SAAW,MAHH,IAAI,MAAM,WAAY,SAAS,EAGhB,MAAMA,SAAS,OAAO,EAEnD,GAAI,WAAa,OACf,OAAO,QAEX,CAEJ,CAOA,MAAM,IAAK,UAAW,CACpB,cAAO,WAAW,KAAM,aAAY,EACpC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,kBAAmB,CAAC,EAEvE,UAAY,OAAO,WAAW,UAAU,SAAS,EAI1C,KAAK,QAAQ,IAAI,SAAS,CACnC,CAOA,MAAM,KAAM,UAAW,CAOrB,GANA,OAAO,WAAW,KAAM,aAAY,EACpC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,mBAAoB,CAAC,EAExE,UAAY,OAAO,WAAW,UAAU,SAAS,EAG7C,KAAK,QAAQ,IAAI,SAAS,EAAG,CAI/B,IAAMC,OAAQ,KAAK,QAAQ,IAAI,SAAS,EAGxC,OAAO,IAAI,MAAM,WAAYA,MAAK,CACpC,CAGA,IAAM,MAAQ,CAAC,EAGf,YAAK,QAAQ,IAAI,UAAW,KAAK,EAG1B,IAAI,MAAM,WAAY,KAAK,CACpC,CAOA,MAAM,OAAQ,UAAW,CACvB,cAAO,WAAW,KAAM,aAAY,EACpC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,qBAAsB,CAAC,EAE1E,UAAY,OAAO,WAAW,UAAU,SAAS,EAE1C,KAAK,QAAQ,OAAO,SAAS,CACtC,CAMA,MAAM,MAAQ,CACZ,cAAO,WAAW,KAAM,aAAY,EAM7B,CAAC,GAHK,KAAK,QAAQ,KAAK,CAGhB,CACjB,CACF,EAEA,OAAO,iBAAiB,aAAa,UAAW,CAC9C,CAAC,OAAO,WAAW,EAAG,CACpB,MAAO,eACP,aAAc,EAChB,EACA,MAAO,oBACP,IAAK,oBACL,KAAM,oBACN,OAAQ,oBACR,KAAM,mBACR,CAAC,EAED,OAAO,QAAU,CACf,YACF,KC/IA,IAAAC,mBAAA,yHAQA,OAAO,QAAU,CACf,2BACA,yBACF,KCXA,IAAAC,cAAA,oHAEA,IAAMC,QAAS,UAAQ,QAAQ,EACzB,CAAE,YAAa,EAAI,kBAEzB,SAAS,mBAAoB,MAAO,CAClC,GAAI,MAAM,SAAW,EACnB,MAAO,GAGT,QAAW,QAAQ,MAAO,CACxB,IAAM,KAAO,KAAK,WAAW,CAAC,EAE9B,GACG,MAAQ,GAAQ,MAAQ,GACxB,MAAQ,IAAQ,MAAQ,IACzB,OAAS,IAET,MAAO,EAEX,CACF,CAhBS,gDA2BT,SAAS,mBAAoB,KAAM,CACjC,QAAW,QAAQ,KAAM,CACvB,IAAM,KAAO,KAAK,WAAW,CAAC,EAE9B,GACG,MAAQ,IAAQ,KAAO,KACxB,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,MACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,IAET,MAAM,IAAI,MAAM,qBAAqB,CAEzC,CACF,CA3BS,gDAqCT,SAAS,oBAAqB,MAAO,CACnC,QAAW,QAAQ,MAAO,CACxB,IAAM,KAAO,KAAK,WAAW,CAAC,EAE9B,GACE,KAAO,IACP,OAAS,IACT,OAAS,IACT,OAAS,IACT,OAAS,IACT,KAAO,IAEP,MAAM,IAAI,MAAM,sBAAsB,CAE1C,CACF,CAfS,kDAqBT,SAAS,mBAAoB,KAAM,CACjC,QAAW,QAAQ,KAGjB,GAFa,KAAK,WAAW,CAAC,EAEnB,IAAQ,OAAS,IAC1B,MAAM,IAAI,MAAM,qBAAqB,CAG3C,CARS,gDAeT,SAAS,qBAAsB,OAAQ,CACrC,GACE,OAAO,WAAW,GAAG,GACrB,OAAO,SAAS,GAAG,GACnB,OAAO,SAAS,GAAG,EAEnB,MAAM,IAAI,MAAM,uBAAuB,CAE3C,CARS,oDAmDT,SAAS,UAAW,KAAM,CACpB,OAAO,MAAS,WAClB,KAAO,IAAI,KAAK,IAAI,GAGtB,IAAM,KAAO,CACX,MAAO,MAAO,MAAO,MACrB,MAAO,MAAO,KAChB,EAEM,OAAS,CACb,MAAO,MAAO,MAAO,MAAO,MAAO,MACnC,MAAO,MAAO,MAAO,MAAO,MAAO,KACrC,EAEM,QAAU,KAAK,KAAK,UAAU,CAAC,EAC/B,IAAM,KAAK,WAAW,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,EAClD,MAAQ,OAAO,KAAK,YAAY,CAAC,EACjC,KAAO,KAAK,eAAe,EAC3B,KAAO,KAAK,YAAY,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,EACpD,OAAS,KAAK,cAAc,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,EACxD,OAAS,KAAK,cAAc,EAAE,SAAS,EAAE,SAAS,EAAG,GAAG,EAE9D,MAAO,GAAG,OAAO,KAAK,GAAG,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,MAAM,IAAI,MAAM,MACxE,CAxBS,8BAiCT,SAAS,qBAAsB,OAAQ,CACrC,GAAI,OAAS,EACX,MAAM,IAAI,MAAM,wBAAwB,CAE5C,CAJS,oDAUT,SAAS,UAAW,OAAQ,CAC1B,GAAI,OAAO,KAAK,SAAW,EACzB,OAAO,KAGT,mBAAmB,OAAO,IAAI,EAC9B,oBAAoB,OAAO,KAAK,EAEhC,IAAM,IAAM,CAAC,GAAG,OAAO,IAAI,IAAI,OAAO,KAAK,EAAE,EAIzC,OAAO,KAAK,WAAW,WAAW,IACpC,OAAO,OAAS,IAGd,OAAO,KAAK,WAAW,SAAS,IAClC,OAAO,OAAS,GAChB,OAAO,OAAS,KAChB,OAAO,KAAO,KAGZ,OAAO,QACT,IAAI,KAAK,QAAQ,EAGf,OAAO,UACT,IAAI,KAAK,UAAU,EAGjB,OAAO,OAAO,QAAW,WAC3B,qBAAqB,OAAO,MAAM,EAClC,IAAI,KAAK,WAAW,OAAO,MAAM,EAAE,GAGjC,OAAO,SACT,qBAAqB,OAAO,MAAM,EAClC,IAAI,KAAK,UAAU,OAAO,MAAM,EAAE,GAGhC,OAAO,OACT,mBAAmB,OAAO,IAAI,EAC9B,IAAI,KAAK,QAAQ,OAAO,IAAI,EAAE,GAG5B,OAAO,SAAW,OAAO,QAAQ,SAAS,IAAM,gBAClD,IAAI,KAAK,WAAW,UAAU,OAAO,OAAO,CAAC,EAAE,EAG7C,OAAO,UACT,IAAI,KAAK,YAAY,OAAO,QAAQ,EAAE,EAGxC,QAAW,QAAQ,OAAO,SAAU,CAClC,GAAI,CAAC,KAAK,SAAS,GAAG,EACpB,MAAM,IAAI,MAAM,kBAAkB,EAGpC,GAAM,CAAC,IAAK,GAAG,KAAK,EAAI,KAAK,MAAM,GAAG,EAEtC,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,IAAI,MAAM,KAAK,GAAG,CAAC,EAAE,CAC7C,CAEA,OAAO,IAAI,KAAK,IAAI,CACtB,CAhES,8BAkET,IAAI,iBAEJ,SAAS,eAAgB,QAAS,CAChC,GAAI,QAAQ,YAAY,EACtB,OAAO,QAAQ,YAAY,EAGxB,mBACH,iBAAmB,OAAO,sBAAsB,OAAO,EAAE,KACtD,QAAW,OAAO,cAAgB,cACrC,EAEAA,QAAO,iBAAkB,0BAA0B,GAGrD,IAAM,YAAc,QAAQ,gBAAgB,EAC5C,OAAAA,QAAO,WAAW,EAEX,WACT,CAjBS,wCAmBT,OAAO,QAAU,CACf,mBACA,UACA,cACF,KClSA,uIAEA,GAAM,CAAE,qBAAsB,qBAAsB,EAAI,qBAClD,CAAE,kBAAmB,EAAI,gBACzB,CAAE,gCAAiC,EAAI,kBACvCC,QAAS,UAAQ,QAAQ,EAQ/B,SAAS,eAAgB,OAAQ,CAI/B,GAAI,mBAAmB,MAAM,EAC3B,OAAO,KAGT,IAAI,cAAgB,GAChB,mBAAqB,GACrB,KAAO,GACP,MAAQ,GAGZ,GAAI,OAAO,SAAS,GAAG,EAAG,CAKxB,IAAM,SAAW,CAAE,SAAU,CAAE,EAE/B,cAAgB,iCAAiC,IAAK,OAAQ,QAAQ,EACtE,mBAAqB,OAAO,MAAM,SAAS,QAAQ,CACrD,MAME,cAAgB,OAMlB,GAAI,CAAC,cAAc,SAAS,GAAG,EAC7B,MAAQ,kBACH,CAKL,IAAM,SAAW,CAAE,SAAU,CAAE,EAC/B,KAAO,iCACL,IACA,cACA,QACF,EACA,MAAQ,cAAc,MAAM,SAAS,SAAW,CAAC,CACnD,CAUA,OANA,KAAO,KAAK,KAAK,EACjB,MAAQ,MAAM,KAAK,EAKf,KAAK,OAAS,MAAM,OAAS,qBACxB,KAKF,CACL,KAAM,MAAO,GAAG,wBAAwB,kBAAkB,CAC5D,CACF,CApES,wCA4ET,SAAS,wBAAyB,mBAAoB,oBAAsB,CAAC,EAAG,CAG9E,GAAI,mBAAmB,SAAW,EAChC,OAAO,oBAKTA,QAAO,mBAAmB,CAAC,IAAM,GAAG,EACpC,mBAAqB,mBAAmB,MAAM,CAAC,EAE/C,IAAI,SAAW,GAIX,mBAAmB,SAAS,GAAG,GAGjC,SAAW,iCACT,IACA,mBACA,CAAE,SAAU,CAAE,CAChB,EACA,mBAAqB,mBAAmB,MAAM,SAAS,MAAM,IAK7D,SAAW,mBACX,mBAAqB,IAKvB,IAAI,cAAgB,GAChB,eAAiB,GAGrB,GAAI,SAAS,SAAS,GAAG,EAAG,CAM1B,IAAM,SAAW,CAAE,SAAU,CAAE,EAE/B,cAAgB,iCACd,IACA,SACA,QACF,EACA,eAAiB,SAAS,MAAM,SAAS,SAAW,CAAC,CACvD,MAKE,cAAgB,SAUlB,GALA,cAAgB,cAAc,KAAK,EACnC,eAAiB,eAAe,KAAK,EAIjC,eAAe,OAAS,sBAC1B,OAAO,wBAAwB,mBAAoB,mBAAmB,EAMxE,IAAM,uBAAyB,cAAc,YAAY,EAKzD,GAAI,yBAA2B,UAAW,CAGxC,IAAM,WAAa,IAAI,KAAK,cAAc,EAK1C,oBAAoB,QAAU,UAChC,SAAW,yBAA2B,UAAW,CAO/C,IAAM,SAAW,eAAe,WAAW,CAAC,EAQ5C,IANK,SAAW,IAAM,SAAW,KAAO,eAAe,CAAC,IAAM,KAM1D,CAAC,QAAQ,KAAK,cAAc,EAC9B,OAAO,wBAAwB,mBAAoB,mBAAmB,EAIxE,IAAM,aAAe,OAAO,cAAc,EAiB1C,oBAAoB,OAAS,YAC/B,SAAW,yBAA2B,SAAU,CAM9C,IAAI,aAAe,eAIf,aAAa,CAAC,IAAM,MACtB,aAAe,aAAa,MAAM,CAAC,GAIrC,aAAe,aAAa,YAAY,EAIxC,oBAAoB,OAAS,YAC/B,SAAW,yBAA2B,OAAQ,CAO5C,IAAI,WAAa,GACb,eAAe,SAAW,GAAK,eAAe,CAAC,IAAM,IAEvD,WAAa,IAKb,WAAa,eAKf,oBAAoB,KAAO,UAC7B,SAAW,yBAA2B,SAMpC,oBAAoB,OAAS,WACpB,yBAA2B,WAOpC,oBAAoB,SAAW,WACtB,yBAA2B,WAAY,CAMhD,IAAI,YAAc,UAEZ,wBAA0B,eAAe,YAAY,EAGvD,wBAAwB,SAAS,MAAM,IACzC,YAAc,QAKZ,wBAAwB,SAAS,QAAQ,IAC3C,YAAc,UAKZ,wBAAwB,SAAS,KAAK,IACxC,YAAc,OAMhB,oBAAoB,SAAW,WACjC,MACE,oBAAoB,WAAa,CAAC,EAElC,oBAAoB,SAAS,KAAK,GAAG,aAAa,IAAI,cAAc,EAAE,EAIxE,OAAO,wBAAwB,mBAAoB,mBAAmB,CACxE,CA9NS,0DAgOT,OAAO,QAAU,CACf,eACA,uBACF,KC5TA,yIAEA,GAAM,CAAE,cAAe,EAAI,gBACrB,CAAE,UAAW,cAAe,EAAI,gBAChC,CAAE,MAAO,EAAI,iBACb,CAAE,OAAQ,EAAI,kBAoBpB,SAAS,WAAY,QAAS,CAC5B,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,YAAa,CAAC,EAEjE,OAAO,WAAW,QAAS,QAAS,CAAE,OAAQ,EAAM,CAAC,EAErD,IAAM,OAAS,QAAQ,IAAI,QAAQ,EAC7B,IAAM,CAAC,EAEb,GAAI,CAAC,OACH,OAAO,IAGT,QAAW,SAAS,OAAO,MAAM,GAAG,EAAG,CACrC,GAAM,CAAC,KAAM,GAAG,KAAK,EAAI,MAAM,MAAM,GAAG,EAExC,IAAI,KAAK,KAAK,CAAC,EAAI,MAAM,KAAK,GAAG,CACnC,CAEA,OAAO,GACT,CAnBS,gCA2BT,SAAS,aAAc,QAAS,KAAM,WAAY,CAChD,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,cAAe,CAAC,EAEnE,OAAO,WAAW,QAAS,QAAS,CAAE,OAAQ,EAAM,CAAC,EAErD,KAAO,OAAO,WAAW,UAAU,IAAI,EACvC,WAAa,OAAO,WAAW,uBAAuB,UAAU,EAIhE,UAAU,QAAS,CACjB,KACA,MAAO,GACP,QAAS,IAAI,KAAK,CAAC,EACnB,GAAG,UACL,CAAC,CACH,CAhBS,oCAsBT,SAAS,cAAe,QAAS,CAC/B,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,eAAgB,CAAC,EAEpE,OAAO,WAAW,QAAS,QAAS,CAAE,OAAQ,EAAM,CAAC,EAErD,IAAM,QAAU,eAAe,OAAO,EAAE,QAExC,OAAK,QAKE,QAAQ,IAAK,MAAS,eAAe,MAAM,QAAQ,IAAI,EAAI,KAAK,CAAC,EAAI,IAAI,CAAC,EAJxE,CAAC,CAKZ,CAbS,sCAoBT,SAAS,UAAW,QAAS,OAAQ,CACnC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,WAAY,CAAC,EAEhE,OAAO,WAAW,QAAS,QAAS,CAAE,OAAQ,EAAM,CAAC,EAErD,OAAS,OAAO,WAAW,OAAO,MAAM,EAE5B,UAAU,MAAM,GAG1B,QAAQ,OAAO,aAAc,UAAU,MAAM,CAAC,CAElD,CAZS,8BAcT,OAAO,WAAW,uBAAyB,OAAO,oBAAoB,CACpE,CACE,UAAW,OAAO,kBAAkB,OAAO,WAAW,SAAS,EAC/D,IAAK,OACL,aAAc,IAChB,EACA,CACE,UAAW,OAAO,kBAAkB,OAAO,WAAW,SAAS,EAC/D,IAAK,SACL,aAAc,IAChB,CACF,CAAC,EAED,OAAO,WAAW,OAAS,OAAO,oBAAoB,CACpD,CACE,UAAW,OAAO,WAAW,UAC7B,IAAK,MACP,EACA,CACE,UAAW,OAAO,WAAW,UAC7B,IAAK,OACP,EACA,CACE,UAAW,OAAO,kBAAmB,OAC/B,OAAO,OAAU,SACZ,OAAO,WAAW,oBAAoB,EAAE,KAAK,EAG/C,IAAI,KAAK,KAAK,CACtB,EACD,IAAK,UACL,aAAc,IAChB,EACA,CACE,UAAW,OAAO,kBAAkB,OAAO,WAAW,WAAW,CAAC,EAClE,IAAK,SACL,aAAc,IAChB,EACA,CACE,UAAW,OAAO,kBAAkB,OAAO,WAAW,SAAS,EAC/D,IAAK,SACL,aAAc,IAChB,EACA,CACE,UAAW,OAAO,kBAAkB,OAAO,WAAW,SAAS,EAC/D,IAAK,OACL,aAAc,IAChB,EACA,CACE,UAAW,OAAO,kBAAkB,OAAO,WAAW,OAAO,EAC7D,IAAK,SACL,aAAc,IAChB,EACA,CACE,UAAW,OAAO,kBAAkB,OAAO,WAAW,OAAO,EAC7D,IAAK,WACL,aAAc,IAChB,EACA,CACE,UAAW,OAAO,WAAW,UAC7B,IAAK,WACL,cAAe,CAAC,SAAU,MAAO,MAAM,CACzC,EACA,CACE,UAAW,OAAO,kBAAkB,OAAO,WAAW,SAAS,EAC/D,IAAK,WACL,aAAc,CAAC,CACjB,CACF,CAAC,EAED,OAAO,QAAU,CACf,WACA,aACA,cACA,SACF,KCvLA,IAAAC,mBAAA,2HAMA,IAAM,IAAM,uCAGN,0BAA4B,CAChC,WAAY,GACZ,SAAU,GACV,aAAc,EAChB,EAEM,OAAS,CACb,WAAY,EACZ,KAAM,EACN,QAAS,EACT,OAAQ,CACV,EAEM,QAAU,CACd,aAAc,EACd,KAAM,EACN,OAAQ,EACR,MAAO,EACP,KAAM,EACN,KAAM,EACR,EAEM,iBAAmB,GAAK,GAAK,EAE7B,aAAe,CACnB,KAAM,EACN,iBAAkB,EAClB,iBAAkB,EAClB,UAAW,CACb,EAEM,YAAc,OAAO,YAAY,CAAC,EAExC,OAAO,QAAU,CACf,IACA,0BACA,OACA,QACA,iBACA,aACA,WACF,KClDA,IAAAC,iBAAA,yHAEA,OAAO,QAAU,CACf,cAAe,OAAO,KAAK,EAC3B,YAAa,OAAO,aAAa,EACjC,YAAa,OAAO,YAAY,EAChC,UAAW,OAAO,UAAU,EAC5B,YAAa,OAAO,aAAa,EACjC,WAAY,OAAO,YAAY,EAC/B,eAAgB,OAAO,gBAAgB,EACvC,YAAa,OAAO,aAAa,CACnC,KCXA,2IAEA,GAAM,CAAE,MAAO,EAAI,iBACb,CAAE,mBAAoB,EAAI,eAC1B,CAAE,WAAY,EAAI,UAAQ,gBAAgB,EAK1C,aAAN,MAAM,sBAAqB,KAAM,CATjC,MASiC,6BAC/B,WAEA,YAAa,KAAM,cAAgB,CAAC,EAAG,CACrC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,0BAA2B,CAAC,EAE/E,KAAO,OAAO,WAAW,UAAU,IAAI,EACvC,cAAgB,OAAO,WAAW,iBAAiB,aAAa,EAEhE,MAAM,KAAM,aAAa,EAEzB,KAAK,WAAa,aACpB,CAEA,IAAI,MAAQ,CACV,cAAO,WAAW,KAAM,aAAY,EAE7B,KAAK,WAAW,IACzB,CAEA,IAAI,QAAU,CACZ,cAAO,WAAW,KAAM,aAAY,EAE7B,KAAK,WAAW,MACzB,CAEA,IAAI,aAAe,CACjB,cAAO,WAAW,KAAM,aAAY,EAE7B,KAAK,WAAW,WACzB,CAEA,IAAI,QAAU,CACZ,cAAO,WAAW,KAAM,aAAY,EAE7B,KAAK,WAAW,MACzB,CAEA,IAAI,OAAS,CACX,cAAO,WAAW,KAAM,aAAY,EAE/B,OAAO,SAAS,KAAK,WAAW,KAAK,GACxC,OAAO,OAAO,KAAK,WAAW,KAAK,EAG9B,KAAK,WAAW,KACzB,CAEA,iBACE,KACA,QAAU,GACV,WAAa,GACb,KAAO,KACP,OAAS,GACT,YAAc,GACd,OAAS,KACT,MAAQ,CAAC,EACT,CACA,cAAO,WAAW,KAAM,aAAY,EAEpC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,+BAAgC,CAAC,EAE7E,IAAI,cAAa,KAAM,CAC5B,QAAS,WAAY,KAAM,OAAQ,YAAa,OAAQ,KAC1D,CAAC,CACH,CACF,EAKM,WAAN,MAAM,oBAAmB,KAAM,CAhF/B,MAgF+B,2BAC7B,WAEA,YAAa,KAAM,cAAgB,CAAC,EAAG,CACrC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,wBAAyB,CAAC,EAE7E,KAAO,OAAO,WAAW,UAAU,IAAI,EACvC,cAAgB,OAAO,WAAW,eAAe,aAAa,EAE9D,MAAM,KAAM,aAAa,EAEzB,KAAK,WAAa,aACpB,CAEA,IAAI,UAAY,CACd,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,WAAW,QACzB,CAEA,IAAI,MAAQ,CACV,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,WAAW,IACzB,CAEA,IAAI,QAAU,CACZ,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,WAAW,MACzB,CACF,EAGM,WAAN,MAAM,oBAAmB,KAAM,CAlH/B,MAkH+B,2BAC7B,WAEA,YAAa,KAAM,cAAe,CAChC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,wBAAyB,CAAC,EAE7E,MAAM,KAAM,aAAa,EAEzB,KAAO,OAAO,WAAW,UAAU,IAAI,EACvC,cAAgB,OAAO,WAAW,eAAe,eAAiB,CAAC,CAAC,EAEpE,KAAK,WAAa,aACpB,CAEA,IAAI,SAAW,CACb,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,WAAW,OACzB,CAEA,IAAI,UAAY,CACd,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,WAAW,QACzB,CAEA,IAAI,QAAU,CACZ,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,WAAW,MACzB,CAEA,IAAI,OAAS,CACX,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,WAAW,KACzB,CAEA,IAAI,OAAS,CACX,cAAO,WAAW,KAAM,WAAU,EAE3B,KAAK,WAAW,KACzB,CACF,EAEA,OAAO,iBAAiB,aAAa,UAAW,CAC9C,CAAC,OAAO,WAAW,EAAG,CACpB,MAAO,eACP,aAAc,EAChB,EACA,KAAM,oBACN,OAAQ,oBACR,YAAa,oBACb,OAAQ,oBACR,MAAO,oBACP,iBAAkB,mBACpB,CAAC,EAED,OAAO,iBAAiB,WAAW,UAAW,CAC5C,CAAC,OAAO,WAAW,EAAG,CACpB,MAAO,aACP,aAAc,EAChB,EACA,OAAQ,oBACR,KAAM,oBACN,SAAU,mBACZ,CAAC,EAED,OAAO,iBAAiB,WAAW,UAAW,CAC5C,CAAC,OAAO,WAAW,EAAG,CACpB,MAAO,aACP,aAAc,EAChB,EACA,QAAS,oBACT,SAAU,oBACV,OAAQ,oBACR,MAAO,oBACP,MAAO,mBACT,CAAC,EAED,OAAO,WAAW,YAAc,OAAO,mBAAmB,WAAW,EAErE,OAAO,WAAW,uBAAuB,EAAI,OAAO,kBAClD,OAAO,WAAW,WACpB,EAEA,IAAM,UAAY,CAChB,CACE,IAAK,UACL,UAAW,OAAO,WAAW,QAC7B,aAAc,EAChB,EACA,CACE,IAAK,aACL,UAAW,OAAO,WAAW,QAC7B,aAAc,EAChB,EACA,CACE,IAAK,WACL,UAAW,OAAO,WAAW,QAC7B,aAAc,EAChB,CACF,EAEA,OAAO,WAAW,iBAAmB,OAAO,oBAAoB,CAC9D,GAAG,UACH,CACE,IAAK,OACL,UAAW,OAAO,WAAW,IAC7B,aAAc,IAChB,EACA,CACE,IAAK,SACL,UAAW,OAAO,WAAW,UAC7B,aAAc,EAChB,EACA,CACE,IAAK,cACL,UAAW,OAAO,WAAW,UAC7B,aAAc,EAChB,EACA,CACE,IAAK,SAGL,UAAW,OAAO,kBAAkB,OAAO,WAAW,WAAW,EACjE,aAAc,IAChB,EACA,CACE,IAAK,QACL,UAAW,OAAO,WAAW,uBAAuB,EACpD,IAAI,cAAgB,CAClB,MAAO,CAAC,CACV,CACF,CACF,CAAC,EAED,OAAO,WAAW,eAAiB,OAAO,oBAAoB,CAC5D,GAAG,UACH,CACE,IAAK,WACL,UAAW,OAAO,WAAW,QAC7B,aAAc,EAChB,EACA,CACE,IAAK,OACL,UAAW,OAAO,WAAW,gBAAgB,EAC7C,aAAc,CAChB,EACA,CACE,IAAK,SACL,UAAW,OAAO,WAAW,UAC7B,aAAc,EAChB,CACF,CAAC,EAED,OAAO,WAAW,eAAiB,OAAO,oBAAoB,CAC5D,GAAG,UACH,CACE,IAAK,UACL,UAAW,OAAO,WAAW,UAC7B,aAAc,EAChB,EACA,CACE,IAAK,WACL,UAAW,OAAO,WAAW,UAC7B,aAAc,EAChB,EACA,CACE,IAAK,SACL,UAAW,OAAO,WAAW,eAAe,EAC5C,aAAc,CAChB,EACA,CACE,IAAK,QACL,UAAW,OAAO,WAAW,eAAe,EAC5C,aAAc,CAChB,EACA,CACE,IAAK,QACL,UAAW,OAAO,WAAW,GAC/B,CACF,CAAC,EAED,OAAO,QAAU,CACf,aACA,WACA,UACF,KC9SA,IAAAC,cAAA,sHAEA,GAAM,CAAE,YAAa,YAAa,UAAW,YAAa,aAAc,EAAI,mBACtE,CAAE,OAAQ,OAAQ,EAAI,qBACtB,CAAE,aAAc,UAAW,EAAI,iBAOrC,SAAS,cAAe,GAAI,CAI1B,OAAO,GAAG,WAAW,IAAM,OAAO,IACpC,CALS,sCAUT,SAAS,UAAW,GAAI,CAItB,OAAO,GAAG,WAAW,IAAM,OAAO,OACpC,CALS,8BAUT,SAAS,SAAU,GAAI,CACrB,OAAO,GAAG,WAAW,IAAM,OAAO,MACpC,CAFS,4BAUT,SAAS,UAAW,EAAG,OAAQ,iBAAmB,MAAO,cAAe,CAMtE,IAAM,MAAQ,IAAI,iBAAiB,EAAG,aAAa,EAOnD,OAAO,cAAc,KAAK,CAC5B,CAdS,8BAsBT,SAAS,yBAA0B,GAAI,KAAM,KAAM,CAEjD,GAAI,GAAG,WAAW,IAAM,OAAO,KAC7B,OAIF,IAAI,aAEJ,GAAI,OAAS,QAAQ,KAGnB,GAAI,CACF,aAAe,IAAI,YAAY,QAAS,CAAE,MAAO,EAAK,CAAC,EAAE,OAAO,IAAI,CACtE,MAAQ,CACN,wBAAwB,GAAI,uCAAuC,EACnE,MACF,MACS,OAAS,QAAQ,SACtB,GAAG,WAAW,IAAM,OAItB,aAAe,IAAI,KAAK,CAAC,IAAI,CAAC,EAK9B,aAAe,IAAI,WAAW,IAAI,EAAE,QAOxC,UAAU,UAAW,GAAI,aAAc,CACrC,OAAQ,GAAG,aAAa,EAAE,OAC1B,KAAM,YACR,CAAC,CACH,CAvCS,4DA+CT,SAAS,mBAAoB,SAAU,CAOrC,GAAI,SAAS,SAAW,EACtB,MAAO,GAGT,QAAW,QAAQ,SAAU,CAC3B,IAAM,KAAO,KAAK,WAAW,CAAC,EAE9B,GACE,KAAO,IACP,KAAO,KACP,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,MACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,KACT,OAAS,IACT,OAAS,EAET,MAAO,EAEX,CAEA,MAAO,EACT,CA1CS,gDAgDT,SAAS,kBAAmB,KAAM,CAChC,OAAI,MAAQ,KAAQ,KAAO,KAEvB,OAAS,MACT,OAAS,MACT,OAAS,KAIN,MAAQ,KAAQ,MAAQ,IACjC,CAVS,8CAgBT,SAAS,wBAAyB,GAAI,OAAQ,CAC5C,GAAM,CAAE,CAAC,WAAW,EAAG,WAAY,CAAC,SAAS,EAAG,QAAS,EAAI,GAE7D,WAAW,MAAM,EAEb,UAAU,QAAU,CAAC,SAAS,OAAO,WACvC,SAAS,OAAO,QAAQ,EAGtB,QACF,UAAU,QAAS,GAAI,WAAY,CACjC,MAAO,IAAI,MAAM,MAAM,CACzB,CAAC,CAEL,CAdS,0DAgBT,OAAO,QAAU,CACf,cACA,UACA,SACA,UACA,mBACA,kBACA,wBACA,wBACF,KCvMA,mJAEA,IAAM,mBAAqB,UAAQ,qBAAqB,EAClD,CAAE,IAAK,MAAO,EAAI,qBAClB,CACJ,YACA,WACA,YACA,cACF,EAAI,mBACE,CAAE,UAAW,uBAAwB,EAAI,gBACzC,CAAE,UAAW,EAAI,iBACjB,CAAE,WAAY,EAAI,mBAClB,CAAE,QAAS,EAAI,gBACf,CAAE,OAAQ,EAAI,kBACd,CAAE,mBAAoB,EAAI,kBAC1B,CAAE,YAAa,EAAI,kBAEnB,SAAW,CAAC,EAClB,SAAS,KAAO,mBAAmB,QAAQ,uBAAuB,EAClE,SAAS,MAAQ,mBAAmB,QAAQ,wBAAwB,EACpE,SAAS,YAAc,mBAAmB,QAAQ,+BAA+B,EAGjF,IAAI,OACJ,GAAI,CACF,OAAS,UAAQ,QAAQ,CAC3B,MAAQ,CAER,CAUA,SAAS,6BAA8B,IAAK,UAAW,GAAI,YAAa,QAAS,CAG/E,IAAM,WAAa,IAEnB,WAAW,SAAW,IAAI,WAAa,MAAQ,QAAU,SAMzD,IAAMC,SAAU,YAAY,CAC1B,QAAS,CAAC,UAAU,EACpB,eAAgB,OAChB,SAAU,cACV,KAAM,YACN,YAAa,UACb,MAAO,WACP,SAAU,OACZ,CAAC,EAGD,GAAI,QAAQ,QAAS,CACnB,IAAM,YAAc,IAAI,QAAQ,QAAQ,OAAO,EAAE,YAAY,EAE7DA,SAAQ,YAAc,WACxB,CAUA,IAAM,SAAW,OAAO,YAAY,EAAE,EAAE,SAAS,QAAQ,EAIzDA,SAAQ,YAAY,OAAO,oBAAqB,QAAQ,EAIxDA,SAAQ,YAAY,OAAO,wBAAyB,IAAI,EAKxD,QAAW,YAAY,UACrBA,SAAQ,YAAY,OAAO,yBAA0B,QAAQ,EAO/D,IAAM,kBAAoB,GA6G1B,OArGmB,SAAS,CAC1B,QAAAA,SACA,iBAAkB,GAClB,WAAY,QAAQ,YAAc,oBAAoB,EACtD,gBAAiB,SAAU,CAGzB,GAAI,SAAS,OAAS,SAAW,SAAS,SAAW,IAAK,CACxD,wBAAwB,GAAI,gDAAgD,EAC5E,MACF,CAMA,GAAI,UAAU,SAAW,GAAK,CAAC,SAAS,YAAY,IAAI,wBAAwB,EAAG,CACjF,wBAAwB,GAAI,6CAA6C,EACzE,MACF,CAYA,GAAI,SAAS,YAAY,IAAI,SAAS,GAAG,YAAY,IAAM,YAAa,CACtE,wBAAwB,GAAI,mDAAmD,EAC/E,MACF,CAMA,GAAI,SAAS,YAAY,IAAI,YAAY,GAAG,YAAY,IAAM,UAAW,CACvE,wBAAwB,GAAI,oDAAoD,EAChF,MACF,CASA,IAAM,YAAc,SAAS,YAAY,IAAI,sBAAsB,EAC7D,OAAS,OAAO,WAAW,MAAM,EAAE,OAAO,SAAW,GAAG,EAAE,OAAO,QAAQ,EAC/E,GAAI,cAAgB,OAAQ,CAC1B,wBAAwB,GAAI,yDAAyD,EACrF,MACF,CASA,IAAM,aAAe,SAAS,YAAY,IAAI,0BAA0B,EAExE,GAAI,eAAiB,MAAQ,eAAiB,kBAAmB,CAC/D,wBAAwB,GAAI,yDAAyD,EACrF,MACF,CAOA,IAAM,YAAc,SAAS,YAAY,IAAI,wBAAwB,EAErE,GAAI,cAAgB,MAAQ,cAAgBA,SAAQ,YAAY,IAAI,wBAAwB,EAAG,CAC7F,wBAAwB,GAAI,gDAAgD,EAC5E,MACF,CAEA,SAAS,OAAO,GAAG,OAAQ,YAAY,EACvC,SAAS,OAAO,GAAG,QAAS,aAAa,EACzC,SAAS,OAAO,GAAG,QAAS,aAAa,EAErC,SAAS,KAAK,gBAChB,SAAS,KAAK,QAAQ,CACpB,QAAS,SAAS,OAAO,QAAQ,EACjC,SAAU,YACV,WAAY,YACd,CAAC,EAGH,YAAY,QAAQ,CACtB,CACF,CAAC,CAGH,CAvKS,oEA4KT,SAAS,aAAc,MAAO,CACvB,KAAK,GAAG,WAAW,EAAE,MAAM,KAAK,GACnC,KAAK,MAAM,CAEf,CAJS,oCAUT,SAAS,eAAiB,CACxB,GAAM,CAAE,EAAG,EAAI,KAKT,SAAW,GAAG,UAAU,GAAK,GAAG,cAAc,EAEhD,KAAO,KACP,OAAS,GAEP,OAAS,GAAG,WAAW,EAAE,YAE3B,QACF,KAAO,OAAO,MAAQ,KACtB,OAAS,OAAO,QACN,GAAG,UAAU,IAMvB,KAAO,MAIT,GAAG,WAAW,EAAI,OAAO,OAgBzB,UAAU,QAAS,GAAI,WAAY,CACjC,SAAU,KAAM,MAClB,CAAC,EAEG,SAAS,MAAM,gBACjB,SAAS,MAAM,QAAQ,CACrB,UAAW,GACX,KACA,MACF,CAAC,CAEL,CArDS,sCAuDT,SAAS,cAAeC,OAAO,CAC7B,GAAM,CAAE,EAAG,EAAI,KAEf,GAAG,WAAW,EAAI,OAAO,QAErB,SAAS,YAAY,gBACvB,SAAS,YAAY,QAAQA,MAAK,EAGpC,KAAK,QAAQ,CACf,CAVS,sCAYT,OAAO,QAAU,CACf,4BACF,KClSA,yIAEA,GAAM,CAAE,gBAAiB,EAAI,qBAGzB,OACJ,GAAI,CACF,OAAS,UAAQ,QAAQ,CAC3B,MAAQ,CAER,CAEA,IAAM,mBAAN,KAAyB,CAZzB,MAYyB,mCAIvB,YAAa,KAAM,CACjB,KAAK,UAAY,KACjB,KAAK,QAAU,OAAO,YAAY,CAAC,CACrC,CAEA,YAAa,OAAQ,CACnB,IAAM,WAAa,KAAK,WAAW,YAAc,EAG7C,cAAgB,WAChB,OAAS,EAET,WAAa,kBACf,QAAU,EACV,cAAgB,KACP,WAAa,MACtB,QAAU,EACV,cAAgB,KAGlB,IAAM,OAAS,OAAO,YAAY,WAAa,MAAM,EAGrD,OAAO,CAAC,EAAI,OAAO,CAAC,EAAI,EACxB,OAAO,CAAC,GAAK,IACb,OAAO,CAAC,GAAK,OAAO,CAAC,EAAI,KAAQ,OAGjC,OAAO,OAAS,CAAC,EAAI,KAAK,QAAQ,CAAC,EACnC,OAAO,OAAS,CAAC,EAAI,KAAK,QAAQ,CAAC,EACnC,OAAO,OAAS,CAAC,EAAI,KAAK,QAAQ,CAAC,EACnC,OAAO,OAAS,CAAC,EAAI,KAAK,QAAQ,CAAC,EAEnC,OAAO,CAAC,EAAI,cAER,gBAAkB,IACpB,OAAO,cAAc,WAAY,CAAC,EACzB,gBAAkB,MAE3B,OAAO,CAAC,EAAI,OAAO,CAAC,EAAI,EACxB,OAAO,YAAY,WAAY,EAAG,CAAC,GAGrC,OAAO,CAAC,GAAK,IAGb,QAAS,EAAI,EAAG,EAAI,WAAY,IAC9B,OAAO,OAAS,CAAC,EAAI,KAAK,UAAU,CAAC,EAAI,KAAK,QAAQ,EAAI,CAAC,EAG7D,OAAO,MACT,CACF,EAEA,OAAO,QAAU,CACf,kBACF,KCxEA,+IAEA,GAAM,CAAE,QAAS,EAAI,UAAQ,QAAQ,EAC/B,mBAAqB,UAAQ,qBAAqB,EAClD,CAAE,aAAc,QAAS,OAAQ,WAAY,EAAI,qBACjD,CAAE,YAAa,WAAY,UAAW,cAAe,EAAI,mBACzD,CAAE,kBAAmB,wBAAyB,wBAAyB,EAAI,gBAC3E,CAAE,kBAAmB,EAAI,gBAOzB,SAAW,CAAC,EAClB,SAAS,KAAO,mBAAmB,QAAQ,uBAAuB,EAClE,SAAS,KAAO,mBAAmB,QAAQ,uBAAuB,EAElE,IAAM,WAAN,cAAyB,QAAS,CAlBlC,MAkBkC,2BAChC,SAAW,CAAC,EACZ,YAAc,EAEd,OAAS,aAAa,KAEtB,MAAQ,CAAC,EACT,WAAa,CAAC,EAEd,YAAa,GAAI,CACf,MAAM,EAEN,KAAK,GAAK,EACZ,CAMA,OAAQ,MAAO,EAAG,SAAU,CAC1B,KAAK,SAAS,KAAK,KAAK,EACxB,KAAK,aAAe,MAAM,OAE1B,KAAK,IAAI,QAAQ,CACnB,CAOA,IAAK,SAAU,CACb,OAAa,CACX,GAAI,KAAK,SAAW,aAAa,KAAM,CAErC,GAAI,KAAK,YAAc,EACrB,OAAO,SAAS,EAGlB,IAAM,OAAS,KAAK,QAAQ,CAAC,EAW7B,GATA,KAAK,MAAM,KAAO,OAAO,CAAC,EAAI,OAAU,EACxC,KAAK,MAAM,OAAS,OAAO,CAAC,EAAI,GAIhC,KAAK,MAAM,iBAAmB,KAAK,MAAM,OAEzC,KAAK,MAAM,WAAa,CAAC,KAAK,MAAM,KAAO,KAAK,MAAM,SAAW,QAAQ,aAErE,KAAK,MAAM,YAAc,KAAK,MAAM,SAAW,QAAQ,QAAU,KAAK,MAAM,SAAW,QAAQ,KAAM,CAEvG,wBAAwB,KAAK,GAAI,oCAAoC,EACrE,MACF,CAEA,IAAM,cAAgB,OAAO,CAAC,EAAI,IAWlC,GATI,eAAiB,KACnB,KAAK,MAAM,cAAgB,cAC3B,KAAK,OAAS,aAAa,WAClB,gBAAkB,IAC3B,KAAK,OAAS,aAAa,iBAClB,gBAAkB,MAC3B,KAAK,OAAS,aAAa,kBAGzB,KAAK,MAAM,YAAc,cAAgB,IAAK,CAEhD,wBAAwB,KAAK,GAAI,sCAAsC,EACvE,MACF,UACG,KAAK,MAAM,SAAW,QAAQ,MAC7B,KAAK,MAAM,SAAW,QAAQ,MAC9B,KAAK,MAAM,SAAW,QAAQ,QAChC,cAAgB,IAChB,CAEA,wBAAwB,KAAK,GAAI,sDAAsD,EACvF,MACF,SAAW,KAAK,MAAM,SAAW,QAAQ,MAAO,CAC9C,GAAI,gBAAkB,EAAG,CACvB,wBAAwB,KAAK,GAAI,0CAA0C,EAC3E,MACF,CAEA,IAAM,KAAO,KAAK,QAAQ,aAAa,EAIvC,GAFA,KAAK,MAAM,UAAY,KAAK,eAAe,GAAO,IAAI,EAElD,CAAC,KAAK,GAAG,UAAU,EAAG,CAKxB,IAAMC,MAAO,OAAO,YAAY,CAAC,EACjCA,MAAK,cAAc,KAAK,MAAM,UAAU,KAAM,CAAC,EAC/C,IAAM,WAAa,IAAI,mBAAmBA,KAAI,EAE9C,KAAK,GAAG,SAAS,EAAE,OAAO,MACxB,WAAW,YAAY,QAAQ,KAAK,EACnC,KAAQ,CACF,MACH,KAAK,GAAG,UAAU,EAAI,GAE1B,CACF,CACF,CAKA,KAAK,GAAG,WAAW,EAAI,OAAO,QAC9B,KAAK,GAAG,cAAc,EAAI,GAE1B,KAAK,IAAI,EAET,MACF,SAAW,KAAK,MAAM,SAAW,QAAQ,KAAM,CAM7C,IAAM,KAAO,KAAK,QAAQ,aAAa,EAEvC,GAAI,CAAC,KAAK,GAAG,cAAc,EAAG,CAC5B,IAAM,MAAQ,IAAI,mBAAmB,IAAI,EAEzC,KAAK,GAAG,SAAS,EAAE,OAAO,MAAM,MAAM,YAAY,QAAQ,IAAI,CAAC,EAE3D,SAAS,KAAK,gBAChB,SAAS,KAAK,QAAQ,CACpB,QAAS,IACX,CAAC,CAEL,CAIA,GAFA,KAAK,OAAS,aAAa,KAEvB,KAAK,YAAc,EACrB,SAEA,SAAS,EACT,MAEJ,SAAW,KAAK,MAAM,SAAW,QAAQ,KAAM,CAK7C,IAAM,KAAO,KAAK,QAAQ,aAAa,EAQvC,GANI,SAAS,KAAK,gBAChB,SAAS,KAAK,QAAQ,CACpB,QAAS,IACX,CAAC,EAGC,KAAK,YAAc,EACrB,SAEA,SAAS,EACT,MAEJ,CACF,SAAW,KAAK,SAAW,aAAa,iBAAkB,CACxD,GAAI,KAAK,YAAc,EACrB,OAAO,SAAS,EAGlB,IAAM,OAAS,KAAK,QAAQ,CAAC,EAE7B,KAAK,MAAM,cAAgB,OAAO,aAAa,CAAC,EAChD,KAAK,OAAS,aAAa,SAC7B,SAAW,KAAK,SAAW,aAAa,iBAAkB,CACxD,GAAI,KAAK,YAAc,EACrB,OAAO,SAAS,EAGlB,IAAM,OAAS,KAAK,QAAQ,CAAC,EACvB,MAAQ,OAAO,aAAa,CAAC,EAQnC,GAAI,MAAQ,GAAK,GAAK,EAAG,CACvB,wBAAwB,KAAK,GAAI,uCAAuC,EACxE,MACF,CAEA,IAAM,MAAQ,OAAO,aAAa,CAAC,EAEnC,KAAK,MAAM,eAAiB,OAAS,GAAK,MAC1C,KAAK,OAAS,aAAa,SAC7B,SAAW,KAAK,SAAW,aAAa,UAAW,CACjD,GAAI,KAAK,YAAc,KAAK,MAAM,cAEhC,OAAO,SAAS,EACX,GAAI,KAAK,aAAe,KAAK,MAAM,cAAe,CAGvD,IAAM,KAAO,KAAK,QAAQ,KAAK,MAAM,aAAa,EAMlD,GAJA,KAAK,WAAW,KAAK,IAAI,EAIrB,CAAC,KAAK,MAAM,YAAe,KAAK,MAAM,KAAO,KAAK,MAAM,SAAW,QAAQ,aAAe,CAC5F,IAAM,YAAc,OAAO,OAAO,KAAK,UAAU,EAEjD,yBAAyB,KAAK,GAAI,KAAK,MAAM,eAAgB,WAAW,EAExE,KAAK,MAAQ,CAAC,EACd,KAAK,WAAW,OAAS,CAC3B,CAEA,KAAK,OAAS,aAAa,IAC7B,CACF,CAEA,GAAI,OAAK,YAAc,GAEhB,CACL,SAAS,EACT,KACF,CACF,CACF,CAOA,QAAS,EAAG,CACV,GAAI,EAAI,KAAK,YACX,OAAO,KACF,GAAI,IAAM,EACf,OAAO,YAGT,GAAI,KAAK,SAAS,CAAC,EAAE,SAAW,EAC9B,YAAK,aAAe,KAAK,SAAS,CAAC,EAAE,OAC9B,KAAK,SAAS,MAAM,EAG7B,IAAM,OAAS,OAAO,YAAY,CAAC,EAC/B,OAAS,EAEb,KAAO,SAAW,GAAG,CACnB,IAAM,KAAO,KAAK,SAAS,CAAC,EACtB,CAAE,MAAO,EAAI,KAEnB,GAAI,OAAS,SAAW,EAAG,CACzB,OAAO,IAAI,KAAK,SAAS,MAAM,EAAG,MAAM,EACxC,KACF,SAAW,OAAS,OAAS,EAAG,CAC9B,OAAO,IAAI,KAAK,SAAS,EAAG,EAAI,MAAM,EAAG,MAAM,EAC/C,KAAK,SAAS,CAAC,EAAI,KAAK,SAAS,EAAI,MAAM,EAC3C,KACF,MACE,OAAO,IAAI,KAAK,SAAS,MAAM,EAAG,MAAM,EACxC,QAAU,KAAK,MAEnB,CAEA,YAAK,aAAe,EAEb,MACT,CAEA,eAAgB,SAAU,KAAM,CAG9B,IAAI,KASJ,GAPI,KAAK,QAAU,IAIjB,KAAO,KAAK,aAAa,CAAC,GAGxB,SACF,OAAK,kBAAkB,IAAI,EAIpB,CAAE,IAAK,EAHL,KAQX,IAAI,OAAS,KAAK,SAAS,CAAC,EAO5B,GAJI,OAAO,CAAC,IAAM,KAAQ,OAAO,CAAC,IAAM,KAAQ,OAAO,CAAC,IAAM,MAC5D,OAAS,OAAO,SAAS,CAAC,GAGxB,OAAS,QAAa,CAAC,kBAAkB,IAAI,EAC/C,OAAO,KAGT,GAAI,CAEF,OAAS,IAAI,YAAY,QAAS,CAAE,MAAO,EAAK,CAAC,EAAE,OAAO,MAAM,CAClE,MAAQ,CACN,OAAO,IACT,CAEA,MAAO,CAAE,KAAM,MAAO,CACxB,CAEA,IAAI,aAAe,CACjB,OAAO,KAAK,MAAM,SACpB,CACF,EAEA,OAAO,QAAU,CACf,UACF,KCvVA,iJAEA,GAAM,CAAE,MAAO,EAAI,iBACb,CAAE,aAAAC,aAAa,EAAI,qBACnB,CAAE,aAAc,EAAI,kBACpB,CAAE,eAAgB,EAAI,iBACtB,CAAE,0BAA2B,OAAQ,QAAS,WAAY,EAAI,qBAC9D,CACJ,cACA,YACA,YACA,YACA,UACA,WACA,WACF,EAAI,mBACE,CAAE,cAAe,UAAW,mBAAoB,wBAAyB,SAAU,EAAI,gBACvF,CAAE,4BAA6B,EAAI,qBACnC,CAAE,kBAAmB,EAAI,gBACzB,CAAE,UAAW,EAAI,mBACjB,CAAE,oBAAqB,UAAW,EAAI,eACtC,CAAE,mBAAoB,EAAI,kBAC1B,CAAE,KAAM,EAAI,UAAQ,MAAM,EAE5B,mBAAqB,GAGnB,UAAN,MAAM,mBAAkB,WAAY,CA3BpC,MA2BoC,0BAClC,QAAU,CACR,KAAM,KACN,MAAO,KACP,MAAO,KACP,QAAS,IACX,EAEA,gBAAkB,EAClB,UAAY,GACZ,YAAc,GAMd,YAAa,IAAK,UAAY,CAAC,EAAG,CAChC,MAAM,EAEN,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,uBAAwB,CAAC,EAEvE,qBACH,mBAAqB,GACrB,QAAQ,YAAY,kEAAmE,CACrF,KAAM,WACR,CAAC,GAGH,IAAM,QAAU,OAAO,WAAW,mDAAmD,EAAE,SAAS,EAEhG,IAAM,OAAO,WAAW,UAAU,GAAG,EACrC,UAAY,QAAQ,UAGpB,IAAM,QAAU,gBAAgB,EAG5B,UAEJ,GAAI,CACF,UAAY,IAAI,IAAI,IAAK,OAAO,CAClC,OAAS,EAAG,CAEV,MAAM,IAAIA,cAAa,EAAG,aAAa,CACzC,CAWA,GARI,UAAU,WAAa,QACzB,UAAU,SAAW,MACZ,UAAU,WAAa,WAEhC,UAAU,SAAW,QAInB,UAAU,WAAa,OAAS,UAAU,WAAa,OACzD,MAAM,IAAIA,cACR,wCAAwC,UAAU,QAAQ,GAC1D,aACF,EAKF,GAAI,UAAU,MAAQ,UAAU,KAAK,SAAS,GAAG,EAC/C,MAAM,IAAIA,cAAa,eAAgB,aAAa,EAatD,GARI,OAAO,WAAc,WACvB,UAAY,CAAC,SAAS,GAOpB,UAAU,SAAW,IAAI,IAAI,UAAU,IAAI,GAAK,EAAE,YAAY,CAAC,CAAC,EAAE,KACpE,MAAM,IAAIA,cAAa,uCAAwC,aAAa,EAG9E,GAAI,UAAU,OAAS,GAAK,CAAC,UAAU,MAAM,GAAK,mBAAmB,CAAC,CAAC,EACrE,MAAM,IAAIA,cAAa,uCAAwC,aAAa,EAI9E,KAAK,aAAa,EAAI,IAAI,IAAI,UAAU,IAAI,EAQ5C,KAAK,WAAW,EAAI,6BAClB,UACA,UACA,KACC,UAAa,KAAK,yBAAyB,QAAQ,EACpD,OACF,EAKA,KAAK,WAAW,EAAI,WAAU,WAQ9B,KAAK,WAAW,EAAI,MACtB,CAOA,MAAO,KAAO,OAAW,OAAS,OAAW,CAc3C,GAbA,OAAO,WAAW,KAAM,UAAS,EAE7B,OAAS,SACX,KAAO,OAAO,WAAW,gBAAgB,EAAE,KAAM,CAAE,MAAO,EAAK,CAAC,GAG9D,SAAW,SACb,OAAS,OAAO,WAAW,UAAU,MAAM,GAMzC,OAAS,QACP,OAAS,MAAS,KAAO,KAAQ,KAAO,MAC1C,MAAM,IAAIA,cAAa,eAAgB,oBAAoB,EAI/D,IAAI,iBAAmB,EAGvB,GAAI,SAAW,SAIb,iBAAmB,OAAO,WAAW,MAAM,EAEvC,iBAAmB,KACrB,MAAM,IAAIA,cACR,gDAAgD,gBAAgB,GAChE,aACF,EAKJ,GAAI,OAAK,WAAW,IAAM,WAAU,SAAW,KAAK,WAAW,IAAM,WAAU,QAGxE,GAAI,CAAC,cAAc,IAAI,EAI5B,wBAAwB,KAAM,kDAAkD,EAChF,KAAK,WAAW,EAAI,WAAU,gBACpB,UAAU,IAAI,EAgDxB,KAAK,WAAW,EAAI,WAAU,YAhDH,CAW3B,IAAM,MAAQ,IAAI,mBAOd,OAAS,QAAa,SAAW,QACnC,MAAM,UAAY,OAAO,YAAY,CAAC,EACtC,MAAM,UAAU,cAAc,KAAM,CAAC,GAC5B,OAAS,QAAa,SAAW,QAG1C,MAAM,UAAY,OAAO,YAAY,EAAI,gBAAgB,EACzD,MAAM,UAAU,cAAc,KAAM,CAAC,EAErC,MAAM,UAAU,MAAM,OAAQ,EAAG,OAAO,GAExC,MAAM,UAAY,YAIL,KAAK,SAAS,EAAE,OAExB,MAAM,MAAM,YAAY,QAAQ,KAAK,EAAI,KAAQ,CACjD,MACH,KAAK,UAAU,EAAI,GAEvB,CAAC,EAKD,KAAK,WAAW,EAAI,OAAO,OAC7B,CAKF,CAMA,KAAM,KAAM,CASV,GARA,OAAO,WAAW,KAAM,UAAS,EAEjC,OAAO,oBAAoB,UAAW,EAAG,CAAE,OAAQ,gBAAiB,CAAC,EAErE,KAAO,OAAO,WAAW,kBAAkB,IAAI,EAI3C,KAAK,WAAW,IAAM,WAAU,WAClC,MAAM,IAAIA,cAAa,yBAA0B,mBAAmB,EAOtE,GAAI,CAAC,cAAc,IAAI,GAAK,UAAU,IAAI,EACxC,OAIF,IAAM,OAAS,KAAK,SAAS,EAAE,OAG/B,GAAI,OAAO,MAAS,SAAU,CAY5B,IAAM,MAAQ,OAAO,KAAK,IAAI,EAExB,OADQ,IAAI,mBAAmB,KAAK,EACrB,YAAY,QAAQ,IAAI,EAE7C,KAAK,iBAAmB,MAAM,WAC9B,OAAO,MAAM,OAAQ,IAAM,CACzB,KAAK,iBAAmB,MAAM,UAChC,CAAC,CACH,SAAW,MAAM,cAAc,IAAI,EAAG,CAapC,IAAM,MAAQ,OAAO,KAAK,IAAI,EAExB,OADQ,IAAI,mBAAmB,KAAK,EACrB,YAAY,QAAQ,MAAM,EAE/C,KAAK,iBAAmB,MAAM,WAC9B,OAAO,MAAM,OAAQ,IAAM,CACzB,KAAK,iBAAmB,MAAM,UAChC,CAAC,CACH,SAAW,YAAY,OAAO,IAAI,EAAG,CAanC,IAAM,GAAK,OAAO,KAAK,KAAM,KAAK,WAAY,KAAK,UAAU,EAGvD,OADQ,IAAI,mBAAmB,EAAE,EAClB,YAAY,QAAQ,MAAM,EAE/C,KAAK,iBAAmB,GAAG,WAC3B,OAAO,MAAM,OAAQ,IAAM,CACzB,KAAK,iBAAmB,GAAG,UAC7B,CAAC,CACH,SAAW,WAAW,IAAI,EAAG,CAY3B,IAAM,MAAQ,IAAI,mBAElB,KAAK,YAAY,EAAE,KAAM,IAAO,CAC9B,IAAM,MAAQ,OAAO,KAAK,EAAE,EAC5B,MAAM,UAAY,MAClB,IAAM,OAAS,MAAM,YAAY,QAAQ,MAAM,EAE/C,KAAK,iBAAmB,MAAM,WAC9B,OAAO,MAAM,OAAQ,IAAM,CACzB,KAAK,iBAAmB,MAAM,UAChC,CAAC,CACH,CAAC,CACH,CACF,CAEA,IAAI,YAAc,CAChB,cAAO,WAAW,KAAM,UAAS,EAG1B,KAAK,WAAW,CACzB,CAEA,IAAI,gBAAkB,CACpB,cAAO,WAAW,KAAM,UAAS,EAE1B,KAAK,eACd,CAEA,IAAI,KAAO,CACT,cAAO,WAAW,KAAM,UAAS,EAG1B,cAAc,KAAK,aAAa,CAAC,CAC1C,CAEA,IAAI,YAAc,CAChB,cAAO,WAAW,KAAM,UAAS,EAE1B,KAAK,WACd,CAEA,IAAI,UAAY,CACd,cAAO,WAAW,KAAM,UAAS,EAE1B,KAAK,SACd,CAEA,IAAI,QAAU,CACZ,cAAO,WAAW,KAAM,UAAS,EAE1B,KAAK,QAAQ,IACtB,CAEA,IAAI,OAAQ,GAAI,CACd,OAAO,WAAW,KAAM,UAAS,EAE7B,KAAK,QAAQ,MACf,KAAK,oBAAoB,OAAQ,KAAK,QAAQ,IAAI,EAGhD,OAAO,IAAO,YAChB,KAAK,QAAQ,KAAO,GACpB,KAAK,iBAAiB,OAAQ,EAAE,GAEhC,KAAK,QAAQ,KAAO,IAExB,CAEA,IAAI,SAAW,CACb,cAAO,WAAW,KAAM,UAAS,EAE1B,KAAK,QAAQ,KACtB,CAEA,IAAI,QAAS,GAAI,CACf,OAAO,WAAW,KAAM,UAAS,EAE7B,KAAK,QAAQ,OACf,KAAK,oBAAoB,QAAS,KAAK,QAAQ,KAAK,EAGlD,OAAO,IAAO,YAChB,KAAK,QAAQ,MAAQ,GACrB,KAAK,iBAAiB,QAAS,EAAE,GAEjC,KAAK,QAAQ,MAAQ,IAEzB,CAEA,IAAI,SAAW,CACb,cAAO,WAAW,KAAM,UAAS,EAE1B,KAAK,QAAQ,KACtB,CAEA,IAAI,QAAS,GAAI,CACf,OAAO,WAAW,KAAM,UAAS,EAE7B,KAAK,QAAQ,OACf,KAAK,oBAAoB,QAAS,KAAK,QAAQ,KAAK,EAGlD,OAAO,IAAO,YAChB,KAAK,QAAQ,MAAQ,GACrB,KAAK,iBAAiB,QAAS,EAAE,GAEjC,KAAK,QAAQ,MAAQ,IAEzB,CAEA,IAAI,WAAa,CACf,cAAO,WAAW,KAAM,UAAS,EAE1B,KAAK,QAAQ,OACtB,CAEA,IAAI,UAAW,GAAI,CACjB,OAAO,WAAW,KAAM,UAAS,EAE7B,KAAK,QAAQ,SACf,KAAK,oBAAoB,UAAW,KAAK,QAAQ,OAAO,EAGtD,OAAO,IAAO,YAChB,KAAK,QAAQ,QAAU,GACvB,KAAK,iBAAiB,UAAW,EAAE,GAEnC,KAAK,QAAQ,QAAU,IAE3B,CAEA,IAAI,YAAc,CAChB,cAAO,WAAW,KAAM,UAAS,EAE1B,KAAK,WAAW,CACzB,CAEA,IAAI,WAAY,KAAM,CACpB,OAAO,WAAW,KAAM,UAAS,EAE7B,OAAS,QAAU,OAAS,cAC9B,KAAK,WAAW,EAAI,OAEpB,KAAK,WAAW,EAAI,IAExB,CAKA,yBAA0B,SAAU,CAGlC,KAAK,SAAS,EAAI,SAElB,IAAM,OAAS,IAAI,WAAW,IAAI,EAClC,OAAO,GAAG,QAAS,iBAA0B,CAC3C,KAAK,GAAG,SAAS,EAAE,OAAO,OAAO,CACnC,EAFmB,gBAElB,EAED,SAAS,OAAO,GAAK,KACrB,KAAK,WAAW,EAAI,OAGpB,KAAK,WAAW,EAAI,OAAO,KAK3B,IAAM,WAAa,SAAS,YAAY,IAAI,0BAA0B,EAElE,aAAe,OACjB,KAAK,YAAc,YAMrB,IAAM,SAAW,SAAS,YAAY,IAAI,wBAAwB,EAE9D,WAAa,OACf,KAAK,UAAY,UAInB,UAAU,OAAQ,IAAI,CACxB,CACF,EAGA,UAAU,WAAa,UAAU,UAAU,WAAa,OAAO,WAE/D,UAAU,KAAO,UAAU,UAAU,KAAO,OAAO,KAEnD,UAAU,QAAU,UAAU,UAAU,QAAU,OAAO,QAEzD,UAAU,OAAS,UAAU,UAAU,OAAS,OAAO,OAEvD,OAAO,iBAAiB,UAAU,UAAW,CAC3C,WAAY,0BACZ,KAAM,0BACN,QAAS,0BACT,OAAQ,0BACR,IAAK,oBACL,WAAY,oBACZ,eAAgB,oBAChB,OAAQ,oBACR,QAAS,oBACT,QAAS,oBACT,MAAO,oBACP,UAAW,oBACX,WAAY,oBACZ,KAAM,oBACN,WAAY,oBACZ,SAAU,oBACV,CAAC,OAAO,WAAW,EAAG,CACpB,MAAO,YACP,SAAU,GACV,WAAY,GACZ,aAAc,EAChB,CACF,CAAC,EAED,OAAO,iBAAiB,UAAW,CACjC,WAAY,0BACZ,KAAM,0BACN,QAAS,0BACT,OAAQ,yBACV,CAAC,EAED,OAAO,WAAW,qBAAqB,EAAI,OAAO,kBAChD,OAAO,WAAW,SACpB,EAEA,OAAO,WAAW,kCAAkC,EAAI,SAAU,EAAG,CACnE,OAAI,OAAO,KAAK,KAAK,CAAC,IAAM,UAAY,OAAO,YAAY,EAClD,OAAO,WAAW,qBAAqB,EAAE,CAAC,EAG5C,OAAO,WAAW,UAAU,CAAC,CACtC,EAGA,OAAO,WAAW,cAAgB,OAAO,oBAAoB,CAC3D,CACE,IAAK,YACL,UAAW,OAAO,WAAW,kCAAkC,EAC/D,IAAI,cAAgB,CAClB,MAAO,CAAC,CACV,CACF,EACA,CACE,IAAK,aACL,UAAW,OAAC,GAAM,EAAP,aACX,IAAI,cAAgB,CAClB,OAAO,oBAAoB,CAC7B,CACF,EACA,CACE,IAAK,UACL,UAAW,OAAO,kBAAkB,OAAO,WAAW,WAAW,CACnE,CACF,CAAC,EAED,OAAO,WAAW,mDAAmD,EAAI,SAAU,EAAG,CACpF,OAAI,OAAO,KAAK,KAAK,CAAC,IAAM,UAAY,EAAE,OAAO,YAAY,GACpD,OAAO,WAAW,cAAc,CAAC,EAGnC,CAAE,UAAW,OAAO,WAAW,kCAAkC,EAAE,CAAC,CAAE,CAC/E,EAEA,OAAO,WAAW,kBAAoB,SAAU,EAAG,CACjD,GAAI,OAAO,KAAK,KAAK,CAAC,IAAM,SAAU,CACpC,GAAI,WAAW,CAAC,EACd,OAAO,OAAO,WAAW,KAAK,EAAG,CAAE,OAAQ,EAAM,CAAC,EAGpD,GAAI,YAAY,OAAO,CAAC,GAAK,MAAM,iBAAiB,CAAC,EACnD,OAAO,OAAO,WAAW,aAAa,CAAC,CAE3C,CAEA,OAAO,OAAO,WAAW,UAAU,CAAC,CACtC,EAEA,OAAO,QAAU,CACf,SACF,KChoBA,4HAEA,IAAM,OAAS,iBACT,WAAa,qBACb,OAAS,iBACT,KAAO,eACP,aAAe,wBACf,MAAQ,gBACR,KAAO,eACP,CAAE,oBAAqB,EAAI,OAC3B,IAAM,cACN,eAAiB,kBACjB,WAAa,sBACb,UAAY,qBACZ,SAAW,oBACX,WAAa,sBACb,WAAa,sBACb,aAAe,uBACf,CAAE,oBAAqB,mBAAoB,EAAI,kBAC/C,iBAAmB,2BACnB,gBAAkB,0BAClB,0BAA4B,8BAE9B,UACJ,GAAI,CACF,UAAQ,QAAQ,EAChB,UAAY,EACd,MAAQ,CACN,UAAY,EACd,CAEA,OAAO,OAAO,WAAW,UAAW,GAAG,EAEvC,OAAO,QAAQ,WAAa,WAC5B,OAAO,QAAQ,OAAS,OACxB,OAAO,QAAQ,KAAO,KACtB,OAAO,QAAQ,aAAe,aAC9B,OAAO,QAAQ,MAAQ,MACvB,OAAO,QAAQ,WAAa,WAC5B,OAAO,QAAQ,aAAe,aAE9B,OAAO,QAAQ,iBAAmB,iBAClC,OAAO,QAAQ,gBAAkB,gBACjC,OAAO,QAAQ,0BAA4B,0BAE3C,OAAO,QAAQ,eAAiB,eAChC,OAAO,QAAQ,OAAS,OAExB,SAAS,eAAgB,GAAI,CAC3B,MAAO,CAAC,IAAK,KAAM,UAAY,CAM7B,GALI,OAAO,MAAS,aAClB,QAAU,KACV,KAAO,MAGL,CAAC,KAAQ,OAAO,KAAQ,UAAY,OAAO,KAAQ,UAAY,EAAE,eAAe,KAClF,MAAM,IAAI,qBAAqB,aAAa,EAG9C,GAAI,MAAQ,MAAQ,OAAO,MAAS,SAClC,MAAM,IAAI,qBAAqB,cAAc,EAG/C,GAAI,MAAQ,KAAK,MAAQ,KAAM,CAC7B,GAAI,OAAO,KAAK,MAAS,SACvB,MAAM,IAAI,qBAAqB,mBAAmB,EAGpD,IAAI,KAAO,KAAK,KACX,KAAK,KAAK,WAAW,GAAG,IAC3B,KAAO,IAAI,IAAI,IAGjB,IAAM,IAAI,IAAI,KAAK,YAAY,GAAG,EAAE,OAAS,IAAI,CACnD,MACO,OACH,KAAO,OAAO,KAAQ,SAAW,IAAM,CAAC,GAG1C,IAAM,KAAK,SAAS,GAAG,EAGzB,GAAM,CAAE,MAAO,WAAa,oBAAoB,CAAE,EAAI,KAEtD,GAAI,MACF,MAAM,IAAI,qBAAqB,mDAAmD,EAGpF,OAAO,GAAG,KAAK,WAAY,CACzB,GAAG,KACH,OAAQ,IAAI,OACZ,KAAM,IAAI,OAAS,GAAG,IAAI,QAAQ,GAAG,IAAI,MAAM,GAAK,IAAI,SACxD,OAAQ,KAAK,SAAW,KAAK,KAAO,MAAQ,MAC9C,EAAG,OAAO,CACZ,CACF,CA/CS,wCAiDT,OAAO,QAAQ,oBAAsB,oBACrC,OAAO,QAAQ,oBAAsB,oBAErC,GAAI,KAAK,UAAY,IAAO,KAAK,YAAc,IAAM,KAAK,WAAa,EAAI,CACzE,IAAI,UAAY,KAChB,OAAO,QAAQ,MAAQ,sBAAsB,SAAU,CAChD,YACH,UAAY,gBAAuB,OAGrC,GAAI,CACF,OAAO,MAAM,UAAU,GAAG,SAAS,CACrC,OAAS,IAAK,CACZ,MAAI,OAAO,KAAQ,UACjB,MAAM,kBAAkB,IAAK,IAAI,EAG7B,GACR,CACF,EAduB,SAevB,OAAO,QAAQ,QAAU,kBAA+B,QACxD,OAAO,QAAQ,SAAW,mBAAgC,SAC1D,OAAO,QAAQ,QAAU,mBAA+B,QACxD,OAAO,QAAQ,SAAW,mBAAgC,SAC1D,OAAO,QAAQ,KAAO,eAA4B,KAClD,OAAO,QAAQ,WAAa,qBAAoC,WAEhE,GAAM,CAAE,gBAAiB,eAAgB,EAAI,iBAE7C,OAAO,QAAQ,gBAAkB,gBACjC,OAAO,QAAQ,gBAAkB,gBAEjC,GAAM,CAAE,YAAa,EAAI,uBACnB,CAAE,UAAW,EAAI,mBAIvB,OAAO,QAAQ,OAAS,IAAI,aAAa,UAAU,CACrD,CAEA,GAAI,KAAK,WAAa,GAAI,CACxB,GAAM,CAAE,aAAc,WAAY,cAAe,SAAU,EAAI,kBAE/D,OAAO,QAAQ,aAAe,aAC9B,OAAO,QAAQ,WAAa,WAC5B,OAAO,QAAQ,cAAgB,cAC/B,OAAO,QAAQ,UAAY,UAE3B,GAAM,CAAE,cAAe,kBAAmB,EAAI,kBAE9C,OAAO,QAAQ,cAAgB,cAC/B,OAAO,QAAQ,mBAAqB,kBACtC,CAEA,GAAI,KAAK,WAAa,IAAM,UAAW,CACrC,GAAM,CAAE,SAAU,EAAI,oBAEtB,OAAO,QAAQ,UAAY,SAC7B,CAEA,OAAO,QAAQ,QAAU,eAAe,IAAI,OAAO,EACnD,OAAO,QAAQ,OAAS,eAAe,IAAI,MAAM,EACjD,OAAO,QAAQ,SAAW,eAAe,IAAI,QAAQ,EACrD,OAAO,QAAQ,QAAU,eAAe,IAAI,OAAO,EACnD,OAAO,QAAQ,QAAU,eAAe,IAAI,OAAO,EAEnD,OAAO,QAAQ,WAAa,WAC5B,OAAO,QAAQ,SAAW,SAC1B,OAAO,QAAQ,UAAY,UAC3B,OAAO,QAAQ,WAAa,6zDCpK5B,IAAA,KAAA,aAAA,UAAA,MAAA,CAAA,EACA,MAAA,aAAA,UAAA,OAAA,CAAA,EAGA,GAAA,aAAA,eAAA,EACA,OAAA,aAAA,iBAAA,EACA,SAAA,iBAEY,WAAZ,SAAYC,WAAS,CACnBA,WAAAA,WAAA,GAAA,GAAA,EAAA,KACAA,WAAAA,WAAA,gBAAA,GAAA,EAAA,kBACAA,WAAAA,WAAA,iBAAA,GAAA,EAAA,mBACAA,WAAAA,WAAA,cAAA,GAAA,EAAA,gBACAA,WAAAA,WAAA,SAAA,GAAA,EAAA,WACAA,WAAAA,WAAA,YAAA,GAAA,EAAA,cACAA,WAAAA,WAAA,SAAA,GAAA,EAAA,WACAA,WAAAA,WAAA,YAAA,GAAA,EAAA,cACAA,WAAAA,WAAA,kBAAA,GAAA,EAAA,oBACAA,WAAAA,WAAA,kBAAA,GAAA,EAAA,oBACAA,WAAAA,WAAA,WAAA,GAAA,EAAA,aACAA,WAAAA,WAAA,aAAA,GAAA,EAAA,eACAA,WAAAA,WAAA,gBAAA,GAAA,EAAA,kBACAA,WAAAA,WAAA,UAAA,GAAA,EAAA,YACAA,WAAAA,WAAA,SAAA,GAAA,EAAA,WACAA,WAAAA,WAAA,iBAAA,GAAA,EAAA,mBACAA,WAAAA,WAAA,cAAA,GAAA,EAAA,gBACAA,WAAAA,WAAA,4BAAA,GAAA,EAAA,8BACAA,WAAAA,WAAA,eAAA,GAAA,EAAA,iBACAA,WAAAA,WAAA,SAAA,GAAA,EAAA,WACAA,WAAAA,WAAA,KAAA,GAAA,EAAA,OACAA,WAAAA,WAAA,gBAAA,GAAA,EAAA,kBACAA,WAAAA,WAAA,oBAAA,GAAA,EAAA,sBACAA,WAAAA,WAAA,eAAA,GAAA,EAAA,iBACAA,WAAAA,WAAA,WAAA,GAAA,EAAA,aACAA,WAAAA,WAAA,mBAAA,GAAA,EAAA,qBACAA,WAAAA,WAAA,eAAA,GAAA,EAAA,gBACF,GA5BY,YAAS,QAAA,UAAT,UAAS,CAAA,EAAA,EA8BrB,IAAY,SAAZ,SAAYC,SAAO,CACjBA,SAAA,OAAA,SACAA,SAAA,YAAA,cACF,GAHY,UAAO,QAAA,QAAP,QAAO,CAAA,EAAA,EAKnB,IAAY,YAAZ,SAAYC,YAAU,CACpBA,YAAA,gBAAA,kBACF,GAFY,aAAU,QAAA,WAAV,WAAU,CAAA,EAAA,EAQtB,SAAgB,YAAY,UAAiB,CAC3C,IAAM,SAAW,GAAG,YAAY,IAAI,IAAI,SAAS,CAAC,EAClD,OAAO,SAAW,SAAS,KAAO,EACpC,CAHgB,kCAAhB,QAAA,YAAA,YAKA,IAAM,kBAA8B,CAClC,UAAU,iBACV,UAAU,cACV,UAAU,SACV,UAAU,kBACV,UAAU,mBAEN,uBAAmC,CACvC,UAAU,WACV,UAAU,mBACV,UAAU,gBAEN,mBAA+B,CAAC,UAAW,MAAO,SAAU,MAAM,EAClE,0BAA4B,GAC5B,4BAA8B,EAEvB,gBAAb,MAAa,yBAAwB,KAAK,OAAA,gCACxC,YAAY,QAAiB,WAAkB,CAC7C,MAAM,OAAO,EACb,KAAK,KAAO,kBACZ,KAAK,WAAa,WAClB,OAAO,eAAe,KAAM,iBAAgB,SAAS,CACvD,GANF,QAAA,gBAAA,gBAYA,IAAa,mBAAb,KAA+B,OAAA,mCAC7B,YAAY,QAA6B,CACvC,KAAK,QAAU,OACjB,CAGM,UAAQ,iDACZ,OAAO,IAAI,QAAsB,SAAU,UAAA,KAAA,OAAA,OAAA,WAAA,CACzC,IAAI,OAAS,OAAO,MAAM,CAAC,EAE3B,KAAK,QAAQ,GAAG,OAAS,OAAiB,CACxC,OAAS,OAAO,OAAO,CAAC,OAAQ,KAAK,CAAC,CACxC,CAAC,EAED,KAAK,QAAQ,GAAG,MAAO,IAAK,CAC1B,QAAQ,OAAO,SAAQ,CAAE,CAC3B,CAAC,CACH,CAAC,CAAA,CACH,CAAC,EAEK,gBAAc,iDAClB,OAAO,IAAI,QAAsB,SAAU,UAAA,KAAA,OAAA,OAAA,WAAA,CACzC,IAAM,OAAmB,CAAA,EAEzB,KAAK,QAAQ,GAAG,OAAS,OAAiB,CACxC,OAAO,KAAK,KAAK,CACnB,CAAC,EAED,KAAK,QAAQ,GAAG,MAAO,IAAK,CAC1B,QAAQ,OAAO,OAAO,MAAM,CAAC,CAC/B,CAAC,CACH,CAAC,CAAA,CACH,CAAC,IAhCH,QAAA,mBAAA,mBAmCA,SAAgB,QAAQ,WAAkB,CAExC,OADuB,IAAI,IAAI,UAAU,EACxB,WAAa,QAChC,CAHgB,0BAAhB,QAAA,QAAA,QAKA,IAAa,WAAb,KAAuB,OAAA,2BAkBrB,YACEC,WACA,SACA,eAAmC,CAhB7B,KAAA,gBAAkB,GAElB,KAAA,gBAAkB,GAClB,KAAA,wBAA0B,GAC1B,KAAA,cAAgB,GAChB,KAAA,cAAgB,GAChB,KAAA,YAAc,EAId,KAAA,WAAa,GACb,KAAA,UAAY,GAOlB,KAAK,UAAYA,WACjB,KAAK,SAAW,UAAY,CAAA,EAC5B,KAAK,eAAiB,eAClB,iBACE,eAAe,gBAAkB,OACnC,KAAK,gBAAkB,eAAe,gBAGxC,KAAK,eAAiB,eAAe,cAEjC,eAAe,gBAAkB,OACnC,KAAK,gBAAkB,eAAe,gBAGpC,eAAe,wBAA0B,OAC3C,KAAK,wBAA0B,eAAe,wBAG5C,eAAe,cAAgB,OACjC,KAAK,cAAgB,KAAK,IAAI,eAAe,aAAc,CAAC,GAG1D,eAAe,WAAa,OAC9B,KAAK,WAAa,eAAe,WAG/B,eAAe,cAAgB,OACjC,KAAK,cAAgB,eAAe,cAGlC,eAAe,YAAc,OAC/B,KAAK,YAAc,eAAe,YAGxC,CAEM,QACJ,WACA,kBAA4C,iDAE5C,OAAO,KAAK,QAAQ,UAAW,WAAY,KAAM,mBAAqB,CAAA,CAAE,CAC1E,CAAC,EAEK,IACJ,WACA,kBAA4C,iDAE5C,OAAO,KAAK,QAAQ,MAAO,WAAY,KAAM,mBAAqB,CAAA,CAAE,CACtE,CAAC,EAEK,IACJ,WACA,kBAA4C,iDAE5C,OAAO,KAAK,QAAQ,SAAU,WAAY,KAAM,mBAAqB,CAAA,CAAE,CACzE,CAAC,EAEK,KACJ,WACA,KACA,kBAA4C,iDAE5C,OAAO,KAAK,QAAQ,OAAQ,WAAY,KAAM,mBAAqB,CAAA,CAAE,CACvE,CAAC,EAEK,MACJ,WACA,KACA,kBAA4C,iDAE5C,OAAO,KAAK,QAAQ,QAAS,WAAY,KAAM,mBAAqB,CAAA,CAAE,CACxE,CAAC,EAEK,IACJ,WACA,KACA,kBAA4C,iDAE5C,OAAO,KAAK,QAAQ,MAAO,WAAY,KAAM,mBAAqB,CAAA,CAAE,CACtE,CAAC,EAEK,KACJ,WACA,kBAA4C,iDAE5C,OAAO,KAAK,QAAQ,OAAQ,WAAY,KAAM,mBAAqB,CAAA,CAAE,CACvE,CAAC,EAEK,WACJ,KACA,WACA,OACA,kBAA4C,iDAE5C,OAAO,KAAK,QAAQ,KAAM,WAAY,OAAQ,iBAAiB,CACjE,CAAC,EAMK,QACJ,WACA,kBAA8C,CAAA,EAAE,iDAEhD,kBAAkB,QAAQ,MAAM,EAAI,KAAK,4BACvC,kBACA,QAAQ,OACR,WAAW,eAAe,EAE5B,IAAM,IAA0B,MAAM,KAAK,IACzC,WACA,iBAAiB,EAEnB,OAAO,KAAK,iBAAoB,IAAK,KAAK,cAAc,CAC1D,CAAC,EAEK,SACJ,WACA,IACA,kBAA8C,CAAA,EAAE,iDAEhD,IAAM,KAAe,KAAK,UAAU,IAAK,KAAM,CAAC,EAChD,kBAAkB,QAAQ,MAAM,EAAI,KAAK,4BACvC,kBACA,QAAQ,OACR,WAAW,eAAe,EAE5B,kBAAkB,QAAQ,WAAW,EAAI,KAAK,4BAC5C,kBACA,QAAQ,YACR,WAAW,eAAe,EAE5B,IAAM,IAA0B,MAAM,KAAK,KACzC,WACA,KACA,iBAAiB,EAEnB,OAAO,KAAK,iBAAoB,IAAK,KAAK,cAAc,CAC1D,CAAC,EAEK,QACJ,WACA,IACA,kBAA8C,CAAA,EAAE,iDAEhD,IAAM,KAAe,KAAK,UAAU,IAAK,KAAM,CAAC,EAChD,kBAAkB,QAAQ,MAAM,EAAI,KAAK,4BACvC,kBACA,QAAQ,OACR,WAAW,eAAe,EAE5B,kBAAkB,QAAQ,WAAW,EAAI,KAAK,4BAC5C,kBACA,QAAQ,YACR,WAAW,eAAe,EAE5B,IAAM,IAA0B,MAAM,KAAK,IACzC,WACA,KACA,iBAAiB,EAEnB,OAAO,KAAK,iBAAoB,IAAK,KAAK,cAAc,CAC1D,CAAC,EAEK,UACJ,WACA,IACA,kBAA8C,CAAA,EAAE,iDAEhD,IAAM,KAAe,KAAK,UAAU,IAAK,KAAM,CAAC,EAChD,kBAAkB,QAAQ,MAAM,EAAI,KAAK,4BACvC,kBACA,QAAQ,OACR,WAAW,eAAe,EAE5B,kBAAkB,QAAQ,WAAW,EAAI,KAAK,4BAC5C,kBACA,QAAQ,YACR,WAAW,eAAe,EAE5B,IAAM,IAA0B,MAAM,KAAK,MACzC,WACA,KACA,iBAAiB,EAEnB,OAAO,KAAK,iBAAoB,IAAK,KAAK,cAAc,CAC1D,CAAC,EAOK,QACJ,KACA,WACA,KACA,QAAkC,iDAElC,GAAI,KAAK,UACP,MAAM,IAAI,MAAM,mCAAmC,EAGrD,IAAM,UAAY,IAAI,IAAI,UAAU,EAChCC,MAAwB,KAAK,gBAAgB,KAAM,UAAW,OAAO,EAGnE,SACJ,KAAK,eAAiB,mBAAmB,SAAS,IAAI,EAClD,KAAK,YAAc,EACnB,EACF,SAAW,EAEX,SACJ,EAAG,CAID,GAHA,SAAW,MAAM,KAAK,WAAWA,MAAM,IAAI,EAIzC,UACA,SAAS,SACT,SAAS,QAAQ,aAAe,UAAU,aAC1C,CACA,IAAI,sBAEJ,QAAW,WAAW,KAAK,SACzB,GAAI,QAAQ,wBAAwB,QAAQ,EAAG,CAC7C,sBAAwB,QACxB,MAIJ,OAAI,sBACK,sBAAsB,qBAAqB,KAAMA,MAAM,IAAI,EAI3D,SAIX,IAAI,mBAA6B,KAAK,cACtC,KACE,SAAS,QAAQ,YACjB,kBAAkB,SAAS,SAAS,QAAQ,UAAU,GACtD,KAAK,iBACL,mBAAqB,GACrB,CACA,IAAM,YACJ,SAAS,QAAQ,QAAQ,SAC3B,GAAI,CAAC,YAEH,MAEF,IAAM,kBAAoB,IAAI,IAAI,WAAW,EAC7C,GACE,UAAU,WAAa,UACvB,UAAU,WAAa,kBAAkB,UACzC,CAAC,KAAK,wBAEN,MAAM,IAAI,MACR,8KAA8K,EASlL,GAHA,MAAM,SAAS,SAAQ,EAGnB,kBAAkB,WAAa,UAAU,SAC3C,QAAW,UAAU,QAEf,OAAO,YAAW,IAAO,iBAC3B,OAAO,QAAQ,MAAM,EAM3BA,MAAO,KAAK,gBAAgB,KAAM,kBAAmB,OAAO,EAC5D,SAAW,MAAM,KAAK,WAAWA,MAAM,IAAI,EAC3C,qBAGF,GACE,CAAC,SAAS,QAAQ,YAClB,CAAC,uBAAuB,SAAS,SAAS,QAAQ,UAAU,EAG5D,OAAO,SAGT,UAAY,EAER,SAAW,WACb,MAAM,SAAS,SAAQ,EACvB,MAAM,KAAK,2BAA2B,QAAQ,SAEzC,SAAW,UAEpB,OAAO,QACT,CAAC,EAKD,SAAO,CACD,KAAK,QACP,KAAK,OAAO,QAAO,EAGrB,KAAK,UAAY,EACnB,CAOM,WACJA,MACA,KAA2C,iDAE3C,OAAO,IAAI,QAA4B,CAAC,QAAS,SAAU,CACzD,SAAS,kBAAkB,IAAa,IAAwB,CAC1D,IACF,OAAO,GAAG,EACA,IAIV,QAAQ,GAAG,EAFX,OAAO,IAAI,MAAM,eAAe,CAAC,CAIrC,CATS,8CAWT,KAAK,uBAAuBA,MAAM,KAAM,iBAAiB,CAC3D,CAAC,CACH,CAAC,EAQD,uBACEA,MACA,KACA,SAAyD,CAErD,OAAO,MAAS,WACbA,MAAK,QAAQ,UAChBA,MAAK,QAAQ,QAAU,CAAA,GAEzBA,MAAK,QAAQ,QAAQ,gBAAgB,EAAI,OAAO,WAAW,KAAM,MAAM,GAGzE,IAAI,eAAiB,GACrB,SAAS,aAAa,IAAa,IAAwB,CACpD,iBACH,eAAiB,GACjB,SAAS,IAAK,GAAG,EAErB,CALS,oCAOT,IAAM,IAA0BA,MAAK,WAAW,QAC9CA,MAAK,QACJ,KAA6B,CAC5B,IAAM,IAA0B,IAAI,mBAAmB,GAAG,EAC1D,aAAa,OAAW,GAAG,CAC7B,CAAC,EAGC,OACJ,IAAI,GAAG,SAAU,MAAO,CACtB,OAAS,IACX,CAAC,EAGD,IAAI,WAAW,KAAK,gBAAkB,EAAI,IAAO,IAAK,CAChD,QACF,OAAO,IAAG,EAEZ,aAAa,IAAI,MAAM,oBAAoBA,MAAK,QAAQ,IAAI,EAAE,CAAC,CACjE,CAAC,EAED,IAAI,GAAG,QAAS,SAAU,IAAG,CAG3B,aAAa,GAAG,CAClB,CAAC,EAEG,MAAQ,OAAO,MAAS,UAC1B,IAAI,MAAM,KAAM,MAAM,EAGpB,MAAQ,OAAO,MAAS,UAC1B,KAAK,GAAG,QAAS,UAAA,CACf,IAAI,IAAG,CACT,CAAC,EAED,KAAK,KAAK,GAAG,GAEb,IAAI,IAAG,CAEX,CAOA,SAAS,UAAiB,CACxB,IAAM,UAAY,IAAI,IAAI,SAAS,EACnC,OAAO,KAAK,UAAU,SAAS,CACjC,CAEA,mBAAmB,UAAiB,CAClC,IAAM,UAAY,IAAI,IAAI,SAAS,EAC7B,SAAW,GAAG,YAAY,SAAS,EAEzC,GADiB,UAAY,SAAS,SAKtC,OAAO,KAAK,yBAAyB,UAAW,QAAQ,CAC1D,CAEQ,gBACN,OACA,WACA,QAAkC,CAElC,IAAMA,MAAyC,CAAA,EAE/CA,MAAK,UAAY,WACjB,IAAM,SAAoBA,MAAK,UAAU,WAAa,SACtDA,MAAK,WAAa,SAAW,MAAQ,KACrC,IAAM,YAAsB,SAAW,IAAM,GAkB7C,GAhBAA,MAAK,QAA+B,CAAA,EACpCA,MAAK,QAAQ,KAAOA,MAAK,UAAU,SACnCA,MAAK,QAAQ,KAAOA,MAAK,UAAU,KAC/B,SAASA,MAAK,UAAU,IAAI,EAC5B,YACJA,MAAK,QAAQ,MACVA,MAAK,UAAU,UAAY,KAAOA,MAAK,UAAU,QAAU,IAC9DA,MAAK,QAAQ,OAAS,OACtBA,MAAK,QAAQ,QAAU,KAAK,cAAc,OAAO,EAC7C,KAAK,WAAa,OACpBA,MAAK,QAAQ,QAAQ,YAAY,EAAI,KAAK,WAG5CA,MAAK,QAAQ,MAAQ,KAAK,UAAUA,MAAK,SAAS,EAG9C,KAAK,SACP,QAAW,WAAW,KAAK,SACzB,QAAQ,eAAeA,MAAK,OAAO,EAIvC,OAAOA,KACT,CAEQ,cACN,QAAkC,CAElC,OAAI,KAAK,gBAAkB,KAAK,eAAe,QACtC,OAAO,OACZ,CAAA,EACAC,eAAc,KAAK,eAAe,OAAO,EACzCA,eAAc,SAAW,CAAA,CAAE,CAAC,EAIzBA,eAAc,SAAW,CAAA,CAAE,CACpC,CAEQ,4BACN,kBACA,OACA,SAAgB,CAEhB,IAAI,aACJ,OAAI,KAAK,gBAAkB,KAAK,eAAe,UAC7C,aAAeA,eAAc,KAAK,eAAe,OAAO,EAAE,MAAM,GAE3D,kBAAkB,MAAM,GAAK,cAAgB,QACtD,CAEQ,UAAU,UAAc,CAC9B,IAAI,MACE,SAAW,GAAG,YAAY,SAAS,EACnC,SAAW,UAAY,SAAS,SAWtC,GATI,KAAK,YAAc,WACrB,MAAQ,KAAK,aAGV,WACH,MAAQ,KAAK,QAIX,MACF,OAAO,MAGT,IAAM,SAAW,UAAU,WAAa,SACpC,WAAa,IAMjB,GALI,KAAK,iBACP,WAAa,KAAK,eAAe,YAAc,KAAK,YAAY,YAI9D,UAAY,SAAS,SAAU,CACjC,IAAM,aAAe,CACnB,WACA,UAAW,KAAK,WAChB,MAAK,OAAA,OAAA,OAAA,OAAA,CAAA,GACE,SAAS,UAAY,SAAS,WAAa,CAC9C,UAAW,GAAG,SAAS,QAAQ,IAAI,SAAS,QAAQ,GACpD,EAAA,CACF,KAAM,SAAS,SACf,KAAM,SAAS,IAAI,CAAA,GAInB,YACE,UAAY,SAAS,WAAa,SACpC,SACF,YAAc,UAAY,OAAO,eAAiB,OAAO,cAEzD,YAAc,UAAY,OAAO,cAAgB,OAAO,aAG1D,MAAQ,YAAY,YAAY,EAChC,KAAK,YAAc,MAIrB,GAAI,CAAC,MAAO,CACV,IAAM,QAAU,CAAC,UAAW,KAAK,WAAY,UAAU,EACvD,MAAQ,SAAW,IAAI,MAAM,MAAM,OAAO,EAAI,IAAI,KAAK,MAAM,OAAO,EACpE,KAAK,OAAS,MAGhB,OAAI,UAAY,KAAK,kBAInB,MAAM,QAAU,OAAO,OAAO,MAAM,SAAW,CAAA,EAAI,CACjD,mBAAoB,GACrB,GAGI,KACT,CAEQ,yBAAyB,UAAgB,SAAa,CAC5D,IAAI,WAOJ,GALI,KAAK,aACP,WAAa,KAAK,uBAIhB,WACF,OAAO,WAGT,IAAM,SAAW,UAAU,WAAa,SACxC,kBAAa,IAAI,SAAA,WAAU,OAAA,OAAA,CACzB,IAAK,SAAS,KACd,WAAa,KAAK,WAAiB,EAAJ,CAAK,GAC/B,SAAS,UAAY,SAAS,WAAa,CAC9C,MAAO,SAAS,OAAO,KACrB,GAAG,SAAS,QAAQ,IAAI,SAAS,QAAQ,EAAE,EAC3C,SAAS,QAAQ,CAAC,GACpB,CAAA,EAEJ,KAAK,sBAAwB,WAEzB,UAAY,KAAK,kBAInB,WAAW,QAAU,OAAO,OAAO,WAAW,QAAQ,YAAc,CAAA,EAAI,CACtE,mBAAoB,GACrB,GAGI,UACT,CAEc,2BAA2B,YAAmB,iDAC1D,YAAc,KAAK,IAAI,0BAA2B,WAAW,EAC7D,IAAM,GAAa,4BAA8B,KAAK,IAAI,EAAG,WAAW,EACxE,OAAO,IAAI,QAAQ,SAAW,WAAW,IAAM,QAAO,EAAI,EAAE,CAAC,CAC/D,CAAC,EAEa,iBACZ,IACA,QAA4B,iDAE5B,OAAO,IAAI,QAA8B,CAAO,QAAS,SAAU,UAAA,KAAA,OAAA,OAAA,WAAA,CACjE,IAAM,WAAa,IAAI,QAAQ,YAAc,EAEvC,SAAiC,CACrC,WACA,OAAQ,KACR,QAAS,CAAA,GAIP,aAAe,UAAU,UAC3B,QAAQ,QAAQ,EAKlB,SAAS,qBAAqB,IAAU,MAAU,CAChD,GAAI,OAAO,OAAU,SAAU,CAC7B,IAAM,EAAI,IAAI,KAAK,KAAK,EACxB,GAAI,CAAC,MAAM,EAAE,QAAO,CAAE,EACpB,OAAO,EAIX,OAAO,KACT,CATS,oDAWT,IAAI,IACA,SAEJ,GAAI,CACF,SAAW,MAAM,IAAI,SAAQ,EACzB,UAAY,SAAS,OAAS,IAC5B,SAAW,QAAQ,iBACrB,IAAM,KAAK,MAAM,SAAU,oBAAoB,EAE/C,IAAM,KAAK,MAAM,QAAQ,EAG3B,SAAS,OAAS,KAGpB,SAAS,QAAU,IAAI,QAAQ,aACnB,EAKd,GAAI,WAAa,IAAK,CACpB,IAAI,IAGA,KAAO,IAAI,QACb,IAAM,IAAI,QACD,UAAY,SAAS,OAAS,EAEvC,IAAM,SAEN,IAAM,oBAAoB,UAAU,IAGtC,IAAM,IAAM,IAAI,gBAAgB,IAAK,UAAU,EAC/C,IAAI,OAAS,SAAS,OAEtB,OAAO,GAAG,OAEV,QAAQ,QAAQ,CAEpB,CAAC,CAAA,CACH,CAAC,IA5rBH,QAAA,WAAA,WA+rBA,IAAMA,eAAgB,OAAC,KACrB,OAAO,KAAK,GAAG,EAAE,OAAO,CAAC,EAAQ,KAAQ,EAAE,EAAE,YAAW,CAAE,EAAI,IAAI,CAAC,EAAI,GAAI,CAAA,CAAE,EADzD,89BCzzBtB,IAAa,uBAAb,KAAmC,OAAA,uCAIjC,YAAY,SAAkB,SAAgB,CAC5C,KAAK,SAAW,SAChB,KAAK,SAAW,QAClB,CAEA,eAAe,QAA4B,CACzC,GAAI,CAAC,QAAQ,QACX,MAAM,MAAM,4BAA4B,EAE1C,QAAQ,QAAQ,cAAmB,SAAS,OAAO,KACjD,GAAG,KAAK,QAAQ,IAAI,KAAK,QAAQ,EAAE,EACnC,SAAS,QAAQ,CAAC,EACtB,CAGA,yBAAuB,CACrB,MAAO,EACT,CAEM,sBAAoB,iDACxB,MAAM,IAAI,MAAM,iBAAiB,CACnC,CAAC,IAzBH,QAAA,uBAAA,uBA4BA,IAAa,wBAAb,KAAoC,OAAA,wCAGlC,YAAY,MAAa,CACvB,KAAK,MAAQ,KACf,CAIA,eAAe,QAA4B,CACzC,GAAI,CAAC,QAAQ,QACX,MAAM,MAAM,4BAA4B,EAE1C,QAAQ,QAAQ,cAAmB,UAAU,KAAK,KAAK,EACzD,CAGA,yBAAuB,CACrB,MAAO,EACT,CAEM,sBAAoB,iDACxB,MAAM,IAAI,MAAM,iBAAiB,CACnC,CAAC,IAvBH,QAAA,wBAAA,wBA0BA,IAAa,qCAAb,KAAiD,OAAA,qDAK/C,YAAY,MAAa,CACvB,KAAK,MAAQ,KACf,CAIA,eAAe,QAA4B,CACzC,GAAI,CAAC,QAAQ,QACX,MAAM,MAAM,4BAA4B,EAE1C,QAAQ,QAAQ,cAAmB,SAAS,OAAO,KACjD,OAAO,KAAK,KAAK,EAAE,EACnB,SAAS,QAAQ,CAAC,EACtB,CAGA,yBAAuB,CACrB,MAAO,EACT,CAEM,sBAAoB,iDACxB,MAAM,IAAI,MAAM,iBAAiB,CACnC,CAAC,IA3BH,QAAA,qCAAA,w5BCvDA,IAAA,cAAA,cACA,OAAA,eACA,OAAA,eAKa,WAAb,MAAa,WAAU,OAAA,2BACb,OAAO,iBACb,WAAa,GACb,SAAW,GAAE,CAEb,IAAM,eAAiC,CACrC,aAAc,WACd,WAAY,UAGd,OAAO,IAAI,cAAA,WACT,sBACA,CAAC,IAAI,OAAA,wBAAwB,YAAW,gBAAe,CAAE,CAAC,EAC1D,cAAc,CAElB,CAEQ,OAAO,iBAAe,CAC5B,IAAM,MAAQ,QAAQ,IAAI,+BAC1B,GAAI,CAAC,MACH,MAAM,IAAI,MACR,2DAA2D,EAG/D,OAAO,KACT,CAEQ,OAAO,eAAa,CAC1B,IAAM,WAAa,QAAQ,IAAI,6BAC/B,GAAI,CAAC,WACH,MAAM,IAAI,MAAM,yDAAyD,EAE3E,OAAO,UACT,CAEQ,OAAa,QAAQ,aAAoB,wDAa/C,IAAM,UAAW,IAVL,MAFO,YAAW,iBAAgB,EAG3C,QAAuB,YAAY,EACnC,MAAMC,QAAQ,CACb,MAAM,IAAI,MACR;;uBACaA,OAAM,UAAU;;yBACdA,OAAM,OAAO,EAAE,CAElC,CAAC,GAEkB,UAAM,MAAA,KAAA,OAAA,OAAA,GAAE,MAC7B,GAAI,CAAC,SACH,MAAM,IAAI,MAAM,+CAA+C,EAEjE,OAAO,WAGT,OAAa,WAAW,SAAiB,iDACvC,GAAI,CAEF,IAAI,aAAuB,YAAW,cAAa,EACnD,GAAI,SAAU,CACZ,IAAM,gBAAkB,mBAAmB,QAAQ,EACnD,aAAe,GAAG,YAAY,aAAa,eAAe,MAG5D,OAAA,OAAM,mBAAmB,YAAY,EAAE,EAEvC,IAAM,SAAW,MAAM,YAAW,QAAQ,YAAY,EACtD,SAAA,OAAA,WAAU,QAAQ,EACX,eACAA,OAAO,CACd,MAAM,IAAI,MAAM,kBAAkBA,OAAM,OAAO,EAAE,EAErD,CAAC,IAxEH,QAAA,WAAA,87BCVA,IAAA,KAAA,UAAA,IAAA,EACA,KAAA,UAAA,IAAA,EACM,CAAC,OAAQ,WAAY,SAAS,EAAI,KAAA,SAE3B,QAAA,gBAAkB,sBAClB,QAAA,iBACX,4GA+CF,IAAM,QAAN,KAAa,OAAA,wBAIX,aAAA,CACE,KAAK,QAAU,EACjB,CAQc,UAAQ,iDACpB,GAAI,KAAK,UACP,OAAO,KAAK,UAGd,IAAM,YAAc,QAAQ,IAAI,QAAA,eAAe,EAC/C,GAAI,CAAC,YACH,MAAM,IAAI,MACR,4CAA4C,QAAA,eAAe,6DAA6D,EAI5H,GAAI,CACF,MAAM,OAAO,YAAa,KAAA,UAAU,KAAO,KAAA,UAAU,IAAI,OACnD,CACN,MAAM,IAAI,MACR,mCAAmC,WAAW,0DAA0D,EAI5G,YAAK,UAAY,YACV,KAAK,SACd,CAAC,EAWO,KACN,IACA,QACA,MAAuC,CAAA,EAAE,CAEzC,IAAM,UAAY,OAAO,QAAQ,KAAK,EACnC,IAAI,CAAC,CAAC,IAAK,KAAK,IAAM,IAAI,GAAG,KAAK,KAAK,GAAG,EAC1C,KAAK,EAAE,EAEV,OAAK,QAIE,IAAI,GAAG,GAAG,SAAS,IAAI,OAAO,KAAK,GAAG,IAHpC,IAAI,GAAG,GAAG,SAAS,GAI9B,CASM,MAAM,QAA6B,iDACvC,IAAM,UAAY,CAAC,CAAC,SAAS,UACvB,SAAW,MAAM,KAAK,SAAQ,EAEpC,aADkB,UAAY,UAAY,YAC1B,SAAU,KAAK,QAAS,CAAC,SAAU,MAAM,CAAC,EACnD,KAAK,YAAW,CACzB,CAAC,EAOK,OAAK,iDACT,OAAO,KAAK,YAAW,EAAG,MAAM,CAAC,UAAW,EAAI,CAAC,CACnD,CAAC,EAOD,WAAS,CACP,OAAO,KAAK,OACd,CAOA,eAAa,CACX,OAAO,KAAK,QAAQ,SAAW,CACjC,CAOA,aAAW,CACT,YAAK,QAAU,GACR,IACT,CAUA,OAAO,KAAc,OAAS,GAAK,CACjC,YAAK,SAAW,KACT,OAAS,KAAK,OAAM,EAAK,IAClC,CAOA,QAAM,CACJ,OAAO,KAAK,OAAO,KAAA,GAAG,CACxB,CAUA,aAAa,KAAc,KAAa,CACtC,IAAM,MAAK,OAAA,OAAA,CAAA,EACL,MAAQ,CAAC,IAAI,CAAE,EAEf,QAAU,KAAK,KAAK,MAAO,KAAK,KAAK,OAAQ,IAAI,EAAG,KAAK,EAC/D,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CAUA,QAAQ,MAAiB,QAAU,GAAK,CACtC,IAAM,IAAM,QAAU,KAAO,KACvB,UAAY,MAAM,IAAI,MAAQ,KAAK,KAAK,KAAM,IAAI,CAAC,EAAE,KAAK,EAAE,EAC5D,QAAU,KAAK,KAAK,IAAK,SAAS,EACxC,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CASA,SAAS,KAAuB,CAC9B,IAAM,UAAY,KACf,IAAI,KAAM,CACT,IAAM,MAAQ,IACX,IAAI,MAAO,CACV,GAAI,OAAO,MAAS,SAClB,OAAO,KAAK,KAAK,KAAM,IAAI,EAG7B,GAAM,CAAC,OAAQ,KAAM,QAAS,OAAO,EAAI,KACnC,IAAM,OAAS,KAAO,KACtB,MAAK,OAAA,OAAA,OAAA,OAAA,CAAA,EACL,SAAW,CAAC,OAAO,CAAE,EACrB,SAAW,CAAC,OAAO,CAAE,EAG3B,OAAO,KAAK,KAAK,IAAK,KAAM,KAAK,CACnC,CAAC,EACA,KAAK,EAAE,EAEV,OAAO,KAAK,KAAK,KAAM,KAAK,CAC9B,CAAC,EACA,KAAK,EAAE,EAEJ,QAAU,KAAK,KAAK,QAAS,SAAS,EAC5C,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CAUA,WAAW,MAAe,QAAe,CACvC,IAAM,QAAU,KAAK,KAAK,UAAW,KAAK,KAAK,UAAW,KAAK,EAAI,OAAO,EAC1E,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CAWA,SAAS,IAAa,IAAa,QAA6B,CAC9D,GAAM,CAAC,MAAO,MAAM,EAAI,SAAW,CAAA,EAC7B,MAAK,OAAA,OAAA,OAAA,OAAA,CAAA,EACL,OAAS,CAAC,KAAK,CAAE,EACjB,QAAU,CAAC,MAAM,CAAE,EAGnB,QAAU,KAAK,KAAK,MAAO,KAAI,OAAA,OAAA,CAAG,IAAK,GAAG,EAAK,KAAK,CAAA,EAC1D,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CAUA,WAAW,KAAc,MAAuB,CAC9C,IAAM,IAAM,IAAI,KAAK,GACf,WAAa,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,IAAI,EAAE,SAAS,GAAG,EAChE,IACA,KACE,QAAU,KAAK,KAAK,WAAY,IAAI,EAC1C,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CAOA,cAAY,CACV,IAAM,QAAU,KAAK,KAAK,KAAM,IAAI,EACpC,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CAOA,UAAQ,CACN,IAAM,QAAU,KAAK,KAAK,KAAM,IAAI,EACpC,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CAUA,SAAS,KAAc,KAAa,CAClC,IAAM,MAAK,OAAA,OAAA,CAAA,EACL,MAAQ,CAAC,IAAI,CAAE,EAEf,QAAU,KAAK,KAAK,aAAc,KAAM,KAAK,EACnD,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,CAUA,QAAQ,KAAc,KAAY,CAChC,IAAM,QAAU,KAAK,KAAK,IAAK,KAAM,CAAC,IAAI,CAAC,EAC3C,OAAO,KAAK,OAAO,OAAO,EAAE,OAAM,CACpC,GAGI,SAAW,IAAI,QAKR,QAAA,gBAAkB,SAClB,QAAA,QAAU,+kCC1WvB,IAAA,KAAA,aAAA,UAAA,MAAA,CAAA,EASA,SAAgB,YAAY,IAAW,CACrC,OAAO,IAAI,QAAQ,QAAS,GAAG,CACjC,CAFgB,kCAAhB,QAAA,YAAA,YAWA,SAAgB,YAAY,IAAW,CACrC,OAAO,IAAI,QAAQ,OAAQ,IAAI,CACjC,CAFgB,kCAAhB,QAAA,YAAA,YAYA,SAAgB,eAAe,IAAW,CACxC,OAAO,IAAI,QAAQ,SAAU,KAAK,GAAG,CACvC,CAFgB,wCAAhB,QAAA,eAAA,y2DChCA,IAAA,GAAA,aAAA,UAAA,IAAA,CAAA,EACA,KAAA,aAAA,UAAA,MAAA,CAAA,EAEa,GAcT,GAAG,SAbL,QAAA,MAAK,GAAA,MACL,QAAA,SAAQ,GAAA,SACR,QAAA,MAAK,GAAA,MACL,QAAA,MAAK,GAAA,MACL,QAAA,KAAI,GAAA,KACJ,QAAA,QAAO,GAAA,QACP,QAAA,SAAQ,GAAA,SACR,QAAA,OAAM,GAAA,OACN,QAAA,GAAE,GAAA,GACF,QAAA,MAAK,GAAA,MACL,QAAA,KAAI,GAAA,KACJ,QAAA,QAAO,GAAA,QACP,QAAA,OAAM,GAAA,OAGK,QAAA,WAAa,QAAQ,WAAa,QAElC,QAAA,eAAiB,UACjB,QAAA,SAAW,GAAG,UAAU,SAErC,SAAsB,OAAO,OAAc,iDACzC,GAAI,CACF,MAAM,QAAA,KAAK,MAAM,QACV,IAAK,CACZ,GAAI,IAAI,OAAS,SACf,MAAO,GAGT,MAAM,IAGR,MAAO,EACT,CAAC,EAZqB,wBAAtB,QAAA,OAAA,OAcA,SAAsB,YACpB,OACA,QAAU,GAAK,iDAGf,OADc,QAAU,MAAM,QAAA,KAAK,MAAM,EAAI,MAAM,QAAA,MAAM,MAAM,GAClD,YAAW,CAC1B,CAAC,EANqB,kCAAtB,QAAA,YAAA,YAYA,SAAgB,SAAS,EAAS,CAEhC,GADA,EAAI,oBAAoB,CAAC,EACrB,CAAC,EACH,MAAM,IAAI,MAAM,0CAA0C,EAG5D,OAAI,QAAA,WAEA,EAAE,WAAW,IAAI,GAAK,WAAW,KAAK,CAAC,EAIpC,EAAE,WAAW,GAAG,CACzB,CAbgB,4BAAhB,QAAA,SAAA,SAqBA,SAAsB,qBACpB,SACA,WAAoB,iDAEpB,IAAI,MACJ,GAAI,CAEF,MAAQ,MAAM,QAAA,KAAK,QAAQ,QACpB,IAAK,CACR,IAAI,OAAS,UAEf,QAAQ,IACN,uEAAuE,QAAQ,MAAM,GAAG,EAAE,EAIhG,GAAI,OAAS,MAAM,OAAM,GACvB,GAAI,QAAA,WAAY,CAEd,IAAM,SAAW,KAAK,QAAQ,QAAQ,EAAE,YAAW,EACnD,GAAI,WAAW,KAAK,UAAY,SAAS,YAAW,IAAO,QAAQ,EACjE,OAAO,iBAGL,iBAAiB,KAAK,EACxB,OAAO,SAMb,IAAM,iBAAmB,SACzB,QAAW,aAAa,WAAY,CAClC,SAAW,iBAAmB,UAE9B,MAAQ,OACR,GAAI,CACF,MAAQ,MAAM,QAAA,KAAK,QAAQ,QACpB,IAAK,CACR,IAAI,OAAS,UAEf,QAAQ,IACN,uEAAuE,QAAQ,MAAM,GAAG,EAAE,EAKhG,GAAI,OAAS,MAAM,OAAM,GACvB,GAAI,QAAA,WAAY,CAEd,GAAI,CACF,IAAM,UAAY,KAAK,QAAQ,QAAQ,EACjC,UAAY,KAAK,SAAS,QAAQ,EAAE,YAAW,EACrD,QAAW,cAAc,MAAM,QAAA,QAAQ,SAAS,EAC9C,GAAI,YAAc,WAAW,YAAW,EAAI,CAC1C,SAAW,KAAK,KAAK,UAAW,UAAU,EAC1C,aAGG,IAAK,CAEZ,QAAQ,IACN,yEAAyE,QAAQ,MAAM,GAAG,EAAE,EAIhG,OAAO,iBAEH,iBAAiB,KAAK,EACxB,OAAO,UAMf,MAAO,EACT,CAAC,EA5EqB,oDAAtB,QAAA,qBAAA,qBA8EA,SAAS,oBAAoB,EAAS,CAEpC,OADA,EAAI,GAAK,GACL,QAAA,YAEF,EAAI,EAAE,QAAQ,MAAO,IAAI,EAGlB,EAAE,QAAQ,SAAU,IAAI,GAI1B,EAAE,QAAQ,SAAU,GAAG,CAChC,CAZS,kDAiBT,SAAS,iBAAiB,MAAe,CACvC,OACG,MAAM,KAAO,GAAK,IACjB,MAAM,KAAO,GAAK,GAAK,MAAM,MAAQ,QAAQ,OAAM,IACnD,MAAM,KAAO,IAAM,GAAK,MAAM,MAAQ,QAAQ,OAAM,CAE1D,CANS,4CAST,SAAgB,YAAU,SACxB,OAAAC,IAAO,QAAQ,IAAI,WAAU,MAAAA,MAAA,OAAAA,IAAI,SACnC,CAFgB,gCAAhB,QAAA,WAAA,+kDC/KA,IAAA,SAAA,UAAA,QAAA,EACA,KAAA,aAAA,UAAA,MAAA,CAAA,EACA,OAAA,aAAA,iBAAA,EA8BA,SAAsB,GACpB,OACA,KACA,QAAuB,CAAA,EAAE,iDAEzB,GAAM,CAAC,MAAO,UAAW,mBAAmB,EAAI,gBAAgB,OAAO,EAEjE,UAAY,MAAM,OAAO,OAAO,IAAI,GAAK,MAAM,OAAO,KAAK,IAAI,EAAI,KAEzE,GAAI,UAAY,SAAS,OAAM,GAAM,CAAC,MACpC,OAIF,IAAM,QACJ,UAAY,SAAS,YAAW,GAAM,oBAClC,KAAK,KAAK,KAAM,KAAK,SAAS,MAAM,CAAC,EACrC,KAEN,GAAI,EAAE,MAAM,OAAO,OAAO,MAAM,GAC9B,MAAM,IAAI,MAAM,8BAA8B,MAAM,EAAE,EAIxD,IAFmB,MAAM,OAAO,KAAK,MAAM,GAE5B,YAAW,EACxB,GAAK,UAKH,MAAM,eAAe,OAAQ,QAAS,EAAG,KAAK,MAJ9C,OAAM,IAAI,MACR,mBAAmB,MAAM,4DAA4D,MAKpF,CACL,GAAI,KAAK,SAAS,OAAQ,OAAO,IAAM,GAErC,MAAM,IAAI,MAAM,IAAI,OAAO,UAAU,MAAM,qBAAqB,EAGlE,MAAM,SAAS,OAAQ,QAAS,KAAK,EAEzC,CAAC,EAxCqB,gBAAtB,QAAA,GAAA,GAiDA,SAAsB,GACpB,OACA,KACA,QAAuB,CAAA,EAAE,iDAEzB,GAAI,MAAM,OAAO,OAAO,IAAI,EAAG,CAC7B,IAAI,WAAa,GAOjB,IANI,MAAM,OAAO,YAAY,IAAI,KAE/B,KAAO,KAAK,KAAK,KAAM,KAAK,SAAS,MAAM,CAAC,EAC5C,WAAa,MAAM,OAAO,OAAO,IAAI,GAGnC,WACF,GAAI,QAAQ,OAAS,MAAQ,QAAQ,MACnC,MAAM,KAAK,IAAI,MAEf,OAAM,IAAI,MAAM,4BAA4B,EAIlD,MAAM,OAAO,KAAK,QAAQ,IAAI,CAAC,EAC/B,MAAM,OAAO,OAAO,OAAQ,IAAI,CAClC,CAAC,EAvBqB,gBAAtB,QAAA,GAAA,GA8BA,SAAsB,KAAK,UAAiB,iDAC1C,GAAI,OAAO,YAGL,UAAU,KAAK,SAAS,EAC1B,MAAM,IAAI,MACR,iEAAiE,EAIvE,GAAI,CAEF,MAAM,OAAO,GAAG,UAAW,CACzB,MAAO,GACP,WAAY,EACZ,UAAW,GACX,WAAY,IACb,QACM,IAAK,CACZ,MAAM,IAAI,MAAM,iCAAiC,GAAG,EAAE,EAE1D,CAAC,EArBqB,oBAAtB,QAAA,KAAA,KA8BA,SAAsB,OAAO,OAAc,iDACzC,SAAA,GAAG,OAAQ,kCAAkC,EAC7C,MAAM,OAAO,MAAM,OAAQ,CAAC,UAAW,EAAI,CAAC,CAC9C,CAAC,EAHqB,wBAAtB,QAAA,OAAA,OAaA,SAAsB,MAAM,KAAc,MAAe,iDACvD,GAAI,CAAC,KACH,MAAM,IAAI,MAAM,8BAA8B,EAIhD,GAAI,MAAO,CACT,IAAM,OAAiB,MAAM,MAAM,KAAM,EAAK,EAE9C,GAAI,CAAC,OACH,MAAI,OAAO,WACH,IAAI,MACR,qCAAqC,IAAI,wMAAwM,EAG7O,IAAI,MACR,qCAAqC,IAAI,gMAAgM,EAK/O,OAAO,OAGT,IAAM,QAAoB,MAAM,WAAW,IAAI,EAE/C,OAAI,SAAW,QAAQ,OAAS,EACvB,QAAQ,CAAC,EAGX,EACT,CAAC,EA/BqB,sBAAtB,QAAA,MAAA,MAsCA,SAAsB,WAAW,KAAY,iDAC3C,GAAI,CAAC,KACH,MAAM,IAAI,MAAM,8BAA8B,EAIhD,IAAM,WAAuB,CAAA,EAC7B,GAAI,OAAO,YAAc,QAAQ,IAAI,QACnC,QAAW,aAAa,QAAQ,IAAI,QAAW,MAAM,KAAK,SAAS,EAC7D,WACF,WAAW,KAAK,SAAS,EAM/B,GAAI,OAAO,SAAS,IAAI,EAAG,CACzB,IAAM,SAAmB,MAAM,OAAO,qBAAqB,KAAM,UAAU,EAE3E,OAAI,SACK,CAAC,QAAQ,EAGX,CAAA,EAIT,GAAI,KAAK,SAAS,KAAK,GAAG,EACxB,MAAO,CAAA,EAST,IAAM,YAAwB,CAAA,EAE9B,GAAI,QAAQ,IAAI,KACd,QAAW,KAAK,QAAQ,IAAI,KAAK,MAAM,KAAK,SAAS,EAC/C,GACF,YAAY,KAAK,CAAC,EAMxB,IAAM,QAAoB,CAAA,EAE1B,QAAW,aAAa,YAAa,CACnC,IAAM,SAAW,MAAM,OAAO,qBAC5B,KAAK,KAAK,UAAW,IAAI,EACzB,UAAU,EAER,UACF,QAAQ,KAAK,QAAQ,EAIzB,OAAO,OACT,CAAC,EA7DqB,gCAAtB,QAAA,WAAA,WA+DA,SAAS,gBAAgB,QAAoB,CAC3C,IAAM,MAAQ,QAAQ,OAAS,KAAO,GAAO,QAAQ,MAC/C,UAAY,EAAQ,QAAQ,UAC5B,oBACJ,QAAQ,qBAAuB,KAC3B,GACA,EAAQ,QAAQ,oBACtB,MAAO,CAAC,MAAO,UAAW,mBAAmB,CAC/C,CARS,0CAUT,SAAe,eACb,UACA,QACA,aACA,MAAc,iDAGd,GAAI,cAAgB,IAAK,OACzB,eAEA,MAAM,OAAO,OAAO,EAEpB,IAAM,MAAkB,MAAM,OAAO,QAAQ,SAAS,EAEtD,QAAW,YAAY,MAAO,CAC5B,IAAM,QAAU,GAAG,SAAS,IAAI,QAAQ,GAClC,SAAW,GAAG,OAAO,IAAI,QAAQ,IACnB,MAAM,OAAO,MAAM,OAAO,GAE9B,YAAW,EAEzB,MAAM,eAAe,QAAS,SAAU,aAAc,KAAK,EAE3D,MAAM,SAAS,QAAS,SAAU,KAAK,EAK3C,MAAM,OAAO,MAAM,SAAU,MAAM,OAAO,KAAK,SAAS,GAAG,IAAI,CACjE,CAAC,EA7Bc,wCAgCf,SAAe,SACb,QACA,SACA,MAAc,iDAEd,IAAK,MAAM,OAAO,MAAM,OAAO,GAAG,eAAc,EAAI,CAElD,GAAI,CACF,MAAM,OAAO,MAAM,QAAQ,EAC3B,MAAM,OAAO,OAAO,QAAQ,QACrB,EAAG,CAEN,EAAE,OAAS,UACb,MAAM,OAAO,MAAM,SAAU,MAAM,EACnC,MAAM,OAAO,OAAO,QAAQ,GAMhC,IAAM,YAAsB,MAAM,OAAO,SAAS,OAAO,EACzD,MAAM,OAAO,QACX,YACA,SACA,OAAO,WAAa,WAAa,IAAI,OAE9B,EAAE,MAAM,OAAO,OAAO,QAAQ,IAAM,SAC7C,MAAM,OAAO,SAAS,QAAS,QAAQ,EAE3C,CAAC,EA7Bc,6kDCzSf,IAAA,GAAA,aAAA,UAAA,IAAA,CAAA,EACA,OAAA,aAAA,UAAA,QAAA,CAAA,EACA,MAAA,aAAA,UAAA,eAAA,CAAA,EACA,KAAA,aAAA,UAAA,MAAA,CAAA,EAGA,GAAA,aAAA,YAAA,EACA,OAAA,aAAA,iBAAA,EACA,SAAA,UAAA,QAAA,EAIM,WAAa,QAAQ,WAAa,QAK3B,WAAb,cAAgC,OAAO,YAAY,OAAA,2BACjD,YAAY,SAAkB,KAAiB,QAAwB,CAGrE,GAFA,MAAK,EAED,CAAC,SACH,MAAM,IAAI,MAAM,+CAA+C,EAGjE,KAAK,SAAW,SAChB,KAAK,KAAO,MAAQ,CAAA,EACpB,KAAK,QAAU,SAAW,CAAA,CAC5B,CAMQ,OAAO,QAAe,CACxB,KAAK,QAAQ,WAAa,KAAK,QAAQ,UAAU,OACnD,KAAK,QAAQ,UAAU,MAAM,OAAO,CAExC,CAEQ,kBACN,QACA,SAAkB,CAElB,IAAM,SAAW,KAAK,kBAAiB,EACjC,KAAO,KAAK,cAAc,OAAO,EACnC,IAAM,SAAW,GAAK,YAC1B,GAAI,WAEF,GAAI,KAAK,WAAU,EAAI,CACrB,KAAO,SACP,QAAW,KAAK,KACd,KAAO,IAAI,CAAC,WAIP,QAAQ,yBAA0B,CACzC,KAAO,IAAI,QAAQ,IACnB,QAAW,KAAK,KACd,KAAO,IAAI,CAAC,OAIX,CACH,KAAO,KAAK,oBAAoB,QAAQ,EACxC,QAAW,KAAK,KACd,KAAO,IAAI,KAAK,oBAAoB,CAAC,CAAC,OAGrC,CAIL,KAAO,SACP,QAAW,KAAK,KACd,KAAO,IAAI,CAAC,GAIhB,OAAO,GACT,CAEQ,mBACN,KACA,UACA,OAA8B,CAE9B,GAAI,CACF,IAAI,EAAI,UAAY,KAAK,SAAQ,EAC7B,EAAI,EAAE,QAAQ,GAAG,GAAG,EAExB,KAAO,EAAI,IAAI,CACb,IAAM,KAAO,EAAE,UAAU,EAAG,CAAC,EAC7B,OAAO,IAAI,EAGX,EAAI,EAAE,UAAU,EAAI,GAAG,IAAI,MAAM,EACjC,EAAI,EAAE,QAAQ,GAAG,GAAG,EAGtB,OAAO,QACA,IAAK,CAEZ,YAAK,OAAO,4CAA4C,GAAG,EAAE,EAEtD,GAEX,CAEQ,mBAAiB,CACvB,OAAI,YACE,KAAK,WAAU,EACV,QAAQ,IAAI,SAAc,UAI9B,KAAK,QACd,CAEQ,cAAc,QAAuB,CAC3C,GAAI,YACE,KAAK,WAAU,EAAI,CACrB,IAAI,QAAU,aAAa,KAAK,oBAAoB,KAAK,QAAQ,CAAC,GAClE,QAAW,KAAK,KAAK,KACnB,SAAW,IACX,SAAW,QAAQ,yBACf,EACA,KAAK,oBAAoB,CAAC,EAGhC,gBAAW,IACJ,CAAC,OAAO,EAInB,OAAO,KAAK,IACd,CAEQ,UAAU,IAAa,IAAW,CACxC,OAAO,IAAI,SAAS,GAAG,CACzB,CAEQ,YAAU,CAChB,IAAM,cAAwB,KAAK,SAAS,YAAW,EACvD,OACE,KAAK,UAAU,cAAe,MAAM,GACpC,KAAK,UAAU,cAAe,MAAM,CAExC,CAEQ,oBAAoB,IAAW,CAErC,GAAI,CAAC,KAAK,WAAU,EAClB,OAAO,KAAK,eAAe,GAAG,EAWhC,GAAI,CAAC,IACH,MAAO,KAIT,IAAM,gBAAkB,CACtB,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KAEE,YAAc,GAClB,QAAW,QAAQ,IACjB,GAAI,gBAAgB,KAAK,GAAK,IAAM,IAAI,EAAG,CACzC,YAAc,GACd,MAKJ,GAAI,CAAC,YACH,OAAO,IAkDT,IAAI,QAAU,IACV,SAAW,GACf,QAAS,EAAI,IAAI,OAAQ,EAAI,EAAG,IAE9B,SAAW,IAAI,EAAI,CAAC,EAChB,UAAY,IAAI,EAAI,CAAC,IAAM,KAC7B,SAAW,KACF,IAAI,EAAI,CAAC,IAAM,KACxB,SAAW,GACX,SAAW,KAEX,SAAW,GAIf,gBAAW,IACJ,QACJ,MAAM,EAAE,EACR,QAAO,EACP,KAAK,EAAE,CACZ,CAEQ,eAAe,IAAW,CA6BhC,GAAI,CAAC,IAEH,MAAO,KAGT,GAAI,CAAC,IAAI,SAAS,GAAG,GAAK,CAAC,IAAI,SAAS,GAAI,GAAK,CAAC,IAAI,SAAS,GAAG,EAEhE,OAAO,IAGT,GAAI,CAAC,IAAI,SAAS,GAAG,GAAK,CAAC,IAAI,SAAS,IAAI,EAG1C,MAAO,IAAI,GAAG,IAmBhB,IAAI,QAAU,IACV,SAAW,GACf,QAAS,EAAI,IAAI,OAAQ,EAAI,EAAG,IAE9B,SAAW,IAAI,EAAI,CAAC,EAChB,UAAY,IAAI,EAAI,CAAC,IAAM,KAC7B,SAAW,KACF,IAAI,EAAI,CAAC,IAAM,KACxB,SAAW,GACX,SAAW,MAEX,SAAW,GAIf,gBAAW,IACJ,QACJ,MAAM,EAAE,EACR,QAAO,EACP,KAAK,EAAE,CACZ,CAEQ,kBAAkB,QAAwB,CAChD,QAAU,SAA2B,CAAA,EACrC,IAAM,OAAyC,CAC7C,IAAK,QAAQ,KAAO,QAAQ,IAAG,EAC/B,IAAK,QAAQ,KAAO,QAAQ,IAC5B,OAAQ,QAAQ,QAAU,GAC1B,yBAA0B,QAAQ,0BAA4B,GAC9D,aAAc,QAAQ,cAAgB,GACtC,iBAAkB,QAAQ,kBAAoB,GAC9C,MAAO,QAAQ,OAAS,KAE1B,cAAO,UAAY,QAAQ,WAA8B,QAAQ,OACjE,OAAO,UAAY,QAAQ,WAA8B,QAAQ,OAC1D,MACT,CAEQ,iBACN,QACA,SAAgB,CAEhB,QAAU,SAA2B,CAAA,EACrC,IAAM,OAA6B,CAAA,EACnC,cAAO,IAAM,QAAQ,IACrB,OAAO,IAAM,QAAQ,IACrB,OAAO,yBACL,QAAQ,0BAA4B,KAAK,WAAU,EACjD,QAAQ,2BACV,OAAO,MAAQ,IAAI,QAAQ,KAEtB,MACT,CAWM,MAAI,iDAER,MACE,CAAC,OAAO,SAAS,KAAK,QAAQ,IAC7B,KAAK,SAAS,SAAS,GAAG,GACxB,YAAc,KAAK,SAAS,SAAS,IAAI,KAG5C,KAAK,SAAW,KAAK,QACnB,QAAQ,IAAG,EACX,KAAK,QAAQ,KAAO,QAAQ,IAAG,EAC/B,KAAK,QAAQ,GAMjB,KAAK,SAAW,MAAM,GAAG,MAAM,KAAK,SAAU,EAAI,EAE3C,IAAI,QAAgB,CAAO,QAAS,SAAU,UAAA,KAAA,OAAA,OAAA,WAAA,CACnD,KAAK,OAAO,cAAc,KAAK,QAAQ,EAAE,EACzC,KAAK,OAAO,YAAY,EACxB,QAAW,OAAO,KAAK,KACrB,KAAK,OAAO,MAAM,GAAG,EAAE,EAGzB,IAAM,eAAiB,KAAK,kBAAkB,KAAK,OAAO,EACtD,CAAC,eAAe,QAAU,eAAe,WAC3C,eAAe,UAAU,MACvB,KAAK,kBAAkB,cAAc,EAAI,GAAG,GAAG,EAInD,IAAM,MAAQ,IAAI,UAAU,eAAgB,KAAK,QAAQ,EAKzD,GAJA,MAAM,GAAG,QAAU,SAAmB,CACpC,KAAK,OAAO,OAAO,CACrB,CAAC,EAEG,KAAK,QAAQ,KAAO,EAAE,MAAM,OAAO,OAAO,KAAK,QAAQ,GAAG,GAC5D,OAAO,OAAO,IAAI,MAAM,YAAY,KAAK,QAAQ,GAAG,kBAAkB,CAAC,EAGzE,IAAM,SAAW,KAAK,kBAAiB,EACjC,GAAK,MAAM,MACf,SACA,KAAK,cAAc,cAAc,EACjC,KAAK,iBAAiB,KAAK,QAAS,QAAQ,CAAC,EAG3C,UAAY,GACZ,GAAG,QACL,GAAG,OAAO,GAAG,OAAS,MAAgB,CAChC,KAAK,QAAQ,WAAa,KAAK,QAAQ,UAAU,QACnD,KAAK,QAAQ,UAAU,OAAO,IAAI,EAGhC,CAAC,eAAe,QAAU,eAAe,WAC3C,eAAe,UAAU,MAAM,IAAI,EAGrC,UAAY,KAAK,mBACf,KACA,UACC,MAAgB,CACX,KAAK,QAAQ,WAAa,KAAK,QAAQ,UAAU,SACnD,KAAK,QAAQ,UAAU,QAAQ,IAAI,CAEvC,CAAC,CAEL,CAAC,EAGH,IAAI,UAAY,GAuEhB,GAtEI,GAAG,QACL,GAAG,OAAO,GAAG,OAAS,MAAgB,CACpC,MAAM,cAAgB,GAClB,KAAK,QAAQ,WAAa,KAAK,QAAQ,UAAU,QACnD,KAAK,QAAQ,UAAU,OAAO,IAAI,EAIlC,CAAC,eAAe,QAChB,eAAe,WACf,eAAe,YAEL,eAAe,aACrB,eAAe,UACf,eAAe,WACjB,MAAM,IAAI,EAGd,UAAY,KAAK,mBACf,KACA,UACC,MAAgB,CACX,KAAK,QAAQ,WAAa,KAAK,QAAQ,UAAU,SACnD,KAAK,QAAQ,UAAU,QAAQ,IAAI,CAEvC,CAAC,CAEL,CAAC,EAGH,GAAG,GAAG,QAAU,KAAc,CAC5B,MAAM,aAAe,IAAI,QACzB,MAAM,cAAgB,GACtB,MAAM,cAAgB,GACtB,MAAM,cAAa,CACrB,CAAC,EAED,GAAG,GAAG,OAAS,MAAgB,CAC7B,MAAM,gBAAkB,KACxB,MAAM,cAAgB,GACtB,KAAK,OAAO,aAAa,IAAI,wBAAwB,KAAK,QAAQ,GAAG,EACrE,MAAM,cAAa,CACrB,CAAC,EAED,GAAG,GAAG,QAAU,MAAgB,CAC9B,MAAM,gBAAkB,KACxB,MAAM,cAAgB,GACtB,MAAM,cAAgB,GACtB,KAAK,OAAO,uCAAuC,KAAK,QAAQ,GAAG,EACnE,MAAM,cAAa,CACrB,CAAC,EAED,MAAM,GAAG,OAAQ,CAACC,OAAc,WAAoB,CAC9C,UAAU,OAAS,GACrB,KAAK,KAAK,UAAW,SAAS,EAG5B,UAAU,OAAS,GACrB,KAAK,KAAK,UAAW,SAAS,EAGhC,GAAG,mBAAkB,EAEjBA,OACF,OAAOA,MAAK,EAEZ,QAAQ,QAAQ,CAEpB,CAAC,EAEG,KAAK,QAAQ,MAAO,CACtB,GAAI,CAAC,GAAG,MACN,MAAM,IAAI,MAAM,6BAA6B,EAG/C,GAAG,MAAM,IAAI,KAAK,QAAQ,KAAK,EAEnC,CAAC,CAAA,CACH,CAAC,IArhBH,QAAA,WAAA,WA8hBA,SAAgB,iBAAiB,UAAiB,CAChD,IAAM,KAAiB,CAAA,EAEnB,SAAW,GACX,QAAU,GACV,IAAM,GAEV,SAAS,OAAO,EAAS,CAEnB,SAAW,IAAM,MACnB,KAAO,MAGT,KAAO,EACP,QAAU,EACZ,CARS,wBAUT,QAAS,EAAI,EAAG,EAAI,UAAU,OAAQ,IAAK,CACzC,IAAM,EAAI,UAAU,OAAO,CAAC,EAE5B,GAAI,IAAM,IAAK,CACR,QAGH,OAAO,CAAC,EAFR,SAAW,CAAC,SAId,SAGF,GAAI,IAAM,MAAQ,QAAS,CACzB,OAAO,CAAC,EACR,SAGF,GAAI,IAAM,MAAQ,SAAU,CAC1B,QAAU,GACV,SAGF,GAAI,IAAM,KAAO,CAAC,SAAU,CACtB,IAAI,OAAS,IACf,KAAK,KAAK,GAAG,EACb,IAAM,IAER,SAGF,OAAO,CAAC,EAGV,OAAI,IAAI,OAAS,GACf,KAAK,KAAK,IAAI,KAAI,CAAE,EAGf,IACT,CAvDgB,4CAAhB,QAAA,iBAAA,iBAyDA,IAAM,UAAN,MAAM,mBAAkB,OAAO,YAAY,OAAA,0BACzC,YAAY,QAAyB,SAAgB,CAGnD,GAFA,MAAK,EAaP,KAAA,cAAgB,GAChB,KAAA,aAAe,GACf,KAAA,gBAAkB,EAClB,KAAA,cAAgB,GAChB,KAAA,cAAgB,GACR,KAAA,MAAQ,IACR,KAAA,KAAO,GAEP,KAAA,QAA+B,KAnBjC,CAAC,SACH,MAAM,IAAI,MAAM,4BAA4B,EAG9C,KAAK,QAAU,QACf,KAAK,SAAW,SACZ,QAAQ,QACV,KAAK,MAAQ,QAAQ,MAEzB,CAaA,eAAa,CACP,KAAK,OAIL,KAAK,cACP,KAAK,WAAU,EACN,KAAK,gBACd,KAAK,QAAU,SAAA,WAAW,WAAU,cAAe,KAAK,MAAO,IAAI,GAEvE,CAEQ,OAAO,QAAe,CAC5B,KAAK,KAAK,QAAS,OAAO,CAC5B,CAEQ,YAAU,CAEhB,IAAIA,OACA,KAAK,gBACH,KAAK,aACPA,OAAQ,IAAI,MACV,8DAA8D,KAAK,QAAQ,4DAA4D,KAAK,YAAY,EAAE,EAEnJ,KAAK,kBAAoB,GAAK,CAAC,KAAK,QAAQ,iBACrDA,OAAQ,IAAI,MACV,gBAAgB,KAAK,QAAQ,2BAA2B,KAAK,eAAe,EAAE,EAEvE,KAAK,eAAiB,KAAK,QAAQ,eAC5CA,OAAQ,IAAI,MACV,gBAAgB,KAAK,QAAQ,sEAAsE,IAMrG,KAAK,UACP,aAAa,KAAK,OAAO,EACzB,KAAK,QAAU,MAGjB,KAAK,KAAO,GACZ,KAAK,KAAK,OAAQA,OAAO,KAAK,eAAe,CAC/C,CAEQ,OAAO,cAAc,MAAgB,CAC3C,GAAI,OAAM,KAIV,IAAI,CAAC,MAAM,eAAiB,MAAM,cAAe,CAC/C,IAAM,QAAU,0CAA0C,MAAM,MAC9D,GAAI,4CACJ,MAAM,QACR,2FACA,MAAM,OAAO,OAAO,EAGtB,MAAM,WAAU,EAClB,+hDC7rBF,IAAA,iBAAA,UAAA,gBAAA,EAEA,GAAA,aAAA,oBAAA,EAcA,SAAsBC,MACpB,YACA,KACA,QAAqB,iDAErB,IAAM,YAAc,GAAG,iBAAiB,WAAW,EACnD,GAAI,YAAY,SAAW,EACzB,MAAM,IAAI,MAAM,kDAAkD,EAGpE,IAAM,SAAW,YAAY,CAAC,EAC9B,YAAO,YAAY,MAAM,CAAC,EAAE,OAAO,MAAQ,CAAA,CAAE,EACf,IAAI,GAAG,WAAW,SAAU,KAAM,OAAO,EACzD,KAAI,CACpB,CAAC,EAdqB,OAAAA,MAAA,QAAtB,QAAA,KAAAA,MA2BA,SAAsB,cACpB,YACA,KACA,QAAqB,2DAErB,IAAI,OAAS,GACT,OAAS,GAGP,cAAgB,IAAI,iBAAA,cAAc,MAAM,EACxC,cAAgB,IAAI,iBAAA,cAAc,MAAM,EAExC,wBAAsB,GAAG,SAAS,aAAS,MAAA,KAAA,OAAA,OAAA,GAAE,OAC7C,wBAAsB,GAAG,SAAS,aAAS,MAAA,KAAA,OAAA,OAAA,GAAE,OAE7C,eAAiB,OAAC,MAAsB,CAC5C,QAAU,cAAc,MAAM,IAAI,EAC9B,wBACF,uBAAuB,IAAI,CAE/B,EALuB,kBAOjB,eAAiB,OAAC,MAAsB,CAC5C,QAAU,cAAc,MAAM,IAAI,EAC9B,wBACF,uBAAuB,IAAI,CAE/B,EALuB,kBAOjB,UAAS,OAAA,OAAA,OAAA,OAAA,CAAA,EACV,SAAS,SAAS,EAAA,CACrB,OAAQ,eACR,OAAQ,cAAc,CAAA,EAGlB,SAAW,MAAMA,MAAK,YAAa,KAAI,OAAA,OAAA,OAAA,OAAA,CAAA,EAAM,OAAO,EAAA,CAAE,SAAS,CAAA,CAAA,EAGrE,eAAU,cAAc,IAAG,EAC3B,QAAU,cAAc,IAAG,EAEpB,CACL,SACA,OACA,UA5CkB,sCAAtB,QAAA,cAAA,62DC3CA,IAAA,KAAA,gBAAA,UAAA,IAAA,CAAA,EACAC,MAAA,aAAA,cAAA,EAEM,eAAiB,WAAqD,UAAA,OAAA,OAAA,OAAA,WAAA,CAC1E,GAAM,CAAC,OAAQ,OAAO,EAAI,MAAMA,MAAK,cACnC,mFACA,OACA,CACE,OAAQ,GACT,EAGG,CAAC,OAAQ,IAAI,EAAI,MAAMA,MAAK,cAChC,mFACA,OACA,CACE,OAAQ,GACT,EAGH,MAAO,CACL,KAAM,KAAK,KAAI,EACf,QAAS,QAAQ,KAAI,EAEzB,CAAC,EArBsB,kBAuBjB,aAAe,WAGhB,UAAA,OAAA,OAAA,OAAA,WAAA,iBACH,GAAM,CAAC,MAAM,EAAI,MAAMA,MAAK,cAAc,UAAW,OAAW,CAC9D,OAAQ,GACT,EAEK,SAAU,IAAA,GAAA,OAAO,MAAM,wBAAwB,KAAC,MAAA,KAAA,OAAA,OAAA,GAAG,CAAC,KAAC,MAAA,KAAA,OAAA,GAAI,GAG/D,MAAO,CACL,MAHW,IAAA,GAAA,OAAO,MAAM,qBAAqB,KAAC,MAAA,KAAA,OAAA,OAAA,GAAG,CAAC,KAAC,MAAA,KAAA,OAAA,GAAI,GAIvD,QAEJ,CAAC,EAfoB,gBAiBf,aAAe,WAGhB,UAAA,OAAA,OAAA,OAAA,WAAA,CACH,GAAM,CAAC,MAAM,EAAI,MAAMA,MAAK,cAAc,cAAe,CAAC,KAAM,KAAM,IAAI,EAAG,CAC3E,OAAQ,GACT,EAEK,CAAC,KAAM,OAAO,EAAI,OAAO,KAAI,EAAG,MAAM;CAAI,EAEhD,MAAO,CACL,KACA,QAEJ,CAAC,EAdoB,gBAgBR,QAAA,SAAW,KAAA,QAAG,SAAQ,EACtB,QAAA,KAAO,KAAA,QAAG,KAAI,EACd,QAAA,UAAY,QAAA,WAAa,QACzB,QAAA,QAAU,QAAA,WAAa,SACvB,QAAA,QAAU,QAAA,WAAa,QAEpC,SAAsB,YAAU,iDAS9B,OAAA,OAAA,OAAA,OAAA,OAAA,CAAA,EACM,MAAO,QAAA,UACP,eAAc,EACd,QAAA,QACA,aAAY,EACZ,aAAY,CAAI,EAAA,CACpB,SAAA,QAAA,SACA,KAAA,QAAA,KACA,UAAA,QAAA,UACA,QAAA,QAAA,QACA,QAAA,QAAA,OAAO,CAAA,CAEX,CAAC,EArBqB,gCAAtB,QAAA,WAAA,ipECjEA,IAAA,UAAA,kBACA,eAAA,uBACA,QAAA,gBAEA,GAAA,aAAA,UAAA,IAAA,CAAA,EACA,KAAA,aAAA,UAAA,MAAA,CAAA,EAEA,aAAA,qBAgBY,UAAZ,SAAYC,UAAQ,CAIlBA,UAAAA,UAAA,QAAA,CAAA,EAAA,UAKAA,UAAAA,UAAA,QAAA,CAAA,EAAA,SACF,GAVY,WAAQ,QAAA,SAAR,SAAQ,CAAA,EAAA,EA2DpB,SAAgB,eAAe,KAAc,IAAQ,CACnD,IAAM,gBAAe,QAAA,gBAAe,GAAG,EAIvC,GAHA,QAAQ,IAAI,IAAI,EAAI,aAEH,QAAQ,IAAI,YAAiB,GAE5C,SAAO,eAAA,kBAAiB,SAAO,eAAA,wBAAuB,KAAM,GAAG,CAAC,KAGlE,UAAA,cAAa,UAAW,CAAC,IAAI,EAAG,YAAY,CAC9C,CAVgB,wCAAhB,QAAA,eAAA,eAgBA,SAAgB,UAAU,OAAc,IACtC,UAAA,cAAa,WAAY,CAAA,EAAI,MAAM,CACrC,CAFgB,8BAAhB,QAAA,UAAA,UAQA,SAAgB,QAAQ,UAAiB,CACtB,QAAQ,IAAI,aAAkB,MAE7C,eAAA,kBAAiB,OAAQ,SAAS,KAElC,UAAA,cAAa,WAAY,CAAA,EAAI,SAAS,EAExC,QAAQ,IAAI,KAAU,GAAG,SAAS,GAAG,KAAK,SAAS,GAAG,QAAQ,IAAI,IAAO,EAC3E,CARgB,0BAAhB,QAAA,QAAA,QAmBA,SAAgBC,UAAS,KAAc,QAAsB,CAC3D,IAAM,IACJ,QAAQ,IAAI,SAAS,KAAK,QAAQ,KAAM,GAAG,EAAE,YAAW,CAAE,EAAE,GAAK,GACnE,GAAI,SAAW,QAAQ,UAAY,CAAC,IAClC,MAAM,IAAI,MAAM,oCAAoC,IAAI,EAAE,EAG5D,OAAI,SAAW,QAAQ,iBAAmB,GACjC,IAGF,IAAI,KAAI,CACjB,CAZgB,OAAAA,UAAA,YAAhB,QAAA,SAAAA,UAsBA,SAAgB,kBACd,KACA,QAAsB,CAEtB,IAAM,OAAmBA,UAAS,KAAM,OAAO,EAC5C,MAAM;CAAI,EACV,OAAO,GAAK,IAAM,EAAE,EAEvB,OAAI,SAAW,QAAQ,iBAAmB,GACjC,OAGF,OAAO,IAAI,OAAS,MAAM,KAAI,CAAE,CACzC,CAbgB,8CAAhB,QAAA,kBAAA,kBAyBA,SAAgB,gBAAgB,KAAc,QAAsB,CAClE,IAAM,UAAY,CAAC,OAAQ,OAAQ,MAAM,EACnC,WAAa,CAAC,QAAS,QAAS,OAAO,EACvC,IAAMA,UAAS,KAAM,OAAO,EAClC,GAAI,UAAU,SAAS,GAAG,EAAG,MAAO,GACpC,GAAI,WAAW,SAAS,GAAG,EAAG,MAAO,GACrC,MAAM,IAAI,UACR,6DAA6D,IAAI;2EACa,CAElF,CAVgB,0CAAhB,QAAA,gBAAA,gBAmBA,SAAgB,UAAU,KAAc,MAAU,CAEhD,GADiB,QAAQ,IAAI,eAAoB,GAE/C,SAAO,eAAA,kBAAiB,YAAU,eAAA,wBAAuB,KAAM,KAAK,CAAC,EAGvE,QAAQ,OAAO,MAAM,GAAG,GAAG,KAC3B,UAAA,cAAa,aAAc,CAAC,IAAI,KAAG,QAAA,gBAAe,KAAK,CAAC,CAC1D,CARgB,8BAAhB,QAAA,UAAA,UAeA,SAAgB,eAAe,QAAgB,IAC7C,UAAA,OAAM,OAAQ,QAAU,KAAO,KAAK,CACtC,CAFgB,wCAAhB,QAAA,eAAA,eAaA,SAAgBC,WAAU,QAAuB,CAC/C,QAAQ,SAAW,SAAS,QAE5BC,OAAM,OAAO,CACf,CAJgB,OAAAD,WAAA,aAAhB,QAAA,UAAAA,WAaA,SAAgBE,UAAO,CACrB,OAAO,QAAQ,IAAI,eAAoB,GACzC,CAFgB,OAAAA,SAAA,WAAhB,QAAA,QAAAA,SAQA,SAAgBC,OAAM,QAAe,IACnC,UAAA,cAAa,QAAS,CAAA,EAAI,OAAO,CACnC,CAFgB,OAAAA,OAAA,SAAhB,QAAA,MAAAA,OASA,SAAgBF,OACd,QACA,WAAmC,CAAA,EAAE,IAErC,UAAA,cACE,WACA,QAAA,qBAAoB,UAAU,EAC9B,mBAAmB,MAAQ,QAAQ,SAAQ,EAAK,OAAO,CAE3D,CATgB,OAAAA,OAAA,SAAhB,QAAA,MAAAA,OAgBA,SAAgBG,SACd,QACA,WAAmC,CAAA,EAAE,IAErC,UAAA,cACE,aACA,QAAA,qBAAoB,UAAU,EAC9B,mBAAmB,MAAQ,QAAQ,SAAQ,EAAK,OAAO,CAE3D,CATgB,OAAAA,SAAA,WAAhB,QAAA,QAAAA,SAgBA,SAAgB,OACd,QACA,WAAmC,CAAA,EAAE,IAErC,UAAA,cACE,YACA,QAAA,qBAAoB,UAAU,EAC9B,mBAAmB,MAAQ,QAAQ,SAAQ,EAAK,OAAO,CAE3D,CATgB,wBAAhB,QAAA,OAAA,OAeA,SAAgBC,MAAK,QAAe,CAClC,QAAQ,OAAO,MAAM,QAAU,GAAG,GAAG,CACvC,CAFgB,OAAAA,MAAA,QAAhB,QAAA,KAAAA,MAWA,SAAgB,WAAW,KAAY,IACrC,UAAA,OAAM,QAAS,IAAI,CACrB,CAFgB,gCAAhB,QAAA,WAAA,WAOA,SAAgB,UAAQ,IACtB,UAAA,OAAM,UAAU,CAClB,CAFgB,4BAAhB,QAAA,SAAA,SAYA,SAAsB,MAAS,KAAc,GAAoB,iDAC/D,WAAW,IAAI,EAEf,IAAI,OAEJ,GAAI,CACF,OAAS,MAAM,GAAE,UAEjB,SAAQ,EAGV,OAAO,MACT,CAAC,EAZqB,sBAAtB,QAAA,MAAA,MAyBA,SAAgB,UAAU,KAAc,MAAU,CAEhD,GADiB,QAAQ,IAAI,cAAmB,GAE9C,SAAO,eAAA,kBAAiB,WAAS,eAAA,wBAAuB,KAAM,KAAK,CAAC,KAGtE,UAAA,cAAa,aAAc,CAAC,IAAI,KAAG,QAAA,gBAAe,KAAK,CAAC,CAC1D,CAPgB,8BAAhB,QAAA,UAAA,UAeA,SAAgB,SAAS,KAAY,CACnC,OAAO,QAAQ,IAAI,SAAS,IAAI,EAAE,GAAK,EACzC,CAFgB,4BAAhB,QAAA,SAAA,SAIA,SAAsB,WAAW,IAAY,iDAC3C,OAAO,MAAM,aAAA,WAAW,WAAW,GAAG,CACxC,CAAC,EAFqB,gCAAtB,QAAA,WAAA,WAOA,IAAA,UAAA,kBAAQ,OAAA,eAAA,QAAA,UAAA,CAAA,WAAA,GAAA,IAAA,iBAAA,CAAA,OAAA,UAAA,OAAO,EAAP,MAAO,CAAA,EAKf,IAAA,UAAA,kBAAQ,OAAA,eAAA,QAAA,kBAAA,CAAA,WAAA,GAAA,IAAA,iBAAA,CAAA,OAAA,UAAA,eAAe,EAAf,MAAe,CAAA,EAKvB,IAAA,aAAA,qBAAQ,OAAA,eAAA,QAAA,cAAA,CAAA,WAAA,GAAA,IAAA,iBAAA,CAAA,OAAA,aAAA,WAAW,EAAX,MAAW,CAAA,EAAE,OAAA,eAAA,QAAA,cAAA,CAAA,WAAA,GAAA,IAAA,iBAAA,CAAA,OAAA,aAAA,WAAW,EAAX,MAAW,CAAA,EAAE,OAAA,eAAA,QAAA,iBAAA,CAAA,WAAA,GAAA,IAAA,iBAAA,CAAA,OAAA,aAAA,cAAc,EAAd,MAAc,CAAA,EAKhD,QAAA,SAAA,aAAA,kBAAA,KCxYA,IAAAC,cAAwB,0BCAxB,IAAAC,cAA8C,0BCA9C,IAAAC,aAA4B,0BCm+7BrB,IAAM,oBAAN,cACG,MAEV,CAGE,YAAoB,MAAsB,SAA4C,CACpF,MAAM,KAAK,EADO,iBAAsB,sBAE1C,CA3+7BF,MAs+7BA,oCACE,UAMA,UAAiE,CAC/D,OAAO,KAAK,KACd,CACF,EACa,8BAAgC,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAM9D,CAAC,aAAe,oBAAoB,CAAC,EAC/B,+BAAiC,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,MAK/D,CAAC,aAAe,qBAAqB,CAAC,EAChC,cAAgB,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAuBhD,EACQ,mBAAqB,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAUrD,EACQ,+BAAiC,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcpE,EACW,+BAAiC,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMjE,EACQ,yCAA2C,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAS3E,EACQ,qCAAuC,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgB1E,EACW,0BAA4B,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAW/D,EACW,uBAAyB,IAAI,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgB5D,EC9m8BF,IAAM,aAAe,6BAOR,yBAA2B,QAAC,CACvC,KACA,UACA,WACF,IAEsC,CACpC,IAAM,MAAgB,CACpB,uBAAuB,SAAS,mBAAmB,WAAW,GAC9D,IACF,EACG,OAAO,OAAO,EACd,KAAK,GAAG,EAEX,OAAO,IAAI,IAAI,MAAO,YAAY,EAAE,SAAS,CAC/C,EAfwC,4BAiB3B,yBAA2B,QAAC,CACvC,GACA,UACA,WACF,IAGS,IAAI,IACT,GAAG,SAAS,eAAe,WAAW,IAAI,EAAE,GAC5C,6BACF,EAAE,SAAS,EAV2B,4BCxBxC,IAAAC,aAAmC,0BCAnC,gBAAuB,0BCAhB,IAAM,gCAAkC,wBAClC,+BAAiC,uBACjC,kCAAoC,0BAE1C,IAAM,6BAA+B,qBAC/B,uBAAyB,eAE/B,IAAM,uBAAyB,cACzB,2BAA6B,mBDY1C,IAAM,UAAY,YACT,CACL,sBAAoB,sBAAS,+BAAgC,CAC3D,SAAU,EACZ,CAAC,EACD,kBAAgB,sBAAS,uBAAwB,CAAC,SAAU,EAAI,CAAC,EACjE,qBACE,sBAAS,6BAA8B,CAAC,SAAU,EAAK,CAAC,GAAK,OAC/D,mBAAiB,sBAAS,0BAA0B,GAAK,UAC3D,GATgB,aAcd,QAES,gBAAkB,WACtB,UAAY,QAAU,UAAU,GADV,mBEpC/B,IAAAC,aAAiC,0BC4B1B,IAAM,WAAN,cAAyB,KAAyB,CA5BzD,MA4ByD,2BAC9C,KACA,MACA,SACA,KACT,KAEA,YAAY,CAAC,KAAM,MAAO,SAAU,IAAI,EAAY,CAClD,MAAM,IAAI,EAEV,KAAK,KAAO,KAAK,YAAY,KAC7B,KAAK,KAAO,KACZ,KAAK,MAAQ,OAAS,CAAC,EACvB,KAAK,SAAW,SAChB,KAAK,KAAO,MAAQ,OACtB,CACF,EDnCO,IAAM,gBAAkB,QAC7B,SACA,WACU,CACV,IAAMC,OAAQ,IAAI,WAAW,CAC3B,KAAM,oCAAoC,QAAQ,YAClD,MAAO,SAAS,OAAO,IAAI,MAAQ,CACjC,KAAM,YAAY,GAAG,CACvB,EAAE,CACJ,CAAC,EACK,KAAO,SAAS,OAAO,CAAC,GAAG,KACjC,MAAI,OACFA,OAAM,KAAO,MAEXA,OAAM,OAAO,OAAS,GACxBA,OAAM,MAAM,IAAI,MAAQ,IAEtB,aAAAC,OAAU,mBAAmB,KAAK,IAAI,EAAE,CAC1C,CAAC,EAEGD,MACR,EArB+B,mBA0BzB,YAAc,QAAC,IAAiB,MAAQ,IAAc,CAC1D,IAAM,gBACJ,IAAI,aACA,IACA,cACE;AAAA,EAAK,KAAK,OAAO,KAAK,CAAC,KAAK,YAAY,aAAc,MAAQ,CAAC,CAAC,EACpE,EACC,KAAK;AAAA,CAAI,GAAK,GACnB,OACG,IAAI,KAAO,GAAG,IAAI,OAAO,WAAW,IAAI,IAAI,IAAM,IAAI,SACvD,eAEJ,EAZoB,eEEb,IAAM,aAAe,aAC1B,SACA,KAAoB,CAAC,IACA,CACrB,IAAM,OAAS,KAAK,QAAU,MACxB,CAAC,kBAAkB,EAAI,gBAAgB,EAEvC,UAAY,CAChB,QAAS,CACP,eAAgB,iCAChB,cAAe,UAAU,kBAAkB,EAC7C,CACF,EAEM,SAAY,MAAM,MAAM,SAAU,CACtC,OACA,GAAG,SACL,CAAC,EAAE,KAAKE,WAAYA,UAAS,KAAK,CAAC,EAEnC,MAAI,CAAC,SAAS,SAAW,SAAS,OAAO,OAAS,GAChD,gBAAgB,SAAU,QAAQ,EAG7B,SAAS,OAClB,EAxB4B,gBL/BrB,IAAM,2BAA6B,aAAO,CAC/C,GACA,UACA,WACF,IAKwB,CACtB,IAAM,IAAM,yBAAyB,CACnC,KAAM,eAAe,EAAE,cACvB,UACA,WACF,CAAC,EAED,GAAI,CAKF,GAJgB,MAAM,aAAa,IAAK,CACtC,OAAQ,QACV,CAAC,IAEe,GACd,4BAAK,kCAAkC,EAAE,EAAE,EACpC,GAET,MAAM,IAAI,MAAM,oCAAoC,CACtD,OAAS,aAAc,CACrB,OAAI,wBAAwB,YAAc,aAAa,OAAS,YAS9D,sBAAQ,0DAA0D,EAAE,EAAE,EAC/D,QAET,oBAAM,yCAAyC,EAAE,EAAE,EAC5C,GACT,CACF,EA1C0C,8BMN1C,IAAAC,aAA6B,0BCA7B,OAAQ,SAAW,qBAKnB,IAAAC,aAAwB,0BAFxB,OAAQ,cAAgB,YAIjB,IAAM,MAAQ,OAAC,SAA2B,CAC/C,MAAM,IAAI,MAAM,OAAO,CACzB,EAFqB,SASd,IAAM,UAAY,UAAU,IAAI,ECZvC,IAAAC,aAA6B,0BAJ7B,OAAQ,UAAU,WAAa,cAC/B,OAAQ,WAAY,iBAAmB,UACvC,OAAQ,QAAU,UCqEX,IAAM,YAAc,CACzB,kCACA,yBACA,YACA,cACA,sBACA,iBACA,SACA,kBACA,yBACA,SACA,mBACA,aACA,aACA,6BACA,oBACA,oBACA,aACA,qBACA,OACA,2BACA,SACA,eACA,4BACA,sBACA,gBACA,SACA,QACA,uBACA,SACA,aACA,cACA,OACA,YACA,YACA,eACA,UACA,aACA,OACA,UACA,eACA,iBACA,mBACA,SACA,eACA,sBACA,8BACA,6BACA,OACA,mBACA,UACA,aACA,sBACA,oBACA,iCACA,wBACA,iCACA,oBACA,cACA,OACA,SACA,OACA,WACA,QACA,oBACA,eACA,cACF,ED3HA,IAAM,WAAa,WAAe,CAChC,GAAI,QAAQ,IAAI,kBAAmB,CACjC,GAAI,WAAW,QAAQ,IAAI,iBAAiB,EAC1C,OAAO,KAAK,MACV,aAAa,QAAQ,IAAI,kBAAmB,CAAC,SAAU,MAAM,CAAC,CAChE,EACK,CACL,IAAM,KAAO,QAAQ,IAAI,kBACzB,QAAQ,OAAO,MAAM,qBAAqB,IAAI,kBAAkB,GAAG,EAAE,CACvE,CACF,CACF,EAXmB,cAaN,iBAAmB,WAAM,CACpC,IAAM,UAAY,QAAQ,IAAI,kBAE9B,OACE,YAAY,SAAS,SAAS,EAC9B,aAAa,SAAS,mBACxB,EAEA,IAAM,QAAU,WAAW,EAE3B,SAAI,sBAAQ,OACV,oBAAM,cAAc,SAAS,EAAE,KAC/B,oBAAM,YAAY,KAAK,UAAU,OAAO,CAAC,EAAE,GAGtC,CACL,UACA,OACF,CACF,EAnBgC,oBFehC,IAAM,iBAAmB,WAAe,CACtC,IAAM,MAAQ,iBAAiB,EAEzB,MAAQ,IAAY,CACxB,GAAM,CAAC,MAAOC,KAAI,EAAI,QAAQ,IAAI,kBAC9B,QAAQ,IAAI,kBAAkB,MAAM,GAAG,EACvC,MACE,mFACF,EAEE,QACJ,eAAgB,MAAM,QAClB,MAAM,QAAQ,YAAY,SAC1B,MAAM,0CAA0C,EAChD,MAAM,0CAA0C,EAEtD,MAAO,CAAC,MAAO,KAAAA,MAAM,OAAO,CAC9B,GAAG,EAMG,OAAS,QAAQ,IAAI,iBAAmB,QAAQ,IAAI,gBAEpD,IAAM,QAAQ,IAAI,WAElB,gBAAkB,QAAQ,IAAI,mBAE9B,KAAO,IAAsB,CACjC,IAAIC,KAAM,QAAQ,IAAI,gBACtB,MAAI,CAACA,OACC,QAAS,MAAM,QACjBA,KAAM,MAAM,QAAQ,IACX,MAAM,YAAc,iBAC7BA,KAAM,MAAM,QAAQ,aAAa,KAAK,KAEpC,CAACA,MAAY,MAAM,iBAAiB,EAEnCA,IACT,GAAG,EAEG,QAAU,CACd,MACA,KACA,OACA,IACA,gBACA,GACF,EAEA,MAAI,sBAAQ,EAAG,CACb,IAAM,aAAe,CACnB,GAAG,QACH,MAAO,sCACT,KAEA,oBAAM,YAAY,KAAK,UAAU,YAAY,CAAC,EAAE,CAClD,CAEA,OAAO,OACT,EA7DyB,oBAiErB,SACS,WAAa,WACjB,WAAa,SAAW,iBAAiB,GADxB,cInEnB,IAAM,QAAU,aAIrB,QACoC,CACpC,GAAM,CAAC,MAAO,UAAW,OAAO,EAAI,OAC9B,CAAC,WAAW,EAAI,SAAW,CAAC,YAAa,EAAI,EAC7C,CAAC,cAAc,EAAI,gBAAgB,EACnC,CAAC,eAAe,EAAI,WAAW,EAErC,OAAO,MAAM,gBAAiB,CAC5B,OAAQ,OACR,QAAS,CACP,cAAe,UAAU,cAAc,GACvC,eAAgB,mBAChB,OAAQ,2CACV,EACA,KAAM,KAAK,UAAU,CAAC,MAAO,MAAM,SAAS,EAAG,SAAS,CAAC,CAC3D,CAAC,EACE,KAAK,KAAO,IAAI,KAAK,CAAoC,EACzD,KAAK,KAAO,CACX,GAAI,IAAI,QAAU,YAChB,MAAM,IAAI,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,EAE5C,OAAO,GACT,CAAC,CACL,EA3BuB,WCdvB,IAAM,UAAuB,CACzB,mkBAA0kB,cAC1kB,iNAAwN,mBACxN,mgBAA0gB,+BAC1gB,sJAA6J,+BAC7J,iRAAwR,yCACxR,6FAAoG,8BACpG,8iBAAqjB,qCACrjB,6EAAoF,+BACpF,+NAAsO,0BACtO,2XAAkY,sBACtY,EA4CO,SAAS,QAAQ,OAAgB,CACtC,OAAQ,UAAkB,MAAM,GAAK,CAAC,CACxC,CAFgB,0BCjFT,IAAM,+BAAiC,QAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAMnE,EAEY,yCAA2C,QAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAY7E,ECtBD,IAAAC,aAAuB,0BAiBvB,SAAS,SAAS,IAA+C,CAC/D,OAAO,OAAO,KAAQ,UAAY,MAAQ,IAC5C,CAFS,4BAIF,IAAM,UAAY,OACvB,SACuC,CACvC,IAAM,cACJ,OAAO,SAAY,SAAW,KAAK,MAAM,OAAO,EAAI,QAEtD,OAAK,SAAS,aAAa,EAEgC,CACzD,eACA,KACF,EAEoB,MAAM,KAAO,OAAO,aAAa,EAPhB,EAQvC,EAdyB,aAgBZ,YAAc,OACzB,SACyC,CACzC,IAAM,cACJ,OAAO,SAAY,SAAW,KAAK,MAAM,OAAO,EAAI,QAEtD,GAAI,CAAC,SAAS,aAAa,EAAG,MAAO,GAOrC,GAL6D,CAC3D,MACA,YACF,EAEiB,MAAM,KAAO,OAAO,aAAa,EAAG,CACnD,IAAM,WAAa,cAAc,WACjC,OAAK,SAAS,UAAU,EAEmD,CACzE,KACA,YACA,aACF,EAEoB,MAAM,KAAO,OAAO,UAAU,EARhB,EASpC,CAEA,MAAO,EACT,EA3B2B,eA6BdC,YAAa,OAAC,SAAgD,CACzE,GAAI,YAAY,OAAO,EACrB,OAAO,QAGT,GAAI,UAAU,OAAO,EAAG,CAItB,IAAM,aAAY,uBAAS,gCAAiC,CAC1D,SAAU,EACZ,CAAC,EACK,eAAc,uBAAS,kCAAmC,CAC9D,SAAU,EACZ,CAAC,EAEK,CAAC,aAAc,GAAG,MAAM,EAAI,QAElC,MAAO,CACL,WAAY,CACV,GAAI,aACJ,UACA,WACF,EACA,GAAG,MACL,CACF,CAEA,MAAM,IAAI,MAAM,sBAAsB,CACxC,EA7B0B,cC1DnB,IAAM,qCAAuC,QAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAyBzE,EjBjBD,IAAM,OAAS,WAWF,YAAc,aACzB,YAC6B,CAC7B,IAAM,QAAU,WAAW,QAE3B,GAAI,CACF,GAAM,CAAC,UAAW,IAAK,UAAU,EAAIC,YAAW,OAAO,EAQvD,GAAI,CAFF,MAAM,2BAA2B,UAAU,EAG3C,MAAO,CACL,QAAS,GACT,MAAO,wCACP,YAAa,WAAW,YACxB,eAAgB,IAChB,aAAc,WAAW,QACzB,SACF,EAKF,IAAM,6BAA+B,MAAM,QAAQ,CACjD,MAAO,qCACP,UAAW,CACT,YAAa,WAAW,YACxB,aAAc,WAAW,QACzB,eAAgB,IAChB,OAAQ,yBAAyB,UAAU,EAC3C,gBACF,EACA,QAAS,CACP,YAAa,EACf,CACF,CAAC,EAED,GAAI,6BAA6B,OAC/B,+BACE,GAAG,MAAM,6CAA6C,KAAK,UACzD,6BAA6B,MAC/B,CAAC,EACH,EACO,CACL,QAAS,GACT,MAAO,2CACP,YAAa,WAAW,YACxB,eAAgB,IAChB,aAAc,WAAW,QACzB,SACF,EAGF,IAAM,wBAA0B,UAC5B,MAAM,QAAQ,CACZ,MAAO,yCACP,UAAW,CACT,aAAc,WAAW,QACzB,SACF,EACA,QAAS,CACP,YAAa,EACf,CACF,CAAC,EACD,MAAM,QAAQ,CACZ,MAAO,+BACP,UAAW,CACT,aAAc,WAAW,OAC3B,EACA,QAAS,CACP,YAAa,EACf,CACF,CAAC,EAEL,OAAI,wBAAwB,WAC1B,sBACE,GAAG,MAAM,sCAAsC,KAAK,UAClD,wBAAwB,MAC1B,CAAC,EACH,KAEF,mBAAK,GAAG,MAAM,+BAA+B,WAAW,OAAO,EAAE,EAE1D,CACL,QAAS,GACT,YAAa,WAAW,YACxB,eAAgB,IAChB,aAAc,WAAW,QACzB,SACF,CACF,OAASC,OAAO,CACd,IAAM,QAAUA,kBAAiB,MAAQA,OAAM,QAAU,gBACzD,4BAAK,GAAG,MAAM,sCAAsC,OAAO,EAAE,EAEtD,CACL,QAAS,GACT,MAAO,QACP,YAAa,WAAW,YACxB,aAAc,WAAW,OAC3B,CACF,CACF,EAzG2B,ekB3BpB,SAAS,cAAc,OAAQ,CACpC,OAAK,OAIE,OAAO,KAAK,MAAM,EAAE,OAAO,CAAC,OAAQ,OACzC,OAAO,IAAI,YAAY,CAAC,EAAI,OAAO,GAAG,EAC/B,QACN,CAAC,CAAC,EANI,CAAC,CAOZ,CATgB,sCCAD,SAAR,cAA+B,MAAO,CAC5C,GAAI,OAAO,OAAU,UAAY,QAAU,KAC1C,MAAO,GAGR,IAAM,UAAY,OAAO,eAAe,KAAK,EAC7C,OAAQ,YAAc,MAAQ,YAAc,OAAO,WAAa,OAAO,eAAe,SAAS,IAAM,OAAS,EAAE,OAAO,eAAe,QAAU,EAAE,OAAO,YAAY,MACtK,CAPwB,sCCEjB,SAAS,UAAU,SAAU,QAAS,CAC3C,IAAM,OAAS,OAAO,OAAO,CAAC,EAAG,QAAQ,EAEzC,cAAO,KAAK,OAAO,EAAE,QAAS,KAAQ,CAChC,cAAc,QAAQ,GAAG,CAAC,EACtB,OAAO,SACR,OAAO,GAAG,EAAI,UAAU,SAAS,GAAG,EAAG,QAAQ,GAAG,CAAC,EADhC,OAAO,OAAO,OAAQ,CAAE,CAAC,GAAG,EAAG,QAAQ,GAAG,CAAE,CAAC,EAGrE,OAAO,OAAO,OAAQ,CAAE,CAAC,GAAG,EAAG,QAAQ,GAAG,CAAE,CAAC,CAEjD,CAAC,EAEM,MACT,CAbgB,8BCFT,SAAS,0BAA0B,IAAK,CAC7C,QAAW,OAAO,IACZ,IAAI,GAAG,IAAM,QACf,OAAO,IAAI,GAAG,EAGlB,OAAO,GACT,CAPgB,8DCIT,SAAS,MAAM,SAAU,MAAO,QAAS,CAC9C,GAAI,OAAO,OAAU,SAAU,CAC7B,GAAI,CAAC,OAAQ,GAAG,EAAI,MAAM,MAAM,GAAG,EACnC,QAAU,OAAO,OAAO,IAAM,CAAE,OAAQ,GAAI,EAAI,CAAE,IAAK,MAAO,EAAG,OAAO,CAC1E,MACE,QAAU,OAAO,OAAO,CAAC,EAAG,KAAK,EAInC,QAAQ,QAAU,cAAc,QAAQ,OAAO,EAG/C,0BAA0B,OAAO,EACjC,0BAA0B,QAAQ,OAAO,EAEzC,IAAM,cAAgB,UAAU,UAAY,CAAC,EAAG,OAAO,EAGvD,OAAI,UAAY,SAAS,UAAU,SAAS,SAC1C,cAAc,UAAU,SAAW,SAAS,UAAU,SACnD,OAAQ,SAAY,CAAC,cAAc,UAAU,SAAS,SAAS,OAAO,CAAC,EACvE,OAAO,cAAc,UAAU,QAAQ,GAG5C,cAAc,UAAU,SAAW,cAAc,UAAU,SAAS,IACjE,SAAY,QAAQ,QAAQ,WAAY,EAAE,CAC7C,EAEO,aACT,CA7BgB,sBCJT,SAAS,mBAAmB,IAAK,WAAY,CAClD,IAAM,UAAY,KAAK,KAAK,GAAG,EAAI,IAAM,IACnC,MAAQ,OAAO,KAAK,UAAU,EAEpC,GAAI,MAAM,SAAW,EACnB,OAAO,IAGT,IAAM,MAAQ,MACX,IAAK,MACA,OAAS,IACJ,KAAO,WAAW,EAAE,MAAM,GAAG,EAAE,IAAI,kBAAkB,EAAE,KAAK,GAAG,EAGjE,GAAG,IAAI,IAAI,mBAAmB,WAAW,IAAI,CAAC,CAAC,EACvD,EACA,KAAK,GAAG,EAEX,OAAO,IAAM,UAAY,KAC3B,CAnBgB,gDCAhB,IAAM,iBAAmB,aAEzB,SAAS,eAAe,aAAc,CACpC,OAAO,aAAa,QAAQ,aAAc,EAAE,EAAE,MAAM,GAAG,CACzD,CAFS,wCAIF,SAAS,wBAAwB,IAAK,CAC3C,IAAM,QAAU,IAAI,MAAM,gBAAgB,EAE1C,OAAK,QAIE,QAAQ,IAAI,cAAc,EAAE,OAAO,CAAC,EAAG,IAAM,EAAE,OAAO,CAAC,EAAG,CAAC,CAAC,EAH1D,CAAC,CAIZ,CARgB,0DCNT,SAAS,KAAK,OAAQ,WAAY,CACvC,OAAO,OAAO,KAAK,MAAM,EACtB,OAAQ,QAAW,CAAC,WAAW,SAAS,MAAM,CAAC,EAC/C,OAAO,CAAC,IAAK,OACZ,IAAI,GAAG,EAAI,OAAO,GAAG,EACd,KACN,CAAC,CAAC,CACT,CAPgB,oBC+BhB,SAAS,eAAe,IAAK,CAC3B,OAAO,IACJ,MAAM,oBAAoB,EAC1B,IAAI,SAAU,KAAM,CACnB,MAAK,eAAe,KAAK,IAAI,IAC3B,KAAO,UAAU,IAAI,EAAE,QAAQ,OAAQ,GAAG,EAAE,QAAQ,OAAQ,GAAG,GAE1D,IACT,CAAC,EACA,KAAK,EAAE,CACZ,CAVS,wCAYT,SAAS,iBAAiB,IAAK,CAC7B,OAAO,mBAAmB,GAAG,EAAE,QAAQ,WAAY,SAAU,EAAG,CAC9D,MAAO,IAAM,EAAE,WAAW,CAAC,EAAE,SAAS,EAAE,EAAE,YAAY,CACxD,CAAC,CACH,CAJS,4CAMT,SAAS,YAAY,SAAU,MAAO,IAAK,CAMzC,OALA,MACE,WAAa,KAAO,WAAa,IAC7B,eAAe,KAAK,EACpB,iBAAiB,KAAK,EAExB,IACK,iBAAiB,GAAG,EAAI,IAAM,MAE9B,KAEX,CAXS,kCAaT,SAAS,UAAU,MAAO,CACxB,OAA8B,OAAU,IAC1C,CAFS,8BAIT,SAAS,cAAc,SAAU,CAC/B,OAAO,WAAa,KAAO,WAAa,KAAO,WAAa,GAC9D,CAFS,sCAIT,SAAS,UAAU,QAAS,SAAU,IAAK,SAAU,CACnD,IAAI,MAAQ,QAAQ,GAAG,EACrB,OAAS,CAAC,EAEZ,GAAI,UAAU,KAAK,GAAK,QAAU,GAChC,GACE,OAAO,OAAU,UACjB,OAAO,OAAU,UACjB,OAAO,OAAU,UAEjB,MAAQ,MAAM,SAAS,EAEnB,UAAY,WAAa,MAC3B,MAAQ,MAAM,UAAU,EAAG,SAAS,SAAU,EAAE,CAAC,GAGnD,OAAO,KACL,YAAY,SAAU,MAAO,cAAc,QAAQ,EAAI,IAAM,EAAE,CACjE,UAEI,WAAa,IACX,MAAM,QAAQ,KAAK,EACrB,MAAM,OAAO,SAAS,EAAE,QAAQ,SAAUC,OAAO,CAC/C,OAAO,KACL,YAAY,SAAUA,OAAO,cAAc,QAAQ,EAAI,IAAM,EAAE,CACjE,CACF,CAAC,EAED,OAAO,KAAK,KAAK,EAAE,QAAQ,SAAU,EAAG,CAClC,UAAU,MAAM,CAAC,CAAC,GACpB,OAAO,KAAK,YAAY,SAAU,MAAM,CAAC,EAAG,CAAC,CAAC,CAElD,CAAC,MAEE,CACL,IAAM,IAAM,CAAC,EAET,MAAM,QAAQ,KAAK,EACrB,MAAM,OAAO,SAAS,EAAE,QAAQ,SAAUA,OAAO,CAC/C,IAAI,KAAK,YAAY,SAAUA,MAAK,CAAC,CACvC,CAAC,EAED,OAAO,KAAK,KAAK,EAAE,QAAQ,SAAU,EAAG,CAClC,UAAU,MAAM,CAAC,CAAC,IACpB,IAAI,KAAK,iBAAiB,CAAC,CAAC,EAC5B,IAAI,KAAK,YAAY,SAAU,MAAM,CAAC,EAAE,SAAS,CAAC,CAAC,EAEvD,CAAC,EAGC,cAAc,QAAQ,EACxB,OAAO,KAAK,iBAAiB,GAAG,EAAI,IAAM,IAAI,KAAK,GAAG,CAAC,EAC9C,IAAI,SAAW,GACxB,OAAO,KAAK,IAAI,KAAK,GAAG,CAAC,CAE7B,MAGE,WAAa,IACX,UAAU,KAAK,GACjB,OAAO,KAAK,iBAAiB,GAAG,CAAC,EAE1B,QAAU,KAAO,WAAa,KAAO,WAAa,KAC3D,OAAO,KAAK,iBAAiB,GAAG,EAAI,GAAG,EAC9B,QAAU,IACnB,OAAO,KAAK,EAAE,EAGlB,OAAO,MACT,CArES,8BAuEF,SAAS,SAAS,SAAU,CACjC,MAAO,CACL,OAAQ,OAAO,KAAK,KAAM,QAAQ,CACpC,CACF,CAJgB,4BAMhB,SAAS,OAAO,SAAU,QAAS,CACjC,IAAI,UAAY,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,GAAG,EAElD,OAAO,SAAS,QACd,6BACA,SAAU,EAAG,WAAY,QAAS,CAChC,GAAI,WAAY,CACd,IAAI,SAAW,GACT,OAAS,CAAC,EAYhB,GAVI,UAAU,QAAQ,WAAW,OAAO,CAAC,CAAC,IAAM,KAC9C,SAAW,WAAW,OAAO,CAAC,EAC9B,WAAa,WAAW,OAAO,CAAC,GAGlC,WAAW,MAAM,IAAI,EAAE,QAAQ,SAAU,SAAU,CACjD,IAAI,IAAM,4BAA4B,KAAK,QAAQ,EACnD,OAAO,KAAK,UAAU,QAAS,SAAU,IAAI,CAAC,EAAG,IAAI,CAAC,GAAK,IAAI,CAAC,CAAC,CAAC,CACpE,CAAC,EAEG,UAAY,WAAa,IAAK,CAChC,IAAI,UAAY,IAEhB,OAAI,WAAa,IACf,UAAY,IACH,WAAa,MACtB,UAAY,WAEN,OAAO,SAAW,EAAI,SAAW,IAAM,OAAO,KAAK,SAAS,CACtE,KACE,QAAO,OAAO,KAAK,GAAG,CAE1B,KACE,QAAO,eAAe,OAAO,CAEjC,CACF,CACF,CArCS,wBC9IF,SAAS,MAAM,QAAS,CAE7B,IAAI,OAAS,QAAQ,OAAO,YAAY,EAGpC,KAAO,QAAQ,KAAO,KAAK,QAAQ,eAAgB,MAAM,EACzD,QAAU,OAAO,OAAO,CAAC,EAAG,QAAQ,OAAO,EAC3C,KACA,WAAa,KAAK,QAAS,CAC7B,SACA,UACA,MACA,UACA,UACA,WACF,CAAC,EAGK,iBAAmB,wBAAwB,GAAG,EAEpD,IAAM,SAAS,GAAG,EAAE,OAAO,UAAU,EAEhC,QAAQ,KAAK,GAAG,IACnB,IAAM,QAAQ,QAAU,KAG1B,IAAM,kBAAoB,OAAO,KAAK,OAAO,EAC1C,OAAQ,QAAW,iBAAiB,SAAS,MAAM,CAAC,EACpD,OAAO,SAAS,EACb,oBAAsB,KAAK,WAAY,iBAAiB,EAI9D,GAAI,CAFoB,6BAA6B,KAAK,QAAQ,MAAM,IAGlE,QAAQ,UAAU,SAEpB,QAAQ,OAAS,QAAQ,OACtB,MAAM,GAAG,EACT,IAAK,SACJ,QAAQ,QACN,mDACA,uBAAuB,QAAQ,UAAU,MAAM,EACjD,CACF,EACC,KAAK,GAAG,GAGT,QAAQ,UAAU,SAAS,QAAQ,CACrC,IAAM,yBACJ,QAAQ,OAAO,MAAM,qBAAqB,GAAK,CAAC,EAClD,QAAQ,OAAS,yBACd,OAAO,QAAQ,UAAU,QAAQ,EACjC,IAAK,SAAY,CAChB,IAAM,OAAS,QAAQ,UAAU,OAC7B,IAAI,QAAQ,UAAU,MAAM,GAC5B,QACJ,MAAO,0BAA0B,OAAO,WAAW,MAAM,EAC3D,CAAC,EACA,KAAK,GAAG,CACb,CAKF,MAAI,CAAC,MAAO,MAAM,EAAE,SAAS,MAAM,EACjC,IAAM,mBAAmB,IAAK,mBAAmB,EAE7C,SAAU,oBACZ,KAAO,oBAAoB,KAEvB,OAAO,KAAK,mBAAmB,EAAE,SACnC,KAAO,qBAMT,CAAC,QAAQ,cAAc,GAAK,OAAO,KAAS,MAC9C,QAAQ,cAAc,EAAI,mCAKxB,CAAC,QAAS,KAAK,EAAE,SAAS,MAAM,GAAK,OAAO,KAAS,MACvD,KAAO,IAIF,OAAO,OACZ,CAAE,OAAQ,IAAK,OAAQ,EACvB,OAAO,KAAS,IAAc,CAAE,IAAK,EAAI,KACzC,QAAQ,QAAU,CAAE,QAAS,QAAQ,OAAQ,EAAI,IACnD,CACF,CA7FgB,sBCFT,SAAS,qBAAqB,SAAU,MAAO,QAAS,CAC7D,OAAO,MAAM,MAAM,SAAU,MAAO,OAAO,CAAC,CAC9C,CAFgB,oDCCT,SAAS,aAAa,YAAa,YAAa,CACrD,IAAMC,UAAW,MAAM,YAAa,WAAW,EACzCC,UAAW,qBAAqB,KAAK,KAAMD,SAAQ,EAEzD,OAAO,OAAO,OAAOC,UAAU,CAC7B,SAAAD,UACA,SAAU,aAAa,KAAK,KAAMA,SAAQ,EAC1C,MAAO,MAAM,KAAK,KAAMA,SAAQ,EAChC,KACF,CAAC,CACH,CAVgB,oCCJT,SAAS,cAAe,CAC7B,OAAI,OAAO,WAAc,UAAY,cAAe,UAC3C,UAAU,UAGf,OAAO,SAAY,UAAY,QAAQ,UAAY,OAC9C,WAAW,QAAQ,QAAQ,OAAO,CAAC,CAAC,KAAK,QAAQ,QAAQ,KAC9D,QAAQ,IACV,IAGK,4BACT,CAZgB,oCCAT,IAAM,QAAU,QCIvB,IAAM,UAAY,4BAA4B,OAAO,IAAI,aAAa,CAAC,GAI1D,SAAW,CACtB,OAAQ,MACR,QAAS,yBACT,QAAS,CACP,OAAQ,iCACR,aAAc,SAChB,EACA,UAAW,CACT,OAAQ,GACR,SAAU,CAAC,CACb,CACF,ECfO,IAAM,SAAW,aAAa,KAAM,QAAQ,ECJ5C,IAAME,SAAU,QCOvB,SAASC,UAAS,EAAG,CACnB,OAAO,OAAO,UAAU,SAAS,KAAK,CAAC,IAAM,iBAC/C,CAFS,OAAAA,UAAA,YAIT,SAASC,eAAc,EAAG,CACxB,IAAI,KAAK,KAET,OAAID,UAAS,CAAC,IAAM,GAAc,IAGlC,KAAO,EAAE,YACL,OAAS,OAAkB,IAG/B,KAAO,KAAK,UACR,EAAAA,UAAS,IAAI,IAAM,IAGnB,KAAK,eAAe,eAAe,IAAM,KAM/C,CApBS,OAAAC,eAAA,iBCRF,IAAM,aAAN,cAA2B,KAAM,CAHxC,MAGwC,6BACtC,KAKA,OAKA,QAKA,SAEA,YAAY,QAAS,WAAY,QAAS,CACxC,MAAM,OAAO,EAGT,MAAM,mBACR,MAAM,kBAAkB,KAAM,KAAK,WAAW,EAGhD,KAAK,KAAO,YACZ,KAAK,OAAS,WAEV,aAAc,UAChB,KAAK,SAAW,QAAQ,UAI1B,IAAM,YAAc,CAAE,GAAG,QAAQ,OAAQ,EACrC,QAAQ,QAAQ,QAAQ,gBAC1B,YAAY,QAAU,CACpB,GAAG,QAAQ,QAAQ,QACnB,cAAe,QAAQ,QAAQ,QAAQ,cAAc,QACnD,OACA,aACF,CACF,GAGF,YAAY,IAAM,YAAY,IAG3B,QAAQ,uBAAwB,0BAA0B,EAG1D,QAAQ,sBAAuB,yBAAyB,EAE3D,KAAK,QAAU,WACjB,CACF,ECxDe,SAAR,kBAAmC,SAAU,CAClD,OAAO,SAAS,YAAY,CAC9B,CAFwB,8CCGT,SAAR,aAA8B,eAAgB,CACnD,IAAM,IAAM,eAAe,SAAS,KAAO,SAGzCC,eAAc,eAAe,IAAI,GACjC,MAAM,QAAQ,eAAe,IAAI,KAEjC,eAAe,KAAO,KAAK,UAAU,eAAe,IAAI,GAG1D,IAAI,gBAAkB,CAAC,EACnB,OACA,IAEE,CAAE,SAAU,MAAAC,OAAO,GAAG,uBAAwB,EAClD,eAAe,SAAW,CAAC,EAEvB,aAAe,CACnB,OAAQ,eAAe,OACvB,KAAM,eAAe,KACrB,QAAS,eAAe,QACxB,SACA,GAAG,uBACL,EAIA,OAF6BA,QAAS,WAAW,OAErB,eAAe,IAAK,YAAY,EACzD,KAAK,MAAO,UAAa,CACxB,IAAM,SAAS,IACf,OAAS,SAAS,OAElB,QAAW,eAAe,SAAS,QACjC,gBAAgB,YAAY,CAAC,CAAC,EAAI,YAAY,CAAC,EAGjD,GAAI,gBAAiB,gBAAiB,CACpC,IAAM,QACJ,gBAAgB,MAChB,gBAAgB,KAAK,MAAM,8BAA8B,EACrD,gBAAkB,SAAW,QAAQ,IAAI,EAC/C,IAAI,KACF,uBAAuB,eAAe,MAAM,IAC1C,eAAe,GACjB,qDACE,gBAAgB,MAClB,GAAG,gBAAkB,SAAS,eAAe,GAAK,EAAE,EACtD,CACF,CAEA,GAAI,WAAW,KAAO,SAAW,KAKjC,IAAI,eAAe,SAAW,OAAQ,CACpC,GAAI,OAAS,IACX,OAEF,MAAM,IAAI,aAAa,SAAS,WAAY,OAAQ,CAClD,SAAU,CACR,IACA,OACA,QAAS,gBACT,KAAM,MACR,EACA,QAAS,cACX,CAAC,CACH,CAEA,GAAI,SAAW,IACb,MAAM,IAAI,aAAa,eAAgB,OAAQ,CAC7C,SAAU,CACR,IACA,OACA,QAAS,gBACT,KAAM,MAAM,gBAAgB,QAAQ,CACtC,EACA,QAAS,cACX,CAAC,EAGH,GAAI,QAAU,IAAK,CACjB,IAAM,KAAO,MAAM,gBAAgB,QAAQ,EAU3C,MATc,IAAI,aAAa,eAAe,IAAI,EAAG,OAAQ,CAC3D,SAAU,CACR,IACA,OACA,QAAS,gBACT,IACF,EACA,QAAS,cACX,CAAC,CAEH,CAEA,OAAO,gBAAgB,QAAQ,EACjC,CAAC,EAEA,KAAM,OACE,CACL,OACA,IACA,QAAS,gBACT,IACF,EACD,EAEA,MAAOC,QAAU,CAGhB,MAFIA,kBAAiB,cAEjBA,OAAM,OAAS,aAAoBA,OAEjC,IAAI,aAAaA,OAAM,QAAS,IAAK,CACzC,QAAS,cACX,CAAC,CACH,CAAC,CACL,CArHwB,oCAuHxB,eAAe,gBAAgB,SAAU,CACvC,IAAM,YAAc,SAAS,QAAQ,IAAI,cAAc,EAEvD,MAAI,oBAAoB,KAAK,WAAW,EAC/B,SAAS,KAAK,EAGnB,CAAC,aAAe,yBAAyB,KAAK,WAAW,EACpD,SAAS,KAAK,EAIhB,kBAAU,QAAQ,CAC3B,CAbe,0CAef,SAAS,eAAe,KAAM,CAC5B,OAAI,OAAO,MAAS,SAAiB,KAEjC,YAAa,KACX,MAAM,QAAQ,KAAK,MAAM,EACpB,GAAG,KAAK,OAAO,KAAK,KAAK,OAAO,IAAI,KAAK,SAAS,EAAE,KAAK,IAAI,CAAC,GAEhE,KAAK,QAIP,kBAAkB,KAAK,UAAU,IAAI,CAAC,EAC/C,CAZS,wCCzIM,SAARC,cAA8B,YAAa,YAAa,CAC7D,IAAMC,UAAW,YAAY,SAAS,WAAW,EAoBjD,OAAO,OAAO,OAnBC,gBAAU,MAAO,WAAY,CAC1C,IAAM,gBAAkBA,UAAS,MAAM,MAAO,UAAU,EAExD,GAAI,CAAC,gBAAgB,SAAW,CAAC,gBAAgB,QAAQ,KACvD,OAAO,aAAaA,UAAS,MAAM,eAAe,CAAC,EAGrD,IAAMC,SAAU,QAACC,OAAOC,cACf,aAAaH,UAAS,MAAMA,UAAS,MAAME,OAAOC,WAAU,CAAC,CAAC,EADvD,WAIhB,cAAO,OAAOF,SAAS,CACrB,SAAAD,UACA,SAAUD,cAAa,KAAK,KAAMC,SAAQ,CAC5C,CAAC,EAEM,gBAAgB,QAAQ,KAAKC,SAAS,eAAe,CAC9D,EAjBe,UAmBc,CAC3B,SAAAD,UACA,SAAUD,cAAa,KAAK,KAAMC,SAAQ,CAC5C,CAAC,CACH,CAzBwB,OAAAD,cAAA,gBCMjB,IAAMK,SAAUC,cAAa,SAAU,CAC5C,QAAS,CACP,aAAc,2BAA2BC,QAAO,IAAI,aAAa,CAAC,EACpE,CACF,CAAC,ECVD,IAAM,6BAA+B,QAC/B,sBAAwB,QACxB,wBAA0B,QAEhC,eAAsB,KAAK,MAAO,CAChC,IAAM,MAAQ,MAAM,MAAM,IAAI,EAAE,SAAW,EACrC,eACJ,6BAA6B,KAAK,KAAK,GACvC,sBAAsB,KAAK,KAAK,EAC5B,eAAiB,wBAAwB,KAAK,KAAK,EAUzD,MAAO,CACL,KAAM,QACN,MACA,UAXgB,MACd,MACA,eACA,eACA,eACA,iBACA,OAMJ,CACF,CApBsB,oBCCf,SAAS,wBAAwB,MAAO,CAC7C,OAAI,MAAM,MAAM,IAAI,EAAE,SAAW,EACxB,UAAU,KAAK,GAGjB,SAAS,KAAK,EACvB,CANgB,0DCHhB,eAAsB,KAAK,MAAOC,SAAS,MAAO,WAAY,CAC5D,IAAMC,UAAWD,SAAQ,SAAS,MAAM,MAAO,UAAU,EAEzD,OAAAC,UAAS,QAAQ,cAAgB,wBAAwB,KAAK,EAEvDD,SAAQC,SAAQ,CACzB,CANsB,oBCCf,SAAS,gBAAgB,QAAS,CACvC,GAAI,CAAC,SAAS,MACZ,MAAM,IAAI,MACR,0EACF,EAGF,GAAI,OAAO,SAAS,OAAU,SAC5B,MAAM,IAAI,MACR,kFACF,EAGF,IAAM,MAAQ,QAAQ,MAAM,QAAQ,qBAAsB,EAAE,EAE5D,OAAO,OAAO,OAAO,KAAK,KAAK,KAAM,KAAK,EAAG,CAC3C,KAAM,KAAK,KAAK,KAAM,KAAK,CAC7B,CAAC,CACH,CAlBgB,0CCLT,IAAMC,SAAU,QCAvB,SAAS,+BAA+B,KAAM,CAC5C,MACE;AAAA,EACA,KAAK,OAAO,IAAK,GAAM,MAAM,EAAE,OAAO,EAAE,EAAE,KAAK;AAAA,CAAI,CAEvD,CALS,wEAOF,IAAM,qBAAN,cAAmC,KAAM,CAPhD,MAOgD,qCAC9C,YAAYC,SAAS,QAAS,SAAU,CACtC,MAAM,+BAA+B,QAAQ,CAAC,EAE9C,KAAK,QAAUA,SACf,KAAK,QAAU,QACf,KAAK,SAAW,SAChB,KAAK,KAAO,uBAEZ,KAAK,OAAS,SAAS,OACvB,KAAK,KAAO,SAAS,KAGjB,MAAM,mBACR,MAAM,kBAAkB,KAAM,KAAK,WAAW,CAElD,CACF,ECtBA,IAAM,qBAAuB,CAC3B,SACA,UACA,MACA,UACA,UACA,QACA,WACF,EAEM,2BAA6B,CAAC,QAAS,SAAU,KAAK,EAEtD,qBAAuB,gBAEtB,SAASC,SAAQC,SAAS,MAAO,QAAS,CAC/C,GAAI,QAAS,CACX,GAAI,OAAO,OAAU,UAAY,UAAW,QAC1C,OAAO,QAAQ,OACb,IAAI,MAAM,4DAA4D,CACxE,EAGF,QAAW,OAAO,QAChB,GAAK,2BAA2B,SAAS,GAAG,EAE5C,OAAO,QAAQ,OACb,IAAI,MAAM,uBAAuB,GAAG,mCAAmC,CACzE,CAEJ,CAEA,IAAM,cACJ,OAAO,OAAU,SAAW,OAAO,OAAO,CAAE,KAAM,EAAG,OAAO,EAAI,MAE5D,eAAiB,OAAO,KAAK,aAAa,EAAE,OAAO,CAAC,OAAQ,MAC5D,qBAAqB,SAAS,GAAG,GACnC,OAAO,GAAG,EAAI,cAAc,GAAG,EACxB,SAGJ,OAAO,YACV,OAAO,UAAY,CAAC,GAGtB,OAAO,UAAU,GAAG,EAAI,cAAc,GAAG,EAClC,QACN,CAAC,CAAC,EAIC,QAAU,cAAc,SAAWA,SAAQ,SAAS,SAAS,QACnE,OAAI,qBAAqB,KAAK,OAAO,IACnC,eAAe,IAAM,QAAQ,QAAQ,qBAAsB,cAAc,GAGpEA,SAAQ,cAAc,EAAE,KAAM,UAAa,CAChD,GAAI,SAAS,KAAK,OAAQ,CACxB,IAAM,QAAU,CAAC,EACjB,QAAW,OAAO,OAAO,KAAK,SAAS,OAAO,EAC5C,QAAQ,GAAG,EAAI,SAAS,QAAQ,GAAG,EAGrC,MAAM,IAAI,qBAAqB,eAAgB,QAAS,SAAS,IAAI,CACvE,CAEA,OAAO,SAAS,KAAK,IACvB,CAAC,CACH,CArDgB,OAAAD,SAAA,WCdT,SAASE,cAAa,WAAY,YAAa,CACpD,IAAM,WAAa,WAAW,SAAS,WAAW,EAKlD,OAAO,OAAO,OAJC,QAAC,MAAO,UACdC,SAAQ,WAAY,MAAO,OAAO,EAD5B,UAIc,CAC3B,SAAUD,cAAa,KAAK,KAAM,UAAU,EAC5C,SAAU,WAAW,QACvB,CAAC,CACH,CAVgB,OAAAA,cAAA,gBCMT,IAAME,SAAUC,cAAaC,SAAS,CAC3C,QAAS,CACP,aAAc,2BAA2BC,QAAO,IAAI,aAAa,CAAC,EACpE,EACA,OAAQ,OACR,IAAK,UACP,CAAC,EAIM,SAAS,kBAAkB,cAAe,CAC/C,OAAOF,cAAa,cAAe,CACjC,OAAQ,OACR,IAAK,UACP,CAAC,CACH,CALgB,8CChBT,SAAS,SAAS,MAAO,KAAM,OAAQ,QAAS,CACrD,GAAI,OAAO,QAAW,WACpB,MAAM,IAAI,MAAM,2CAA2C,EAO7D,OAJK,UACH,QAAU,CAAC,GAGT,MAAM,QAAQ,IAAI,EACb,KAAK,QAAQ,EAAE,OAAO,CAAC,SAAUG,QAC/B,SAAS,KAAK,KAAM,MAAOA,MAAM,SAAU,OAAO,EACxD,MAAM,EAAE,EAGN,QAAQ,QAAQ,EAAE,KAAK,IACvB,MAAM,SAAS,IAAI,EAIjB,MAAM,SAAS,IAAI,EAAE,OAAO,CAACC,QAAQ,aACnC,WAAW,KAAK,KAAK,KAAMA,QAAQ,OAAO,EAChD,MAAM,EAAE,EALF,OAAO,OAAO,CAMxB,CACH,CAxBgB,4BCAT,SAAS,QAAQ,MAAO,KAAM,KAAMC,MAAM,CAC/C,IAAM,KAAOA,MACR,MAAM,SAAS,IAAI,IACtB,MAAM,SAAS,IAAI,EAAI,CAAC,GAGtB,OAAS,WACXA,MAAO,QAAC,OAAQ,UACP,QAAQ,QAAQ,EACpB,KAAK,KAAK,KAAK,KAAM,OAAO,CAAC,EAC7B,KAAK,OAAO,KAAK,KAAM,OAAO,CAAC,EAH7B,SAOL,OAAS,UACXA,MAAO,QAAC,OAAQ,UAAY,CAC1B,IAAI,OACJ,OAAO,QAAQ,QAAQ,EACpB,KAAK,OAAO,KAAK,KAAM,OAAO,CAAC,EAC/B,KAAM,UACL,OAAS,QACF,KAAK,OAAQ,OAAO,EAC5B,EACA,KAAK,IACG,MACR,CACL,EAXO,SAcL,OAAS,UACXA,MAAO,QAAC,OAAQ,UACP,QAAQ,QAAQ,EACpB,KAAK,OAAO,KAAK,KAAM,OAAO,CAAC,EAC/B,MAAOC,QACC,KAAKA,OAAO,OAAO,CAC3B,EALE,SAST,MAAM,SAAS,IAAI,EAAE,KAAK,CACxB,KAAMD,MACN,IACF,CAAC,CACH,CA3CgB,0BCAT,SAAS,WAAW,MAAO,KAAM,OAAQ,CAC9C,GAAI,CAAC,MAAM,SAAS,IAAI,EACtB,OAGF,IAAM,MAAQ,MAAM,SAAS,IAAI,EAC9B,IAAK,YACG,WAAW,IACnB,EACA,QAAQ,MAAM,EAEb,QAAU,IAId,MAAM,SAAS,IAAI,EAAE,OAAO,MAAO,CAAC,CACtC,CAhBgB,gCCKhB,IAAM,KAAO,SAAS,KAChB,SAAW,KAAK,KAAK,IAAI,EAE/B,SAAS,QAAQE,MAAM,MAAO,KAAM,CAClC,IAAM,cAAgB,SAAS,WAAY,IAAI,EAAE,MAC/C,KACA,KAAO,CAAC,MAAO,IAAI,EAAI,CAAC,KAAK,CAC/B,EACAA,MAAK,IAAM,CAAE,OAAQ,aAAc,EACnCA,MAAK,OAAS,cACd,CAAC,SAAU,QAAS,QAAS,MAAM,EAAE,QAAS,MAAS,CACrD,IAAM,KAAO,KAAO,CAAC,MAAO,KAAM,IAAI,EAAI,CAAC,MAAO,IAAI,EACtDA,MAAK,IAAI,EAAIA,MAAK,IAAI,IAAI,EAAI,SAAS,QAAS,IAAI,EAAE,MAAM,KAAM,IAAI,CACxE,CAAC,CACH,CAXS,0BAaT,SAAS,UAAW,CAClB,IAAM,iBAAmB,OAAO,UAAU,EACpC,kBAAoB,CACxB,SAAU,CAAC,CACb,EACM,aAAe,SAAS,KAAK,KAAM,kBAAmB,gBAAgB,EAC5E,eAAQ,aAAc,kBAAmB,gBAAgB,EAClD,YACT,CARS,4BAUT,SAAS,YAAa,CACpB,IAAM,MAAQ,CACZ,SAAU,CAAC,CACb,EAEMA,MAAO,SAAS,KAAK,KAAM,KAAK,EACtC,eAAQA,MAAM,KAAK,EAEZA,KACT,CATS,gCAWT,IAAO,0BAAQ,CAAE,SAAU,UAAW,EC5C/B,IAAMC,SAAU,QCShB,IAAM,QAAN,KAAc,CATrB,MASqB,wBACnB,OAAO,QAAUC,SACjB,OAAO,SAAW,CAChB,QAAS,SAAS,SAAS,QAC3B,UAAW,wBAAwBA,QAAO,IAAI,aAAa,CAAC,EAC9D,EAEA,OAAO,YAAY,WAAY,CAC7B,IAAM,eAAiB,KAAK,QAC5B,OAAO,cAAc,IAAK,CACxB,OAAO,QAAU,eAAe,OAC9B,WAAW,OAAQ,QAAW,CAAC,eAAe,SAAS,MAAM,CAAC,CAChE,CACF,CACF,CAEA,OAAO,aAAa,SAAU,CAC5B,IAAM,oBAAsB,CAAC,UAAU,UAAW,KAAK,SAAS,SAAS,EACtE,OAAO,OAAO,EACd,KAAK,GAAG,EAEL,YAAc,CAClB,GAAG,KAAK,SACR,GAAG,SACH,UAAW,oBACX,QAAS,CACP,GAAG,KAAK,SAAS,QACjB,GAAG,UAAU,OACf,CACF,EAEA,OAAO,cAAc,IAAK,CACxB,YAAY,QAAS,CACnB,GAAI,OAAO,UAAa,WAAY,CAClC,MAAM,SAAS,QAAS,WAAW,CAAC,EACpC,MACF,CAEA,MAAM,OAAO,CACf,CAEA,OAAO,SAAW,WACpB,CACF,CAEA,OAAO,QAAU,CAAC,EAElB,YAAY,QAAU,CAAC,EAAG,CACxB,KAAK,QAAU,CACb,GAAG,KAAK,YAAY,SACpB,GAAG,QACH,QAAS,CACP,GAAG,KAAK,YAAY,SAAS,QAC7B,GAAG,SAAS,OACd,CACF,EAEA,IAAMC,MAAO,IAAI,0BAAK,WAEhB,gBAAkB,CACtB,QAAS,KAAK,QAAQ,QACtB,QAAS,CAAC,EACV,QAAS,CACP,GAAG,KAAK,QAAQ,QAChB,KAAMA,MAAK,KAAK,KAAM,SAAS,CACjC,EACA,UAAW,CACT,SAAU,CAAC,EACX,OAAQ,EACV,CACF,EAGMC,WAAY,CAAC,SAAS,UAAW,KAAK,YAAY,SAAS,SAAS,EACvE,OAAO,OAAO,EACd,KAAK,GAAG,EAoCX,GAlCA,gBAAgB,QAAQ,YAAY,EAAIA,WAEpC,KAAK,QAAQ,WACf,gBAAgB,UAAU,SAAW,KAAK,QAAQ,UAGhD,KAAK,QAAQ,WACf,gBAAgB,QAAQ,WAAW,EAAI,KAAK,QAAQ,UAItD,KAAK,YAAY,QAAQ,QAAS,QAAW,CAC3C,OAAO,OAAO,KAAM,OAAO,KAAM,KAAK,OAAO,CAAC,CAChD,CAAC,EAGD,KAAK,QAAUC,SAAQ,SAAS,eAAe,EAC/C,KAAK,QAAU,kBAAkB,KAAK,OAAO,EAAE,SAAS,eAAe,EACvE,KAAK,IAAM,OAAO,OAChB,CACE,MAAO,WAAM,CAAC,EAAP,SACP,KAAM,WAAM,CAAC,EAAP,QACN,KAAM,QAAQ,KAAK,KAAK,OAAO,EAC/B,MAAO,QAAQ,MAAM,KAAK,OAAO,CACnC,EACA,KAAK,QAAQ,GACf,EACA,KAAK,KAAOF,MAOP,KAAK,QAAQ,aAYX,CAEL,GAAM,CAAE,aAAc,GAAG,YAAa,EAAI,KAAK,QACzCG,MAAO,aACX,OAAO,OACL,CACE,QAAS,KAAK,QACd,IAAK,KAAK,IAMV,QAAS,KACT,eAAgB,YAClB,EACA,KAAK,QAAQ,IACf,CACF,EACAH,MAAK,KAAK,UAAWG,MAAK,IAAI,EAC9B,KAAK,KAAOA,KACd,SAhCM,CAAC,KAAK,QAAQ,KAEhB,KAAK,KAAO,UAAa,CACvB,KAAM,iBACR,OACK,CAEL,IAAMA,MAAO,gBAAgB,CAAE,MAAO,KAAK,QAAQ,IAAK,CAAC,EACzDH,MAAK,KAAK,UAAWG,MAAK,IAAI,EAC9B,KAAK,KAAOA,KACd,CAuBJ,CACF,EC1JA,IAAIC,SAAU,oBAGd,SAAS,+BAA+B,SAAU,CAChD,GAAI,CAAC,SAAS,KACZ,MAAO,CACL,GAAG,SACH,KAAM,CAAC,CACT,EAGF,GAAI,EAD+B,gBAAiB,SAAS,MAAQ,EAAE,QAAS,SAAS,OACxD,OAAO,SACxC,IAAM,kBAAoB,SAAS,KAAK,mBAClC,oBAAsB,SAAS,KAAK,qBACpC,WAAa,SAAS,KAAK,YACjC,OAAO,SAAS,KAAK,mBACrB,OAAO,SAAS,KAAK,qBACrB,OAAO,SAAS,KAAK,YACrB,IAAM,aAAe,OAAO,KAAK,SAAS,IAAI,EAAE,CAAC,EAC3C,KAAO,SAAS,KAAK,YAAY,EACvC,gBAAS,KAAO,KACZ,OAAO,kBAAsB,MAC/B,SAAS,KAAK,mBAAqB,mBAEjC,OAAO,oBAAwB,MACjC,SAAS,KAAK,qBAAuB,qBAEvC,SAAS,KAAK,YAAc,WACrB,QACT,CA1BS,wEA6BT,SAAS,SAAS,QAAS,MAAO,WAAY,CAC5C,IAAM,QAAU,OAAO,OAAU,WAAa,MAAM,SAAS,UAAU,EAAI,QAAQ,QAAQ,SAAS,MAAO,UAAU,EAC/G,cAAgB,OAAO,OAAU,WAAa,MAAQ,QAAQ,QAC9D,OAAS,QAAQ,OACjB,QAAU,QAAQ,QACpB,IAAM,QAAQ,IAClB,MAAO,CACL,CAAC,OAAO,aAAa,EAAG,KAAO,CAC7B,MAAM,MAAO,CACX,GAAI,CAAC,IAAK,MAAO,CAAE,KAAM,EAAK,EAC9B,GAAI,CACF,IAAM,SAAW,MAAM,cAAc,CAAE,OAAQ,IAAK,OAAQ,CAAC,EACvD,mBAAqB,+BAA+B,QAAQ,EAClE,aAAQ,mBAAmB,QAAQ,MAAQ,IAAI,MAC7C,0BACF,GAAK,CAAC,GAAG,CAAC,EACH,CAAE,MAAO,kBAAmB,CACrC,OAASC,OAAO,CACd,GAAIA,OAAM,SAAW,IAAK,MAAMA,OAChC,WAAM,GACC,CACL,MAAO,CACL,OAAQ,IACR,QAAS,CAAC,EACV,KAAM,CAAC,CACT,CACF,CACF,CACF,CACF,EACF,CACF,CA/BS,4BAkCT,SAAS,SAAS,QAAS,MAAO,WAAY,MAAO,CACnD,OAAI,OAAO,YAAe,aACxB,MAAQ,WACR,WAAa,QAER,OACL,QACA,CAAC,EACD,SAAS,QAAS,MAAO,UAAU,EAAE,OAAO,aAAa,EAAE,EAC3D,KACF,CACF,CAXS,4BAYT,SAAS,OAAO,QAAS,QAAS,UAAW,MAAO,CAClD,OAAO,UAAU,KAAK,EAAE,KAAM,QAAW,CACvC,GAAI,OAAO,KACT,OAAO,QAET,IAAI,UAAY,GAChB,SAAS,MAAO,CACd,UAAY,EACd,CAIA,OANS,oBAGT,QAAU,QAAQ,OAChB,MAAQ,MAAM,OAAO,MAAO,IAAI,EAAI,OAAO,MAAM,IACnD,EACI,UACK,QAEF,OAAO,QAAS,QAAS,UAAW,KAAK,CAClD,CAAC,CACH,CAjBS,wBAoBT,IAAI,oBAAsB,OAAO,OAAO,SAAU,CAChD,QACF,CAAC,EA6QD,SAAS,aAAa,QAAS,CAC7B,MAAO,CACL,SAAU,OAAO,OAAO,SAAS,KAAK,KAAM,OAAO,EAAG,CACpD,SAAU,SAAS,KAAK,KAAM,OAAO,CACvC,CAAC,CACH,CACF,CANS,oCAOT,aAAa,QAAUC,SCzWhB,IAAMC,UAAW,aACtBC,UACA,UACiC,CACjC,GAAM,CAAC,cAAc,EAAI,gBAAgB,EAKzC,OAAO,IAAK,QAAQ,YAAY,CAAC,YAAY,CAAC,GAAG,CAC/C,KAAM,cACR,CAAC,EAAE,SAASA,UAAU,OAAO,CAC/B,EAZwB,YCNjB,IAAM,qBAAuB,gBAE/B,CACH,GAAM,CAAC,iBAAiB,EAAI,gBAAgB,EACtC,CAAC,KAAM,MAAM,EAAI,WAAW,EAUlC,OARoB,MAAMC,UAAS,wCAAyC,CAC1E,MAAO,KAAK,MACZ,KAAM,KAAK,KACX,IAAK,OACL,SAAU,IACV,YAAa,iBACf,CAAC,CAGH,EAfoC,wBCVpC,IAAAC,cAAuB,0BASvB,IAAMC,WAAY,YACT,CACL,WAAY,UACV,wBAAS,uBAAwB,CAAC,SAAU,GAAO,eAAgB,EAAI,CAAC,CAC1E,CACF,GALgB,aAUdC,SAES,UAAY,WAChBA,WAAYA,SAAUD,WAAU,GADhB,a5DdzB,IAAME,QAAS,WAEf,eAAsB,KAAM,CAC1B,IAAI,YAAc,MAAM,qBAAqB,EAEvC,CAAC,UAAU,EAAI,UAAU,EAK/B,GAJI,YAAY,OAAS,GAAK,gBAC5B,oBAAK,GAAGA,OAAM,mBAAmB,UAAU,cAAc,EACzD,YAAc,YAAY,MAAM,UAAU,GAExC,YAAY,SAAW,EAAG,IAC5B,oBAAK,GAAGA,OAAM,2BAA2B,EAEzC,MAAM,sBACH,WAAW,6CAA6C,EACxD,SAAS,EACT,SAAS,CAAC,CAAC,0BAA0B,CAAC,CAAC,EACvC,MAAM,EACT,MACF,CAEA,GAAI,CACF,IAAM,OAAS,MAAM,QAAQ,IAC3B,YAAY,IAAI,YAAc,YAAY,UAAU,CAAC,CACvD,KACA,qBAAM,GAAGA,OAAM,yBAAyB,KAAK,UAAU,MAAM,CAAC,EAAE,EAE5D,OAAO,OAAS,GAClB,MAAM,sBACH,WAAW,6CAA6C,EACxD,SAAS,EACT,WAAW,qBAAqB,EAChC,SAAS,EACT,SAAS,CACR,CACE,CAAC,KAAM,uBAAwB,OAAQ,EAAI,EAC3C,CAAC,KAAM,UAAW,OAAQ,EAAI,EAC9B,CAAC,KAAM,cAAe,OAAQ,EAAI,EAClC,CAAC,KAAM,kBAAmB,OAAQ,EAAI,EACtC,CAAC,KAAM,aAAc,OAAQ,EAAI,EACjC,CAAC,KAAM,QAAS,OAAQ,EAAI,CAC9B,EACA,GAAG,OAAO,IAAI,OAAS,CACrB,MAAM,aACN,MAAM,QAAU,SAAM,SACtB,MAAM,YACN,MAAM,eACF,YAAY,MAAM,cAAc,WAAW,MAAM,cAAc,cAC/D,GACJ,MAAM,WAAa,GACnB,MAAM,OAAS,EACjB,CAAC,CACH,CAAC,EACA,MAAM,CAEb,OAASC,OAAO,CACd,IAAM,QACJA,kBAAiB,MAAQA,OAAM,QAAU,KAAK,UAAUA,MAAK,KAE/D,yBAAU,GAAGD,OAAM,gCAAgC,OAAO,EAAE,CAC9D,CACF,CA3DsB,kBDLtB,GAAI,CACG,IAAI,CACX,OAASE,OAAO,CACVA,kBAAiB,UAAO,yBAAUA,OAAM,OAAO,CACrD",
  "names": ["assert", "options", "debug", "error", "socket", "require_tunnel", "assert", "Blob", "idx", "stream", "err", "iterator", "require_constants", "DOMException", "require_util", "performance", "assert", "request", "iterator", "kind", "require_symbols", "keys", "assert", "atob", "Blob", "Blob", "entry", "DOMException", "Blob", "assert", "chunk", "iterator", "error", "assert", "error", "request", "err", "assert", "session", "onConnectTimeout", "ERROR", "TYPE", "FLAGS", "LENIENT_FLAGS", "METHODS", "FINISH", "HEADER_STATE", "assert", "error", "assert", "connect", "request", "exports", "socket", "headers", "err", "dispatcher", "pool", "dispatcher", "WeakRef", "assert", "Blob", "consume", "require_util", "assert", "request", "callback", "res", "opaque", "assert", "body", "assert", "mockDispatch", "getResponseData", "error", "getResponseData", "statusCode", "data", "responseOptions", "newMockDispatch", "error", "promisify", "promisify", "URL", "opts", "assert", "err", "require_global", "assert", "DOMException", "assert", "require_request", "assert", "request", "ac", "assert", "DOMException", "error", "fetch", "request", "globalThis", "iterator", "require_symbols", "require_util", "DOMException", "error", "type", "require_symbols", "require_util", "assert", "assert", "request", "request", "cache", "require_constants", "require_util", "assert", "assert", "require_constants", "require_symbols", "require_util", "request", "error", "body", "DOMException", "HttpCodes", "Headers", "MediaTypes", "userAgent", "info", "lowercaseKeys", "error", "_a", "error", "exec", "exec", "ExitCode", "getInput", "setFailed", "error", "isDebug", "debug", "warning", "info", "import_core", "import_core", "import_core", "import_core", "import_core", "error", "coreError", "response", "import_core", "import_core", "import_core", "repo", "ref", "import_core", "getPayload", "getPayload", "error", "value", "DEFAULTS", "endpoint", "VERSION", "isObject", "isPlainObject", "isPlainObject", "fetch", "error", "withDefaults", "endpoint", "request", "route", "parameters", "request", "withDefaults", "VERSION", "request", "endpoint", "VERSION", "request", "graphql", "request", "withDefaults", "graphql", "graphql", "withDefaults", "request", "VERSION", "name", "method", "hook", "error", "hook", "VERSION", "VERSION", "hook", "userAgent", "request", "auth", "VERSION", "error", "VERSION", "paginate", "endpoint", "paginate", "import_core", "getInputs", "_inputs", "PREFIX", "error", "error"]
}
